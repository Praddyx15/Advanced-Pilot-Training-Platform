// src/frontend/components/analytics/AnalyticsDashboard.tsx
import React, { useState, useEffect } from 'react';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { Tabs, Tab } from '../ui/Tabs';
import { DataTable, Column } from '../ui/DataTable';

// Types
export interface TraineeMetrics {
  id: string;
  name: string;
  overallScore: number;
  completedModules: number;
  totalModules: number;
  lastAssessmentDate: Date;
  riskLevel: 'low' | 'medium' | 'high';
  trend: 'improving' | 'stable' | 'declining';
  programCompletion: number;
  competencyScores: {
    competencyId: string;
    competencyName: string;
    score: number;
  }[];
}

export interface ProgramMetrics {
  id: string;
  name: string;
  traineesCount: number;
  avgCompletion: number;
  avgScore: number;
  moduleCompletionRates: {
    moduleId: string;
    moduleName: string;
    completionRate: number;
  }[];
  complianceStatus: 'compliant' | 'nonCompliant' | 'partiallyCompliant';
  startDate: Date;
  endDate: Date;
  instructors: string[];
}

export interface ComplianceMetric {
  requirementId: string;
  requirementName: string;
  description: string;
  status: 'met' | 'notMet' | 'partiallyMet';
  coverage: number;
  importance: 'critical' | 'high' | 'medium' | 'low';
  regulationReference: string;
}

export interface DashboardMetrics {
  overallStats: {
    activeTrainees: number;
    completedTrainees: number;
    avgProgramScore: number;
    complianceRate: number;
  };
  trainees: TraineeMetrics[];
  programs: ProgramMetrics[];
  complianceMetrics: ComplianceMetric[];
}

interface DataPoint {
  name: string;
  value: number;
}

// Components
interface KPICardProps {
  title: string;
  value: string | number;
  description?: string;
  change?: {
    value: number;
    isPositive: boolean;
  };
  icon?: React.ReactNode;
}

const KPICard: React.FC<KPICardProps> = ({
  title,
  value,
  description,
  change,
  icon
}) => {
  return (
    <Card className="h-full">
      <div className="flex items-start">
        {icon && (
          <div className="flex-shrink-0 p-3 rounded-md bg-blue-100 text-blue-600">
            {icon}
          </div>
        )}
        
        <div className={icon ? 'ml-4' : ''}>
          <h3 className="text-sm font-medium text-gray-500">{title}</h3>
          <div className="mt-1 flex items-baseline">
            <p className="text-2xl font-semibold text-gray-900">{value}</p>
            
            {change && (
              <p className={`ml-2 flex items-baseline text-sm font-semibold ${
                change.isPositive ? 'text-green-600' : 'text-red-600'
              }`}>
                {change.isPositive ? (
                  <svg className="self-center flex-shrink-0 h-5 w-5 text-green-500" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
                    <path fillRule="evenodd" d="M5.293 9.707a1 1 0 010-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 01-1.414 1.414L11 7.414V15a1 1 0 11-2 0V7.414L6.707 9.707a1 1 0 01-1.414 0z" clipRule="evenodd" />
                  </svg>
                ) : (
                  <svg className="self-center flex-shrink-0 h-5 w-5 text-red-500" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
                    <path fillRule="evenodd" d="M14.707 10.293a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 111.414-1.414L9 12.586V5a1 1 0 012 0v7.586l2.293-2.293a1 1 0 011.414 0z" clipRule="evenodd" />
                  </svg>
                )}
                <span>{Math.abs(change.value)}%</span>
              </p>
            )}
          </div>
          
          {description && (
            <p className="mt-1 text-sm text-gray-500">{description}</p>
          )}
        </div>
      </div>
    </Card>
  );
};

interface ProgressBarProps {
  percentage: number;
  label?: string;
  size?: 'sm' | 'md' | 'lg';
  colorVariant?: 'default' | 'success' | 'warning' | 'danger';
}

const ProgressBar: React.FC<ProgressBarProps> = ({
  percentage,
  label,
  size = 'md',
  colorVariant = 'default'
}) => {
  // Determine height based on size
  const heightClass = {
    sm: 'h-1.5',
    md: 'h-2.5',
    lg: 'h-4'
  }[size];
  
  // Determine color based on variant
  const colorClass = {
    default: 'bg-blue-600',
    success: 'bg-green-500',
    warning: 'bg-yellow-500',
    danger: 'bg-red-500'
  }[colorVariant];

  // Determine color based on percentage when variant is default
  const dynamicColorClass = colorVariant === 'default' 
    ? percentage >= 80 ? 'bg-green-500' : percentage >= 60 ? 'bg-blue-500' : percentage >= 40 ? 'bg-yellow-500' : 'bg-red-500'
    : colorClass;

  return (
    <div>
      {label && (
        <div className="flex justify-between items-center mb-1">
          <span className="text-sm font-medium text-gray-700">{label}</span>
          <span className="text-sm font-medium text-gray-700">{percentage}%</span>
        </div>
      )}
      <div className={`w-full bg-gray-200 rounded-full ${heightClass}`}>
        <div
          className={`${heightClass} rounded-full ${dynamicColorClass}`}
          style={{ width: `${percentage}%` }}
        ></div>
      </div>
    </div>
  );
};

interface ComplianceStatusProps {
  status: 'compliant' | 'nonCompliant' | 'partiallyCompliant';
  details?: string;
}

const ComplianceStatus: React.FC<ComplianceStatusProps> = ({ status, details }) => {
  let statusClass = '';
  let statusText = '';
  let statusIcon = null;
  
  switch (status) {
    case 'compliant':
      statusClass = 'bg-green-100 text-green-800';
      statusText = 'Compliant';
      statusIcon = (
        <svg className="flex-shrink-0 mr-1.5 h-5 w-5 text-green-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
          <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
        </svg>
      );
      break;
    case 'nonCompliant':
      statusClass = 'bg-red-100 text-red-800';
      statusText = 'Non-Compliant';
      statusIcon = (
        <svg className="flex-shrink-0 mr-1.5 h-5 w-5 text-red-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
          <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
        </svg>
      );
      break;
    case 'partiallyCompliant':
      statusClass = 'bg-yellow-100 text-yellow-800';
      statusText = 'Partially Compliant';
      statusIcon = (
        <svg className="flex-shrink-0 mr-1.5 h-5 w-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
          <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
        </svg>
      );
      break;
  }
  
  return (
    <div className={`inline-flex items-center px-2.5 py-0.5 rounded-md text-sm font-medium ${statusClass}`}>
      {statusIcon}
      {statusText}
    </div>
  );
};

// Placeholders for charts
const BarChartPlaceholder: React.FC<{ title: string }> = ({ title }) => (
  <div className="h-64 bg-gray-100 flex flex-col items-center justify-center p-4">
    <p className="text-gray-500 mb-2">{title}</p>
    <p className="text-sm text-gray-400">Bar chart visualization would be displayed here</p>
  </div>
);

const LineChartPlaceholder: React.FC<{ title: string }> = ({ title }) => (
  <div className="h-64 bg-gray-100 flex flex-col items-center justify-center p-4">
    <p className="text-gray-500 mb-2">{title}</p>
    <p className="text-sm text-gray-400">Line chart visualization would be displayed here</p>
  </div>
);

const PieChartPlaceholder: React.FC<{ title: string }> = ({ title }) => (
  <div className="h-64 bg-gray-100 flex flex-col items-center justify-center p-4 rounded-lg">
    <p className="text-gray-500 mb-2">{title}</p>
    <p className="text-sm text-gray-400">Pie chart visualization would be displayed here</p>
  </div>
);

// Main Analytics Dashboard
interface AnalyticsDashboardProps {
  metrics: DashboardMetrics;
  onGenerateReport: (reportType: string, filters: any) => void;
  onTraineeSelect: (traineeId: string) => void;
  onProgramSelect: (programId: string) => void;
  dateRange: {
    startDate: Date;
    endDate: Date;
  };
  onDateRangeChange: (startDate: Date, endDate: Date) => void;
}

export const AnalyticsDashboard: React.FC<AnalyticsDashboardProps> = ({
  metrics,
  onGenerateReport,
  onTraineeSelect,
  onProgramSelect,
  dateRange,
  onDateRangeChange
}) => {
  const [activeTab, setActiveTab] = useState<'overview' | 'trainees' | 'programs' | 'compliance'>('overview');
  const [reportType, setReportType] = useState('summary');
  const [showReportModal, setShowReportModal] = useState(false);
  const [filters, setFilters] = useState({
    program: '',
    status: '',
    performanceThreshold: ''
  });

  // Trainee Table Columns
  const traineeColumns: Column<TraineeMetrics>[] = [
    {
      key: 'name',
      header: 'Trainee Name',
      render: (trainee) => (
        <div className="font-medium text-blue-600 hover:text-blue-900">
          {trainee.name}
        </div>
      ),
      sortable: true
    },
    {
      key: 'overallScore',
      header: 'Score',
      render: (trainee) => (
        <div className="flex items-center">
          <span className={`font-medium ${
            trainee.overallScore >= 80 ? 'text-green-600' :
            trainee.overallScore >= 60 ? 'text-blue-600' :
            trainee.overallScore >= 40 ? 'text-yellow-600' :
            'text-red-600'
          }`}>
            {trainee.overallScore}%
          </span>

          <span className="ml-2">
            {trainee.trend === 'improving' ? (
              <svg className="w-4 h-4 text-green-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                <path fillRule="evenodd" d="M5.293 9.707a1 1 0 010-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 01-1.414 1.414L11 7.414V15a1 1 0 11-2 0V7.414L6.707 9.707a1 1 0 01-1.414 0z" clipRule="evenodd" />
              </svg>
            ) : trainee.trend === 'declining' ? (
              <svg className="w-4 h-4 text-red-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                <path fillRule="evenodd" d="M14.707 10.293a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 111.414-1.414L9 12.586V5a1 1 0 012 0v7.586l2.293-2.293a1 1 0 011.414 0z" clipRule="evenodd" />
              </svg>
            ) : (
              <svg className="w-4 h-4 text-gray-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule="evenodd" />
              </svg>
            )}
          </span>
        </div>
      ),
      sortable: true
    },
    {
      key: 'riskLevel',
      header: 'Risk Level',
      render: (trainee) => (
        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
          trainee.riskLevel === 'low' ? 'bg-green-100 text-green-800' :
          trainee.riskLevel === 'medium' ? 'bg-yellow-100 text-yellow-800' :
          'bg-red-100 text-red-800'
        }`}>
          {trainee.riskLevel.charAt(0).toUpperCase() + trainee.riskLevel.slice(1)}
        </span>
      ),
      sortable: true
    },
    {
      key: 'programCompletion',
      header: 'Completion',
      render: (trainee) => (
        <div className="w-24">
          <ProgressBar
            percentage={trainee.programCompletion}
            size="sm"
          />
        </div>
      ),
      sortable: true
    },
    {
      key: 'lastAssessmentDate',
      header: 'Last Assessment',
      render: (trainee) => new Date(trainee.lastAssessmentDate).toLocaleDateString(),
      sortable: true
    }
  ];

  // Program Table Columns
  const programColumns: Column<ProgramMetrics>[] = [
    {
      key: 'name',
      header: 'Program Name',
      render: (program) => (
        <div className="font-medium text-blue-600 hover:text-blue-900">
          {program.name}
        </div>
      ),
      sortable: true
    },
    {
      key: 'traineesCount',
      header: 'Trainees',
      render: (program) => program.traineesCount,
      sortable: true
    },
    {
      key: 'avgCompletion',
      header: 'Avg. Completion',
      render: (program) => (
        <div className="w-24">
          <ProgressBar
            percentage={program.avgCompletion}
            size="sm"
          />
        </div>
      ),
      sortable: true
    },
    {
      key: 'avgScore',
      header: 'Avg. Score',
      render: (program) => (
        <span className={`font-medium ${
          program.avgScore >= 80 ? 'text-green-600' :
          program.avgScore >= 60 ? 'text-blue-600' :
          program.avgScore >= 40 ? 'text-yellow-600' :
          'text-red-600'
        }`}>
          {program.avgScore}%
        </span>
      ),
      sortable: true
    },
    {
      key: 'complianceStatus',
      header: 'Compliance',
      render: (program) => (
        <ComplianceStatus status={program.complianceStatus} />
      ),
      sortable: true
    },
    {
      key: 'dateRange',
      header: 'Date Range',
      render: (program) => (
        <span>
          {new Date(program.startDate).toLocaleDateString()} - {new Date(program.endDate).toLocaleDateString()}
        </span>
      )
    }
  ];

  // Compliance Table Columns
  const complianceColumns: Column<ComplianceMetric>[] = [
    {
      key: 'requirementName',
      header: 'Requirement',
      render: (compliance) => (
        <div>
          <div className="font-medium">{compliance.requirementName}</div>
          <div className="text-sm text-gray-500">{compliance.description}</div>
        </div>
      ),
      sortable: true
    },
    {
      key: 'status',
      header: 'Status',
      render: (compliance) => (
        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-md text-xs font-medium ${
          compliance.status === 'met' ? 'bg-green-100 text-green-800' :
          compliance.status === 'partiallyMet' ? 'bg-yellow-100 text-yellow-800' :
          'bg-red-100 text-red-800'
        }`}>
          {compliance.status === 'met' ? 'Met' :
           compliance.status === 'partiallyMet' ? 'Partially Met' :
           'Not Met'}
        </span>
      ),
      sortable: true
    },
    {
      key: 'coverage',
      header: 'Coverage',
      render: (compliance) => (
        <div className="w-24">
          <ProgressBar
            percentage={compliance.coverage}
            size="sm"
            colorVariant={
              compliance.status === 'met' ? 'success' :
              compliance.status === 'partiallyMet' ? 'warning' :
              'danger'
            }
          />
        </div>
      ),
      sortable: true
    },
    {
      key: 'importance',
      header: 'Importance',
      render: (compliance) => (
        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
          compliance.importance === 'critical' ? 'bg-red-100 text-red-800' :
          compliance.importance === 'high' ? 'bg-orange-100 text-orange-800' :
          compliance.importance === 'medium' ? 'bg-yellow-100 text-yellow-800' :
          'bg-green-100 text-green-800'
        }`}>
          {compliance.importance.charAt(0).toUpperCase() + compliance.importance.slice(1)}
        </span>
      ),
      sortable: true
    },
    {
      key: 'regulationReference',
      header: 'Regulation Ref.',
      render: (compliance) => compliance.regulationReference,
      sortable: true
    }
  ];

  const tabs: Tab[] = [
    {
      id: 'overview',
      label: 'Overview',
      content: (
        <div>
          {/* KPI Cards */}
          <div className="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4 mb-6">
            <KPICard
              title="Active Trainees"
              value={metrics.overallStats.activeTrainees}
              change={{ value: 5.2, isPositive: true }}
              icon={
                <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                </svg>
              }
            />
            
            <KPICard
              title="Completed Training"
              value={metrics.overallStats.completedTrainees}
              description="Trainees who completed their program"
              change={{ value: 8.1, isPositive: true }}
              icon={
                <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z"></path>
                </svg>
              }
            />
            
            <KPICard
              title="Average Score"
              value={`${metrics.overallStats.avgProgramScore}%`}
              change={{ value: 2.3, isPositive: true }}
              icon={
                <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
              }
            />
            
            <KPICard
              title="Compliance Rate"
              value={`${metrics.overallStats.complianceRate}%`}
              change={{ value: 1.2, isPositive: false }}
              icon={
                <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                </svg>
              }
            />
          </div>
          
          {/* Charts */}
          <div className="grid grid-cols-1 gap-5 lg:grid-cols-2 mb-6">
            <Card>
              <h3 className="text-lg font-medium mb-4">Program Completion Rates</h3>
              <BarChartPlaceholder title="Program vs. Completion %" />
            </Card>
            
            <Card>
              <h3 className="text-lg font-medium mb-4">Score Trends (Last 6 Months)</h3>
              <LineChartPlaceholder title="Month vs. Average Score" />
            </Card>
          </div>
          
          <div className="grid grid-cols-1 gap-5 lg:grid-cols-3 mb-6">
            <Card>
              <h3 className="text-lg font-medium mb-4">Compliance Status</h3>
              <PieChartPlaceholder title="Compliance Distribution" />
            </Card>
            
            <Card>
              <h3 className="text-lg font-medium mb-4">Risk Assessment</h3>
              <PieChartPlaceholder title="Trainee Risk Levels" />
            </Card>
            
            <Card>
              <h3 className="text-lg font-medium mb-4">Top Competencies</h3>
              <BarChartPlaceholder title="Competency vs. Average Score" />
            </Card>
          </div>
          
          {/* Recent Activity (Top 5 Trainees) */}
          <Card>
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-medium">Recent Trainee Activity</h3>
              <Button
                variant="outline"
                size="small"
                onClick={() => setActiveTab('trainees')}
              >
                View All
              </Button>
            </div>
            
            <DataTable
              columns={traineeColumns}
              data={metrics.trainees.slice(0, 5)}
              keyExtractor={(trainee) => trainee.id}
              onRowClick={(trainee) => onTraineeSelect(trainee.id)}
            />
          </Card>
        </div>
      )
    },
    {
      id: 'trainees',
      label: 'Trainees',
      content: (
        <div>
          <Card>
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6">
              <h3 className="text-lg font-medium mb-2 sm:mb-0">Trainee Performance</h3>
              
              <div className="flex flex-col sm:flex-row gap-3">
                <select
                  className="block w-full sm:w-auto pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                  value={filters.program}
                  onChange={(e) => setFilters({ ...filters, program: e.target.value })}
                >
                  <option value="">All Programs</option>
                  {metrics.programs.map(program => (
                    <option key={program.id} value={program.id}>
                      {program.name}
                    </option>
                  ))}
                </select>
                
                <select
                  className="block w-full sm:w-auto pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                  value={filters.status}
                  onChange={(e) => setFilters({ ...filters, status: e.target.value })}
                >
                  <option value="">All Statuses</option>
                  <option value="active">Active</option>
                  <option value="completed">Completed</option>
                  <option value="onHold">On Hold</option>
                </select>
                
                <Button
                  variant="outline"
                  size="small"
                  onClick={() => {
                    setReportType('traineePerformance');
                    setShowReportModal(true);
                  }}
                >
                  Export Report
                </Button>
              </div>
            </div>
            
            <DataTable
              columns={traineeColumns}
              data={metrics.trainees}
              keyExtractor={(trainee) => trainee.id}
              onRowClick={(trainee) => onTraineeSelect(trainee.id)}
              pagination={{
                pageSize: 10,
                totalItems: metrics.trainees.length,
                currentPage: 1,
                onPageChange: () => {}
              }}
            />
          </Card>
        </div>
      )
    },
    {
      id: 'programs',
      label: 'Programs',
      content: (
        <div>
          <Card>
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6">
              <h3 className="text-lg font-medium mb-2 sm:mb-0">Training Programs</h3>
              
              <div className="flex flex-col sm:flex-row gap-3">
                <Button
                  variant="outline"
                  size="small"
                  onClick={() => {
                    setReportType('programEffectiveness');
                    setShowReportModal(true);
                  }}
                >
                  Export Report
                </Button>
              </div>
            </div>
            
            <DataTable
              columns={programColumns}
              data={metrics.programs}
              keyExtractor={(program) => program.id}
              onRowClick={(program) => onProgramSelect(program.id)}
              pagination={{
                pageSize: 10,
                totalItems: metrics.programs.length,
                currentPage: 1,
                onPageChange: () => {}
              }}
            />
          </Card>
          
          {/* Program Effectiveness Charts */}
          <div className="grid grid-cols-1 gap-5 lg:grid-cols-2 mt-6">
            <Card>
              <h3 className="text-lg font-medium mb-4">Module Completion Rates</h3>
              <BarChartPlaceholder title="Module vs. Completion %" />
            </Card>
            
            <Card>
              <h3 className="text-lg font-medium mb-4">Program Success Metrics</h3>
              <BarChartPlaceholder title="Program vs. Success Metrics" />
            </Card>
          </div>
        </div>
      )
    },
    {
      id: 'compliance',
      label: 'Compliance',
      content: (
        <div>
          <Card>
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6">
              <h3 className="text-lg font-medium mb-2 sm:mb-0">Regulatory Compliance</h3>
              
              <div className="flex flex-col sm:flex-row gap-3">
                <select
                  className="block w-full sm:w-auto pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                  value={filters.program}
                  onChange={(e) => setFilters({ ...filters, program: e.target.value })}
                >
                  <option value="">All Programs</option>
                  {metrics.programs.map(program => (
                    <option key={program.id} value={program.id}>
                      {program.name}
                    </option>
                  ))}
                </select>
                
                <Button
                  variant="outline"
                  size="small"
                  onClick={() => {
                    setReportType('complianceStatus');
                    setShowReportModal(true);
                  }}
                >
                  Export Report
                </Button>
              </div>
            </div>
            
            <DataTable
              columns={complianceColumns}
              data={metrics.complianceMetrics}
              keyExtractor={(compliance) => compliance.requirementId}
              pagination={{
                pageSize: 10,
                totalItems: metrics.complianceMetrics.length,
                currentPage: 1,
                onPageChange: () => {}
              }}
            />
          </Card>
          
          {/* Compliance Charts */}
          <div className="grid grid-cols-1 gap-5 lg:grid-cols-2 mt-6">
            <Card>
              <h3 className="text-lg font-medium mb-4">Compliance by Importance</h3>
              <PieChartPlaceholder title="Compliance Status by Importance Level" />
            </Card>
            
            <Card>
              <h3 className="text-lg font-medium mb-4">Compliance Trend</h3>
              <LineChartPlaceholder title="Compliance Rate Over Time" />
            </Card>
          </div>
        </div>
      )
    }
  ];

  return (
    <div className="analytics-dashboard">
      {/* Date Range Selector */}
      <Card className="mb-6">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
          <h2 className="text-xl font-bold mb-2 sm:mb-0">Training Analytics Dashboard</h2>
          
          <div className="flex flex-col sm:flex-row gap-3">
            <div className="flex items-center">
              <label htmlFor="start-date" className="block text-sm font-medium text-gray-700 mr-2">
                From:
              </label>
              <input
                type="date"
                id="start-date"
                className="block w-full sm:w-auto pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={dateRange.startDate.toISOString().split('T')[0]}
                onChange={(e) => onDateRangeChange(new Date(e.target.value), dateRange.endDate)}
              />
            </div>
            
            <div className="flex items-center">
              <label htmlFor="end-date" className="block text-sm font-medium text-gray-700 mr-2">
                To:
              </label>
              <input
                type="date"
                id="end-date"
                className="block w-full sm:w-auto pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={dateRange.endDate.toISOString().split('T')[0]}
                onChange={(e) => onDateRangeChange(dateRange.startDate, new Date(e.target.value))}
              />
            </div>
            
            <Button
              variant="primary"
              onClick={() => {
                setReportType('summary');
                setShowReportModal(true);
              }}
            >
              Generate Report
            </Button>
          </div>
        </div>
      </Card>
      
      {/* Main content tabs */}
      <Tabs
        tabs={tabs}
        defaultTabId="overview"
        onChange={(tabId) => setActiveTab(tabId as any)}
      />
      
      {/* Report generation modal (placeholder) */}
      {showReportModal && (
        <div className="fixed z-10 inset-0 overflow-y-auto">
          <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 transition-opacity" aria-hidden="true">
              <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
            </div>
            
            <span className="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
            
            <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
              <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div className="sm:flex sm:items-start">
                  <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                    <h3 className="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                      Generate Report
                    </h3>
                    <div className="mt-2">
                      <p className="text-sm text-gray-500">
                        Select the type of report you want to generate and any filters to apply.
                      </p>
                      
                      <div className="mt-4">
                        <label htmlFor="report-type" className="block text-sm font-medium text-gray-700 mb-1">
                          Report Type
                        </label>
                        <select
                          id="report-type"
                          className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                          value={reportType}
                          onChange={(e) => setReportType(e.target.value)}
                        >
                          <option value="summary">Summary Report</option>
                          <option value="traineePerformance">Trainee Performance Report</option>
                          <option value="programEffectiveness">Program Effectiveness Report</option>
                          <option value="complianceStatus">Compliance Status Report</option>
                        </select>
                      </div>
                      
                      <div className="mt-4">
                        <label htmlFor="report-program" className="block text-sm font-medium text-gray-700 mb-1">
                          Program
                        </label>
                        <select
                          id="report-program"
                          className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                          value={filters.program}
                          onChange={(e) => setFilters({ ...filters, program: e.target.value })}
                        >
                          <option value="">All Programs</option>
                          {metrics.programs.map(program => (
                            <option key={program.id} value={program.id}>
                              {program.name}
                            </option>
                          ))}
                        </select>
                      </div>
                      
                      <div className="mt-4">
                        <label htmlFor="performance-threshold" className="block text-sm font-medium text-gray-700 mb-1">
                          Performance Threshold
                        </label>
                        <select
                          id="performance-threshold"
                          className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                          value={filters.performanceThreshold}
                          onChange={(e) => setFilters({ ...filters, performanceThreshold: e.target.value })}
                        >
                          <option value="">No Threshold</option>
                          <option value="below40">Below 40%</option>
                          <option value="below60">Below 60%</option>
                          <option value="above80">Above 80%</option>
                        </select>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button
                  type="button"
                  className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm"
                  onClick={() => {
                    onGenerateReport(reportType, filters);
                    setShowReportModal(false);
                  }}
                >
                  Generate
                </button>
                <button
                  type="button"
                  className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
                  onClick={() => setShowReportModal(false)}
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};
// components/analytics/PerformanceMetricsChart.tsx
import React, { useState } from 'react';
import { 
  Box, 
  Paper, 
  Typography, 
  ToggleButtonGroup, 
  ToggleButton,
  CircularProgress,
  Tooltip 
} from '@mui/material';
import {
  LineChart,
  Line,
  AreaChart,
  Area,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  ResponsiveContainer,
  Legend,
  Tooltip as RechartsTooltip,
} from 'recharts';
import { Info } from '@mui/icons-material';

interface Metric {
  id: string;
  name: string;
  description: string;
  color: string;
  domain?: [number, number];
  format?: (value: number) => string;
}

interface PerformanceData {
  date: string;
  [key: string]: number | string;
}

interface PerformanceMetricsChartProps {
  data: PerformanceData[];
  metrics: Metric[];
  title: string;
  description?: string;
  isLoading?: boolean;
  error?: string;
}

type ChartType = 'line' | 'area' | 'bar';

export const PerformanceMetricsChart: React.FC<PerformanceMetricsChartProps> = ({
  data,
  metrics,
  title,
  description,
  isLoading = false,
  error,
}) => {
  const [chartType, setChartType] = useState<ChartType>('line');
  const [selectedMetrics, setSelectedMetrics] = useState<string[]>(
    metrics.slice(0, 3).map(m => m.id)
  );

  const handleChartTypeChange = (_: React.MouseEvent<HTMLElement>, newType: ChartType | null) => {
    if (newType !== null) {
      setChartType(newType);
    }
  };

  const handleMetricToggle = (metricId: string) => {
    setSelectedMetrics(prev => 
      prev.includes(metricId)
        ? prev.filter(id => id !== metricId)
        : [...prev, metricId]
    );
  };

  const formatYAxis = (value: number) => {
    // Determine if we need special formatting based on selected metrics
    const selectedMetricsDetails = metrics.filter(m => selectedMetrics.includes(m.id));
    
    // If only one metric is selected and it has a custom formatter, use it
    if (selectedMetricsDetails.length === 1 && selectedMetricsDetails[0].format) {
      return selectedMetricsDetails[0].format!(value);
    }
    
    // Default formatting
    return value.toFixed(1);
  };

  const renderChart = () => {
    if (isLoading) {
      return (
        <Box className="flex justify-center items-center" sx={{ height: 300 }}>
          <CircularProgress />
        </Box>
      );
    }

    if (error) {
      return (
        <Box className="flex justify-center items-center" sx={{ height: 300 }}>
          <Typography color="error">{error}</Typography>
        </Box>
      );
    }

    const filteredMetrics = metrics.filter(m => selectedMetrics.includes(m.id));

    const ChartComponent = 
      chartType === 'line' ? LineChart : 
      chartType === 'area' ? AreaChart : 
      BarChart;

    const DataComponent = 
      chartType === 'line' ? Line : 
      chartType === 'area' ? Area : 
      Bar;

    return (
      <ResponsiveContainer width="100%" height={300}>
        <ChartComponent data={data} margin={{ top: 10, right: 30, left: 0, bottom: 5 }}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="date" />
          <YAxis tickFormatter={formatYAxis} />
          <RechartsTooltip
            formatter={(value: number, name: string) => {
              const metric = metrics.find(m => m.id === name);
              if (metric?.format) {
                return [metric.format(value), metric.name];
              }
              return [value.toFixed(2), name];
            }}
          />
          <Legend />
          {filteredMetrics.map((metric) => (
            <DataComponent
              key={metric.id}
              type="monotone"
              dataKey={metric.id}
              name={metric.name}
              stroke={metric.color}
              fill={metric.color}
              fillOpacity={chartType === 'area' ? 0.3 : 1}
              activeDot={{ r: 8 }}
            />
          ))}
        </ChartComponent>
      </ResponsiveContainer>
    );
  };

  return (
    <Paper elevation={2} className="overflow-hidden">
      <Box className="p-4 bg-gray-50 border-b flex justify-between items-center">
        <Box className="flex items-center">
          <Typography variant="h6">{title}</Typography>
          {description && (
            <Tooltip title={description}>
              <Info fontSize="small" className="ml-2 text-gray-500" />
            </Tooltip>
          )}
        </Box>
        <ToggleButtonGroup
          value={chartType}
          exclusive
          onChange={handleChartTypeChange}
          size="small"
        >
          <ToggleButton value="line">Line</ToggleButton>
          <ToggleButton value="area">Area</ToggleButton>
          <ToggleButton value="bar">Bar</ToggleButton>
        </ToggleButtonGroup>
      </Box>
      
      <Box className="p-4">
        <Box className="mb-4 flex flex-wrap gap-2">
          {metrics.map((metric) => (
            <Tooltip key={metric.id} title={metric.description}>
              <Box
                component="span"
                className={`
                  px-3 py-1 rounded-full cursor-pointer border transition-colors
                  ${selectedMetrics.includes(metric.id) 
                    ? 'bg-blue-100 border-blue-300 text-blue-800' 
                    : 'bg-gray-100 border-gray-300 text-gray-600 hover:bg-gray-200'}
                `}
                onClick={() => handleMetricToggle(metric.id)}
              >
                <Box
                  component="span"
                  className="inline-block w-3 h-3 rounded-full mr-2"
                  sx={{ backgroundColor: metric.color }}
                />
                {metric.name}
              </Box>
            </Tooltip>
          ))}
        </Box>
        
        {renderChart()}
      </Box>
    </Paper>
  );
};

// components/analytics/SkillDecayChart.tsx
import React from 'react';
import { 
  Box, 
  Paper, 
  Typography, 
  Divider,
  FormControlLabel,
  Switch,
  Tooltip,
  CircularProgress
} from '@mui/material';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  ResponsiveContainer,
  Legend,
  Tooltip as RechartsTooltip,
  ReferenceLine,
  Area,
  ComposedChart
} from 'recharts';
import { Info, Warning } from '@mui/icons-material';

interface Skill {
  id: string;
  name: string;
  color: string;
  category: string;
  baseline: number;
  threshold: number;
}

interface SkillDecayData {
  date: string;
  actual: boolean;
  [key: string]: number | string | boolean;
}

interface SkillDecayChartProps {
  data: SkillDecayData[];
  skills: Skill[];
  isLoading?: boolean;
  error?: string;
}

export const SkillDecayChart: React.FC<SkillDecayChartProps> = ({
  data,
  skills,
  isLoading = false,
  error,
}) => {
  const [showPrediction, setShowPrediction] = React.useState(true);
  const [showThresholds, setShowThresholds] = React.useState(true);
  
  // Split data into actual and predicted
  const actualData = data.filter(d => d.actual);
  const allData = showPrediction ? data : actualData;
  
  const today = new Date().toISOString().split('T')[0];
  
  const renderChart = () => {
    if (isLoading) {
      return (
        <Box className="flex justify-center items-center" sx={{ height: 300 }}>
          <CircularProgress />
        </Box>
      );
    }

    if (error) {
      return (
        <Box className="flex justify-center items-center" sx={{ height: 300 }}>
          <Typography color="error">{error}</Typography>
        </Box>
      );
    }

    return (
      <ResponsiveContainer width="100%" height={350}>
        <ComposedChart data={allData} margin={{ top: 10, right: 30, left: 0, bottom: 5 }}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="date" />
          <YAxis domain={[0, 100]} tickFormatter={(value) => `${value}%`} />
          <RechartsTooltip
            formatter={(value: number, name: string) => {
              const skill = skills.find(s => s.id === name);
              return [
                `${value.toFixed(1)}%`, 
                skill?.name || name
              ];
            }}
            labelFormatter={(label) => {
              const dateObj = new Date(label);
              return dateObj.toLocaleDateString(undefined, {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
              });
            }}
          />
          <Legend />
          
          {/* Reference line for today */}
          <ReferenceLine 
            x={today} 
            stroke="#666" 
            strokeDasharray="3 3" 
            label={{ value: 'Today', position: 'insideTopRight' }} 
          />
          
          {skills.map((skill) => (
            <React.Fragment key={skill.id}>
              <Line
                type="monotone"
                dataKey={skill.id}
                name={skill.name}
                stroke={skill.color}
                strokeWidth={2}
                dot={{ stroke: skill.color, strokeWidth: 2, r: 4 }}
                activeDot={{ r: 8 }}
                connectNulls
              />
              
              {/* Prediction area */}
              {showPrediction && (
                <Area
                  type="monotone"
                  dataKey={`${skill.id}_range`}
                  stroke="none"
                  fill={skill.color}
                  fillOpacity={0.1}
                />
              )}
              
              {/* Threshold line */}
              {showThresholds && (
                <ReferenceLine 
                  y={skill.threshold} 
                  stroke={skill.color} 
                  strokeDasharray="3 3" 
                  strokeOpacity={0.5}
                  ifOverflow="extendDomain"
                />
              )}
            </React.Fragment>
          ))}
        </ComposedChart>
      </ResponsiveContainer>
    );
  };
  
  // Find skills that are predicted to fall below threshold
  const atRiskSkills = skills.filter(skill => {
    const futureDataPoints = data.filter(d => !d.actual);
    return futureDataPoints.some(point => 
      (point[skill.id] as number) < skill.threshold
    );
  });

  return (
    <Paper elevation={2} className="overflow-hidden">
      <Box className="p-4 bg-gray-50 border-b">
        <Box className="flex items-center">
          <Typography variant="h6">Skill Decay Prediction</Typography>
          <Tooltip title="Predicts future skill proficiency based on recency, frequency, and assessment scores">
            <Info fontSize="small" className="ml-2 text-gray-500" />
          </Tooltip>
        </Box>
      </Box>
      
      <Box className="p-4">
        <Box className="mb-4 flex flex-wrap justify-between items-center">
          <Box className="flex items-center gap-4">
            <FormControlLabel
              control={
                <Switch
                  checked={showPrediction}
                  onChange={(e) => setShowPrediction(e.target.checked)}
                  color="primary"
                />
              }
              label="Show Prediction"
            />
            <FormControlLabel
              control={
                <Switch
                  checked={showThresholds}
                  onChange={(e) => setShowThresholds(e.target.checked)}
                  color="primary"
                />
              }
              label="Show Thresholds"
            />
          </Box>
          
          <Box>
            <Typography variant="caption" color="textSecondary">
              Solid lines show measured data, shaded areas show prediction range
            </Typography>
          </Box>
        </Box>
        
        {renderChart()}
        
        {atRiskSkills.length > 0 && (
          <Box className="mt-4 p-3 bg-amber-50 border border-amber-200 rounded flex items-start">
            <Warning className="text-amber-500 mr-2 mt-0.5" />
            <Box>
              <Typography variant="subtitle2" className="text-amber-800">
                Skill Decay Warning
              </Typography>
              <Typography variant="body2" className="text-amber-700">
                The following skills are predicted to fall below required thresholds in the next 30 days:
                {atRiskSkills.map((skill, index) => (
                  <span key={skill.id} className="font-medium">
                    {index > 0 ? ', ' : ' '}
                    {skill.name}
                  </span>
                ))}
              </Typography>
            </Box>
          </Box>
        )}
      </Box>
    </Paper>
  );
};

// components/analytics/CognitiveWorkloadGauge.tsx
import React from 'react';
import { 
  Box, 
  Paper, 
  Typography, 
  Divider,
  Grid,
  Tooltip
} from '@mui/material';
import { 
  PieChart, 
  Pie, 
  ResponsiveContainer, 
  Cell,
  Legend
} from 'recharts';
import { Info } from '@mui/icons-material';

interface WorkloadDimension {
  name: string;
  value: number;
  color: string;
  description: string;
}

interface CognitiveWorkloadGaugeProps {
  title: string;
  dimensions: WorkloadDimension[];
  overallWorkload: number; // 0-100
  timestamp: string;
}

export const CognitiveWorkloadGauge: React.FC<CognitiveWorkloadGaugeProps> = ({
  title,
  dimensions,
  overallWorkload,
  timestamp,
}) => {
  // NASA TLX dimensions typically include: Mental Demand, Physical Demand, Temporal Demand, 
  // Performance, Effort, and Frustration

  // Helper function to determine color of overall workload
  const getOverallWorkloadColor = (value: number) => {
    if (value < 33) return '#22c55e'; // Green
    if (value < 66) return '#f59e0b'; // Amber
    return '#ef4444';                 // Red
  };
  
  const formattedTime = new Date(timestamp).toLocaleTimeString();
  
  const overallColor = getOverallWorkloadColor(overallWorkload);
  
  // Data for the gauge chart
  const gaugeData = [
    { name: 'Value', value: overallWorkload },
    { name: 'Empty', value: 100 - overallWorkload }
  ];
  
  return (
    <Paper elevation={2} className="overflow-hidden">
      <Box className="p-4 bg-gray-50 border-b">
        <Box className="flex items-center">
          <Typography variant="h6">{title}</Typography>
          <Tooltip title="Based on NASA Task Load Index (TLX) methodology">
            <Info fontSize="small" className="ml-2 text-gray-500" />
          </Tooltip>
        </Box>
        <Typography variant="caption" color="textSecondary">
          Last updated: {formattedTime}
        </Typography>
      </Box>
      
      <Box className="p-4">
        <Grid container spacing={3}>
          <Grid item xs={12} md={5}>
            <Box className="flex flex-col items-center">
              <Typography variant="subtitle2" className="mb-2">
                Overall Workload
              </Typography>
              
              <Box className="relative" sx={{ height: 200, width: 200 }}>
                <ResponsiveContainer width="100%" height="100%">
                  <PieChart>
                    <Pie
                      data={gaugeData}
                      cx="50%"
                      cy="50%"
                      startAngle={180}
                      endAngle={0}
                      innerRadius="60%"
                      outerRadius="80%"
                      dataKey="value"
                      cornerRadius={6}
                      paddingAngle={2}
                    >
                      <Cell key="gauge-fill" fill={overallColor} />
                      <Cell key="gauge-empty" fill="#e5e7eb" />
                    </Pie>
                  </PieChart>
                </ResponsiveContainer>
                
                <Box 
                  className="absolute top-1/2 left-1/2 transform -translate-x-1/2 text-center"
                  sx={{ marginTop: '-20px' }}
                >
                  <Typography 
                    variant="h4" 
                    className="font-bold"
                    style={{ color: overallColor }}
                  >
                    {overallWorkload}
                  </Typography>
                  <Typography variant="caption" color="textSecondary">
                    OUT OF 100
                  </Typography>
                </Box>
              </Box>
              
              <Box className="mt-2 text-center">
                <Typography 
                  variant="subtitle1" 
                  className="font-medium"
                  style={{ color: overallColor }}
                >
                  {overallWorkload < 33 ? 'Low' : overallWorkload < 66 ? 'Moderate' : 'High'} Workload
                </Typography>
              </Box>
            </Box>
          </Grid>
          
          <Grid item xs={12} md={7}>
            <Typography variant="subtitle2" className="mb-3">
              Workload Dimensions
            </Typography>
            
            <Box>
              {dimensions.map((dimension) => (
                <Box key={dimension.name} className="mb-3">
                  <Box className="flex justify-between items-center mb-1">
                    <Tooltip title={dimension.description}>
                      <Typography variant="body2">{dimension.name}</Typography>
                    </Tooltip>
                    <Typography variant="body2" fontWeight="medium">
                      {dimension.value}
                    </Typography>
                  </Box>
                  <Box className="w-full h-2 bg-gray-200 rounded-full">
                    <Box 
                      className="h-2 rounded-full" 
                      style={{ 
                        width: `${dimension.value}%`,
                        backgroundColor: dimension.color
                      }}
                    />
                  </Box>
                </Box>
              ))}
            </Box>
          </Grid>
        </Grid>
      </Box>
    </Paper>
  );
};

// components/analytics/ProcedureComplianceHeatmap.tsx
import React from 'react';
import { 
  Box, 
  Paper, 
  Typography, 
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Tooltip
} from '@mui/material';
import { Info } from '@mui/icons-material';

interface ProcedureStep {
  id: string;
  name: string;
  complianceRate: number; // 0-100
  issues?: string[];
}

interface Procedure {
  id: string;
  name: string;
  steps: ProcedureStep[];
}

interface ProcedureComplianceHeatmapProps {
  procedures: Procedure[];
  title: string;
}

export const ProcedureComplianceHeatmap: React.FC<ProcedureComplianceHeatmapProps> = ({
  procedures,
  title,
}) => {
  const [selectedProcedure, setSelectedProcedure] = React.useState<string>(
    procedures[0]?.id || ''
  );

  const handleProcedureChange = (event: React.ChangeEvent<{ value: unknown }>) => {
    setSelectedProcedure(event.target.value as string);
  };

  const currentProcedure = procedures.find(p => p.id === selectedProcedure);

  // Helper function to get color based on compliance rate
  const getComplianceColor = (rate: number) => {
    if (rate >= 90) return 'bg-green-100 border-green-300 text-green-800';
    if (rate >= 75) return 'bg-blue-100 border-blue-300 text-blue-800';
    if (rate >= 50) return 'bg-amber-100 border-amber-300 text-amber-800';
    return 'bg-red-100 border-red-300 text-red-800';
  };

  return (
    <Paper elevation={2} className="overflow-hidden">
      <Box className="p-4 bg-gray-50 border-b">
        <Box className="flex items-center">
          <Typography variant="h6">{title}</Typography>
          <Tooltip title="Shows adherence to Standard Operating Procedures (SOPs)">
            <Info fontSize="small" className="ml-2 text-gray-500" />
          </Tooltip>
        </Box>
      </Box>
      
      <Box className="p-4">
        <FormControl fullWidth variant="outlined" size="small" className="mb-4">
          <InputLabel>Select Procedure</InputLabel>
          <Select
            value={selectedProcedure}
            onChange={handleProcedureChange}
            label="Select Procedure"
          >
            {procedures.map((procedure) => (
              <MenuItem key={procedure.id} value={procedure.id}>
                {procedure.name}
              </MenuItem>
            ))}
          </Select>
        </FormControl>
        
        {currentProcedure && (
          <Box>
            <Typography variant="subtitle2" className="mb-2">
              Compliance Heatmap for {currentProcedure.name}
            </Typography>
            
            <Box className="space-y-2">
              {currentProcedure.steps.map((step) => (
                <Tooltip
                  key={step.id}
                  title={
                    step.issues && step.issues.length > 0 
                      ? <Box>
                          <Typography variant="body2" className="font-medium mb-1">Issues:</Typography>
                          <ul className="pl-4 list-disc">
                            {step.issues.map((issue, i) => (
                              <li key={i}>{issue}</li>
                            ))}
                          </ul>
                        </Box>
                      : "No issues detected"
                  }
                >
                  <Box 
                    className={`
                      p-3 rounded border 
                      ${getComplianceColor(step.complianceRate)}
                      cursor-help
                    `}
                  >
                    <Box className="flex justify-between items-center">
                      <Typography variant="body2" className="font-medium">
                        {step.name}
                      </Typography>
                      <Typography variant="body2">
                        {Math.round(step.complianceRate)}%
                      </Typography>
                    </Box>
                    
                    <Box className="w-full h-1.5 bg-gray-200 rounded-full mt-2">
                      <Box 
                        className="h-1.5 rounded-full" 
                        style={{ 
                          width: `${step.complianceRate}%`,
                          backgroundColor: 
                            step.complianceRate >= 90 ? '#22c55e' : 
                            step.complianceRate >= 75 ? '#3b82f6' : 
                            step.complianceRate >= 50 ? '#f59e0b' : 
                            '#ef4444'
                        }}
                      />
                    </Box>
                  </Box>
                </Tooltip>
              ))}
            </Box>
          </Box>
        )}
      </Box>
    </Paper>
  );
};

// components/analytics/TrainingEffectivenessCard.tsx
import React from 'react';
import { 
  Box, 
  Paper, 
  Typography, 
  Divider, 
  Tooltip,
  Avatar,
  Grid,
  Button,
  Chip
} from '@mui/material';
import {
  TrendingUp,
  TrendingDown,
  TrendingFlat,
  Info,
  Person,
  CheckCircle,
  Error as ErrorIcon,
  ArrowForward
} from '@mui/icons-material';

interface EffectivenessMetric {
  name: string;
  value: number;
  change: number;
  target: number;
}

interface RecentIntervention {
  id: string;
  date: string;
  type: string;
  trainee: {
    id: string;
    name: string;
    avatar?: string;
  };
  description: string;
  status: 'completed' | 'pending' | 'in-progress';
}

interface TrainingEffectivenessCardProps {
  title: string;
  metrics: EffectivenessMetric[];
  recentInterventions: RecentIntervention[];
  onViewAllInterventions: () => void;
}

export const TrainingEffectivenessCard: React.FC<TrainingEffectivenessCardProps> = ({
  title,
  metrics,
  recentInterventions,
  onViewAllInterventions
}) => {
  // Helper function to format dates
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString(undefined, {
      month: 'short',
      day: 'numeric'
    });
  };

  // Helper function to get trend icon
  const getTrendIcon = (change: number) => {
    if (change > 0) return <TrendingUp className="text-green-500" />;
    if (change < 0) return <TrendingDown className="text-red-500" />;
    return <TrendingFlat className="text-gray-500" />;
  };

  // Helper function to get metric status
  const getMetricStatus = (value: number, target: number) => {
    const percentage = (value / target) * 100;
    if (percentage >= 100) return 'success';
    if (percentage >= 80) return 'warning';
    return 'error';
  };

  // Helper function to get status chip for interventions
  const getStatusChip = (status: string) => {
    switch(status) {
      case 'completed':
        return <Chip size="small" label="Completed" color="success" />;
      case 'in-progress':
        return <Chip size="small" label="In Progress" color="primary" />;
      default:
        return <Chip size="small" label="Pending" color="default" />;
    }
  };

  return (
    <Paper elevation={2} className="overflow-hidden">
      <Box className="p-4 bg-gray-50 border-b">
        <Box className="flex items-center">
          <Typography variant="h6">{title}</Typography>
          <Tooltip title="Metrics showing the effectiveness of training interventions">
            <Info fontSize="small" className="ml-2 text-gray-500" />
          </Tooltip>
        </Box>
      </Box>
      
      <Box className="p-4">
        <Grid container spacing={3}>
          <Grid item xs={12} md={4}>
            <Typography variant="subtitle2" className="mb-3">
              Key Metrics
            </Typography>
            
            <Box className="space-y-4">
              {metrics.map((metric) => {
                const status = getMetricStatus(metric.value, metric.target);
                
                return (
                  <Box key={metric.name} className="p-3 bg-gray-50 rounded-lg">
                    <Box className="flex justify-between items-center mb-1">
                      <Typography variant="body2" color="textSecondary">
                        {metric.name}
                      </Typography>
                      <Box className="flex items-center">
                        {getTrendIcon(metric.change)}
                        <Typography 
                          variant="caption" 
                          className={`ml-1 ${
                            metric.change > 0 ? 'text-green-600' : 
                            metric.change < 0 ? 'text-red-600' : 
                            'text-gray-600'
                          }`}
                        >
                          {metric.change > 0 ? '+' : ''}{metric.change}%
                        </Typography>
                      </Box>
                    </Box>
                    
                    <Box className="flex justify-between items-center">
                      <Typography variant="h6" className="font-medium">
                        {metric.value.toFixed(1)}%
                      </Typography>
                      <Box className="flex items-center">
                        <Typography variant="caption" color="textSecondary" className="mr-1">
                          Target: {metric.target}%
                        </Typography>
                        {status === 'success' && (
                          <CheckCircle className="text-green-500" fontSize="small" />
                        )}
                        {status === 'warning' && (
                          <ErrorIcon className="text-amber-500" fontSize="small" />
                        )}
                        {status === 'error' && (
                          <ErrorIcon className="text-red-500" fontSize="small" />
                        )}
                      </Box>
                    </Box>
                    
                    <Box className="w-full h-1.5 bg-gray-200 rounded-full mt-2">
                      <Box 
                        className={`h-1.5 rounded-full ${
                          status === 'success' ? 'bg-green-500' : 
                          status === 'warning' ? 'bg-amber-500' : 
                          'bg-red-500'
                        }`}
                        style={{ width: `${Math.min((metric.value / metric.target) * 100, 100)}%` }}
                      />
                    </Box>
                  </Box>
                );
              })}
            </Box>
          </Grid>
          
          <Grid item xs={12} md={8}>
            <Box className="flex justify-between items-center mb-3">
              <Typography variant="subtitle2">
                Recent Interventions
              </Typography>
              <Button 
                size="small" 
                endIcon={<ArrowForward />}
                onClick={onViewAllInterventions}
              >
                View All
              </Button>
            </Box>
            
            <Box className="space-y-3">
              {recentInterventions.map((intervention) => (
                <Paper key={intervention.id} variant="outlined" className="p-3">
                  <Box className="flex justify-between items-start">
                    <Box className="flex">
                      <Avatar 
                        src={intervention.trainee.avatar} 
                        className="mr-3"
                      >
                        {!intervention.trainee.avatar && (
                          <Person />
                        )}
                      </Avatar>
                      
                      <Box>
                        <Typography variant="subtitle2">
                          {intervention.trainee.name}
                        </Typography>
                        <Box className="flex items-center mt-1">
                          <Chip 
                            size="small" 
                            label={intervention.type} 
                            variant="outlined"
                            className="mr-2"
                          />
                          <Typography variant="caption" color="textSecondary">
                            {formatDate(intervention.date)}
                          </Typography>
                        </Box>
                        <Typography variant="body2" className="mt-2">
                          {intervention.description}
                        </Typography>
                      </Box>
                    </Box>
                    
                    <Box>
                      {getStatusChip(intervention.status)}
                    </Box>
                  </Box>
                </Paper>
              ))}
            </Box>
          </Grid>
        </Grid>
      </Box>
    </Paper>
  );
};

// app/analytics/page.tsx
'use client';

import React, { useState } from 'react';
import { 
  Box, 
  Container, 
  Typography, 
  Grid, 
  Paper,
  Tabs,
  Tab,
  Button,
  Menu,
  MenuItem,
  Divider
} from '@mui/material';
import {
  DateRange,
  FilterList,
  Download,
  Assessment
} from '@mui/icons-material';
import { PerformanceMetricsChart } from '@/components/analytics/PerformanceMetricsChart';
import { SkillDecayChart } from '@/components/analytics/SkillDecayChart';
import { CognitiveWorkloadGauge } from '@/components/analytics/CognitiveWorkloadGauge';
import { ProcedureComplianceHeatmap } from '@/components/analytics/ProcedureComplianceHeatmap';
import { TrainingEffectivenessCard } from '@/components/analytics/TrainingEffectivenessCard';

// Mock data
const performanceData = [
  { date: '2023-01', 'reaction-time': 2.3, 'cognitive-load': 65, 'procedure-adherence': 87 },
  { date: '2023-02', 'reaction-time': 2.1, 'cognitive-load': 68, 'procedure-adherence': 85 },
  { date: '2023-03', 'reaction-time': 1.9, 'cognitive-load': 72, 'procedure-adherence': 82 },
  { date: '2023-04', 'reaction-time': 1.7, 'cognitive-load': 75, 'procedure-adherence': 80 },
  { date: '2023-05', 'reaction-time': 1.6, 'cognitive-load': 71, 'procedure-adherence': 83 },
  { date: '2023-06', 'reaction-time': 1.5, 'cognitive-load': 68, 'procedure-adherence': 86 },
  { date: '2023-07', 'reaction-time': 1.4, 'cognitive-load': 65, 'procedure-adherence': 89 },
  { date: '2023-08', 'reaction-time': 1.3, 'cognitive-load': 61, 'procedure-adherence': 92 },
];

const performanceMetrics = [
  { 
    id: 'reaction-time', 
    name: 'Reaction Time',
    description: 'Average time to respond to critical events (seconds)',
    color: '#3b82f6',
    format: (value: number) => `${value.toFixed(1)}s`,
  },
  { 
    id: 'cognitive-load', 
    name: 'Cognitive Load',
    description: 'Average mental workload based on NASA TLX methodology (0-100)',
    color: '#f59e0b',
    format: (value: number) => `${value.toFixed(0)}%`,
  },
  { 
    id: 'procedure-adherence', 
    name: 'Procedure Adherence',
    description: 'Compliance with standard operating procedures (%)',
    color: '#10b981',
    format: (value: number) => `${value.toFixed(0)}%`,
  },
];

// Mock data for skill decay
const generateSkillDecayData = () => {
  const data = [];
  const today = new Date();
  
  // Generate past data (actual)
  for (let i = 6; i >= 0; i--) {
    const date = new Date(today);
    date.setDate(today.getDate() - i * 15);
    
    data.push({
      date: date.toISOString().split('T')[0],
      actual: true,
      'radio-comms': 85 - Math.random() * 5 + i * 0.5,
      'instrument-scan': 88 - Math.random() * 4 + i * 0.3,
      'situational-awareness': 90 - Math.random() * 6 + i * 0.4,
      'manual-flying': 82 - Math.random() * 7 + i * 0.6,
    });
  }
  
  // Generate future data (predicted)
  for (let i = 1; i <= 6; i++) {
    const date = new Date(today);
    date.setDate(today.getDate() + i * 15);
    
    // More decay over time
    const decayFactor = i * 1.2;
    
    data.push({
      date: date.toISOString().split('T')[0],
      actual: false,
      'radio-comms': 85 - decayFactor - Math.random() * 2,
      'radio-comms_range': 10, // range for prediction uncertainty
      'instrument-scan': 88 - decayFactor * 0.8 - Math.random() * 2,
      'instrument-scan_range': 8,
      'situational-awareness': 90 - decayFactor * 1.1 - Math.random() * 3,
      'situational-awareness_range': 12,
      'manual-flying': 82 - decayFactor * 1.5 - Math.random() * 4,
      'manual-flying_range': 15,
    });
  }
  
  return data;
};

const skillDecayData = generateSkillDecayData();

const skillsData = [
  {
    id: 'radio-comms',
    name: 'Radio Communications',
    color: '#3b82f6', // Blue
    category: 'Communication',
    baseline: 85,
    threshold: 70,
  },
  {
    id: 'instrument-scan',
    name: 'Instrument Scan',
    color: '#8b5cf6', // Purple
    category: 'Technical',
    baseline: 88,
    threshold: 75,
  },
  {
    id: 'situational-awareness',
    name: 'Situational Awareness',
    color: '#10b981', // Green
    category: 'Non-Technical',
    baseline: 90,
    threshold: 80,
  },
  {
    id: 'manual-flying',
    name: 'Manual Flying',
    color: '#f59e0b', // Amber
    category: 'Technical',
    baseline: 82,
    threshold: 65,
  },
];

// Mock data for cognitive workload
const workloadDimensions = [
  {
    name: 'Mental Demand',
    value: 75,
    color: '#3b82f6',
    description: 'How much mental and perceptual activity was required',
  },
  {
    name: 'Physical Demand',
    value: 35,
    color: '#8b5cf6',
    description: 'How much physical activity was required',
  },
  {
    name: 'Temporal Demand',
    value: 65,
    color: '#f59e0b',
    description: 'How much time pressure was felt due to the pace of tasks',
  },
  {
    name: 'Performance',
    value: 55,
    color: '#10b981',
    description: 'How successful the pilot was in accomplishing the tasks',
  },
  {
    name: 'Effort',
    value: 70,
    color: '#ec4899',
    description: 'How hard the pilot had to work to accomplish the level of performance',
  },
  {
    name: 'Frustration',
    value: 45,
    color: '#ef4444',
    description: 'How insecure, discouraged, irritated, stressed, or annoyed the pilot felt',
  },
];

// Mock data for procedures
const proceduresData = [
  {
    id: 'proc-1',
    name: 'Normal Takeoff Procedure',
    steps: [
      {
        id: 'step-1-1',
        name: 'Pre-Takeoff Checklist',
        complianceRate: 95,
      },
      {
        id: 'step-1-2',
        name: 'Power Setting',
        complianceRate: 90,
      },
      {
        id: 'step-1-3',
        name: 'Rotation',
        complianceRate: 85,
      },
      {
        id: 'step-1-4',
        name: 'Initial Climb',
        complianceRate: 88,
      },
      {
        id: 'step-1-5',
        name: 'After Takeoff Checklist',
        complianceRate: 92,
      },
    ],
  },
  {
    id: 'proc-2',
    name: 'Engine Failure Procedure',
    steps: [
      {
        id: 'step-2-1',
        name: 'Identify Failure',
        complianceRate: 82,
        issues: ['Delayed recognition in 15% of cases'],
      },
      {
        id: 'step-2-2',
        name: 'Establish Pitch & Speed',
        complianceRate: 78,
        issues: ['Speed control issues in high workload scenarios'],
      },
      {
        id: 'step-2-3',
        name: 'Secure Engine',
        complianceRate: 65,
        issues: ['Steps performed out of sequence', 'Checklist not always used'],
      },
      {
        id: 'step-2-4',
        name: 'Declare Emergency',
        complianceRate: 88,
      },
      {
        id: 'step-2-5',
        name: 'Plan Landing',
        complianceRate: 72,
        issues: ['Situational awareness degradation observed'],
      },
    ],
  },
  {
    id: 'proc-3',
    name: 'ILS Approach Procedure',
    steps: [
      {
        id: 'step-3-1',
        name: 'Approach Briefing',
        complianceRate: 90,
      },
      {
        id: 'step-3-2',
        name: 'Initial Configuration',
        complianceRate: 84,
      },
      {
        id: 'step-3-3',
        name: 'Final Configuration',
        complianceRate: 88,
      },
      {
        id: 'step-3-4',
        name: 'Stabilized Approach Criteria',
        complianceRate: 75,
        issues: ['Approach not stabilized by 1000ft in 25% of cases'],
      },
      {
        id: 'step-3-5',
        name: 'Landing or Go-Around Decision',
        complianceRate: 80,
        issues: ['Continuation bias observed in marginal cases'],
      },
    ],
  },
];

// Mock data for training effectiveness
const effectivenessMetrics = [
  {
    name: 'Skill Retention',
    value: 85.6,
    change: 3.2,
    target: 80,
  },
  {
    name: 'First-Time Pass Rate',
    value: 73.4,
    change: -2.1,
    target: 75,
  },
  {
    name: 'Intervention Success',
    value: 91.2,
    change: 5.4,
    target: 85,
  },
];

const recentInterventions = [
  {
    id: 'int-1',
    date: '2023-08-15',
    type: 'Extra Simulator Session',
    trainee: {
      id: 'trainee-1',
      name: 'John Smith',
    },
    description: 'Additional practice on engine failure scenarios following below-average performance.',
    status: 'completed',
  },
  {
    id: 'int-2',
    date: '2023-08-12',
    type: 'Focused Briefing',
    trainee: {
      id: 'trainee-2',
      name: 'Sarah Johnson',
    },
    description: 'One-on-one briefing on approach stabilization criteria and decision making.',
    status: 'completed',
  },
  {
    id: 'int-3',
    date: '2023-08-20',
    type: 'Custom Practice Module',
    trainee: {
      id: 'trainee-3',
      name: 'Michael Chen',
    },
    description: 'Self-paced practice module focusing on radio communication procedures.',
    status: 'in-progress',
  },
];

export default function AnalyticsPage() {
  const [activeTab, setActiveTab] = useState(0);
  const [timeRangeAnchorEl, setTimeRangeAnchorEl] = useState<null | HTMLElement>(null);
  const [filterAnchorEl, setFilterAnchorEl] = useState<null | HTMLElement>(null);
  const [exportAnchorEl, setExportAnchorEl] = useState<null | HTMLElement>(null);

  const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue);
  };

  const handleTimeRangeClick = (event: React.MouseEvent<HTMLElement>) => {
    setTimeRangeAnchorEl(event.currentTarget);
  };

  const handleFilterClick = (event: React.MouseEvent<HTMLElement>) => {
    setFilterAnchorEl(event.currentTarget);
  };

  const handleExportClick = (event: React.MouseEvent<HTMLElement>) => {
    setExportAnchorEl(event.currentTarget);
  };

  const handleMenuClose = () => {
    setTimeRangeAnchorEl(null);
    setFilterAnchorEl(null);
    setExportAnchorEl(null);
  };

  const handleViewAllInterventions = () => {
    console.log('View all interventions');
  };

  return (
    <Container maxWidth="xl">
      <Box className="py-6">
        <Box className="flex justify-between items-center mb-6">
          <Typography variant="h4">Analytics Dashboard</Typography>
          
          <Box className="flex space-x-2">
            <Button
              variant="outlined"
              startIcon={<DateRange />}
              onClick={handleTimeRangeClick}
            >
              Last 30 Days
            </Button>
            <Button
              variant="outlined"
              startIcon={<FilterList />}
              onClick={handleFilterClick}
            >
              Filters
            </Button>
            <Button
              variant="outlined"
              startIcon={<Download />}
              onClick={handleExportClick}
            >
              Export
            </Button>
          </Box>
        </Box>
        
        <Paper elevation={1} className="mb-6">
          <Tabs 
            value={activeTab} 
            onChange={handleTabChange}
            variant="scrollable"
            scrollButtons="auto"
          >
            <Tab label="Overview" />
            <Tab label="Performance Metrics" />
            <Tab label="Skill Tracking" />
            <Tab label="Training Effectiveness" />
            <Tab label="Compliance" />
          </Tabs>
        </Paper>
        
        {activeTab === 0 && (
          <Box>
            <Grid container spacing={4}>
              <Grid item xs={12} lg={8}>
                <PerformanceMetricsChart
                  data={performanceData}
                  metrics={performanceMetrics}
                  title="Performance Trends"
                  description="Key performance indicators over time"
                />
              </Grid>
              
              <Grid item xs={12} lg={4}>
                <CognitiveWorkloadGauge
                  title="Cognitive Workload Analysis"
                  dimensions={workloadDimensions}
                  overallWorkload={65}
                  timestamp={new Date().toISOString()}
                />
              </Grid>
              
              <Grid item xs={12}>
                <SkillDecayChart
                  data={skillDecayData}
                  skills={skillsData}
                />
              </Grid>
              
              <Grid item xs={12} md={6}>
                <ProcedureComplianceHeatmap
                  procedures={proceduresData}
                  title="SOP Compliance"
                />
              </Grid>
              
              <Grid item xs={12} md={6}>
                <TrainingEffectivenessCard
                  title="Training Effectiveness"
                  metrics={effectivenessMetrics}
                  recentInterventions={recentInterventions}
                  onViewAllInterventions={handleViewAllInterventions}
                />
              </Grid>
            </Grid>
          </Box>
        )}
        
        {activeTab === 1 && (
          <Typography variant="body1">Performance Metrics Tab Content</Typography>
        )}
        
        {activeTab === 2 && (
          <Typography variant="body1">Skill Tracking Tab Content</Typography>
        )}
        
        {activeTab === 3 && (
          <Typography variant="body1">Training Effectiveness Tab Content</Typography>
        )}
        
        {activeTab === 4 && (
          <Typography variant="body1">Compliance Tab Content</Typography>
        )}
      </Box>
      
      {/* Time Range Menu */}
      <Menu
        anchorEl={timeRangeAnchorEl}
        open={Boolean(timeRangeAnchorEl)}
        onClose={handleMenuClose}
      >
        <MenuItem onClick={handleMenuClose}>Today</MenuItem>
        <MenuItem onClick={handleMenuClose}>Last 7 Days</MenuItem>
        <MenuItem onClick={handleMenuClose}>Last 30 Days</MenuItem>
        <MenuItem onClick={handleMenuClose}>Last 90 Days</MenuItem>
        <Divider />
        <MenuItem onClick={handleMenuClose}>Custom Range...</MenuItem>
      </Menu>
      
      {/* Filters Menu */}
      <Menu
        anchorEl={filterAnchorEl}
        open={Boolean(filterAnchorEl)}
        onClose={handleMenuClose}
      >
        <MenuItem onClick={handleMenuClose}>All Trainees</MenuItem>
        <MenuItem onClick={handleMenuClose}>By Aircraft Type</MenuItem>
        <MenuItem onClick={handleMenuClose}>By Training Program</MenuItem>
        <MenuItem onClick={handleMenuClose}>By Instructor</MenuItem>
        <Divider />
        <MenuItem onClick={handleMenuClose}>Advanced Filters...</MenuItem>
      </Menu>
      
      {/* Export Menu */}
      <Menu
        anchorEl={exportAnchorEl}
        open={Boolean(exportAnchorEl)}
        onClose={handleMenuClose}
      >
        <MenuItem onClick={handleMenuClose}>Export as PDF</MenuItem>
        <MenuItem onClick={handleMenuClose}>Export as Excel</MenuItem>
        <MenuItem onClick={handleMenuClose}>Export as CSV</MenuItem>
        <Divider />
        <MenuItem onClick={handleMenuClose}>Schedule Reports</MenuItem>
      </Menu>
    </Container>
  );
}

// services/analyticsService.ts
import apiClient, { ApiResponse } from './api';

// Performance data point
export interface PerformanceDataPoint {
  date: string;
  value: number;
  benchmark?: number;
}

// Competency rating
export interface CompetencyRating {
  id: string;
  name: string;
  rating: number; // 1-4 scale
  previousRating?: number;
}

// Training progress
export interface TrainingProgress {
  moduleId: string;
  moduleName: string;
  completed: number;
  total: number;
  percentage: number;
}

// Performance trend
export interface PerformanceTrend {
  trendType: 'improving' | 'declining' | 'stable';
  changeRate: number; // Percentage
  period: string; // e.g., "last 30 days"
}

// Trainee summary
export interface TraineeSummary {
  id: string;
  name: string;
  averageRating: number;
  completedModules: number;
  totalModules: number;
  lastActivity: string;
  trend: PerformanceTrend;
}

// Fleet statistics
export interface FleetStatistics {
  totalTrainees: number;
  activeTrainees: number;
  averageCompletionRate: number;
  averageRating: number;
  trainingHours: number;
  costPerHour: number;
}

// KPI metric
export interface KpiMetric {
  id: string;
  name: string;
  value: number;
  previousValue?: number;
  target?: number;
  unit?: string;
  change?: number;
  trend?: 'up' | 'down' | 'stable';
}

// Analytics service
class AnalyticsService {
  private readonly baseUrl = '/analytics';

  // Get KPI dashboard metrics
  async getKpiMetrics(): Promise<KpiMetric[]> {
    const response = await apiClient.get<KpiMetric[]>(`${this.baseUrl}/kpi`);
    return response.data;
  }

  // Get trainee performance over time
  async getTraineePerformance(
    traineeId: string,
    period: 'week' | 'month' | 'quarter' | 'year' = 'month',
    competencyId?: string
  ): Promise<PerformanceDataPoint[]> {
    const response = await apiClient.get<PerformanceDataPoint[]>(
      `${this.baseUrl}/trainee/${traineeId}/performance`,
      {
        period,
        competencyId,
      }
    );
    return response.data;
  }

  // Get trainee competency ratings
  async getTraineeCompetencies(traineeId: string): Promise<CompetencyRating[]> {
    const response = await apiClient.get<CompetencyRating[]>(
      `${this.baseUrl}/trainee/${traineeId}/competencies`
    );
    return response.data;
  }

  // Get trainee training progress
  async getTraineeProgress(traineeId: string): Promise<TrainingProgress[]> {
    const response = await apiClient.get<TrainingProgress[]>(
      `${this.baseUrl}/trainee/${traineeId}/progress`
    );
    return response.data;
  }

  // Get all trainees summary
  async getTraineesSummary(
    limit: number = 10,
    offset: number = 0,
    sortBy: string = 'name',
    sortOrder: 'asc' | 'desc' = 'asc'
  ): Promise<TraineeSummary[]> {
    const response = await apiClient.get<TraineeSummary[]>(
      `${this.baseUrl}/trainees`,
      {
        limit,
        offset,
        sortBy,
        sortOrder,
      }
    );
    return response.data;
  }

  // Get fleet statistics
  async getFleetStatistics(): Promise<FleetStatistics> {
    const response = await apiClient.get<FleetStatistics>(`${this.baseUrl}/fleet`);
    return response.data;
  }

  // Get performance comparison between trainees
  async getPerformanceComparison(
    traineeIds: string[],
    metric: string,
    period: 'week' | 'month' | 'quarter' | 'year' = 'month'
  ): Promise<{
    traineeId: string;
    traineeName: string;
    data: PerformanceDataPoint[];
  }[]> {
    const response = await apiClient.get<{
      traineeId: string;
      traineeName: string;
      data: PerformanceDataPoint[];
    }[]>(`${this.baseUrl}/comparison`, {
      traineeIds: traineeIds.join(','),
      metric,
      period,
    });
    return response.data;
  }

  // Get simulator telemetry data
  async getSimulatorTelemetry(
    sessionId: string,
    metrics: string[],
    startTime?: string,
    endTime?: string,
    resolution: 'high' | 'medium' | 'low' = 'medium'
  ): Promise<{
    timestamp: string;
    values: Record<string, number>;
  }[]> {
    const response = await apiClient.get<{
      timestamp: string;
      values: Record<string, number>;
    }[]>(`${this.baseUrl}/simulator/${sessionId}/telemetry`, {
      metrics: metrics.join(','),
      startTime,
      endTime,
      resolution,
    });
    return response.data;
  }

  // Get predictive insights
  async getPredictiveInsights(traineeId: string): Promise<{
    predictedCompletionDate: string;
    predictedFinalScore: number;
    riskAreas: {
      competencyId: string;
      competencyName: string;
      riskLevel: 'high' | 'medium' | 'low';
      recommendation: string;
    }[];
    confidenceScore: number;
  }> {
    const response = await apiClient.get<{
      predictedCompletionDate: string;
      predictedFinalScore: number;
      riskAreas: {
        competencyId: string;
        competencyName: string;
        riskLevel: 'high' | 'medium' | 'low';
        recommendation: string;
      }[];
      confidenceScore: number;
    }>(`${this.baseUrl}/trainee/${traineeId}/predictions`);
    return response.data;
  }

  // Export analytics data
  async exportAnalytics(
    format: 'csv' | 'json' | 'pdf',
    filters: {
      startDate?: string;
      endDate?: string;
      traineeIds?: string[];
      metrics?: string[];
      groupBy?: string;
    }
  ): Promise<Blob> {
    const response = await apiClient.request<Blob>({
      method: 'POST',
      url: `${this.baseUrl}/export`,
      data: {
        format,
        ...filters,
      },
      responseType: 'blob',
    });
    return response.data;
  }
}

export const analyticsService = new AnalyticsService();
export default analyticsService;

// lib/api/apiClient.ts
import axios, { AxiosError, AxiosInstance } from 'axios';
import { getSession } from 'next-auth/react';

/**
 * Creates a configured Axios instance for API requests
 */
const createApiClient = (): AxiosInstance => {
  const api = axios.create({
    baseURL: process.env.NEXT_PUBLIC_API_URL,
    headers: {
      'Content-Type': 'application/json',
    },
    timeout: 30000, // 30s timeout
  });

  // Request interceptor for adding auth tokens
  api.interceptors.request.use(
    async (config) => {
      const session = await getSession();
      if (session?.accessToken) {
        config.headers['Authorization'] = `Bearer ${session.accessToken}`;
      }
      return config;
    },
    (error) => Promise.reject(error)
  );

  // Response interceptor for handling errors
  api.interceptors.response.use(
    (response) => response,
    async (error: AxiosError) => {
      const originalRequest = error.config;
      
      // Handle 401 Unauthorized - token expired
      if (error.response?.status === 401 && !originalRequest?.headers['X-Retry']) {
        // Mark this request as retried to prevent infinite loops
        if (originalRequest) originalRequest.headers['X-Retry'] = 'true';
        
        try {
          // Attempt to refresh token
          const session = await getSession();
          if (session?.refreshToken) {
            const refreshResponse = await axios.post(
              `${process.env.NEXT_PUBLIC_API_URL}/auth/refresh-token`,
              { refreshToken: session.refreshToken }
            );
            
            // Update session
            // This would normally be handled by your session management system
            
            // Retry original request
            if (originalRequest) {
              return api(originalRequest);
            }
          }
        } catch (refreshError) {
          // Token refresh failed, redirect to login
          window.location.href = '/auth/login';
          return Promise.reject(refreshError);
        }
      }
      
      return Promise.reject(error);
    }
  );

  return api;
};

export const apiClient = createApiClient();

// Typed API service functions

/**
 * Document API service
 */
export const documentApi = {
  /**
   * Upload a document for AI processing
   */
  uploadDocument: async (file: File, metadata: { documentType: string; description?: string }) => {
    const formData = new FormData();
    formData.append('file', file);
    formData.append('metadata', JSON.stringify(metadata));
    
    const response = await apiClient.post('/document/upload', formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });
    
    return response.data;
  },
  
  /**
   * Get document analysis results by ID
   */
  getDocumentAnalysis: async (documentId: string) => {
    const response = await apiClient.get(`/document/${documentId}/analysis`);
    return response.data;
  },
  
  /**
   * Get all documents for the current user
   */
  getUserDocuments: async (params: { page: number; limit: number; filters?: Record<string, any> }) => {
    const response = await apiClient.get('/document/user-documents', { params });
    return response.data;
  }
};

/**
 * Syllabus API service
 */
export const syllabusApi = {
  /**
   * Get available syllabus templates
   */
  getTemplates: async () => {
    const response = await apiClient.get('/syllabus/templates');
    return response.data;
  },
  
  /**
   * Generate a syllabus from documents
   */
  generateSyllabus: async (params: { documentIds: string[]; templateId?: string; title: string }) => {
    const response = await apiClient.post('/syllabus/generate', params);
    return response.data;
  },
  
  /**
   * Get a syllabus by ID
   */
  getSyllabus: async (syllabusId: string) => {
    const response = await apiClient.get(`/syllabus/${syllabusId}`);
    return response.data;
  },
  
  /**
   * Update a syllabus
   */
  updateSyllabus: async (syllabusId: string, data: any) => {
    const response = await apiClient.put(`/syllabus/${syllabusId}`, data);
    return response.data;
  },
  
  /**
   * Get version history for a syllabus
   */
  getSyllabusVersions: async (syllabusId: string) => {
    const response = await apiClient.get(`/syllabus/${syllabusId}/versions`);
    return response.data;
  }
};

/**
 * Analytics API service
 */
export const analyticsApi = {
  /**
   * Get training performance data
   */
  getPerformanceData: async (params: { traineeId?: string; dateRange: { start: Date; end: Date }; metrics: string[] }) => {
    const response = await apiClient.get('/analytics/performance', { params });
    return response.data;
  },
  
  /**
   * Get skill decay predictions
   */
  getSkillDecayPredictions: async (traineeId: string) => {
    const response = await apiClient.get(`/analytics/trainees/${traineeId}/skill-decay`);
    return response.data;
  },
  
  /**
   * Get real-time simulator data
   */
  getSimulatorData: async (sessionId: string) => {
    const response = await apiClient.get(`/analytics/sessions/${sessionId}/telemetry`);
    return response.data;
  }
};

/**
 * Compliance API service
 */
export const complianceApi = {
  /**
   * Get compliance status for a syllabus
   */
  getSyllabusCompliance: async (syllabusId: string) => {
    const response = await apiClient.get(`/compliance/syllabus/${syllabusId}`);
    return response.data;
  },
  
  /**
   * Get audit logs
   */
  getAuditLogs: async (params: { entityType?: string; entityId?: string; page: number; limit: number }) => {
    const response = await apiClient.get('/compliance/audit-logs', { params });
    return response.data;
  },
  
  /**
   * Get regulatory frameworks
   */
  getRegulatoryFrameworks: async () => {
    const response = await apiClient.get('/compliance/regulatory-frameworks');
    return response.data;
  }
};

/**
 * Debriefing API service
 */
export const debriefingApi = {
  /**
   * Get session details
   */
  getSessionDetails: async (sessionId: string) => {
    const response = await apiClient.get(`/debriefing/sessions/${sessionId}`);
    return response.data;
  },
  
  /**
   * Save session annotations
   */
  saveAnnotations: async (sessionId: string, annotations: any[]) => {
    const response = await apiClient.post(`/debriefing/sessions/${sessionId}/annotations`, { annotations });
    return response.data;
  },
  
  /**
   * Generate session report
   */
  generateReport: async (sessionId: string, options: { format: 'pdf' | 'docx' }) => {
    const response = await apiClient.post(`/debriefing/sessions/${sessionId}/report`, options, {
      responseType: 'blob'
    });
    return response.data;
  }
};

/**
 * User API service
 */
export const userApi = {
  /**
   * Get user profile
   */
  getProfile: async () => {
    const response = await apiClient.get('/user/profile');
    return response.data;
  },
  
  /**
   * Update user profile
   */
  updateProfile: async (data: any) => {
    const response = await apiClient.put('/user/profile', data);
    return response.data;
  },
  
  /**
   * Get user activity
   */
  getUserActivity: async (params: { page: number; limit: number }) => {
    const response = await apiClient.get('/user/activity', { params });
    return response.data;
  }
};

/**
 * WebSocket connection for real-time data
 */
export class WebSocketService {
  private socket: WebSocket | null = null;
  private listeners: Map<string, Set<(data: any) => void>> = new Map();
  
  constructor(url: string) {
    this.connect(url);
  }
  
  private connect(url: string) {
    this.socket = new WebSocket(url);
    
    this.socket.onopen = () => {
      console.log('WebSocket connected');
    };
    
    this.socket.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        const { type, payload } = data;
        
        if (this.listeners.has(type)) {
          this.listeners.get(type)?.forEach(listener => listener(payload));
        }
      } catch (error) {
        console.error('Error parsing WebSocket message', error);
      }
    };
    
    this.socket.onclose = () => {
      console.log('WebSocket disconnected. Reconnecting...');
      setTimeout(() => this.connect(url), 5000);
    };
    
    this.socket.onerror = (error) => {
      console.error('WebSocket error', error);
      this.socket?.close();
    };
  }
  
  subscribe(type: string, callback: (data: any) => void) {
    if (!this.listeners.has(type)) {
      this.listeners.set(type, new Set());
    }
    
    this.listeners.get(type)?.add(callback);
    
    return () => {
      this.listeners.get(type)?.delete(callback);
    };
  }
  
  send(type: string, payload: any) {
    if (this.socket?.readyState === WebSocket.OPEN) {
      this.socket.send(JSON.stringify({ type, payload }));
    } else {
      console.error('WebSocket not connected');
    }
  }
}

export const createWebSocketService = () => {
  if (typeof window !== 'undefined') {
    return new WebSocketService(process.env.NEXT_PUBLIC_WS_URL || '');
  }
  return null;
};

// src/frontend/services/apiClient.ts
import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';

// Configure base API client with interceptors for auth and error handling
export const createApiClient = (baseURL: string, getAuthToken: () => string | null): AxiosInstance => {
  const apiClient = axios.create({
    baseURL,
    headers: {
      'Content-Type': 'application/json'
    }
  });

  // Request interceptor for auth token
  apiClient.interceptors.request.use(
    (config: AxiosRequestConfig) => {
      const token = getAuthToken();
      if (token && config.headers) {
        config.headers['Authorization'] = `Bearer ${token}`;
      }
      return config;
    },
    (error) => Promise.reject(error)
  );

  // Response interceptor for error handling
  apiClient.interceptors.response.use(
    (response: AxiosResponse) => response,
    (error) => {
      // Handle session expiry - redirect to login
      if (error.response && error.response.status === 401) {
        window.location.href = '/login';
      }

      // Handle server errors
      if (error.response && error.response.status >= 500) {
        console.error('Server error:', error.response.data);
      }

      return Promise.reject(error);
    }
  );

  return apiClient;
};

// src/frontend/services/authService.ts
import { User, Permission, UserRole } from '../components/auth/UserAuth';

// Token storage helpers
const TOKEN_KEY = 'auth_token';
const USER_KEY = 'user_data';

const getToken = (): string | null => localStorage.getItem(TOKEN_KEY);
const setToken = (token: string): void => localStorage.setItem(TOKEN_KEY, token);
const clearToken = (): void => localStorage.removeItem(TOKEN_KEY);

const getStoredUser = (): User | null => {
  const userData = localStorage.getItem(USER_KEY);
  return userData ? JSON.parse(userData) : null;
};

const setStoredUser = (user: User): void => {
  localStorage.setItem(USER_KEY, JSON.stringify(user));
};

const clearStoredUser = (): void => {
  localStorage.removeItem(USER_KEY);
};

// Create API client for auth endpoints
const apiClient = createApiClient('/api/auth', getToken);

// Auth service implementation
export const authService = {
  login: async (username: string, password: string): Promise<User> => {
    try {
      const response = await apiClient.post('/login', { username, password });
      const { token, user } = response.data;
      
      setToken(token);
      setStoredUser(user);
      
      return user;
    } catch (error) {
      if (axios.isAxiosError(error) && error.response) {
        throw new Error(error.response.data.message || 'Login failed');
      }
      throw new Error('Login failed: Network error');
    }
  },
  
  logout: async (): Promise<void> => {
    try {
      await apiClient.post('/logout');
    } catch (error) {
      console.error('Logout failed:', error);
    } finally {
      clearToken();
      clearStoredUser();
    }
  },
  
  forgotPassword: async (email: string): Promise<void> => {
    await apiClient.post('/forgot-password', { email });
  },
  
  resetPassword: async (token: string, newPassword: string): Promise<void> => {
    await apiClient.post('/reset-password', { token, newPassword });
  },
  
  getCurrentUser: async (): Promise<User | null> => {
    // First check if we have a stored user and token
    const token = getToken();
    const storedUser = getStoredUser();
    
    if (!token) {
      return null;
    }
    
    // If we have a token but no stored user, fetch the user data
    if (!storedUser) {
      try {
        const response = await apiClient.get('/me');
        const user = response.data;
        setStoredUser(user);
        return user;
      } catch (error) {
        clearToken();
        return null;
      }
    }
    
    // Validate token by making a request
    try {
      const response = await apiClient.get('/validate-token');
      if (response.data.valid) {
        return storedUser;
      } else {
        clearToken();
        clearStoredUser();
        return null;
      }
    } catch (error) {
      clearToken();
      clearStoredUser();
      return null;
    }
  },
  
  updateProfile: async (userId: string, updates: Partial<User>): Promise<User> => {
    const response = await apiClient.put(`/users/${userId}`, updates);
    const updatedUser = response.data;
    setStoredUser(updatedUser);
    return updatedUser;
  },
  
  changePassword: async (userId: string, currentPassword: string, newPassword: string): Promise<void> => {
    await apiClient.post(`/users/${userId}/change-password`, {
      currentPassword,
      newPassword
    });
  },
  
  uploadProfilePhoto: async (userId: string, file: File): Promise<string> => {
    const formData = new FormData();
    formData.append('photo', file);
    
    const response = await apiClient.post(`/users/${userId}/photo`, formData, {
      headers: {
        'Content-Type': 'multipart/form-data'
      }
    });
    
    const photoUrl = response.data.photoUrl;
    
    // Update stored user with new photo URL
    const user = getStoredUser();
    if (user) {
      user.photoUrl = photoUrl;
      setStoredUser(user);
    }
    
    return photoUrl;
  }
};

// src/frontend/services/syllabusService.ts
import { TrainingElement } from '../components/syllabus/SyllabusBuilder';

// Create API client for syllabus endpoints
const syllabusApiClient = createApiClient('/api/syllabus', getToken);

export const syllabusService = {
  getSyllabusElements: async (syllabusId: string): Promise<TrainingElement[]> => {
    const response = await syllabusApiClient.get(`/${syllabusId}/elements`);
    return response.data;
  },
  
  saveSyllabus: async (syllabusId: string, elements: TrainingElement[]): Promise<void> => {
    await syllabusApiClient.put(`/${syllabusId}/elements`, { elements });
  },
  
  getTemplates: async (): Promise<any[]> => {
    const response = await syllabusApiClient.get('/templates');
    return response.data;
  },
  
  applyTemplate: async (syllabusId: string, templateId: string): Promise<TrainingElement[]> => {
    const response = await syllabusApiClient.post(`/${syllabusId}/apply-template`, { templateId });
    return response.data;
  },
  
  checkCompliance: async (syllabusId: string, frameworkId: string): Promise<any> => {
    const response = await syllabusApiClient.post(`/${syllabusId}/check-compliance`, { frameworkId });
    return response.data;
  },
  
  createVersion: async (syllabusId: string, name: string, elements: TrainingElement[]): Promise<void> => {
    await syllabusApiClient.post(`/${syllabusId}/versions`, { name, elements });
  },
  
  getVersions: async (syllabusId: string): Promise<any[]> => {
    const response = await syllabusApiClient.get(`/${syllabusId}/versions`);
    return response.data;
  },
  
  bulkUpdateElements: async (syllabusId: string, elementIds: string[], updates: Partial<TrainingElement>): Promise<void> => {
    await syllabusApiClient.post(`/${syllabusId}/bulk-update`, { elementIds, updates });
  }
};

// src/frontend/services/documentService.ts
import { Document, DocumentStatus, DocumentType } from '../components/document/DocumentManagement';

// Create API client for document endpoints
const documentApiClient = createApiClient('/api/documents', getToken);

export const documentService = {
  getDocuments: async (): Promise<Document[]> => {
    const response = await documentApiClient.get('/');
    return response.data;
  },
  
  uploadDocument: async (file: File, onProgress?: (progress: number) => void): Promise<Document> => {
    const formData = new FormData();
    formData.append('file', file);
    
    const response = await documentApiClient.post('/upload', formData, {
      headers: {
        'Content-Type': 'multipart/form-data'
      },
      onUploadProgress: (progressEvent) => {
        if (onProgress && progressEvent.total) {
          const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
          onProgress(progress);
        }
      }
    });
    
    return response.data;
  },
  
  deleteDocument: async (documentId: string): Promise<void> => {
    await documentApiClient.delete(`/${documentId}`);
  },
  
  processDocument: async (documentId: string): Promise<Document> => {
    const response = await documentApiClient.post(`/${documentId}/process`);
    return response.data;
  },
  
  getDocumentContent: async (documentId: string, pageNumber: number): Promise<any> => {
    const response = await documentApiClient.get(`/${documentId}/content`, {
      params: { page: pageNumber }
    });
    return response.data;
  },
  
  updateDocumentTags: async (documentId: string, tags: string[]): Promise<Document> => {
    const response = await documentApiClient.put(`/${documentId}/tags`, { tags });
    return response.data;
  },
  
  updateDocumentCategory: async (documentId: string, categoryId: string): Promise<Document> => {
    const response = await documentApiClient.put(`/${documentId}/category`, { categoryId });
    return response.data;
  },
  
  getDocumentAnnotations: async (documentId: string): Promise<any[]> => {
    const response = await documentApiClient.get(`/${documentId}/annotations`);
    return response.data;
  },
  
  createAnnotation: async (documentId: string, annotation: any): Promise<any> => {
    const response = await documentApiClient.post(`/${documentId}/annotations`, annotation);
    return response.data;
  },
  
  updateAnnotation: async (documentId: string, annotationId: string, updates: any): Promise<any> => {
    const response = await documentApiClient.put(`/${documentId}/annotations/${annotationId}`, updates);
    return response.data;
  },
  
  deleteAnnotation: async (documentId: string, annotationId: string): Promise<void> => {
    await documentApiClient.delete(`/${documentId}/annotations/${annotationId}`);
  }
};

// src/frontend/services/assessmentService.ts
import { 
  Competency, 
  CompetencyLevel, 
  TraineePerformance 
} from '../components/assessment/AssessmentInterface';

// Create API client for assessment endpoints
const assessmentApiClient = createApiClient('/api/assessments', getToken);

export const assessmentService = {
  getAssessmentForm: async (assessmentId: string): Promise<any> => {
    const response = await assessmentApiClient.get(`/${assessmentId}/form`);
    return response.data;
  },
  
  getCompetencies: async (): Promise<Competency[]> => {
    const response = await assessmentApiClient.get('/competencies');
    return response.data;
  },
  
  savePerformance: async (performance: TraineePerformance): Promise<void> => {
    await assessmentApiClient.post('/performance', performance);
  },
  
  getTraineePerformance: async (traineeId: string, assessmentId: string): Promise<TraineePerformance | null> => {
    try {
      const response = await assessmentApiClient.get(`/performance/${traineeId}/${assessmentId}`);
      return response.data;
    } catch (error) {
      if (axios.isAxiosError(error) && error.response && error.response.status === 404) {
        return null;
      }
      throw error;
    }
  },
  
  getTraineeHistory: async (traineeId: string): Promise<any[]> => {
    const response = await assessmentApiClient.get(`/history/${traineeId}`);
    return response.data;
  },
  
  compareTraineePerformance: async (traineeId: string, assessmentIds: string[]): Promise<any> => {
    const response = await assessmentApiClient.post(`/compare/${traineeId}`, { assessmentIds });
    return response.data;
  }
};

// src/frontend/services/simulatorService.ts
import { 
  SimulatorConnectionStatus,
  SimulatorParameter,
  SimulatorEvent,
  FlightData,
  ExerciseScenario,
  SimulatorScore
} from '../components/simulator/SimulatorIntegration';

// Create API client for simulator endpoints
const simulatorApiClient = createApiClient('/api/simulator', getToken);

// WebSocket for real-time simulator data
let simulatorSocket: WebSocket | null = null;
let simulatorEventListeners: ((event: SimulatorEvent) => void)[] = [];
let flightDataListeners: ((data: FlightData) => void)[] = [];

export const simulatorService = {
  connect: async (): Promise<void> => {
    await simulatorApiClient.post('/connect');
    
    // Connect WebSocket for real-time data
    simulatorSocket = new WebSocket(`${window.location.protocol === 'https:' ? 'wss' : 'ws'}://${window.location.host}/api/simulator/ws`);
    
    simulatorSocket.onmessage = (event) => {
      const data = JSON.parse(event.data);
      
      if (data.type === 'event') {
        simulatorEventListeners.forEach(listener => listener(data.event));
      } else if (data.type === 'flightData') {
        flightDataListeners.forEach(listener => listener(data.data));
      }
    };
  },
  
  disconnect: async (): Promise<void> => {
    if (simulatorSocket) {
      simulatorSocket.close();
      simulatorSocket = null;
    }
    
    await simulatorApiClient.post('/disconnect');
  },
  
  getConnectionStatus: async (): Promise<SimulatorConnectionStatus> => {
    const response = await simulatorApiClient.get('/status');
    return response.data.status;
  },
  
  getParameters: async (): Promise<SimulatorParameter[]> => {
    const response = await simulatorApiClient.get('/parameters');
    return response.data;
  },
  
  updateParameter: async (parameterId: string, value: number | boolean | string): Promise<void> => {
    await simulatorApiClient.put(`/parameters/${parameterId}`, { value });
  },
  
  getScenarios: async (): Promise<ExerciseScenario[]> => {
    const response = await simulatorApiClient.get('/scenarios');
    return response.data;
  },
  
  startScenario: async (scenarioId: string): Promise<void> => {
    await simulatorApiClient.post(`/scenarios/${scenarioId}/start`);
  },
  
  stopSimulation: async (): Promise<SimulatorScore> => {
    const response = await simulatorApiClient.post('/stop');
    return response.data;
  },
  
  pauseSimulation: async (): Promise<void> => {
    await simulatorApiClient.post('/pause');
  },
  
  resumeSimulation: async (): Promise<void> => {
    await simulatorApiClient.post('/resume');
  },
  
  resetSimulation: async (): Promise<void> => {
    await simulatorApiClient.post('/reset');
  },
  
  subscribeToEvents: (listener: (event: SimulatorEvent) => void): () => void => {
    simulatorEventListeners.push(listener);
    return () => {
      simulatorEventListeners = simulatorEventListeners.filter(l => l !== listener);
    };
  },
  
  subscribeToFlightData: (listener: (data: FlightData) => void): () => void => {
    flightDataListeners.push(listener);
    return () => {
      flightDataListeners = flightDataListeners.filter(l => l !== listener);
    };
  }
};

// src/frontend/services/complianceService.ts
import {
  RegulatoryFramework,
  RegulatoryRequirement,
  ComplianceTrainingMapping,
  ComplianceReport,
  TrainingProgram,
  ComplianceStatus
} from '../components/compliance/ComplianceEngine';

// Create API client for compliance endpoints
const complianceApiClient = createApiClient('/api/compliance', getToken);

export const complianceService = {
  getFrameworks: async (): Promise<RegulatoryFramework[]> => {
    const response = await complianceApiClient.get('/frameworks');
    return response.data;
  },
  
  getFramework: async (frameworkId: string): Promise<RegulatoryFramework> => {
    const response = await complianceApiClient.get(`/frameworks/${frameworkId}`);
    return response.data;
  },
  
  getTrainingPrograms: async (): Promise<TrainingProgram[]> => {
    const response = await complianceApiClient.get('/programs');
    return response.data;
  },
  
  getTrainingProgram: async (programId: string): Promise<TrainingProgram> => {
    const response = await complianceApiClient.get(`/programs/${programId}`);
    return response.data;
  },
  
  getMappings: async (programId: string, frameworkId?: string): Promise<ComplianceTrainingMapping[]> => {
    const params: any = { programId };
    if (frameworkId) {
      params.frameworkId = frameworkId;
    }
    
    const response = await complianceApiClient.get('/mappings', { params });
    return response.data;
  },
  
  addMapping: async (requirementId: string, syllabusElementId: string, status: ComplianceStatus): Promise<ComplianceTrainingMapping> => {
    const response = await complianceApiClient.post('/mappings', {
      requirementId,
      syllabusElementId,
      status,
      coveragePercent: status === ComplianceStatus.COMPLIANT ? 100 : 
                       status === ComplianceStatus.PARTIALLY_COMPLIANT ? 50 : 0
    });
    return response.data;
  },
  
  updateMapping: async (mappingId: string, updates: Partial<ComplianceTrainingMapping>): Promise<ComplianceTrainingMapping> => {
    const response = await complianceApiClient.put(`/mappings/${mappingId}`, updates);
    return response.data;
  },
  
  checkCompliance: async (programId: string, frameworkId: string): Promise<ComplianceReport> => {
    const response = await complianceApiClient.post('/check', { programId, frameworkId });
    return response.data;
  },
  
  generateReport: async (programId: string, frameworkId: string): Promise<string> => {
    const response = await complianceApiClient.post('/reports', { programId, frameworkId });
    return response.data.reportId;
  },
  
  getReport: async (reportId: string): Promise<ComplianceReport> => {
    const response = await complianceApiClient.get(`/reports/${reportId}`);
    return response.data;
  },
  
  getReports: async (): Promise<ComplianceReport[]> => {
    const response = await complianceApiClient.get('/reports');
    return response.data;
  },
  
  exportReport: async (reportId: string, format: 'pdf' | 'csv'): Promise<void> => {
    window.location.href = `${complianceApiClient.defaults.baseURL}/reports/${reportId}/export?format=${format}`;
  }
};

// src/frontend/services/analyticsService.ts
import { DashboardMetrics } from '../components/analytics/AnalyticsDashboard';

// Create API client for analytics endpoints
const analyticsApiClient = createApiClient('/api/analytics', getToken);

export const analyticsService = {
  getDashboardMetrics: async (startDate: Date, endDate: Date): Promise<DashboardMetrics> => {
    const response = await analyticsApiClient.get('/dashboard', {
      params: {
        startDate: startDate.toISOString(),
        endDate: endDate.toISOString()
      }
    });
    return response.data;
  },
  
  generateReport: async (reportType: string, filters: any): Promise<string> => {
    const response = await analyticsApiClient.post('/reports', {
      reportType,
      filters
    });
    return response.data.reportUrl;
  },
  
  getTraineeMetrics: async (traineeId: string): Promise<any> => {
    const response = await analyticsApiClient.get(`/trainees/${traineeId}`);
    return response.data;
  },
  
  getProgramMetrics: async (programId: string): Promise<any> => {
    const response = await analyticsApiClient.get(`/programs/${programId}`);
    return response.data;
  },
  
  getComplianceMetrics: async (): Promise<any> => {
    const response = await analyticsApiClient.get('/compliance');
    return response.data;
  }
};

// src/frontend/services/traineeService.ts
import {
  Trainee,
  TrainingProgram as TraineeProgram,
  TraineeProgress,
  TraineeAssessment,
  CompetencyRating,
  PerformanceMetric
} from '../components/trainee/TraineePerformance';

// Create API client for trainee endpoints
const traineeApiClient = createApiClient('/api/trainees', getToken);

export const traineeService = {
  getTrainee: async (traineeId: string): Promise<Trainee> => {
    const response = await traineeApiClient.get(`/${traineeId}`);
    return response.data;
  },
  
  getTrainees: async (): Promise<Trainee[]> => {
    const response = await traineeApiClient.get('/');
    return response.data;
  },
  
  getTraineePrograms: async (traineeId: string): Promise<TraineeProgram[]> => {
    const response = await traineeApiClient.get(`/${traineeId}/programs`);
    return response.data;
  },
  
  getTraineeProgress: async (traineeId: string, programId?: string): Promise<TraineeProgress[]> => {
    const params: any = {};
    if (programId) {
      params.programId = programId;
    }
    
    const response = await traineeApiClient.get(`/${traineeId}/progress`, { params });
    return response.data;
  },
  
  getTraineeAssessments: async (traineeId: string, programId?: string): Promise<TraineeAssessment[]> => {
    const params: any = {};
    if (programId) {
      params.programId = programId;
    }
    
    const response = await traineeApiClient.get(`/${traineeId}/assessments`, { params });
    return response.data;
  },
  
  getTraineeCompetencies: async (traineeId: string): Promise<CompetencyRating[]> => {
    const response = await traineeApiClient.get(`/${traineeId}/competencies`);
    return response.data;
  },
  
  getTraineeMetrics: async (traineeId: string): Promise<PerformanceMetric[]> => {
    const response = await traineeApiClient.get(`/${traineeId}/metrics`);
    return response.data;
  },
  
  exportTraineeReport: async (traineeId: string, programId?: string): Promise<void> => {
    const params: any = {};
    if (programId) {
      params.programId = programId;
    }
    
    window.location.href = `${traineeApiClient.defaults.baseURL}/${traineeId}/report/export?${new URLSearchParams(params)}`;
  }
};

// src/frontend/services/instructorService.ts
import {
  InstructorTrainingSession,
  InstructorAssessment,
  TraineeOverview
} from '../components/instructor/InstructorDashboard';

// Create API client for instructor endpoints
const instructorApiClient = createApiClient('/api/instructors', getToken);

export const instructorService = {
  getInstructorInfo: async (instructorId: string): Promise<any> => {
    const response = await instructorApiClient.get(`/${instructorId}`);
    return response.data;
  },
  
  getTrainingSessions: async (instructorId: string): Promise<InstructorTrainingSession[]> => {
    const response = await instructorApiClient.get(`/${instructorId}/sessions`);
    return response.data;
  },
  
  getTrainingSession: async (sessionId: string): Promise<InstructorTrainingSession> => {
    const response = await instructorApiClient.get(`/sessions/${sessionId}`);
    return response.data;
  },
  
  createTrainingSession: async (session: Omit<InstructorTrainingSession, 'id'>): Promise<InstructorTrainingSession> => {
    const response = await instructorApiClient.post('/sessions', session);
    return response.data;
  },
  
  updateTrainingSession: async (sessionId: string, updates: Partial<InstructorTrainingSession>): Promise<InstructorTrainingSession> => {
    const response = await instructorApiClient.put(`/sessions/${sessionId}`, updates);
    return response.data;
  },
  
  getAssessments: async (instructorId: string): Promise<InstructorAssessment[]> => {
    const response = await instructorApiClient.get(`/${instructorId}/assessments`);
    return response.data;
  },
  
  getAssessment: async (assessmentId: string): Promise<any> => {
    const response = await instructorApiClient.get(`/assessments/${assessmentId}`);
    return response.data;
  },
  
  scheduleAssessment: async (assessment: Omit<InstructorAssessment, 'id'>): Promise<InstructorAssessment> => {
    const response = await instructorApiClient.post('/assessments', assessment);
    return response.data;
  },
  
  gradeAssessment: async (assessmentId: string, score: number, feedback: any): Promise<InstructorAssessment> => {
    const response = await instructorApiClient.post(`/assessments/${assessmentId}/grade`, { score, feedback });
    return response.data;
  },
  
  getTrainees: async (instructorId: string): Promise<TraineeOverview[]> => {
    const response = await instructorApiClient.get(`/${instructorId}/trainees`);
    return response.data;
  },
  
  getTraineeOverview: async (traineeId: string): Promise<TraineeOverview> => {
    const response = await instructorApiClient.get(`/trainees/${traineeId}`);
    return response.data;
  }
};

// src/frontend/services/notificationService.ts
import { Notification, NotificationType } from '../components/notifications/NotificationSystem';

// Create API client for notification endpoints
const notificationApiClient = createApiClient('/api/notifications', getToken);

// WebSocket for real-time notifications
let notificationSocket: WebSocket | null = null;
let notificationListeners: ((notification: Notification) => void)[] = [];

export const notificationService = {
  getNotifications: async (): Promise<Notification[]> => {
    const response = await notificationApiClient.get('/');
    return response.data;
  },
  
  markAsRead: async (notificationId: string): Promise<void> => {
    await notificationApiClient.post(`/${notificationId}/read`);
  },
  
  markAllAsRead: async (): Promise<void> => {
    await notificationApiClient.post('/read-all');
  },
  
  deleteNotification: async (notificationId: string): Promise<void> => {
    await notificationApiClient.delete(`/${notificationId}`);
  },
  
  clearAll: async (): Promise<void> => {
    await notificationApiClient.delete('/clear-all');
  },
  
  getNotificationPreferences: async (): Promise<any[]> => {
    const response = await notificationApiClient.get('/preferences');
    return response.data;
  },
  
  updateNotificationPreference: async (preferenceId: string, updates: any): Promise<any> => {
    const response = await notificationApiClient.put(`/preferences/${preferenceId}`, updates);
    return response.data;
  },
  
  updateAllNotificationPreferences: async (updates: any): Promise<void> => {
    await notificationApiClient.put('/preferences', updates);
  },
  
  // Setup WebSocket connection for real-time notifications
  setupNotificationSocket: (): void => {
    if (notificationSocket) {
      return;
    }
    
    notificationSocket = new WebSocket(`${window.location.protocol === 'https:' ? 'wss' : 'ws'}://${window.location.host}/api/notifications/ws?token=${getToken()}`);
    
    notificationSocket.onmessage = (event) => {
      const notification = JSON.parse(event.data);
      notificationListeners.forEach(listener => listener(notification));
    };
    
    notificationSocket.onclose = () => {
      // Reconnect after a delay
      setTimeout(() => {
        notificationService.setupNotificationSocket();
      }, 5000);
    };
  },
  
  // Subscribe to real-time notifications
  subscribeToNotifications: (callback: (notification: Notification) => void): () => void => {
    notificationListeners.push(callback);
    
    // Setup WebSocket if not already connected
    notificationService.setupNotificationSocket();
    
    return () => {
      notificationListeners = notificationListeners.filter(listener => listener !== callback);
    };
  }
};

// src/frontend/App.tsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { AuthProvider, useAuth, ProtectedRoute } from './components/auth/UserAuth';
import { NotificationProvider } from './components/notifications/NotificationSystem';
import { AppLayout } from './components/layout/AppLayout';

// Pages
import { LoginForm } from './components/auth/UserAuth';
import { MainDashboard } from './components/dashboard/MainDashboard';
import { SyllabusBuilder } from './components/syllabus/SyllabusBuilder';
import { SyllabusCustomization } from './components/syllabus/SyllabusCustomization';
import { DocumentManagement } from './components/document/DocumentManagement';
import { DocumentViewer } from './components/document/DocumentViewer';
import { AssessmentInterface } from './components/assessment/AssessmentInterface';
import { SimulatorIntegration } from './components/simulator/SimulatorIntegration';
import { ComplianceEngine } from './components/compliance/ComplianceEngine';
import { AnalyticsDashboard } from './components/analytics/AnalyticsDashboard';
import { TraineePerformance } from './components/trainee/TraineePerformance';
import { InstructorDashboard } from './components/instructor/InstructorDashboard';
import { UserProfile } from './components/auth/UserAuth';
import { NotificationPage } from './components/notifications/NotificationSystem';

// Services (mocked for this example)
import { mockAuthService } from './services/mockAuth';
import { mockNotificationService } from './services/mockNotifications';

// Main App with routing
const AppRoutes = () => {
  const { isAuthenticated, user } = useAuth();

  // If not authenticated, redirect to login
  if (!isAuthenticated) {
    return (
      <Routes>
        <Route path="/login" element={<LoginForm onLogin={mockAuthService.login} onForgotPassword={mockAuthService.forgotPassword} isLoading={false} />} />
        <Route path="*" element={<Navigate to="/login" replace />} />
      </Routes>
    );
  }

  return (
    <AppLayout>
      <Routes>
        {/* Dashboard */}
        <Route path="/" element={
          user?.role === 'instructor' 
            ? <InstructorDashboard 
                instructor={{ id: user.id, name: `${user.firstName} ${user.lastName}` }}
                trainingSessions={[]}
                assessments={[]}
                trainees={[]}
                onCreateSession={() => {}}
                onScheduleAssessment={() => {}}
                onGradeAssessment={() => {}}
                onViewSession={() => {}}
                onViewTrainee={() => {}}
                onExportTraineeReport={async () => {}}
              /> 
            : <MainDashboard 
                recentActivities={[]}
                notifications={[]}
                onNotificationRead={async () => {}}
                onNotificationClear={async () => {}}
                onAllNotificationsRead={async () => {}}
              />
        } />

        {/* Syllabus */}
        <Route path="/syllabus" element={
          <ProtectedRoute requiredPermissions={['edit_syllabus']}>
            <SyllabusBuilder 
              syllabusElements={[]}
              onSave={() => {}}
              onElementEdit={() => {}}
              onCheckCompliance={() => {}}
            />
          </ProtectedRoute>
        } />
        <Route path="/syllabus/customization" element={
          <ProtectedRoute requiredPermissions={['edit_syllabus']}>
            <SyllabusCustomization 
              elements={[]}
              templates={[]}
              complianceRequirements={[]}
              exercises={[]}
              versions={[]}
              onSave={async () => {}}
              onApplyTemplate={async () => []}
              onCheckCompliance={async () => ({ isCompliant: true, requirementsMet: [], requirementsNotMet: [], requirementsPartiallyMet: [], details: [], overallStatus: 'compliant' })}
              onCreateVersion={async () => {}}
              onBulkEdit={async () => {}}
            />
          </ProtectedRoute>
        } />

        {/* Documents */}
        <Route path="/documents" element={
          <ProtectedRoute requiredPermissions={['upload_documents']}>
            <DocumentManagement 
              documents={[]}
              onUpload={async () => {}}
              onDelete={async () => {}}
              onPreview={() => {}}
              onProcess={async () => {}}
              onCategorize={async () => {}}
              onTagsUpdate={async () => {}}
            />
          </ProtectedRoute>
        } />
        <Route path="/documents/viewer/:id" element={
          <ProtectedRoute>
            <DocumentViewer 
              documentId=""
              metadata={{
                title: "",
                totalPages: 0,
                fileType: "",
                fileSize: 0
              }}
              pages={[]}
              onAnnotationCreate={async () => ({ id: "", pageNumber: 0, x: 0, y: 0, width: 0, height: 0, text: "", type: "note" })}
              onAnnotationUpdate={async () => {}}
              onAnnotationDelete={async () => {}}
            />
          </ProtectedRoute>
        } />

        {/* Assessment */}
        <Route path="/assessment" element={
          <ProtectedRoute requiredPermissions={['create_assessment']}>
            <AssessmentInterface 
              trainee={{ id: "", name: "" }}
              assessmentForm={{ id: "", name: "", description: "", competencies: [], categories: [] }}
              onSave={async () => {}}
              onCompare={() => {}}
              instructor={{ id: "", name: "" }}
            />
          </ProtectedRoute>
        } />

        {/* Simulator */}
        <Route path="/simulator" element={
          <ProtectedRoute>
            <SimulatorIntegration 
              onConnect={async () => {}}
              onDisconnect={async () => {}}
              onStart={async () => {}}
              onStop={async () => {}}
              onPause={async () => {}}
              onResume={async () => {}}
              onReset={async () => {}}
              onParameterChange={async () => {}}
              connectionStatus="disconnected"
              parameters={[]}
              events={[]}
              scenarios={[]}
              isRunning={false}
              isPaused={false}
            />
          </ProtectedRoute>
        } />

        {/* Compliance */}
        <Route path="/compliance" element={
          <ProtectedRoute requiredPermissions={['check_compliance']}>
            <ComplianceEngine 
              frameworks={[]}
              trainingPrograms={[]}
              mappings={[]}
              reports={[]}
              onCheckCompliance={async () => ({ id: "", trainingProgramId: "", trainingProgramName: "", frameworkId: "", frameworkName: "", generatedDate: new Date(), generatedBy: "", overallStatus: "compliant", requirementStatuses: [] })}
              onGenerateReport={async () => ""}
              onAddMapping={async () => {}}
              onUpdateMapping={async () => {}}
              onExportReport={async () => {}}
            />
          </ProtectedRoute>
        } />

        {/* Analytics */}
        <Route path="/analytics" element={
          <ProtectedRoute requiredPermissions={['view_analytics']}>
            <AnalyticsDashboard 
              metrics={{
                overallStats: {
                  activeTrainees: 0,
                  completedTrainees: 0,
                  avgProgramScore: 0,
                  complianceRate: 0
                },
                trainees: [],
                programs: [],
                complianceMetrics: []
              }}
              onGenerateReport={() => {}}
              onTraineeSelect={() => {}}
              onProgramSelect={() => {}}
              dateRange={{
                startDate: new Date(),
                endDate: new Date()
              }}
              onDateRangeChange={() => {}}
            />
          </ProtectedRoute>
        } />

        {/* Trainee Performance */}
        <Route path="/trainee/:id" element={
          <ProtectedRoute>
            <TraineePerformance 
              trainee={{ id: "", firstName: "", lastName: "", email: "", status: "active", enrolledPrograms: [] }}
              programs={[]}
              progress={[]}
              assessments={[]}
              competencies={[]}
              metrics={[]}
              onExportReport={async () => {}}
            />
          </ProtectedRoute>
        } />

        {/* Profile & Settings */}
        <Route path="/profile" element={
          <ProtectedRoute>
            <UserProfile 
              user={user}
              onUpdateProfile={async () => {}}
              onChangePassword={async () => {}}
              onUploadProfilePhoto={async () => ""}
            />
          </ProtectedRoute>
        } />

        {/* Notifications */}
        <Route path="/notifications" element={
          <ProtectedRoute>
            <NotificationPage 
              notifications={[]}
              onMarkAsRead={async () => {}}
              onDelete={async () => {}}
              onMarkAllAsRead={async () => {}}
              onClearAll={async () => {}}
              onFilter={() => {}}
              categories={[]}
            />
          </ProtectedRoute>
        } />

        {/* Fallback for unknown routes */}
        <Route path="*" element={<Navigate to="/" replace />} />
      </Routes>
    </AppLayout>
  );
};

// Main App Component
const App = () => {
  return (
    <Router>
      <AuthProvider authService={mockAuthService}>
        <NotificationProvider notificationService={mockNotificationService}>
          <AppRoutes />
        </NotificationProvider>
      </AuthProvider>
    </Router>
  );
};

export default App;

// src/frontend/components/layout/AppLayout.tsx
import React, { useState, useEffect } from 'react';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import { useAuth, Permission, UserRole } from '../auth/UserAuth';

interface NavigationItem {
  name: string;
  path: string;
  icon: React.ReactNode;
  requiredPermission?: Permission;
  children?: NavigationItem[];
}

interface AppLayoutProps {
  children: React.ReactNode;
}

export const AppLayout: React.FC<AppLayoutProps> = ({ children }) => {
  const { user, isAuthenticated, logout } = useAuth();
  const location = useLocation();
  const navigate = useNavigate();
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [isUserMenuOpen, setIsUserMenuOpen] = useState(false);
  const [isNotificationsOpen, setIsNotificationsOpen] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [expandedItems, setExpandedItems] = useState<string[]>([]);

  useEffect(() => {
    // Close sidebar on route change for mobile
    setIsSidebarOpen(false);
    setIsMobileMenuOpen(false);
  }, [location.pathname]);

  // Toggle expanded state of navigation item
  const toggleExpanded = (itemName: string) => {
    if (expandedItems.includes(itemName)) {
      setExpandedItems(expandedItems.filter(name => name !== itemName));
    } else {
      setExpandedItems([...expandedItems, itemName]);
    }
  };

  // Handle logout
  const handleLogout = async () => {
    try {
      await logout();
      navigate('/login');
    } catch (error) {
      console.error('Logout failed:', error);
    }
  };

  // Navigation items based on user role and permissions
  const navigationItems: NavigationItem[] = [
    {
      name: 'Dashboard',
      path: '/',
      icon: (
        <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
        </svg>
      )
    },
    {
      name: 'Syllabus',
      path: '/syllabus',
      icon: (
        <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
        </svg>
      ),
      requiredPermission: Permission.EDIT_SYLLABUS,
      children: [
        {
          name: 'Builder',
          path: '/syllabus/builder',
          icon: (
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
          )
        },
        {
          name: 'Templates',
          path: '/syllabus/templates',
          icon: (
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
            </svg>
          )
        },
        {
          name: 'Customization',
          path: '/syllabus/customization',
          icon: (
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
            </svg>
          )
        }
      ]
    },
    {
      name: 'Documents',
      path: '/documents',
      icon: (
        <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
        </svg>
      ),
      requiredPermission: Permission.UPLOAD_DOCUMENTS,
      children: [
        {
          name: 'Upload',
          path: '/documents/upload',
          icon: (
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0l-4 4m4-4v12"></path>
            </svg>
          )
        },
        {
          name: 'Library',
          path: '/documents/library',
          icon: (
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"></path>
            </svg>
          )
        },
        {
          name: 'Viewer',
          path: '/documents/viewer',
          icon: (
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
            </svg>
          )
        }
      ]
    },
    {
      name: 'Assessment',
      path: '/assessment',
      icon: (
        <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path>
        </svg>
      ),
      requiredPermission: Permission.CREATE_ASSESSMENT,
      children: [
        {
          name: 'Create',
          path: '/assessment/create',
          icon: (
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
          )
        },
        {
          name: 'Grade',
          path: '/assessment/grade',
          icon: (
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
            </svg>
          ),
          requiredPermission: Permission.GRADE_ASSESSMENT
        },
        {
          name: 'History',
          path: '/assessment/history',
          icon: (
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          )
        }
      ]
    },
    {
      name: 'Simulator',
      path: '/simulator',
      icon: (
        <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5.636 18.364a9 9 0 010-12.728m12.728 0a9 9 0 010 12.728m-9.9-2.829a5 5 0 010-7.07m7.072 0a5 5 0 010 7.07M13 12a1 1 0 11-2 0 1 1 0 012 0z"></path>
        </svg>
      ),
      children: [
        {
          name: 'Connect',
          path: '/simulator/connect',
          icon: (
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
            </svg>
          )
        },
        {
          name: 'Scenarios',
          path: '/simulator/scenarios',
          icon: (
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
            </svg>
          )
        },
        {
          name: 'Results',
          path: '/simulator/results',
          icon: (
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
            </svg>
          )
        }
      ]
    },
    {
      name: 'Compliance',
      path: '/compliance',
      icon: (
        <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
        </svg>
      ),
      requiredPermission: Permission.CHECK_COMPLIANCE,
      children: [
        {
          name: 'Requirements',
          path: '/compliance/requirements',
          icon: (
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
            </svg>
          )
        },
        {
          name: 'Validation',
          path: '/compliance/validation',
          icon: (
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
            </svg>
          )
        },
        {
          name: 'Reports',
          path: '/compliance/reports',
          icon: (
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
          )
        }
      ]
    },
    {
      name: 'Analytics',
      path: '/analytics',
      icon: (
        <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
        </svg>
      ),
      requiredPermission: Permission.VIEW_ANALYTICS,
      children: [
        {
          name: 'Dashboard',
          path: '/analytics/dashboard',
          icon: (
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 8v8m-4-5v5m-4-2v2m-2 4h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
            </svg>
          )
        },
        {
          name: 'Reports',
          path: '/analytics/reports',
          icon: (
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
          ),
          requiredPermission: Permission.EXPORT_REPORTS
        },
        {
          name: 'Trainees',
          path: '/analytics/trainees',
          icon: (
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
            </svg>
          )
        }
      ]
    }
  ];

  // Admin-specific navigation items
  const adminNavigationItems: NavigationItem[] = [
    {
      name: 'Users',
      path: '/admin/users',
      icon: (
        <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"></path>
        </svg>
      ),
      requiredPermission: Permission.MANAGE_USERS
    },
    {
      name: 'Settings',
      path: '/admin/settings',
      icon: (
        <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
        </svg>
      ),
      requiredPermission: Permission.MANAGE_USERS
    }
  ];

  // Filter navigation items based on user permissions
  const filteredNavigationItems = navigationItems.filter(item => 
    !item.requiredPermission || user?.permissions.includes(item.requiredPermission)
  );

  const filteredAdminNavigationItems = adminNavigationItems.filter(item => 
    !item.requiredPermission || user?.permissions.includes(item.requiredPermission)
  );

  // Render navigation item
  const renderNavItem = (item: NavigationItem, mobile: boolean = false) => {
    const isActive = location.pathname === item.path || 
                    (item.children && item.children.some(child => location.pathname === child.path));
    const hasChildren = item.children && item.children.length > 0;
    const isExpanded = expandedItems.includes(item.name);
    
    const navItemClasses = `
      ${isActive ? 'bg-gray-100 text-blue-600' : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'}
      group flex items-center px-2 py-2 text-sm font-medium rounded-md transition-colors
    `;
    
    return (
      <div key={item.path}>
        <Link 
          to={hasChildren ? '#' : item.path}
          className={navItemClasses}
          onClick={hasChildren ? (e) => {
            e.preventDefault();
            toggleExpanded(item.name);
          } : undefined}
        >
          <div className={`${isActive ? 'text-blue-600' : 'text-gray-400 group-hover:text-gray-500'} mr-3 flex-shrink-0`}>
            {item.icon}
          </div>
          <div className="flex-grow">{item.name}</div>
          {hasChildren && (
            <div className={`ml-auto transform transition-transform ${isExpanded ? 'rotate-90' : ''}`}>
              <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </div>
          )}
        </Link>
        
        {hasChildren && isExpanded && (
          <div className="ml-8 mt-1 space-y-1">
            {item.children?.filter(child => 
              !child.requiredPermission || user?.permissions.includes(child.requiredPermission)
            ).map(child => (
              <Link
                key={child.path}
                to={child.path}
                className={`
                  ${location.pathname === child.path ? 'bg-gray-50 text-blue-600' : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'}
                  group flex items-center px-2 py-2 text-sm font-medium rounded-md transition-colors
                `}
              >
                <div className={`${location.pathname === child.path ? 'text-blue-600' : 'text-gray-400 group-hover:text-gray-500'} mr-3 flex-shrink-0`}>
                  {child.icon}
                </div>
                <div className="flex-grow">{child.name}</div>
              </Link>
            ))}
          </div>
        )}
      </div>
    );
  };

  // If not authenticated, don't render the layout
  if (!isAuthenticated) {
    return <>{children}</>;
  }

  return (
    <div className="h-screen flex overflow-hidden bg-gray-100">
      {/* Sidebar for desktop */}
      <div className={`md:flex md:flex-shrink-0 ${isSidebarOpen ? 'flex' : 'hidden'}`}>
        <div className="flex flex-col w-64">
          <div className="flex flex-col h-0 flex-1 border-r border-gray-200 bg-white">
            <div className="flex items-center h-16 flex-shrink-0 px-4 bg-blue-600">
              <Link to="/" className="flex items-center">
                <svg className="h-8 w-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span className="ml-2 text-white text-lg font-bold">Pilot Training</span>
              </Link>
            </div>
            <div className="flex-1 flex flex-col overflow-y-auto">
              <nav className="flex-1 px-2 py-4 space-y-1">
                {filteredNavigationItems.map(item => renderNavItem(item))}
                
                {filteredAdminNavigationItems.length > 0 && (
                  <>
                    <div className="pt-2 mt-2 border-t border-gray-200">
                      <h3 className="px-3 text-xs font-semibold text-gray-500 uppercase tracking-wider">
                        Administration
                      </h3>
                    </div>
                    {filteredAdminNavigationItems.map(item => renderNavItem(item))}
                  </>
                )}
              </nav>
            </div>
          </div>
        </div>
      </div>

      {/* Main content */}
      <div className="flex flex-col w-0 flex-1 overflow-hidden">
        <div className="relative z-10 flex-shrink-0 flex h-16 bg-white shadow">
          <button
            type="button"
            className="px-4 border-r border-gray-200 text-gray-500 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500 md:hidden"
            onClick={() => setIsSidebarOpen(!isSidebarOpen)}
          >
            <span className="sr-only">Open sidebar</span>
            <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
          </button>
          <div className="flex-1 px-4 flex justify-between">
            <div className="flex-1 flex">
              <div className="w-full flex md:ml-0">
                <div className="relative w-full text-gray-400 focus-within:text-gray-600">
                  <div className="absolute inset-y-0 left-0 flex items-center pointer-events-none">
                    <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                    </svg>
                  </div>
                  <input
                    className="block w-full h-full pl-8 pr-3 py-2 border-transparent text-gray-900 placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-0 focus:border-transparent sm:text-sm"
                    placeholder="Search..."
                    type="search"
                  />
                </div>
              </div>
            </div>
            <div className="ml-4 flex items-center md:ml-6">
              {/* Notification dropdown */}
              <div className="relative">
                <button
                  type="button"
                  className="bg-white p-1 rounded-full text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  onClick={() => setIsNotificationsOpen(!isNotificationsOpen)}
                >
                  <span className="sr-only">View notifications</span>
                  <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"></path>
                  </svg>
                </button>
                {isNotificationsOpen && (
                  <div className="origin-top-right absolute right-0 mt-2 w-80 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 focus:outline-none">
                    <div className="px-4 py-2 border-b border-gray-200">
                      <h3 className="text-sm font-medium text-gray-900">Notifications</h3>
                    </div>
                    <div className="max-h-96 overflow-y-auto">
                      {/* Notification items would go here */}
                      <div className="p-4 text-center text-gray-500">
                        No new notifications.
                      </div>
                    </div>
                    <div className="border-t border-gray-200 px-4 py-2 text-sm">
                      <Link to="/notifications" className="text-blue-600 hover:text-blue-500">
                        View all notifications
                      </Link>
                    </div>
                  </div>
                )}
              </div>

              {/* Profile dropdown */}
              <div className="ml-3 relative">
                <div>
                  <button
                    type="button"
                    className="max-w-xs bg-white flex items-center text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                    onClick={() => setIsUserMenuOpen(!isUserMenuOpen)}
                  >
                    <span className="sr-only">Open user menu</span>
                    {user?.photoUrl ? (
                      <img
                        className="h-8 w-8 rounded-full"
                        src={user.photoUrl}
                        alt={`${user.firstName} ${user.lastName}`}
                      />
                    ) : (
                      <div className="h-8 w-8 rounded-full bg-blue-600 flex items-center justify-center">
                        <span className="text-white font-medium">
                          {user?.firstName?.[0]}{user?.lastName?.[0]}
                        </span>
                      </div>
                    )}
                  </button>
                </div>

                {isUserMenuOpen && (
                  <div className="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 focus:outline-none">
                    <div className="px-4 py-2 border-b border-gray-200">
                      <p className="text-sm font-medium text-gray-900">
                        {user?.firstName} {user?.lastName}
                      </p>
                      <p className="text-xs text-gray-500">{user?.email}</p>
                    </div>
                    <Link
                      to="/profile"
                      className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                    >
                      Your Profile
                    </Link>
                    <Link
                      to="/settings"
                      className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                    >
                      Settings
                    </Link>
                    <button
                      onClick={handleLogout}
                      className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                    >
                      Sign out
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Mobile menu */}
        <div className={`md:hidden ${isMobileMenuOpen ? 'block' : 'hidden'}`}>
          <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3">
            {filteredNavigationItems.map(item => renderNavItem(item, true))}
          </div>
        </div>

        {/* Page content */}
        <main className="flex-1 relative overflow-y-auto focus:outline-none">
          <div className="py-6">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 md:px-8">
              {children}
            </div>
          </div>
        </main>
      </div>
    </div>
  );
};

// src/frontend/App.tsx
import React from 'react';
import { AuthProvider } from './components/auth/UserAuth';
import { NotificationProvider } from './components/notifications/NotificationSystem';
import AppRoutes from './routes/Routes';
import { ThemeProvider } from './theme/Theme';

// Mock authentication service for demo purposes
const authService = {
  login: async (username: string, password: string) => {
    // Simulate network request
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // In a real app, this would make an API call
    if (username === 'admin' && password === 'password') {
      return {
        id: '1',
        username: 'admin',
        email: 'admin@example.com',
        firstName: 'Admin',
        lastName: 'User',
        role: 'admin',
        permissions: [
          'view_dashboard',
          'edit_syllabus',
          'approve_syllabus',
          'create_assessment',
          'grade_assessment',
          'manage_users',
          'view_analytics',
          'export_reports',
          'check_compliance',
          'upload_documents'
        ],
        lastLogin: new Date()
      };
    }
    
    if (username === 'instructor' && password === 'password') {
      return {
        id: '2',
        username: 'instructor',
        email: 'instructor@example.com',
        firstName: 'Instructor',
        lastName: 'User',
        role: 'instructor',
        permissions: [
          'view_dashboard',
          'create_assessment',
          'grade_assessment',
          'view_analytics'
        ],
        lastLogin: new Date()
      };
    }
    
    if (username === 'trainee' && password === 'password') {
      return {
        id: '3',
        username: 'trainee',
        email: 'trainee@example.com',
        firstName: 'Trainee',
        lastName: 'User',
        role: 'trainee',
        permissions: [
          'view_dashboard'
        ],
        lastLogin: new Date()
      };
    }
    
    throw new Error('Invalid credentials');
  },
  
  logout: async () => {
    // Simulate network request
    await new Promise(resolve => setTimeout(resolve, 300));
    // In a real app, this would make an API call to invalidate session
    return;
  },
  
  forgotPassword: async (email: string) => {
    // Simulate network request
    await new Promise(resolve => setTimeout(resolve, 500));
    // In a real app, this would trigger a password reset email
    if (!email) {
      throw new Error('Email is required');
    }
    return;
  },
  
  updateProfile: async (userId: string, updates: any) => {
    // Simulate network request
    await new Promise(resolve => setTimeout(resolve, 500));
    // In a real app, this would update the user profile in the backend
    return {
      ...updates,
      id: userId
    };
  },
  
  changePassword: async (userId: string, currentPassword: string, newPassword: string) => {
    // Simulate network request
    await new Promise(resolve => setTimeout(resolve, 500));
    // In a real app, this would verify current password and update to new password
    if (currentPassword === 'wrong') {
      throw new Error('Current password is incorrect');
    }
    return;
  },
  
  uploadProfilePhoto: async (userId: string, file: File) => {
    // Simulate network request
    await new Promise(resolve => setTimeout(resolve, 1000));
    // In a real app, this would upload the file and return the URL
    return 'https://example.com/photos/profile.jpg';
  },
  
  getCurrentUser: async () => {
    // Simulate network request
    await new Promise(resolve => setTimeout(resolve, 300));
    // In a real app, this would check for an active session
    // and return the user data if authenticated
    
    // For demo purposes, return null (not authenticated)
    return null;
  }
};

// Mock notification service for demo purposes
const notificationService = {
  getNotifications: async () => {
    // Simulate network request
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Return mock notifications
    return [
      {
        id: '1',
        title: 'New Assessment Assigned',
        message: 'You have been assigned a new assessment to complete by June 15th.',
        type: 'info',
        createdAt: new Date(Date.now() - 3600000), // 1 hour ago
        category: 'Assessment',
        source: 'System'
      },
      {
        id: '2',
        title: 'Compliance Check Failed',
        message: 'Your recent syllabus update does not meet regulatory compliance. Please review the issues.',
        type: 'error',
        createdAt: new Date(Date.now() - 86400000), // 1 day ago
        readAt: new Date(Date.now() - 43200000), // 12 hours ago
        category: 'Compliance',
        source: 'System',
        link: '/compliance/check/123'
      },
      {
        id: '3',
        title: 'Training Session Reminder',
        message: 'Your scheduled training session starts tomorrow at 10:00 AM.',
        type: 'warning',
        createdAt: new Date(Date.now() - 172800000), // 2 days ago
        category: 'Schedule',
        source: 'System'
      }
    ];
  },
  
  markAsRead: async (id: string) => {
    // Simulate network request
    await new Promise(resolve => setTimeout(resolve, 300));
    // In a real app, this would update the notification status in the backend
    return;
  },
  
  markAllAsRead: async () => {
    // Simulate network request
    await new Promise(resolve => setTimeout(resolve, 300));
    // In a real app, this would update all notifications status in the backend
    return;
  },
  
  deleteNotification: async (id: string) => {
    // Simulate network request
    await new Promise(resolve => setTimeout(resolve, 300));
    // In a real app, this would delete the notification in the backend
    return;
  },
  
  clearAll: async () => {
    // Simulate network request
    await new Promise(resolve => setTimeout(resolve, 300));
    // In a real app, this would delete all notifications in the backend
    return;
  },
  
  subscribeToNotifications: (callback: (notification: any) => void) => {
    // In a real app, this would set up a WebSocket or long polling
    // to receive real-time notifications
    
    // For demo purposes, simulate a new notification every 30 seconds
    const interval = setInterval(() => {
      const mockNotification = {
        id: `new-${Date.now()}`,
        title: 'New System Update',
        message: 'The system has been updated with new features. Check it out!',
        type: 'info',
        createdAt: new Date(),
        category: 'System',
        source: 'System'
      };
      
      callback(mockNotification);
    }, 30000);
    
    // Return cleanup function
    return () => clearInterval(interval);
  }
};

const App: React.FC = () => {
  return (
    <ThemeProvider>
      <AuthProvider authService={authService}>
        <NotificationProvider notificationService={notificationService}>
          <AppRoutes />
        </NotificationProvider>
      </AuthProvider>
    </ThemeProvider>
  );
};

export default App;
// src/frontend/routes/Routes.tsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { useAuth, Permission, ProtectedRoute } from '../components/auth/UserAuth';
import { AppLayout } from '../components/layout/AppLayout';

// Auth Pages
import { LoginForm } from '../components/auth/UserAuth';

// Dashboard Pages
import { MainDashboard } from '../components/dashboard/MainDashboard';

// Syllabus Pages
import { SyllabusBuilder } from '../components/syllabus/SyllabusBuilder';
import { SyllabusCustomization } from '../components/syllabus/SyllabusCustomization';

// Document Pages
import { DocumentManagement } from '../components/document/DocumentManagement';
import { DocumentViewer } from '../components/document/DocumentViewer';

// Assessment Pages
import { AssessmentInterface } from '../components/assessment/AssessmentInterface';

// Simulator Pages
import { SimulatorIntegration } from '../components/simulator/SimulatorIntegration';

// Compliance Pages
import { ComplianceEngine } from '../components/compliance/ComplianceEngine';

// Analytics Pages
import { AnalyticsDashboard } from '../components/analytics/AnalyticsDashboard';

// Instructor Pages
import { InstructorDashboard } from '../components/instructor/InstructorDashboard';

// Trainee Pages
import { TraineePerformance } from '../components/trainee/TraineePerformance';

// User Pages
import { UserProfile } from '../components/auth/UserAuth';

// Notification Pages
import { NotificationPage } from '../components/notifications/NotificationSystem';

const AppRoutes: React.FC = () => {
  const { isAuthenticated, user } = useAuth();

  return (
    <Router>
      <Routes>
        {/* Public Routes */}
        <Route path="/login" element={
          !isAuthenticated 
            ? <LoginForm onLogin={() => {}} onForgotPassword={() => {}} isLoading={false} />
            : <Navigate to="/" replace />
        } />
        
        {/* Protected Routes */}
        <Route path="/" element={
          <ProtectedRoute>
            <AppLayout>
              <MainDashboard 
                recentActivities={[]}
                notifications={[]}
                onNotificationRead={() => Promise.resolve()}
                onNotificationClear={() => Promise.resolve()}
                onAllNotificationsRead={() => Promise.resolve()}
              />
            </AppLayout>
          </ProtectedRoute>
        } />
        
        {/* Syllabus Routes */}
        <Route path="/syllabus" element={
          <ProtectedRoute requiredPermissions={[Permission.EDIT_SYLLABUS]}>
            <AppLayout>
              <Navigate to="/syllabus/builder" replace />
            </AppLayout>
          </ProtectedRoute>
        } />
        
        <Route path="/syllabus/builder" element={
          <ProtectedRoute requiredPermissions={[Permission.EDIT_SYLLABUS]}>
            <AppLayout>
              <SyllabusBuilder 
                syllabusElements={[]}
                onSave={() => {}}
                onElementEdit={() => {}}
                onCheckCompliance={() => {}}
              />
            </AppLayout>
          </ProtectedRoute>
        } />
        
        <Route path="/syllabus/customization" element={
          <ProtectedRoute requiredPermissions={[Permission.EDIT_SYLLABUS]}>
            <AppLayout>
              <SyllabusCustomization 
                elements={[]}
                templates={[]}
                complianceRequirements={[]}
                exercises={[]}
                versions={[]}
                onSave={() => Promise.resolve()}
                onApplyTemplate={() => Promise.resolve([])}
                onCheckCompliance={() => Promise.resolve({} as any)}
                onCreateVersion={() => Promise.resolve()}
                onBulkEdit={() => Promise.resolve()}
              />
            </AppLayout>
          </ProtectedRoute>
        } />
        
        {/* Document Routes */}
        <Route path="/documents" element={
          <ProtectedRoute requiredPermissions={[Permission.UPLOAD_DOCUMENTS]}>
            <AppLayout>
              <Navigate to="/documents/library" replace />
            </AppLayout>
          </ProtectedRoute>
        } />
        
        <Route path="/documents/library" element={
          <ProtectedRoute requiredPermissions={[Permission.UPLOAD_DOCUMENTS]}>
            <AppLayout>
              <DocumentManagement 
                documents={[]}
                onUpload={() => Promise.resolve()}
                onDelete={() => Promise.resolve()}
                onPreview={() => {}}
                onProcess={() => Promise.resolve()}
                onCategorize={() => Promise.resolve()}
                onTagsUpdate={() => Promise.resolve()}
              />
            </AppLayout>
          </ProtectedRoute>
        } />
        
        <Route path="/documents/viewer/:id" element={
          <ProtectedRoute requiredPermissions={[Permission.UPLOAD_DOCUMENTS]}>
            <AppLayout>
              <DocumentViewer 
                documentId=""
                metadata={{
                  title: "",
                  totalPages: 0,
                  fileType: "",
                  fileSize: 0
                }}
                pages={[]}
                onAnnotationCreate={() => Promise.resolve({} as any)}
                onAnnotationUpdate={() => Promise.resolve()}
                onAnnotationDelete={() => Promise.resolve()}
              />
            </AppLayout>
          </ProtectedRoute>
        } />
        
        {/* Assessment Routes */}
        <Route path="/assessment" element={
          <ProtectedRoute requiredPermissions={[Permission.CREATE_ASSESSMENT]}>
            <AppLayout>
              <Navigate to="/assessment/list" replace />
            </AppLayout>
          </ProtectedRoute>
        } />
        
        <Route path="/assessment/grade/:id" element={
          <ProtectedRoute requiredPermissions={[Permission.GRADE_ASSESSMENT]}>
            <AppLayout>
              <AssessmentInterface 
                trainee={{
                  id: "",
                  name: ""
                }}
                assessmentForm={{
                  id: "",
                  name: "",
                  description: "",
                  competencies: [],
                  categories: []
                }}
                onSave={() => Promise.resolve()}
                onCompare={() => {}}
                instructor={{
                  id: "",
                  name: ""
                }}
              />
            </AppLayout>
          </ProtectedRoute>
        } />
        
        {/* Simulator Routes */}
        <Route path="/simulator" element={
          <ProtectedRoute>
            <AppLayout>
              <SimulatorIntegration 
                onConnect={() => Promise.resolve()}
                onDisconnect={() => Promise.resolve()}
                onStart={() => Promise.resolve()}
                onStop={() => Promise.resolve()}
                onPause={() => Promise.resolve()}
                onResume={() => Promise.resolve()}
                onReset={() => Promise.resolve()}
                onParameterChange={() => Promise.resolve()}
                connectionStatus="disconnected"
                parameters={[]}
                events={[]}
                scenarios={[]}
                isRunning={false}
                isPaused={false}
              />
            </AppLayout>
          </ProtectedRoute>
        } />
        
        {/* Compliance Routes */}
        <Route path="/compliance" element={
          <ProtectedRoute requiredPermissions={[Permission.CHECK_COMPLIANCE]}>
            <AppLayout>
              <ComplianceEngine 
                frameworks={[]}
                trainingPrograms={[]}
                mappings={[]}
                reports={[]}
                onCheckCompliance={() => Promise.resolve({} as any)}
                onGenerateReport={() => Promise.resolve("")}
                onAddMapping={() => Promise.resolve()}
                onUpdateMapping={() => Promise.resolve()}
                onExportReport={() => Promise.resolve()}
              />
            </AppLayout>
          </ProtectedRoute>
        } />
        
        {/* Analytics Routes */}
        <Route path="/analytics" element={
          <ProtectedRoute requiredPermissions={[Permission.VIEW_ANALYTICS]}>
            <AppLayout>
              <AnalyticsDashboard 
                metrics={{
                  overallStats: {
                    activeTrainees: 0,
                    completedTrainees: 0,
                    avgProgramScore: 0,
                    complianceRate: 0
                  },
                  trainees: [],
                  programs: [],
                  complianceMetrics: []
                }}
                onGenerateReport={() => {}}
                onTraineeSelect={() => {}}
                onProgramSelect={() => {}}
                dateRange={{
                  startDate: new Date(),
                  endDate: new Date()
                }}
                onDateRangeChange={() => {}}
              />
            </AppLayout>
          </ProtectedRoute>
        } />
        
        {/* Instructor Routes */}
        <Route path="/instructor" element={
          <ProtectedRoute>
            <AppLayout>
              <InstructorDashboard 
                instructor={{
                  id: "",
                  name: ""
                }}
                trainingSessions={[]}
                assessments={[]}
                trainees={[]}
                onCreateSession={() => {}}
                onScheduleAssessment={() => {}}
                onGradeAssessment={() => {}}
                onViewSession={() => {}}
                onViewTrainee={() => {}}
                onExportTraineeReport={() => Promise.resolve()}
              />
            </AppLayout>
          </ProtectedRoute>
        } />
        
        {/* Trainee Routes */}
        <Route path="/trainee/:id" element={
          <ProtectedRoute>
            <AppLayout>
              <TraineePerformance 
                trainee={{
                  id: "",
                  firstName: "",
                  lastName: "",
                  email: "",
                  status: "active",
                  enrolledPrograms: []
                }}
                programs={[]}
                progress={[]}
                assessments={[]}
                competencies={[]}
                metrics={[]}
                onExportReport={() => Promise.resolve()}
              />
            </AppLayout>
          </ProtectedRoute>
        } />
        
        {/* User Routes */}
        <Route path="/profile" element={
          <ProtectedRoute>
            <AppLayout>
              <UserProfile 
                user={{
                  id: "",
                  username: "",
                  email: "",
                  firstName: "",
                  lastName: "",
                  role: "trainee" as any,
                  permissions: []
                }}
                onUpdateProfile={() => Promise.resolve()}
                onChangePassword={() => Promise.resolve()}
                onUploadProfilePhoto={() => Promise.resolve("")}
              />
            </AppLayout>
          </ProtectedRoute>
        } />
        
        {/* Notification Routes */}
        <Route path="/notifications" element={
          <ProtectedRoute>
            <AppLayout>
              <NotificationPage 
                notifications={[]}
                onMarkAsRead={() => Promise.resolve()}
                onDelete={() => Promise.resolve()}
                onMarkAllAsRead={() => Promise.resolve()}
                onClearAll={() => Promise.resolve()}
                onFilter={() => {}}
                categories={[]}
              />
            </AppLayout>
          </ProtectedRoute>
        } />
        
        {/* Fallback Route */}
        <Route path="*" element={
          <Navigate to="/" replace />
        } />
      </Routes>
    </Router>
  );
};

export default AppRoutes;
// src/frontend/components/assessment/AssessmentCreator.tsx
import React, { useState } from 'react';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { Input } from '../ui/Input';
import { Alert } from '../ui/Alert';
import { Modal } from '../ui/Modal';

// Types
export interface AssessmentType {
  id: string;
  name: string;
  description: string;
  icon: string;
}

export interface CompetencyArea {
  id: string;
  name: string;
  description: string;
}

export interface AssessmentQuestion {
  id: string;
  type: 'multiple_choice' | 'true_false' | 'short_answer' | 'essay' | 'performance';
  text: string;
  points: number;
  options?: string[];
  correctAnswer?: string | string[];
  competencyId?: string;
  rubric?: {
    criteria: string;
    excellent: string;
    proficient: string;
    basic: string;
    unsatisfactory: string;
  }[];
}

export interface Assessment {
  id: string;
  title: string;
  description: string;
  type: string;
  timeLimit?: number; // in minutes
  passingScore: number;
  totalPoints: number;
  questions: AssessmentQuestion[];
  instructions?: string;
  competencyAreas: string[];
  createdBy: string;
  createdAt: Date;
  updatedAt: Date;
  status: 'draft' | 'published' | 'archived';
}

// Question Type Selection Component
interface QuestionTypePickerProps {
  onSelectType: (type: AssessmentQuestion['type']) => void;
}

const QuestionTypePicker: React.FC<QuestionTypePickerProps> = ({ onSelectType }) => {
  const questionTypes = [
    {
      type: 'multiple_choice' as const,
      name: 'Multiple Choice',
      description: 'Select one or more correct answers from a list of options',
      icon: (
        <svg className="h-8 w-8 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
      )
    },
    {
      type: 'true_false' as const,
      name: 'True / False',
      description: 'Simple true or false questions',
      icon: (
        <svg className="h-8 w-8 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7l4-4m0 0l4 4m-4-4v18"></path>
        </svg>
      )
    },
    {
      type: 'short_answer' as const,
      name: 'Short Answer',
      description: 'Brief text responses, typically a few words or sentences',
      icon: (
        <svg className="h-8 w-8 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
        </svg>
      )
    },
    {
      type: 'essay' as const,
      name: 'Essay',
      description: 'Extended written responses requiring detailed explanation',
      icon: (
        <svg className="h-8 w-8 text-yellow-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
        </svg>
      )
    },
    {
      type: 'performance' as const,
      name: 'Performance Task',
      description: 'Hands-on demonstration of skills with a scoring rubric',
      icon: (
        <svg className="h-8 w-8 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
        </svg>
      )
    }
  ];

  return (
    <div className="space-y-4">
      <h3 className="text-lg font-medium">Select Question Type</h3>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
        {questionTypes.map((questionType) => (
          <div
            key={questionType.type}
            className="border rounded-lg p-4 hover:bg-gray-50 cursor-pointer"
            onClick={() => onSelectType(questionType.type)}
          >
            <div className="flex items-center mb-2">
              <div className="flex-shrink-0 mr-3">
                {questionType.icon}
              </div>
              <h4 className="text-lg font-medium">{questionType.name}</h4>
            </div>
            <p className="text-sm text-gray-500">{questionType.description}</p>
          </div>
        ))}
      </div>
    </div>
  );
};

// Question Editor Component
interface QuestionEditorProps {
  question: Partial<AssessmentQuestion>;
  onChange: (updatedQuestion: Partial<AssessmentQuestion>) => void;
  competencyAreas: CompetencyArea[];
  onSave: () => void;
  onCancel: () => void;
}

const QuestionEditor: React.FC<QuestionEditorProps> = ({
  question,
  onChange,
  competencyAreas,
  onSave,
  onCancel
}) => {
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = () => {
    // Validate question
    if (!question.text) {
      setError('Question text is required');
      return;
    }

    if (question.points === undefined || question.points <= 0) {
      setError('Points must be greater than 0');
      return;
    }

    if (question.type === 'multiple_choice' && (!question.options || question.options.length < 2)) {
      setError('Multiple choice questions must have at least 2 options');
      return;
    }

    if ((question.type === 'multiple_choice' || question.type === 'true_false') && !question.correctAnswer) {
      setError('Please specify the correct answer');
      return;
    }

    if (question.type === 'performance' && (!question.rubric || question.rubric.length === 0)) {
      setError('Performance tasks must have at least one rubric criterion');
      return;
    }

    onSave();
  };

  const handleAddOption = () => {
    const options = [...(question.options || []), ''];
    onChange({ ...question, options });
  };

  const handleOptionChange = (index: number, value: string) => {
    const options = [...(question.options || [])];
    options[index] = value;
    onChange({ ...question, options });
  };

  const handleRemoveOption = (index: number) => {
    const options = [...(question.options || [])];
    options.splice(index, 1);
    onChange({ ...question, options });
  };

  const handleAddRubricCriterion = () => {
    const rubric = [
      ...(question.rubric || []),
      {
        criteria: '',
        excellent: '',
        proficient: '',
        basic: '',
        unsatisfactory: ''
      }
    ];
    onChange({ ...question, rubric });
  };

  const handleRubricChange = (index: number, field: string, value: string) => {
    const rubric = [...(question.rubric || [])];
    rubric[index] = { ...rubric[index], [field]: value };
    onChange({ ...question, rubric });
  };

  const handleRemoveRubricCriterion = (index: number) => {
    const rubric = [...(question.rubric || [])];
    rubric.splice(index, 1);
    onChange({ ...question, rubric });
  };

  return (
    <div className="space-y-6">
      {error && <Alert type="error" message={error} onClose={() => setError(null)} />}

      <div>
        <label htmlFor="question-text" className="block text-sm font-medium text-gray-700 mb-1">
          Question Text
        </label>
        <textarea
          id="question-text"
          className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          rows={3}
          value={question.text || ''}
          onChange={(e) => onChange({ ...question, text: e.target.value })}
          placeholder="Enter your question here..."
        />
      </div>

      <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
        <div>
          <label htmlFor="question-points" className="block text-sm font-medium text-gray-700 mb-1">
            Points
          </label>
          <input
            type="number"
            id="question-points"
            className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            value={question.points || ''}
            onChange={(e) => onChange({ ...question, points: Number(e.target.value) })}
            min="1"
          />
        </div>

        <div>
          <label htmlFor="question-competency" className="block text-sm font-medium text-gray-700 mb-1">
            Competency Area
          </label>
          <select
            id="question-competency"
            className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            value={question.competencyId || ''}
            onChange={(e) => onChange({ ...question, competencyId: e.target.value })}
          >
            <option value="">None</option>
            {competencyAreas.map((competency) => (
              <option key={competency.id} value={competency.id}>
                {competency.name}
              </option>
            ))}
          </select>
        </div>
      </div>

      {/* Question type specific fields */}
      {question.type === 'multiple_choice' && (
        <div>
          <div className="flex justify-between items-center mb-2">
            <label className="block text-sm font-medium text-gray-700">Answer Options</label>
            <Button
              variant="outline"
              size="small"
              onClick={handleAddOption}
            >
              Add Option
            </Button>
          </div>

          <div className="space-y-2">
            {(question.options || []).map((option, index) => (
              <div key={index} className="flex items-center space-x-2">
                <input
                  type="radio"
                  id={`option-${index}`}
                  name="correct-answer"
                  className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
                  checked={question.correctAnswer === option}
                  onChange={() => onChange({ ...question, correctAnswer: option })}
                />
                <input
                  type="text"
                  className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  value={option}
                  onChange={(e) => handleOptionChange(index, e.target.value)}
                  placeholder={`Option ${index + 1}`}
                />
                <button
                  type="button"
                  className="text-red-500 hover:text-red-700"
                  onClick={() => handleRemoveOption(index)}
                >
                  <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                  </svg>
                </button>
              </div>
            ))}
          </div>
        </div>
      )}

      {question.type === 'true_false' && (
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Correct Answer</label>
          <div className="flex space-x-4">
            <div className="flex items-center">
              <input
                type="radio"
                id="answer-true"
                name="correct-answer"
                className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
                checked={question.correctAnswer === 'true'}
                onChange={() => onChange({ ...question, correctAnswer: 'true' })}
              />
              <label htmlFor="answer-true" className="ml-2 block text-sm text-gray-900">
                True
              </label>
            </div>
            <div className="flex items-center">
              <input
                type="radio"
                id="answer-false"
                name="correct-answer"
                className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
                checked={question.correctAnswer === 'false'}
                onChange={() => onChange({ ...question, correctAnswer: 'false' })}
              />
              <label htmlFor="answer-false" className="ml-2 block text-sm text-gray-900">
                False
              </label>
            </div>
          </div>
        </div>
      )}

      {question.type === 'short_answer' && (
        <div>
          <label htmlFor="model-answer" className="block text-sm font-medium text-gray-700 mb-1">
            Model Answer (for grading reference)
          </label>
          <textarea
            id="model-answer"
            className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            rows={2}
            value={question.correctAnswer as string || ''}
            onChange={(e) => onChange({ ...question, correctAnswer: e.target.value })}
            placeholder="Enter a model answer..."
          />
        </div>
      )}

      {question.type === 'essay' && (
        <div>
          <label htmlFor="grading-guidelines" className="block text-sm font-medium text-gray-700 mb-1">
            Grading Guidelines
          </label>
          <textarea
            id="grading-guidelines"
            className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            rows={3}
            value={question.correctAnswer as string || ''}
            onChange={(e) => onChange({ ...question, correctAnswer: e.target.value })}
            placeholder="Enter guidelines for grading this essay question..."
          />
        </div>
      )}

      {question.type === 'performance' && (
        <div>
          <div className="flex justify-between items-center mb-2">
            <label className="block text-sm font-medium text-gray-700">Rubric Criteria</label>
            <Button
              variant="outline"
              size="small"
              onClick={handleAddRubricCriterion}
            >
              Add Criterion
            </Button>
          </div>

          <div className="space-y-4">
            {(question.rubric || []).map((criterion, index) => (
              <div key={index} className="border rounded-md p-4">
                <div className="flex justify-between items-start mb-2">
                  <input
                    type="text"
                    className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    value={criterion.criteria}
                    onChange={(e) => handleRubricChange(index, 'criteria', e.target.value)}
                    placeholder="Criterion name"
                  />
                  <button
                    type="button"
                    className="ml-2 text-red-500 hover:text-red-700"
                    onClick={() => handleRemoveRubricCriterion(index)}
                  >
                    <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                    </svg>
                  </button>
                </div>

                <div className="grid grid-cols-1 gap-2 mt-2">
                  <div>
                    <label className="block text-xs font-medium text-gray-700">Excellent</label>
                    <input
                      type="text"
                      className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-xs"
                      value={criterion.excellent}
                      onChange={(e) => handleRubricChange(index, 'excellent', e.target.value)}
                      placeholder="Description of excellent performance"
                    />
                  </div>
                  <div>
                    <label className="block text-xs font-medium text-gray-700">Proficient</label>
                    <input
                      type="text"
                      className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-xs"
                      value={criterion.proficient}
                      onChange={(e) => handleRubricChange(index, 'proficient', e.target.value)}
                      placeholder="Description of proficient performance"
                    />
                  </div>
                  <div>
                    <label className="block text-xs font-medium text-gray-700">Basic</label>
                    <input
                      type="text"
                      className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-xs"
                      value={criterion.basic}
                      onChange={(e) => handleRubricChange(index, 'basic', e.target.value)}
                      placeholder="Description of basic performance"
                    />
                  </div>
                  <div>
                    <label className="block text-xs font-medium text-gray-700">Unsatisfactory</label>
                    <input
                      type="text"
                      className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-xs"
                      value={criterion.unsatisfactory}
                      onChange={(e) => handleRubricChange(index, 'unsatisfactory', e.target.value)}
                      placeholder="Description of unsatisfactory performance"
                    />
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      <div className="flex justify-end space-x-2">
        <Button
          variant="outline"
          onClick={onCancel}
        >
          Cancel
        </Button>
        <Button
          variant="primary"
          onClick={handleSubmit}
        >
          Save Question
        </Button>
      </div>
    </div>
  );
};

// Question Preview Component
interface QuestionPreviewProps {
  question: AssessmentQuestion;
  competencyAreas: CompetencyArea[];
  onEdit: () => void;
  onDelete: () => void;
}

const QuestionPreview: React.FC<QuestionPreviewProps> = ({
  question,
  competencyAreas,
  onEdit,
  onDelete
}) => {
  const getQuestionTypeLabel = (type: string) => {
    switch (type) {
      case 'multiple_choice':
        return 'Multiple Choice';
      case 'true_false':
        return 'True/False';
      case 'short_answer':
        return 'Short Answer';
      case 'essay':
        return 'Essay';
      case 'performance':
        return 'Performance Task';
      default:
        return type;
    }
  };

  const competency = competencyAreas.find(c => c.id === question.competencyId);

  return (
    <div className="border rounded-lg p-4 mb-4 hover:bg-gray-50">
      <div className="flex justify-between">
        <div className="flex items-start">
          <span className="inline-flex items-center justify-center h-6 w-6 rounded-full bg-blue-100 text-blue-800 text-xs font-medium mr-2">
            {question.points}
          </span>
          <div>
            <p className="font-medium">{question.text}</p>
            <p className="text-sm text-gray-500 mt-1">
              {getQuestionTypeLabel(question.type)}
              {competency && ` | ${competency.name}`}
            </p>
          </div>
        </div>
        <div className="flex space-x-2">
          <button
            className="text-blue-500 hover:text-blue-700"
            onClick={onEdit}
          >
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
            </svg>
          </button>
          <button
            className="text-red-500 hover:text-red-700"
            onClick={onDelete}
          >
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
            </svg>
          </button>
        </div>
      </div>

      <div className="mt-3">
        {question.type === 'multiple_choice' && question.options && (
          <ul className="space-y-1">
            {question.options.map((option, index) => (
              <li key={index} className="flex items-center">
                <input
                  type="radio"
                  className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
                  checked={question.correctAnswer === option}
                  readOnly
                />
                <span className="ml-2 text-sm">{option}</span>
                {question.correctAnswer === option && (
                  <span className="ml-2 text-xs text-green-600">✓ Correct</span>
                )}
              </li>
            ))}
          </ul>
        )}

        {question.type === 'true_false' && (
          <div className="flex space-x-4">
            <div className="flex items-center">
              <input
                type="radio"
                className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
                checked={question.correctAnswer === 'true'}
                readOnly
              />
              <span className="ml-2 text-sm">True</span>
              {question.correctAnswer === 'true' && (
                <span className="ml-2 text-xs text-green-600">✓ Correct</span>
              )}
            </div>
            <div className="flex items-center">
              <input
                type="radio"
                className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
                checked={question.correctAnswer === 'false'}
                readOnly
              />
              <span className="ml-2 text-sm">False</span>
              {question.correctAnswer === 'false' && (
                <span className="ml-2 text-xs text-green-600">✓ Correct</span>
              )}
            </div>
          </div>
        )}

        {question.type === 'short_answer' && (
          <div className="mt-2">
            <p className="text-xs text-gray-500">Model Answer:</p>
            <p className="text-sm">{question.correctAnswer as string}</p>
          </div>
        )}

        {question.type === 'essay' && (
          <div className="mt-2">
            <p className="text-xs text-gray-500">Grading Guidelines:</p>
            <p className="text-sm">{question.correctAnswer as string}</p>
          </div>
        )}

        {question.type === 'performance' && question.rubric && (
          <div className="mt-2">
            <p className="text-xs text-gray-500 mb-1">Rubric Criteria:</p>
            <div className="space-y-2 text-sm">
              {question.rubric.map((criterion, index) => (
                <div key={index} className="border-l-2 border-blue-500 pl-2">
                  <p className="font-medium">{criterion.criteria}</p>
                  <p className="text-xs"><span className="font-medium">Excellent:</span> {criterion.excellent}</p>
                  <p className="text-xs"><span className="font-medium">Proficient:</span> {criterion.proficient}</p>
                  <p className="text-xs"><span className="font-medium">Basic:</span> {criterion.basic}</p>
                  <p className="text-xs"><span className="font-medium">Unsatisfactory:</span> {criterion.unsatisfactory}</p>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

// Main Assessment Creator Component
interface AssessmentCreatorProps {
  assessmentTypes: AssessmentType[];
  competencyAreas: CompetencyArea[];
  initialAssessment?: Partial<Assessment>;
  onSave: (assessment: Assessment) => Promise<void>;
  onCancel: () => void;
}

export const AssessmentCreator: React.FC<AssessmentCreatorProps> = ({
  assessmentTypes,
  competencyAreas,
  initialAssessment,
  onSave,
  onCancel
}) => {
  const [assessment, setAssessment] = useState<Partial<Assessment>>(
    initialAssessment || {
      title: '',
      description: '',
      type: '',
      passingScore: 70,
      totalPoints: 0,
      questions: [],
      competencyAreas: [],
      status: 'draft'
    }
  );

  const [currentStep, setCurrentStep] = useState<'details' | 'questions' | 'preview'>(
    initialAssessment ? 'questions' : 'details'
  );
  
  const [showAddQuestion, setShowAddQuestion] = useState(false);
  const [currentQuestion, setCurrentQuestion] = useState<Partial<AssessmentQuestion> | null>(null);
  const [editingQuestionIndex, setEditingQuestionIndex] = useState<number | null>(null);
  const [alertMessage, setAlertMessage] = useState<{ type: 'success' | 'error'; message: string } | null>(null);

  // Calculate total points
  useEffect(() => {
    if (assessment.questions) {
      const totalPoints = assessment.questions.reduce((sum, q) => sum + q.points, 0);
      setAssessment(prev => ({ ...prev, totalPoints }));
    }
  }, [assessment.questions]);

  // Handle assessment details change
  const handleDetailsChange = (field: string, value: any) => {
    setAssessment(prev => ({ ...prev, [field]: value }));
  };

  // Handle competency areas change
  const handleCompetencyAreasChange = (competencyId: string, checked: boolean) => {
    let competencyAreasList = [...(assessment.competencyAreas || [])];
    
    if (checked) {
      competencyAreasList.push(competencyId);
    } else {
      competencyAreasList = competencyAreasList.filter(id => id !== competencyId);
    }
    
    setAssessment(prev => ({ ...prev, competencyAreas: competencyAreasList }));
  };

  // Handle question type selection
  const handleQuestionTypeSelect = (type: AssessmentQuestion['type']) => {
    setCurrentQuestion({
      type,
      text: '',
      points: 1,
      options: type === 'multiple_choice' ? ['', ''] : undefined,
      rubric: type === 'performance' ? [{ criteria: '', excellent: '', proficient: '', basic: '', unsatisfactory: '' }] : undefined
    });
    setShowAddQuestion(false);
  };

  // Handle question change
  const handleQuestionChange = (updatedQuestion: Partial<AssessmentQuestion>) => {
    setCurrentQuestion(updatedQuestion);
  };

  // Handle save question
  const handleSaveQuestion = () => {
    const questions = [...(assessment.questions || [])];
    
    if (editingQuestionIndex !== null) {
      questions[editingQuestionIndex] = {
        ...questions[editingQuestionIndex],
        ...currentQuestion,
        id: questions[editingQuestionIndex].id
      } as AssessmentQuestion;
    } else {
      questions.push({
        ...currentQuestion,
        id: `question-${Date.now()}`
      } as AssessmentQuestion);
    }
    
    setAssessment(prev => ({ ...prev, questions }));
    setCurrentQuestion(null);
    setEditingQuestionIndex(null);
  };

  // Handle edit question
  const handleEditQuestion = (index: number) => {
    setCurrentQuestion(assessment.questions?.[index]);
    setEditingQuestionIndex(index);
  };

  // Handle delete question
  const handleDeleteQuestion = (index: number) => {
    const questions = [...(assessment.questions || [])];
    questions.splice(index, 1);
    setAssessment(prev => ({ ...prev, questions }));
  };

  // Handle save assessment
  const handleSaveAssessment = async () => {
    // Validate assessment
    if (!assessment.title) {
      setAlertMessage({
        type: 'error',
        message: 'Assessment title is required'
      });
      return;
    }

    if (!assessment.type) {
      setAlertMessage({
        type: 'error',
        message: 'Assessment type is required'
      });
      return;
    }

    if (!assessment.questions || assessment.questions.length === 0) {
      setAlertMessage({
        type: 'error',
        message: 'Assessment must have at least one question'
      });
      return;
    }

    try {
      await onSave(assessment as Assessment);
      setAlertMessage({
        type: 'success',
        message: 'Assessment saved successfully'
      });
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to save assessment: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };

  // Render step content
  const renderStepContent = () => {
    switch (currentStep) {
      case 'details':
        return (
          <div className="space-y-6">
            <div>
              <label htmlFor="assessment-title" className="block text-sm font-medium text-gray-700 mb-1">
                Assessment Title
              </label>
              <input
                type="text"
                id="assessment-title"
                className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                value={assessment.title || ''}
                onChange={(e) => handleDetailsChange('title', e.target.value)}
                placeholder="Enter assessment title..."
              />
            </div>

            <div>
              <label htmlFor="assessment-description" className="block text-sm font-medium text-gray-700 mb-1">
                Description
              </label>
              <textarea
                id="assessment-description"
                className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                rows={3}
                value={assessment.description || ''}
                onChange={(e) => handleDetailsChange('description', e.target.value)}
                placeholder="Enter assessment description..."
              />
            </div>

            <div>
              <label htmlFor="assessment-type" className="block text-sm font-medium text-gray-700 mb-1">
                Assessment Type
              </label>
              <select
                id="assessment-type"
                className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                value={assessment.type || ''}
                onChange={(e) => handleDetailsChange('type', e.target.value)}
              >
                <option value="">Select assessment type</option>
                {assessmentTypes.map((type) => (
                  <option key={type.id} value={type.id}>
                    {type.name}
                  </option>
                ))}
              </select>
            </div>

            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div>
                <label htmlFor="assessment-time-limit" className="block text-sm font-medium text-gray-700 mb-1">
                  Time Limit (minutes, optional)
                </label>
                <input
                  type="number"
                  id="assessment-time-limit"
                  className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  value={assessment.timeLimit || ''}
                  onChange={(e) => handleDetailsChange('timeLimit', e.target.value ? Number(e.target.value) : undefined)}
                  min="1"
                />
              </div>

              <div>
                <label htmlFor="assessment-passing-score" className="block text-sm font-medium text-gray-700 mb-1">
                  Passing Score (%)
                </label>
                <input
                  type="number"
                  id="assessment-passing-score"
                  className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  value={assessment.passingScore || 70}
                  onChange={(e) => handleDetailsChange('passingScore', Number(e.target.value))}
                  min="1"
                  max="100"
                />
              </div>
            </div>

            <div>
              <label htmlFor="assessment-instructions" className="block text-sm font-medium text-gray-700 mb-1">
                Instructions (optional)
              </label>
              <textarea
                id="assessment-instructions"
                className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                rows={3}
                value={assessment.instructions || ''}
                onChange={(e) => handleDetailsChange('instructions', e.target.value)}
                placeholder="Enter instructions for trainees..."
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Competency Areas Covered
              </label>
              <div className="max-h-60 overflow-y-auto border rounded-md p-2">
                {competencyAreas.map((competency) => (
                  <div key={competency.id} className="flex items-start p-2">
                    <input
                      type="checkbox"
                      id={`competency-${competency.id}`}
                      className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded mt-1"
                      checked={(assessment.competencyAreas || []).includes(competency.id)}
                      onChange={(e) => handleCompetencyAreasChange(competency.id, e.target.checked)}
                    />
                    <label htmlFor={`competency-${competency.id}`} className="ml-2 text-sm text-gray-900">
                      <div className="font-medium">{competency.name}</div>
                      <div className="text-xs text-gray-500">{competency.description}</div>
                    </label>
                  </div>
                ))}
              </div>
            </div>
          </div>
        );
      
      case 'questions':
        return (
          <div>
            {/* Question list */}
            <div className="mb-6">
              {assessment.questions && assessment.questions.length > 0 ? (
                <div>
                  <h3 className="text-lg font-medium mb-4">Assessment Questions</h3>
                  {assessment.questions.map((question, index) => (
                    <QuestionPreview
                      key={question.id}
                      question={question}
                      competencyAreas={competencyAreas}
                      onEdit={() => handleEditQuestion(index)}
                      onDelete={() => handleDeleteQuestion(index)}
                    />
                  ))}
                </div>
              ) : (
                <div className="text-center py-12 border-2 border-dashed border-gray-300 rounded-lg">
                  <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  <h3 className="mt-2 text-sm font-medium text-gray-900">No questions added</h3>
                  <p className="mt-1 text-sm text-gray-500">
                    Get started by adding your first question.
                  </p>
                </div>
              )}
            </div>

            {/* Add question button */}
            {!currentQuestion && (
              <div className="flex justify-center">
                <Button
                  variant="primary"
                  onClick={() => setShowAddQuestion(true)}
                >
                  Add Question
                </Button>
              </div>
            )}

            {/* Question type picker */}
            {showAddQuestion && (
              <Card>
                <QuestionTypePicker onSelectType={handleQuestionTypeSelect} />
              </Card>
            )}

            {/* Question editor */}
            {currentQuestion && (
              <Card>
                <QuestionEditor
                  question={currentQuestion}
                  onChange={handleQuestionChange}
                  competencyAreas={competencyAreas}
                  onSave={handleSaveQuestion}
                  onCancel={() => {
                    setCurrentQuestion(null);
                    setEditingQuestionIndex(null);
                  }}
                />
              </Card>
            )}
          </div>
        );
      
      case 'preview':
        return (
          <div className="space-y-6">
            <div className="border rounded-lg p-6">
              <div className="flex justify-between items-start mb-4">
                <div>
                  <h2 className="text-xl font-bold">{assessment.title}</h2>
                  <p className="text-gray-500">{assessment.description}</p>
                </div>
                <div className="text-right">
                  <p className="font-medium">
                    Total Points: {assessment.totalPoints}
                  </p>
                  <p className="text-sm text-gray-500">
                    Passing Score: {assessment.passingScore}%
                  </p>
                  {assessment.timeLimit && (
                    <p className="text-sm text-gray-500">
                      Time Limit: {assessment.timeLimit} minutes
                    </p>
                  )}
                </div>
              </div>

              {assessment.instructions && (
                <div className="mb-6 bg-blue-50 p-4 rounded-md">
                  <h3 className="text-sm font-medium text-blue-800 mb-1">Instructions</h3>
                  <p className="text-sm text-blue-800">{assessment.instructions}</p>
                </div>
              )}

              <div className="mb-6">
                <h3 className="text-lg font-medium mb-2">Competency Areas Covered</h3>
                <div className="flex flex-wrap gap-2">
                  {assessment.competencyAreas?.map(areaId => {
                    const area = competencyAreas.find(c => c.id === areaId);
                    return area ? (
                      <span key={area.id} className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                        {area.name}
                      </span>
                    ) : null;
                  })}
                </div>
              </div>

              <div>
                <h3 className="text-lg font-medium mb-4">Questions</h3>
                {assessment.questions?.map((question, index) => (
                  <div key={question.id} className="mb-6">
                    <div className="flex items-center mb-2">
                      <span className="inline-flex items-center justify-center h-6 w-6 rounded-full bg-blue-100 text-blue-800 text-xs font-medium mr-2">
                        {index + 1}
                      </span>
                      <h4 className="text-base font-medium">{question.text}</h4>
                      <span className="ml-auto text-sm font-medium text-gray-500">
                        {question.points} points
                      </span>
                    </div>

                    <div className="ml-8">
                      {question.type === 'multiple_choice' && question.options && (
                        <ul className="space-y-2">
                          {question.options.map((option, optIndex) => (
                            <li key={optIndex} className="flex items-center">
                              <input
                                type="radio"
                                className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
                                disabled
                              />
                              <span className="ml-2 text-sm">{option}</span>
                            </li>
                          ))}
                        </ul>
                      )}

                      {question.type === 'true_false' && (
                        <div className="flex space-x-4">
                          <div className="flex items-center">
                            <input
                              type="radio"
                              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
                              disabled
                            />
                            <span className="ml-2 text-sm">True</span>
                          </div>
                          <div className="flex items-center">
                            <input
                              type="radio"
                              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
                              disabled
                            />
                            <span className="ml-2 text-sm">False</span>
                          </div>
                        </div>
                      )}

                      {question.type === 'short_answer' && (
                        <div className="border border-gray-300 rounded-md p-2 h-24 bg-gray-50"></div>
                      )}

                      {question.type === 'essay' && (
                        <div className="border border-gray-300 rounded-md p-2 h-36 bg-gray-50"></div>
                      )}

                      {question.type === 'performance' && (
                        <div className="border border-gray-300 rounded-md p-2 bg-gray-50">
                          <p className="text-sm text-gray-500">
                            Performance task evaluation will be conducted by an instructor using the defined rubric.
                          </p>
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        );
    }
  };

  return (
    <div className="assessment-creator">
      {alertMessage && (
        <Alert
          type={alertMessage.type}
          message={alertMessage.message}
          onClose={() => setAlertMessage(null)}
        />
      )}

      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900">Create Assessment</h1>
        <p className="text-gray-500">
          {currentStep === 'details'
            ? 'Enter the basic details for this assessment'
            : currentStep === 'questions'
            ? 'Add questions to your assessment'
            : 'Review your assessment before saving'}
        </p>
      </div>

      {/* Step indicator */}
      <div className="mb-8">
        <div className="flex items-center justify-between">
          <div
            className={`flex items-center ${
              currentStep === 'details' ? 'text-blue-600' : 'text-gray-500'
            }`}
          >
            <div
              className={`flex items-center justify-center h-8 w-8 rounded-full ${
                currentStep === 'details' ? 'bg-blue-100' : 'bg-gray-100'
              }`}
            >
              <span className="text-sm font-medium">1</span>
            </div>
            <span className="ml-2 text-sm font-medium">Details</span>
          </div>
          <div className="flex-1 mx-4 h-0.5 bg-gray-200"></div>
          <div
            className={`flex items-center ${
              currentStep === 'questions' ? 'text-blue-600' : 'text-gray-500'
            }`}
          >
            <div
              className={`flex items-center justify-center h-8 w-8 rounded-full ${
                currentStep === 'questions' ? 'bg-blue-100' : 'bg-gray-100'
              }`}
            >
              <span className="text-sm font-medium">2</span>
            </div>
            <span className="ml-2 text-sm font-medium">Questions</span>
          </div>
          <div className="flex-1 mx-4 h-0.5 bg-gray-200"></div>
          <div
            className={`flex items-center ${
              currentStep === 'preview' ? 'text-blue-600' : 'text-gray-500'
            }`}
          >
            <div
              className={`flex items-center justify-center h-8 w-8 rounded-full ${
                currentStep === 'preview' ? 'bg-blue-100' : 'bg-gray-100'
              }`}
            >
              <span className="text-sm font-medium">3</span>
            </div>
            <span className="ml-2 text-sm font-medium">Preview</span>
          </div>
        </div>
      </div>

      <Card className="mb-6">
        {renderStepContent()}
      </Card>

      {/* Navigation buttons */}
      <div className="flex justify-between">
        <div>
          {currentStep !== 'details' && (
            <Button
              variant="outline"
              onClick={() => setCurrentStep(currentStep === 'questions' ? 'details' : 'questions')}
            >
              Previous
            </Button>
          )}
        </div>
        <div className="flex space-x-2">
          <Button
            variant="outline"
            onClick={onCancel}
          >
            Cancel
          </Button>
          {currentStep !== 'preview' ? (
            <Button
              variant="primary"
              onClick={() => setCurrentStep(currentStep === 'details' ? 'questions' : 'preview')}
              disabled={
                (currentStep === 'details' && (!assessment.title || !assessment.type)) ||
                (currentStep === 'questions' && (!assessment.questions || assessment.questions.length === 0))
              }
            >
              Next
            </Button>
          ) : (
            <Button
              variant="primary"
              onClick={handleSaveAssessment}
            >
              Save Assessment
            </Button>
          )}
        </div>
      </div>
    </div>
  );
};

// src/frontend/components/assessment/AssessmentInterface.tsx
import React, { useState, useEffect, useRef } from 'react';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { Tabs, Tab } from '../ui/Tabs';
import { Alert } from '../ui/Alert';

// Types
export enum CompetencyLevel {
  UNSATISFACTORY = 1,
  BASIC = 2,
  PROFICIENT = 3,
  EXEMPLARY = 4
}

export interface Competency {
  id: string;
  name: string;
  description: string;
  category: string;
}

export interface TraineePerformance {
  traineeId: string;
  traineeName: string;
  assessmentId: string;
  date: Date;
  competencyScores: {
    competencyId: string;
    score: CompetencyLevel;
    notes?: string;
  }[];
  overallScore?: number;
  instructorId: string;
  instructorName: string;
  signatureData?: string;
  isSynced: boolean;
}

export interface AssessmentForm {
  id: string;
  name: string;
  description: string;
  competencies: Competency[];
  categories: string[];
}

// Helper components
interface CompetencyRatingProps {
  competency: Competency;
  currentScore?: CompetencyLevel;
  onChange: (competencyId: string, score: CompetencyLevel) => void;
  onNotesChange: (competencyId: string, notes: string) => void;
  notes?: string;
}

const CompetencyRating: React.FC<CompetencyRatingProps> = ({
  competency,
  currentScore,
  onChange,
  onNotesChange,
  notes = ''
}) => {
  const handleScoreChange = (score: CompetencyLevel) => {
    onChange(competency.id, score);
  };

  const handleNotesChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    onNotesChange(competency.id, e.target.value);
  };

  // Define level descriptions
  const levelDescriptions = {
    [CompetencyLevel.UNSATISFACTORY]: 'Unsatisfactory - Below standards, requires significant improvement',
    [CompetencyLevel.BASIC]: 'Basic - Meets minimum standards, but needs improvement',
    [CompetencyLevel.PROFICIENT]: 'Proficient - Consistently meets standards with occasional guidance',
    [CompetencyLevel.EXEMPLARY]: 'Exemplary - Exceeds standards, demonstrates mastery'
  };

  // Get color for each level
  const getLevelColor = (level: CompetencyLevel, isSelected: boolean) => {
    const baseClasses = 'px-3 py-2 text-sm font-medium rounded focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors';
    
    if (!isSelected) {
      return `${baseClasses} bg-gray-100 text-gray-700 hover:bg-gray-200`;
    }
    
    switch (level) {
      case CompetencyLevel.UNSATISFACTORY:
        return `${baseClasses} bg-red-600 text-white`;
      case CompetencyLevel.BASIC:
        return `${baseClasses} bg-yellow-500 text-white`;
      case CompetencyLevel.PROFICIENT:
        return `${baseClasses} bg-green-500 text-white`;
      case CompetencyLevel.EXEMPLARY:
        return `${baseClasses} bg-blue-600 text-white`;
    }
  };

  return (
    <div className="mb-6 p-4 border rounded-lg">
      <div className="mb-2">
        <h3 className="text-lg font-medium">{competency.name}</h3>
        <p className="text-sm text-gray-500 mb-1">Category: {competency.category}</p>
        <p className="text-sm">{competency.description}</p>
      </div>

      <div className="my-4">
        <p className="text-sm font-medium mb-2">Rating:</p>
        <div className="flex flex-wrap gap-2">
          {Object.values(CompetencyLevel)
            .filter(v => !isNaN(Number(v)))
            .map(level => (
              <button
                key={level}
                className={getLevelColor(level as CompetencyLevel, currentScore === level)}
                onClick={() => handleScoreChange(level as CompetencyLevel)}
                title={levelDescriptions[level as CompetencyLevel]}
              >
                {level}
              </button>
            ))}
        </div>
      </div>

      <div>
        <label htmlFor={`notes-${competency.id}`} className="block text-sm font-medium text-gray-700 mb-1">
          Notes
        </label>
        <textarea
          id={`notes-${competency.id}`}
          rows={2}
          className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          placeholder="Add specific observations or feedback..."
          value={notes}
          onChange={handleNotesChange}
        />
      </div>
    </div>
  );
};

// Signature Pad component
interface SignaturePadProps {
  onChange: (signatureData: string) => void;
  existingSignature?: string;
}

const SignaturePad: React.FC<SignaturePadProps> = ({ onChange, existingSignature }) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [isDrawing, setIsDrawing] = useState(false);
  const [hasSignature, setHasSignature] = useState(!!existingSignature);

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const context = canvas.getContext('2d');
    if (!context) return;

    // Clear canvas
    context.fillStyle = 'white';
    context.fillRect(0, 0, canvas.width, canvas.height);

    // Draw existing signature if provided
    if (existingSignature) {
      const img = new Image();
      img.onload = () => {
        context.drawImage(img, 0, 0);
      };
      img.src = existingSignature;
      setHasSignature(true);
    }

  }, [existingSignature]);

  const startDrawing = (e: React.MouseEvent<HTMLCanvasElement>) => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const context = canvas.getContext('2d');
    if (!context) return;

    const rect = canvas.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;

    context.beginPath();
    context.moveTo(x, y);
    setIsDrawing(true);
  };

  const draw = (e: React.MouseEvent<HTMLCanvasElement>) => {
    if (!isDrawing) return;
    
    const canvas = canvasRef.current;
    if (!canvas) return;

    const context = canvas.getContext('2d');
    if (!context) return;

    const rect = canvas.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;

    context.lineWidth = 2;
    context.lineCap = 'round';
    context.strokeStyle = 'black';

    context.lineTo(x, y);
    context.stroke();
  };

  const endDrawing = () => {
    setIsDrawing(false);
    
    const canvas = canvasRef.current;
    if (!canvas) return;

    // Save canvas data
    const signatureData = canvas.toDataURL('image/png');
    onChange(signatureData);
    setHasSignature(true);
  };

  const clearSignature = () => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const context = canvas.getContext('2d');
    if (!context) return;

    context.fillStyle = 'white';
    context.fillRect(0, 0, canvas.width, canvas.height);
    
    onChange('');
    setHasSignature(false);
  };

  return (
    <div className="signature-pad">
      <p className="text-sm text-gray-500 mb-2">Sign below to certify this assessment:</p>
      
      <div className="border rounded-md overflow-hidden mb-2">
        <canvas
          ref={canvasRef}
          width={600}
          height={150}
          onMouseDown={startDrawing}
          onMouseMove={draw}
          onMouseUp={endDrawing}
          onMouseLeave={endDrawing}
          className="bg-white cursor-crosshair w-full"
        />
      </div>
      
      <div className="flex justify-end">
        <Button
          variant="outline"
          size="small"
          onClick={clearSignature}
          disabled={!hasSignature}
        >
          Clear Signature
        </Button>
      </div>
    </div>
  );
};

// Performance Trends Chart (placeholder)
interface PerformanceTrendsProps {
  traineeId: string;
  competencyId?: string;
}

const PerformanceTrends: React.FC<PerformanceTrendsProps> = ({ traineeId, competencyId }) => {
  // In a real implementation, this would fetch historical data and render a chart
  return (
    <div className="p-4 border rounded-lg">
      <h3 className="text-lg font-medium mb-4">Performance Trends</h3>
      <div className="h-64 bg-gray-100 flex items-center justify-center">
        <p className="text-gray-500">
          Performance trend chart would be displayed here.
          {competencyId ? ` Showing data for competency ${competencyId}.` : ' Showing average across all competencies.'}
        </p>
      </div>
    </div>
  );
};

// Main Assessment Interface Component
interface AssessmentInterfaceProps {
  trainee: {
    id: string;
    name: string;
    photo?: string;
  };
  assessmentForm: AssessmentForm;
  existingPerformance?: TraineePerformance;
  onSave: (performance: TraineePerformance) => Promise<void>;
  onCompare: (traineeId: string) => void;
  instructor: {
    id: string;
    name: string;
  };
  isOfflineMode?: boolean;
}

export const AssessmentInterface: React.FC<AssessmentInterfaceProps> = ({
  trainee,
  assessmentForm,
  existingPerformance,
  onSave,
  onCompare,
  instructor,
  isOfflineMode = false
}) => {
  const [activeCategory, setActiveCategory] = useState<string | 'all'>('all');
  const [scores, setScores] = useState<Record<string, CompetencyLevel>>({});
  const [notes, setNotes] = useState<Record<string, string>>({});
  const [signature, setSignature] = useState<string>('');
  const [isSaving, setIsSaving] = useState(false);
  const [alertMessage, setAlertMessage] = useState<{ type: 'success' | 'error'; message: string } | null>(null);
  const [showTrends, setShowTrends] = useState(false);
  const [selectedCompetencyId, setSelectedCompetencyId] = useState<string | undefined>(undefined);

  // Initialize state from existing performance data if available
  useEffect(() => {
    if (existingPerformance) {
      const initialScores: Record<string, CompetencyLevel> = {};
      const initialNotes: Record<string, string> = {};
      
      existingPerformance.competencyScores.forEach(score => {
        initialScores[score.competencyId] = score.score;
        if (score.notes) {
          initialNotes[score.competencyId] = score.notes;
        }
      });
      
      setScores(initialScores);
      setNotes(initialNotes);
      
      if (existingPerformance.signatureData) {
        setSignature(existingPerformance.signatureData);
      }
    }
  }, [existingPerformance]);

  // Handle competency score change
  const handleScoreChange = (competencyId: string, score: CompetencyLevel) => {
    setScores(prev => ({
      ...prev,
      [competencyId]: score
    }));
  };

  // Handle notes change
  const handleNotesChange = (competencyId: string, note: string) => {
    setNotes(prev => ({
      ...prev,
      [competencyId]: note
    }));
  };

  // Calculate overall score
  const calculateOverallScore = (): number | undefined => {
    const scoredCompetencies = Object.keys(scores).length;
    if (scoredCompetencies === 0) return undefined;
    
    const totalScore = Object.values(scores).reduce((sum, score) => sum + score, 0);
    return Math.round((totalScore / scoredCompetencies) * 100) / 100;
  };

  // Check if assessment is complete
  const isAssessmentComplete = (): boolean => {
    // Check if all competencies have been scored
    return assessmentForm.competencies.every(comp => scores[comp.id] !== undefined);
  };

  // Save assessment
  const handleSave = async () => {
    if (!isAssessmentComplete() && !window.confirm('Not all competencies have been rated. Do you want to save anyway?')) {
      return;
    }
    
    setIsSaving(true);
    
    try {
      const performance: TraineePerformance = {
        traineeId: trainee.id,
        traineeName: trainee.name,
        assessmentId: assessmentForm.id,
        date: new Date(),
        competencyScores: assessmentForm.competencies.map(comp => ({
          competencyId: comp.id,
          score: scores[comp.id] || CompetencyLevel.UNSATISFACTORY,
          notes: notes[comp.id]
        })),
        overallScore: calculateOverallScore(),
        instructorId: instructor.id,
        instructorName: instructor.name,
        signatureData: signature,
        isSynced: !isOfflineMode
      };
      
      await onSave(performance);
      
      setAlertMessage({
        type: 'success',
        message: 'Assessment saved successfully.'
      });
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Error saving assessment: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    } finally {
      setIsSaving(false);
    }
  };

  // Filter competencies by category
  const filteredCompetencies = activeCategory === 'all' 
    ? assessmentForm.competencies
    : assessmentForm.competencies.filter(comp => comp.category === activeCategory);

  // Create tabs for categories
  const categoryTabs: Tab[] = [
    {
      id: 'all',
      label: 'All Categories',
      content: <></>
    },
    ...assessmentForm.categories.map(category => ({
      id: category,
      label: category,
      content: <></>
    }))
  ];

  // Calculate completion percentage
  const completionPercentage = Math.round(
    (Object.keys(scores).length / assessmentForm.competencies.length) * 100
  );

  // Time remaining warning (for demo purposes)
  const showTimeWarning = completionPercentage < 50;

  return (
    <div className="assessment-interface">
      {/* Alert message */}
      {alertMessage && (
        <Alert
          type={alertMessage.type}
          message={alertMessage.message}
          onClose={() => setAlertMessage(null)}
        />
      )}
      
      {/* Header with trainee info */}
      <Card className="mb-6">
        <div className="flex flex-col sm:flex-row">
          <div className="flex-shrink-0 mb-4 sm:mb-0 sm:mr-6">
            {trainee.photo ? (
              <img 
                src={trainee.photo} 
                alt={trainee.name} 
                className="h-24 w-24 rounded-full object-cover"
              />
            ) : (
              <div className="h-24 w-24 rounded-full bg-gray-200 flex items-center justify-center text-gray-500">
                <svg className="h-12 w-12" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                  <path fillRule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clipRule="evenodd" />
                </svg>
              </div>
            )}
          </div>
          
          <div className="flex-grow">
            <h2 className="text-2xl font-bold">{trainee.name}</h2>
            <p className="text-gray-500">Assessment: {assessmentForm.name}</p>
            <p className="text-gray-500">Instructor: {instructor.name}</p>
            <p className="text-gray-500">Date: {new Date().toLocaleDateString()}</p>
            
            {/* Completion status */}
            <div className="mt-2">
              <div className="flex items-center">
                <span className="text-sm font-medium text-gray-700 mr-2">Completion: {completionPercentage}%</span>
                <div className="w-48 bg-gray-200 rounded-full h-2.5">
                  <div 
                    className={`h-2.5 rounded-full ${
                      completionPercentage >= 100 ? 'bg-green-600' :
                      completionPercentage >= 50 ? 'bg-yellow-400' :
                      'bg-red-500'
                    }`}
                    style={{ width: `${completionPercentage}%` }}
                  ></div>
                </div>
              </div>
              
              {/* Time warning */}
              {showTimeWarning && (
                <p className="text-sm text-yellow-600 mt-1">
                  <svg className="inline-block w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                  </svg>
                  Assessment is less than 50% complete. Please complete all competencies.
                </p>
              )}
            </div>
          </div>
          
          <div className="flex-shrink-0 mt-4 sm:mt-0">
            <Button
              variant="outline"
              onClick={() => onCompare(trainee.id)}
              leftIcon={
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
              }
            >
              Compare Performance
            </Button>
          </div>
        </div>
      </Card>
      
      {/* Toggle between assessment and trends */}
      <div className="mb-6 flex">
        <Button
          variant={!showTrends ? 'primary' : 'outline'}
          onClick={() => setShowTrends(false)}
          className="mr-2"
        >
          Assessment Form
        </Button>
        <Button
          variant={showTrends ? 'primary' : 'outline'}
          onClick={() => setShowTrends(true)}
        >
          Performance Trends
        </Button>
      </div>
      
      {showTrends ? (
        <div>
          <Card className="mb-6">
            <div className="mb-4">
              <label htmlFor="competency-select" className="block text-sm font-medium text-gray-700 mb-1">
                Select Competency
              </label>
              <select
                id="competency-select"
                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={selectedCompetencyId || ''}
                onChange={(e) => setSelectedCompetencyId(e.target.value || undefined)}
              >
                <option value="">All Competencies (Average)</option>
                {assessmentForm.competencies.map(comp => (
                  <option key={comp.id} value={comp.id}>
                    {comp.name}
                  </option>
                ))}
              </select>
            </div>
            
            <PerformanceTrends 
              traineeId={trainee.id} 
              competencyId={selectedCompetencyId}
            />
          </Card>
        </div>
      ) : (
        <div>
          {/* Category tabs */}
          <div className="mb-6">
            <Tabs
              tabs={categoryTabs}
              defaultTabId="all"
              onChange={(tabId) => setActiveCategory(tabId)}
            />
          </div>
          
          {/* Competency rating forms */}
          <Card>
            <div className="mb-4">
              <h3 className="text-lg font-medium">Competency Ratings</h3>
              <p className="text-sm text-gray-500">
                Rate each competency on a scale of 1-4, with 1 being unsatisfactory and 4 being exemplary.
              </p>
            </div>
            
            {filteredCompetencies.length > 0 ? (
              <div>
                {filteredCompetencies.map(competency => (
                  <CompetencyRating
                    key={competency.id}
                    competency={competency}
                    currentScore={scores[competency.id]}
                    onChange={handleScoreChange}
                    onNotesChange={handleNotesChange}
                    notes={notes[competency.id] || ''}
                  />
                ))}
              </div>
            ) : (
              <p className="text-gray-500">No competencies found for this category.</p>
            )}
            
            {/* Signature pad */}
            <div className="mt-6 pt-6 border-t">
              <SignaturePad
                onChange={setSignature}
                existingSignature={signature}
              />
            </div>
            
            {/* Save button */}
            <div className="mt-6 flex justify-end">
              <Button
                variant="primary"
                onClick={handleSave}
                isLoading={isSaving}
                disabled={isSaving}
              >
                {isOfflineMode ? 'Save for Later Sync' : 'Save Assessment'}
              </Button>
            </div>
            
            {/* Offline mode indicator */}
            {isOfflineMode && (
              <div className="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded">
                <div className="flex">
                  <div className="flex-shrink-0">
                    <svg className="h-5 w-5 text-yellow-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                  </div>
                  <div className="ml-3">
                    <h3 className="text-sm font-medium text-yellow-800">Offline Mode Active</h3>
                    <div className="mt-2 text-sm text-yellow-700">
                      <p>
                        You're currently working offline. This assessment will be saved locally and synced when you reconnect to the internet.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </Card>
        </div>
      )}
    </div>
  );
};
// services/assessmentService.ts
import apiClient, { ApiResponse } from './api';

// Assessment type
export type AssessmentType = 'theoretical' | 'practical' | 'simulator' | 'checkride';

// Rating scale (1-4)
export type RatingScale = 1 | 2 | 3 | 4;

// Competency assessment
export interface CompetencyAssessment {
  id: string;
  competencyId: string;
  competencyName: string;
  rating: RatingScale;
  comments?: string;
  evidenceIds?: string[]; // References to evidence files
}

// Assessment status
export type AssessmentStatus = 
  'draft' | 
  'in_progress' | 
  'completed' | 
  'submitted' | 
  'approved' | 
  'rejected';

// Assessment item
export interface AssessmentItem {
  id: string;
  moduleId: string;
  moduleName: string;
  lessonId: string;
  lessonName: string;
  exerciseId: string;
  exerciseName: string;
  type: AssessmentType;
  status: AssessmentStatus;
  competencies: CompetencyAssessment[];
  overallRating?: RatingScale;
  instructorId: string;
  instructorName: string;
  traineeId: string;
  traineeName: string;
  createdAt: string;
  updatedAt: string;
  completedAt?: string;
  duration?: number; // in minutes
  location?: string;
  notes?: string;
  signature?: {
    instructorSignature: string;
    traineeSignature?: string;
    signedAt: string;
  };
  biometricData?: {
    heartRate?: number[];
    eyeTracking?: any;
    stressLevel?: number[];
    timestamps: string[];
  };
}

// New assessment request
export interface NewAssessmentRequest {
  moduleId: string;
  lessonId: string;
  exerciseId: string;
  type: AssessmentType;
  traineeId: string;
  instructorId?: string; // If not provided, current user is assumed
  scheduledDate?: string;
  duration?: number;
  location?: string;
}

// Assessment update request
export interface AssessmentUpdateRequest {
  status?: AssessmentStatus;
  competencies?: CompetencyAssessment[];
  overallRating?: RatingScale;
  notes?: string;
  completedAt?: string;
  duration?: number;
  location?: string;
}

// Assessment service
class AssessmentService {
  private readonly baseUrl = '/assessment';

  // Get all assessments
  async getAllAssessments(
    status?: AssessmentStatus,
    traineeId?: string,
    instructorId?: string,
    from?: string,
    to?: string,
    limit: number = 20,
    offset: number = 0
  ): Promise<{ assessments: AssessmentItem[]; total: number }> {
    const params: any = { limit, offset };
    if (status) params.status = status;
    if (traineeId) params.traineeId = traineeId;
    if (instructorId) params.instructorId = instructorId;
    if (from) params.from = from;
    if (to) params.to = to;
    
    const response = await apiClient.get<{ assessments: AssessmentItem[]; total: number }>(
      `${this.baseUrl}`,
      params
    );
    return response.data;
  }

  // Get assessment by ID
  async getAssessment(id: string): Promise<AssessmentItem> {
    const response = await apiClient.get<AssessmentItem>(`${this.baseUrl}/${id}`);
    return response.data;
  }

  // Create a new assessment
  async createAssessment(assessment: NewAssessmentRequest): Promise<AssessmentItem> {
    const response = await apiClient.post<AssessmentItem>(`${this.baseUrl}`, assessment);
    return response.data;
  }

  // Update an assessment
  async updateAssessment(id: string, updates: AssessmentUpdateRequest): Promise<AssessmentItem> {
    const response = await apiClient.put<AssessmentItem>(`${this.baseUrl}/${id}`, updates);
    return response.data;
  }

  // Submit an assessment for approval
  async submitAssessment(id: string, signature?: string): Promise<AssessmentItem> {
    const response = await apiClient.post<AssessmentItem>(
      `${this.baseUrl}/${id}/submit`,
      { signature }
    );
    return response.data;
  }

  // Approve an assessment (trainee signature)
  async approveAssessment(id: string, signature: string): Promise<AssessmentItem> {
    const response = await apiClient.post<AssessmentItem>(
      `${this.baseUrl}/${id}/approve`,
      { signature }
    );
    return response.data;
  }

  // Reject an assessment (trainee feedback)
  async rejectAssessment(id: string, reason: string): Promise<AssessmentItem> {
    const response = await apiClient.post<AssessmentItem>(
      `${this.baseUrl}/${id}/reject`,
      { reason }
    );
    return response.data;
  }

  // Upload evidence (photos, videos, documents)
  async uploadEvidence(
    assessmentId: string,
    competencyId: string,
    file: File,
    onProgress?: (percentage: number) => void
  ): Promise<{ id: string; fileUrl: string }> {
    const formData = new FormData();
    formData.append('file', file);
    
    const response = await apiClient.request<{ id: string; fileUrl: string }>({
      method: 'POST',
      url: `${this.baseUrl}/${assessmentId}/competency/${competencyId}/evidence`,
      data: formData,
      headers: {
        'Content-Type': 'multipart/form-data',
      },
      onUploadProgress: (progressEvent) => {
        if (onProgress && progressEvent.total) {
          const percentage = Math.round(
            (progressEvent.loaded * 100) / progressEvent.total
          );
          onProgress(percentage);
        }
      },
    });
    
    return response.data;
  }

  // Delete evidence
  async deleteEvidence(assessmentId: string, evidenceId: string): Promise<void> {
    await apiClient.delete(`${this.baseUrl}/${assessmentId}/evidence/${evidenceId}`);
  }

  // Add biometric data
  async addBiometricData(
    assessmentId: string,
    data: {
      heartRate?: number[];
      eyeTracking?: any;
      stressLevel?: number[];
      timestamps: string[];
    }
  ): Promise<AssessmentItem> {
    const response = await apiClient.post<AssessmentItem>(
      `${this.baseUrl}/${assessmentId}/biometrics`,
      data
    );
    return response.data;
  }

  // Get performance history for a trainee
  async getTraineePerformanceHistory(
    traineeId: string,
    competencyId?: string,
    limit: number = 10
  ): Promise<{
    assessments: AssessmentItem[];
    averageRating: number;
    trend: 'improving' | 'declining' | 'stable';
    changeRate: number;
  }> {
    const params: any = { limit };
    if (competencyId) params.competencyId = competencyId;
    
    const response = await apiClient.get<{
      assessments: AssessmentItem[];
      averageRating: number;
      trend: 'improving' | 'declining' | 'stable';
      changeRate: number;
    }>(`${this.baseUrl}/trainee/${traineeId}/history`, params);
    
    return response.data;
  }

  // Get assessment statistics
  async getAssessmentStatistics(
    traineeId?: string,
    instructorId?: string,
    from?: string,
    to?: string
  ): Promise<{
    totalAssessments: number;
    completedAssessments: number;
    averageRating: number;
    ratingDistribution: Record<RatingScale, number>;
    completionTime: { average: number; min: number; max: number };
    byType: Record<AssessmentType, number>;
  }> {
    const params: any = {};
    if (traineeId) params.traineeId = traineeId;
    if (instructorId) params.instructorId = instructorId;
    if (from) params.from = from;
    if (to) params.to = to;
    
    const response = await apiClient.get<{
      totalAssessments: number;
      completedAssessments: number;
      averageRating: number;
      ratingDistribution: Record<RatingScale, number>;
      completionTime: { average: number; min: number; max: number };
      byType: Record<AssessmentType, number>;
    }>(`${this.baseUrl}/statistics`, params);
    
    return response.data;
  }
}

export const assessmentService = new AssessmentService();
export default assessmentService;

// components/ui/Button.tsx
import React from 'react';

export type ButtonVariant = 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
export type ButtonSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl';

export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: ButtonVariant;
  size?: ButtonSize;
  isLoading?: boolean;
  leftIcon?: React.ReactNode;
  rightIcon?: React.ReactNode;
  fullWidth?: boolean;
  rounded?: boolean;
  outlined?: boolean;
}

const Button: React.FC<ButtonProps> = ({
  children,
  variant = 'primary',
  size = 'md',
  isLoading = false,
  leftIcon,
  rightIcon,
  fullWidth = false,
  rounded = false,
  outlined = false,
  className = '',
  disabled,
  ...props
}) => {
  // Base classes
  const baseClasses = 'inline-flex items-center justify-center font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 transition-all duration-200';
  
  // Size classes
  const sizeClasses = {
    xs: 'px-2 py-1 text-xs',
    sm: 'px-3 py-1.5 text-sm',
    md: 'px-4 py-2 text-base',
    lg: 'px-5 py-2.5 text-lg',
    xl: 'px-6 py-3 text-xl',
  };
  
  // Variant classes (solid)
  const variantClasses = {
    primary: outlined 
      ? 'border border-blue-600 text-blue-600 bg-transparent hover:bg-blue-50' 
      : 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500',
    secondary: outlined 
      ? 'border border-gray-600 text-gray-600 bg-transparent hover:bg-gray-50' 
      : 'bg-gray-600 text-white hover:bg-gray-700 focus:ring-gray-500',
    success: outlined 
      ? 'border border-green-600 text-green-600 bg-transparent hover:bg-green-50' 
      : 'bg-green-600 text-white hover:bg-green-700 focus:ring-green-500',
    danger: outlined 
      ? 'border border-red-600 text-red-600 bg-transparent hover:bg-red-50' 
      : 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500',
    warning: outlined 
      ? 'border border-yellow-500 text-yellow-600 bg-transparent hover:bg-yellow-50' 
      : 'bg-yellow-500 text-white hover:bg-yellow-600 focus:ring-yellow-500',
    info: outlined 
      ? 'border border-blue-400 text-blue-500 bg-transparent hover:bg-blue-50' 
      : 'bg-blue-400 text-white hover:bg-blue-500 focus:ring-blue-400',
    light: outlined 
      ? 'border border-gray-200 text-gray-700 bg-transparent hover:bg-gray-50' 
      : 'bg-gray-200 text-gray-800 hover:bg-gray-300 focus:ring-gray-200',
    dark: outlined 
      ? 'border border-gray-800 text-gray-800 bg-transparent hover:bg-gray-50' 
      : 'bg-gray-800 text-white hover:bg-gray-900 focus:ring-gray-700',
  };
  
  // Width and shape classes
  const widthClass = fullWidth ? 'w-full' : '';
  const roundedClass = rounded ? 'rounded-full' : 'rounded-md';
  
  // Disabled state
  const disabledClasses = (disabled || isLoading) 
    ? 'opacity-60 cursor-not-allowed' 
    : 'cursor-pointer';
  
  // Combine all classes
  const buttonClasses = `
    ${baseClasses}
    ${sizeClasses[size]}
    ${variantClasses[variant]}
    ${widthClass}
    ${roundedClass}
    ${disabledClasses}
    ${className}
  `;
  
  return (
    <button
      className={buttonClasses}
      disabled={disabled || isLoading}
      type={props.type || 'button'}
      {...props}
    >
      {isLoading && (
        <svg
          className="animate-spin -ml-1 mr-2 h-4 w-4"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
        >
          <circle
            className="opacity-25"
            cx="12"
            cy="12"
            r="10"
            stroke="currentColor"
            strokeWidth="4"
          ></circle>
          <path
            className="opacity-75"
            fill="currentColor"
            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
          ></path>
        </svg>
      )}
      
      {!isLoading && leftIcon && <span className="mr-2">{leftIcon}</span>}
      {children}
      {!isLoading && rightIcon && <span className="ml-2">{rightIcon}</span>}
    </button>
  );
};

export default Button;

// components/community/ScenarioMarketplace.tsx
import React, { useState } from 'react';
import {
  Box,
  Typography,
  Grid,
  Card,
  CardContent,
  CardActions,
  Button,
  Chip,
  TextField,
  InputAdornment,
  IconButton,
  Rating,
  Avatar,
  Divider,
  Menu,
  MenuItem,
  Tabs,
  Tab,
} from '@mui/material';
import {
  Search,
  FilterList,
  Star,
  StarBorder,
  Download,
  Share,
  Favorite,
  FavoriteBorder,
  CloudDownload,
  Sort,
  FlightTakeoff,
  School,
  Warning,
} from '@mui/icons-material';

interface Scenario {
  id: string;
  title: string;
  description: string;
  author: {
    id: string;
    name: string;
    avatar?: string;
    organization?: string;
  };
  category: string;
  tags: string[];
  difficulty: 1 | 2 | 3 | 4 | 5;
  rating: number;
  reviews: number;
  downloads: number;
  price: number | null; // null for free
  thumbnail?: string;
  isFavorite: boolean;
  isPurchased: boolean;
  aircraft: string[];
  createdAt: string;
  updatedAt: string;
}

export const ScenarioMarketplace: React.FC = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [filterAnchorEl, setFilterAnchorEl] = useState<null | HTMLElement>(null);
  const [sortAnchorEl, setSortAnchorEl] = useState<null | HTMLElement>(null);
  const [activeTab, setActiveTab] = useState(0);
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
  const [scenarios, setScenarios] = useState<Scenario[]>([
    {
      id: 'scenario-1',
      title: 'Engine Failure After Takeoff',
      description: 'Practice handling of engine failure shortly after takeoff from KJFK with deteriorating weather conditions.',
      author: {
        id: 'author-1',
        name: 'Capt. Sarah Johnson',
        organization: 'Global Training Academy',
      },
      category: 'Emergency',
      tags: ['Engine Failure', 'B737', 'EASA'],
      difficulty: 4,
      rating: 4.7,
      reviews: 128,
      downloads: 2345,
      price: null,
      isFavorite: true,
      isPurchased: true,
      aircraft: ['B737-800'],
      createdAt: '2023-06-15T14:30:00Z',
      updatedAt: '2023-07-10T09:15:00Z',
    },
    {
      id: 'scenario-2',
      title: 'Dual Hydraulic System Failure',
      description: 'Management of complex hydraulic failures requiring crew coordination and manual reversion techniques.',
      author: {
        id: 'author-2',
        name: 'John Miller',
        organization: 'Airbus Training Center',
      },
      category: 'Emergency',
      tags: ['Hydraulic Failure', 'A320', 'FAA'],
      difficulty: 5,
      rating: 4.9,
      reviews: 87,
      downloads: 1562,
      price: 24.99,
      isFavorite: false,
      isPurchased: false,
      aircraft: ['A320', 'A321'],
      createdAt: '2023-05-22T10:15:00Z',
      updatedAt: '2023-07-05T16:30:00Z',
    },
    {
      id: 'scenario-3',
      title: 'RNAV Approach with Low Visibility',
      description: 'Practice RNAV approaches in challenging weather conditions with various ATC scenarios.',
      author: {
        id: 'author-3',
        name: 'Maria Garcia',
        avatar: 'https://randomuser.me/api/portraits/women/42.jpg',
        organization: 'PrecisionFlight Academy',
      },
      category: 'Approach',
      tags: ['RNAV', 'Low Visibility', 'B777', 'ICAO'],
      difficulty: 3,
      rating: 4.5,
      reviews: 62,
      downloads: 1128,
      price: 19.99,
      isFavorite: true,
      isPurchased: true,
      aircraft: ['B777-300ER'],
      createdAt: '2023-04-10T09:45:00Z',
      updatedAt: '2023-06-22T11:20:00Z',
    },
    {
      id: 'scenario-4',
      title: 'CRM Challenging Scenarios Pack',
      description: 'Collection of scenarios designed to test crew resource management skills in challenging situations.',
      author: {
        id: 'author-1',
        name: 'Capt. Sarah Johnson',
        organization: 'Global Training Academy',
      },
      category: 'CRM',
      tags: ['CRM', 'Multi-crew', 'B737', 'A320', 'EASA'],
      difficulty: 4,
      rating: 4.8,
      reviews: 95,
      downloads: 1876,
      price: 39.99,
      isFavorite: false,
      isPurchased: false,
      aircraft: ['B737-800', 'A320'],
      createdAt: '2023-03-15T14:30:00Z',
      updatedAt: '2023-07-01T09:15:00Z',
    },
  ]);

  const handleFilterClick = (event: React.MouseEvent<HTMLElement>) => {
    setFilterAnchorEl(event.currentTarget);
  };

  const handleSortClick = (event: React.MouseEvent<HTMLElement>) => {
    setSortAnchorEl(event.currentTarget);
  };

  const handleCloseMenus = () => {
    setFilterAnchorEl(null);
    setSortAnchorEl(null);
  };

  const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue);
  };

  const handleCategorySelect = (category: string | null) => {
    setSelectedCategory(category);
    handleCloseMenus();
  };

  const handleToggleFavorite = (scenarioId: string) => {
    setScenarios(
      scenarios.map((scenario) =>
        scenario.id === scenarioId
          ? { ...scenario, isFavorite: !scenario.isFavorite }
          : scenario
      )
    );
  };

  const filteredScenarios = scenarios.filter((scenario) => {
    // Apply tab filters
    if (activeTab === 1 && !scenario.isPurchased) return false;
    if (activeTab === 2 && !scenario.isFavorite) return false;
    
    // Apply category filter
    if (selectedCategory && scenario.category !== selectedCategory) return false;
    
    // Apply search filter
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      return (
        scenario.title.toLowerCase().includes(query) ||
        scenario.description.toLowerCase().includes(query) ||
        scenario.tags.some((tag) => tag.toLowerCase().includes(query)) ||
        scenario.aircraft.some((aircraft) => aircraft.toLowerCase().includes(query))
      );
    }
    
    return true;
  });

  const difficultyLabels: Record<number, string> = {
    1: 'Very Easy',
    2: 'Easy',
    3: 'Moderate',
    4: 'Difficult',
    5: 'Very Difficult',
  };

  return (
    <Box>
      <Box className="flex justify-between items-center mb-6">
        <Typography variant="h5">Training Scenario Marketplace</Typography>
        <Button variant="contained" color="primary" startIcon={<FlightTakeoff />}>
          Submit New Scenario
        </Button>
      </Box>

      <Box className="mb-6">
        <Grid container spacing={3}>
          <Grid item xs={12} md={6}>
            <TextField
              fullWidth
              placeholder="Search scenarios..."
              variant="outlined"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <Search />
                  </InputAdornment>
                ),
              }}
            />
          </Grid>
          <Grid item xs={12} md={6}>
            <Box className="flex gap-2">
              <Button
                variant="outlined"
                startIcon={<FilterList />}
                onClick={handleFilterClick}
                fullWidth
              >
                {selectedCategory || 'All Categories'}
              </Button>
              <Button
                variant="outlined"
                startIcon={<Sort />}
                onClick={handleSortClick}
                fullWidth
              >
                Sort By: Popularity
              </Button>
            </Box>
          </Grid>
        </Grid>
      </Box>

      <Box className="mb-6">
        <Tabs value={activeTab} onChange={handleTabChange} variant="fullWidth">
          <Tab label="All Scenarios" />
          <Tab label="My Scenarios" />
          <Tab label="Favorites" />
        </Tabs>
      </Box>

      {filteredScenarios.length === 0 ? (
        <Box className="text-center py-12">
          <Typography variant="h6" color="textSecondary">
            No scenarios found matching your criteria
          </Typography>
          <Button
            variant="text"
            color="primary"
            onClick={() => {
              setSearchQuery('');
              setSelectedCategory(null);
              setActiveTab(0);
            }}
            className="mt-3"
          >
            Clear Filters
          </Button>
        </Box>
      ) : (
        <Grid container spacing={3}>
          {filteredScenarios.map((scenario) => (
            <Grid item xs={12} sm={6} lg={4} key={scenario.id}>
              <Card className="h-full flex flex-col">
                <Box 
                  className="h-48 bg-gray-200 relative"
                  style={{
                    backgroundImage: scenario.thumbnail ? `url(${scenario.thumbnail})` : 'none',
                    backgroundSize: 'cover',
                    backgroundPosition: 'center',
                  }}
                >
                  <Box className="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent flex flex-col justify-end p-3">
                    <Box className="flex justify-between items-center">
                      <Chip 
                        label={scenario.category} 
                        size="small" 
                        color="primary" 
                      />
                      <Box className="flex">
                        <IconButton 
                          size="small" 
                          className="text-white"
                          onClick={() => handleToggleFavorite(scenario.id)}
                        >
                          {scenario.isFavorite ? (
                            <Favorite className="text-red-500" />
                          ) : (
                            <FavoriteBorder className="text-white" />
                          )}
                        </IconButton>
                      </Box>
                    </Box>
                    <Typography variant="h6" className="text-white mt-1">
                      {scenario.title}
                    </Typography>
                  </Box>
                </Box>
                
                <CardContent className="flex-grow">
                  <Box className="flex items-center mb-2">
                    <Rating 
                      value={scenario.rating} 
                      precision={0.1} 
                      readOnly 
                      size="small"
                    />
                    <Typography variant="body2" color="textSecondary" className="ml-1">
                      ({scenario.reviews})
                    </Typography>
                    <Box className="flex-grow" />
                    <Chip 
                      label={difficultyLabels[scenario.difficulty]} 
                      size="small" 
                      color={
                        scenario.difficulty <= 2 ? 'success' :
                        scenario.difficulty === 3 ? 'info' :
                        'warning'
                      }
                    />
                  </Box>
                  
                  <Typography variant="body2" color="textSecondary" className="mb-3 line-clamp-3">
                    {scenario.description}
                  </Typography>
                  
                  <Box className="flex flex-wrap gap-1 mb-3">
                    {scenario.tags.slice(0, 3).map((tag) => (
                      <Chip 
                        key={tag}
                        label={tag}
                        size="small"
                        variant="outlined"
                      />
                    ))}
                    {scenario.tags.length > 3 && (
                      <Chip 
                        label={`+${scenario.tags.length - 3}`}
                        size="small"
                        variant="outlined"
                      />
                    )}
                  </Box>
                  
                  <Box className="flex items-center">
                    <Avatar 
                      src={scenario.author.avatar}
                      className="mr-2"
                      sx={{ width: 24, height: 24 }}
                    >
                      {scenario.author.name.charAt(0)}
                    </Avatar>
                    <Typography variant="body2" color="textSecondary">
                      {scenario.author.name}
                    </Typography>
                    
                    <Typography variant="caption" color="textSecondary" className="ml-auto">
                      {new Date(scenario.updatedAt).toLocaleDateString()}
                    </Typography>
                  </Box>
                </CardContent>
                
                <Divider />
                
                <CardActions>
                  <Box className="flex items-center mr-auto">
                    <CloudDownload fontSize="small" className="text-gray-500 mr-1" />
                    <Typography variant="body2" color="textSecondary">
                      {scenario.downloads}
                    </Typography>
                  </Box>
                  
                  <Typography 
                    variant="subtitle1" 
                    color="primary"
                    className="font-medium"
                  >
                    {scenario.price === null ? 'Free' : `$${scenario.price.toFixed(2)}`}
                  </Typography>
                  
                  <Button
                    variant="contained"
                    color="primary"
                    size="small"
                    startIcon={scenario.isPurchased ? <Download /> : undefined}
                  >
                    {scenario.isPurchased ? 'Download' : 'Purchase'}
                  </Button>
                </CardActions>
              </Card>
            </Grid>
          ))}
        </Grid>
      )}

      {/* Category Filter Menu */}
      <Menu
        anchorEl={filterAnchorEl}
        open={Boolean(filterAnchorEl)}
        onClose={handleCloseMenus}
      >
        <MenuItem 
          onClick={() => handleCategorySelect(null)}
          selected={selectedCategory === null}
        >
          All Categories
        </MenuItem>
        <Divider />
        <MenuItem 
          onClick={() => handleCategorySelect('Emergency')}
          selected={selectedCategory === 'Emergency'}
        >
          Emergency Procedures
        </MenuItem>
        <MenuItem 
          onClick={() => handleCategorySelect('Approach')}
          selected={selectedCategory === 'Approach'}
        >
          Approach Procedures
        </MenuItem>
        <MenuItem 
          onClick={() => handleCategorySelect('CRM')}
          selected={selectedCategory === 'CRM'}
        >
          CRM Scenarios
        </MenuItem>
        <MenuItem 
          onClick={() => handleCategorySelect('Technical')}
          selected={selectedCategory === 'Technical'}
        >
          Technical Training
        </MenuItem>
      </Menu>

      {/* Sort Menu */}
      <Menu
        anchorEl={sortAnchorEl}
        open={Boolean(sortAnchorEl)}
        onClose={handleCloseMenus}
      >
        <MenuItem onClick={handleCloseMenus}>
          Popularity
        </MenuItem>
        <MenuItem onClick={handleCloseMenus}>
          Highest Rated
        </MenuItem>
        <MenuItem onClick={handleCloseMenus}>
          Newest
        </MenuItem>
        <MenuItem onClick={handleCloseMenus}>
          Price: Low to High
        </MenuItem>
        <MenuItem onClick={handleCloseMenus}>
          Price: High to Low
        </MenuItem>
      </Menu>
    </Box>
  );
};

// components/community/ForumDiscussions.tsx
import React, { useState } from 'react';
import {
  Box,
  Typography,
  Paper,
  List,
  ListItem,
  Divider,
  Button,
  TextField,
  Avatar,
  IconButton,
  Chip,
  Menu,
  MenuItem,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Badge,
} from '@mui/material';
import {
  ChatBubble,
  ThumbUp,
  ThumbUpOutlined,
  MoreVert,
  Forum,
  Sort,
  Add,
  Search,
  FilterList,
  Close,
  Person,
  School,
} from '@mui/icons-material';

interface ForumPost {
  id: string;
  title: string;
  content: string;
  author: {
    id: string;
    name: string;
    avatar?: string;
    role: string;
    organization?: string;
  };
  category: string;
  tags: string[];
  createdAt: string;
  updatedAt: string;
  replies: number;
  views: number;
  likes: number;
  isLiked: boolean;
  isPinned: boolean;
  isResolved: boolean;
  lastReplyBy?: {
    id: string;
    name: string;
    avatar?: string;
  };
  lastReplyAt?: string;
}

export const ForumDiscussions: React.FC = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
  const [filterAnchorEl, setFilterAnchorEl] = useState<null | HTMLElement>(null);
  const [sortAnchorEl, setSortAnchorEl] = useState<null | HTMLElement>(null);
  const [newPostDialogOpen, setNewPostDialogOpen] = useState(false);
  const [newPostTitle, setNewPostTitle] = useState('');
  const [newPostContent, setNewPostContent] = useState('');
  const [newPostCategory, setNewPostCategory] = useState('');
  const [newPostTags, setNewPostTags] = useState('');

  const [posts, setPosts] = useState<ForumPost[]>([
    {
      id: 'post-1',
      title: 'Handling engine failure during cruise - best practices',
      content: 'I\'ve been practicing engine failure scenarios and wanted to share some techniques that helped me improve my response time...',
      author: {
        id: 'user-1',
        name: 'John Miller',
        role: 'Instructor',
        organization: 'Global Aviation Academy',
      },
      category: 'Emergency Procedures',
      tags: ['Engine Failure', 'B737', 'Cruise'],
      createdAt: '2023-08-10T14:30:00Z',
      updatedAt: '2023-08-10T14:30:00Z',
      replies: 24,
      views: 342,
      likes: 56,
      isLiked: true,
      isPinned: true,
      isResolved: true,
      lastReplyBy: {
        id: 'user-3',
        name: 'Sarah Johnson',
      },
      lastReplyAt: '2023-08-15T09:45:00Z',
    },
    {
      id: 'post-2',
      title: 'Questions about cross-wind landing techniques on A320',
      content: 'I\'m having difficulty with consistent cross-wind landings on the A320. Specifically, I\'m struggling with the transition from crab to...',
      author: {
        id: 'user-2',
        name: 'Maria Garcia',
        avatar: 'https://randomuser.me/api/portraits/women/42.jpg',
        role: 'Trainee',
        organization: 'AirEurope',
      },
      category: 'Landing Techniques',
      tags: ['A320', 'Crosswind', 'Landing'],
      createdAt: '2023-08-12T10:15:00Z',
      updatedAt: '2023-08-12T10:15:00Z',
      replies: 18,
      views: 276,
      likes: 32,
      isLiked: false,
      isPinned: false,
      isResolved: false,
      lastReplyBy: {
        id: 'user-4',
        name: 'Robert Chen',
        avatar: 'https://randomuser.me/api/portraits/men/35.jpg',
      },
      lastReplyAt: '2023-08-16T11:20:00Z',
    },
    {
      id: 'post-3',
      title: 'Understanding MCAS on the 737 MAX',
      content: 'I\'m trying to better understand the MCAS system on the 737 MAX. Can someone explain how it differs from traditional stall protection systems and what...',
      author: {
        id: 'user-3',
        name: 'Sarah Johnson',
        role: 'Instructor',
        organization: 'Aviation Training International',
      },
      category: 'Aircraft Systems',
      tags: ['B737-MAX', 'MCAS', 'Systems'],
      createdAt: '2023-08-08T16:45:00Z',
      updatedAt: '2023-08-08T16:45:00Z',
      replies: 32,
      views: 510,
      likes: 78,
      isLiked: true,
      isPinned: false,
      isResolved: true,
      lastReplyBy: {
        id: 'user-1',
        name: 'John Miller',
      },
      lastReplyAt: '2023-08-15T14:30:00Z',
    },
    {
      id: 'post-4',
      title: 'Tips for organizing flight bag and documents',
      content: 'I\'m a new trainee and looking for advice on how experienced pilots organize their documents, charts, and other materials...',
      author: {
        id: 'user-4',
        name: 'Robert Chen',
        avatar: 'https://randomuser.me/api/portraits/men/35.jpg',
        role: 'Trainee',
        organization: 'Pacific Airways',
      },
      category: 'General Discussion',
      tags: ['Organization', 'EFB', 'Flight Deck'],
      createdAt: '2023-08-14T09:30:00Z',
      updatedAt: '2023-08-14T09:30:00Z',
      replies: 12,
      views: 198,
      likes: 24,
      isLiked: false,
      isPinned: false,
      isResolved: false,
      lastReplyBy: {
        id: 'user-2',
        name: 'Maria Garcia',
        avatar: 'https://randomuser.me/api/portraits/women/42.jpg',
      },
      lastReplyAt: '2023-08-16T08:15:00Z',
    },
  ]);

  const handleFilterClick = (event: React.MouseEvent<HTMLElement>) => {
    setFilterAnchorEl(event.currentTarget);
  };

  const handleSortClick = (event: React.MouseEvent<HTMLElement>) => {
    setSortAnchorEl(event.currentTarget);
  };

  const handleCloseMenus = () => {
    setFilterAnchorEl(null);
    setSortAnchorEl(null);
  };

  const handleCategorySelect = (category: string | null) => {
    setSelectedCategory(category);
    handleCloseMenus();
  };

  const handleToggleLike = (postId: string) => {
    setPosts(
      posts.map((post) =>
        post.id === postId
          ? { 
              ...post, 
              isLiked: !post.isLiked, 
              likes: post.isLiked ? post.likes - 1 : post.likes + 1 
            }
          : post
      )
    );
  };

  const handleNewPostSubmit = () => {
    // In a real app, you would submit to API
    // For demo, just close the dialog
    setNewPostDialogOpen(false);
    setNewPostTitle('');
    setNewPostContent('');
    setNewPostCategory('');
    setNewPostTags('');
  };

  const filteredPosts = posts.filter((post) => {
    // Apply category filter
    if (selectedCategory && post.category !== selectedCategory) return false;
    
    // Apply search filter
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      return (
        post.title.toLowerCase().includes(query) ||
        post.content.toLowerCase().includes(query) ||
        post.author.name.toLowerCase().includes(query) ||
        post.tags.some((tag) => tag.toLowerCase().includes(query))
      );
    }
    
    return true;
  });

  // Sort posts: pinned first, then by last activity
  const sortedPosts = [...filteredPosts].sort((a, b) => {
    // Pinned posts first
    if (a.isPinned && !b.isPinned) return -1;
    if (!a.isPinned && b.isPinned) return 1;
    
    // Then by last activity (either last reply or post update)
    const aLastActivity = a.lastReplyAt || a.updatedAt;
    const bLastActivity = b.lastReplyAt || b.updatedAt;
    return new Date(bLastActivity).getTime() - new Date(aLastActivity).getTime();
  });

  const formatDate = (dateStr: string) => {
    const date = new Date(dateStr);
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffSecs = Math.floor(diffMs / 1000);
    const diffMins = Math.floor(diffSecs / 60);
    const diffHours = Math.floor(diffMins / 60);
    const diffDays = Math.floor(diffHours / 24);
    
    if (diffDays > 6) {
      return date.toLocaleDateString();
    } else if (diffDays > 0) {
      return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
    } else if (diffHours > 0) {
      return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;
    } else if (diffMins > 0) {
      return `${diffMins} minute${diffMins > 1 ? 's' : ''} ago`;
    } else {
      return 'Just now';
    }
  };

  return (
    <Box>
      <Box className="flex justify-between items-center mb-6">
        <Typography variant="h5">Community Forum</Typography>
        <Button 
          variant="contained" 
          color="primary" 
          startIcon={<Add />}
          onClick={() => setNewPostDialogOpen(true)}
        >
          New Discussion
        </Button>
      </Box>

      <Box className="mb-6 flex flex-wrap gap-3">
        <TextField
          placeholder="Search discussions..."
          variant="outlined"
          size="small"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          InputProps={{
            startAdornment: (
              <Search className="mr-2 text-gray-500" />
            ),
          }}
          className="flex-grow"
        />
        
        <Button
          variant="outlined"
          startIcon={<FilterList />}
          onClick={handleFilterClick}
        >
          {selectedCategory || 'All Categories'}
        </Button>
        
        <Button
          variant="outlined"
          startIcon={<Sort />}
          onClick={handleSortClick}
        >
          Most Recent
        </Button>
      </Box>

      <Paper variant="outlined">
        <List className="p-0">
          {sortedPosts.length === 0 ? (
            <Box className="p-6 text-center">
              <Typography variant="subtitle1" color="textSecondary">
                No discussions found matching your criteria
              </Typography>
              <Button
                variant="text"
                color="primary"
                onClick={() => {
                  setSearchQuery('');
                  setSelectedCategory(null);
                }}
                className="mt-3"
              >
                Clear Filters
              </Button>
            </Box>
          ) : (
            sortedPosts.map((post, index) => (
              <React.Fragment key={post.id}>
                {index > 0 && <Divider />}
                <ListItem
                  className={`p-4 hover:bg-gray-50 ${post.isPinned ? 'bg-blue-50' : ''}`}
                  button
                >
                  <Box className="flex w-full">
                    <Avatar
                      src={post.author.avatar}
                      className="mr-3"
                    >
                      {post.author.name.charAt(0)}
                    </Avatar>
                    
                    <Box className="flex-grow">
                      <Box className="flex items-center mb-1">
                        {post.isPinned && (
                          <Chip 
                            label="Pinned" 
                            size="small" 
                            color="primary"
                            className="mr-2"
                          />
                        )}
                        {post.isResolved && (
                          <Chip 
                            label="Resolved" 
                            size="small" 
                            color="success"
                            className="mr-2"
                          />
                        )}
                        <Typography variant="h6">
                          {post.title}
                        </Typography>
                      </Box>
                      
                      <Typography 
                        variant="body2" 
                        color="textSecondary"
                        className="line-clamp-1 mb-2"
                      >
                        {post.content}
                      </Typography>
                      
                      <Box className="flex flex-wrap gap-1 mb-2">
                        <Chip
                          label={post.category}
                          size="small"
                          color="primary"
                          variant="outlined"
                        />
                        {post.tags.slice(0, 2).map((tag) => (
                          <Chip
                            key={tag}
                            label={tag}
                            size="small"
                            variant="outlined"
                          />
                        ))}
                        {post.tags.length > 2 && (
                          <Chip
                            label={`+${post.tags.length - 2}`}
                            size="small"
                            variant="outlined"
                          />
                        )}
                      </Box>
                      
                      <Box className="flex items-center text-sm text-gray-500">
                        <Typography variant="body2" className="flex items-center">
                          <Person fontSize="small" className="mr-1" />
                          {post.author.name}
                          {post.author.role === 'Instructor' && (
                            <Chip
                              label="Instructor"
                              size="small"
                              color="secondary"
                              icon={<School />}
                              className="ml-2"
                            />
                          )}
                        </Typography>
                        
                        <Typography variant="body2" className="ml-4">
                          {post.lastReplyAt ? 'Last reply' : 'Posted'}: {formatDate(post.lastReplyAt || post.createdAt)}
                          {post.lastReplyBy && ` by ${post.lastReplyBy.name}`}
                        </Typography>
                      </Box>
                    </Box>
                    
                    <Box className="flex flex-col items-end justify-between ml-4">
                      <Box className="flex items-center">
                        <Box className="flex items-center mr-3">
                          <ChatBubble fontSize="small" className="text-gray-500 mr-1" />
                          <Typography variant="body2">{post.replies}</Typography>
                        </Box>
                        
                        <Box className="flex items-center">
                          <IconButton
                            size="small"
                            onClick={(e) => {
                              e.stopPropagation();
                              handleToggleLike(post.id);
                            }}
                          >
                            {post.isLiked ? (
                              <ThumbUp color="primary" fontSize="small" />
                            ) : (
                              <ThumbUpOutlined fontSize="small" />
                            )}
                          </IconButton>
                          <Typography variant="body2">{post.likes}</Typography>
                        </Box>
                      </Box>
                      
                      <Typography variant="caption" color="textSecondary">
                        {post.views} views
                      </Typography>
                    </Box>
                  </Box>
                </ListItem>
              </React.Fragment>
            ))
          )}
        </List>
      </Paper>

      {/* Category Filter Menu */}
      <Menu
        anchorEl={filterAnchorEl}
        open={Boolean(filterAnchorEl)}
        onClose={handleCloseMenus}
      >
        <MenuItem 
          onClick={() => handleCategorySelect(null)}
          selected={selectedCategory === null}
        >
          All Categories
        </MenuItem>
        <Divider />
        <MenuItem 
          onClick={() => handleCategorySelect('Emergency Procedures')}
          selected={selectedCategory === 'Emergency Procedures'}
        >
          Emergency Procedures
        </MenuItem>
        <MenuItem 
          onClick={() => handleCategorySelect('Landing Techniques')}
          selected={selectedCategory === 'Landing Techniques'}
        >
          Landing Techniques
        </MenuItem>
        <MenuItem 
          onClick={() => handleCategorySelect('Aircraft Systems')}
          selected={selectedCategory === 'Aircraft Systems'}
        >
          Aircraft Systems
        </MenuItem>
        <MenuItem 
          onClick={() => handleCategorySelect('General Discussion')}
          selected={selectedCategory === 'General Discussion'}
        >
          General Discussion
        </MenuItem>
      </Menu>

      {/* Sort Menu */}
      <Menu
        anchorEl={sortAnchorEl}
        open={Boolean(sortAnchorEl)}
        onClose={handleCloseMenus}
      >
        <MenuItem onClick={handleCloseMenus}>
          Most Recent
        </MenuItem>
        <MenuItem onClick={handleCloseMenus}>
          Most Popular
        </MenuItem>
        <MenuItem onClick={handleCloseMenus}>
          Most Viewed
        </MenuItem>
        <MenuItem onClick={handleCloseMenus}>
          Most Replies
        </MenuItem>
      </Menu>

      {/* New Post Dialog */}
      <Dialog
        open={newPostDialogOpen}
        onClose={() => setNewPostDialogOpen(false)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>
          Start New Discussion
          <IconButton
            onClick={() => setNewPostDialogOpen(false)}
            className="absolute right-2 top-2"
          >
            <Close />
          </IconButton>
        </DialogTitle>
        
        <DialogContent dividers>
          <Box className="space-y-4">
            <TextField
              label="Title"
              variant="outlined"
              fullWidth
              value={newPostTitle}
              onChange={(e) => setNewPostTitle(e.target.value)}
            />
            
            <TextField
              label="Content"
              variant="outlined"
              fullWidth
              multiline
              rows={6}
              value={newPostContent}
              onChange={(e) => setNewPostContent(e.target.value)}
            />
            
            <Box className="flex gap-4">
              <TextField
                label="Category"
                variant="outlined"
                fullWidth
                select
                value={newPostCategory}
                onChange={(e) => setNewPostCategory(e.target.value)}
              >
                <MenuItem value="Emergency Procedures">Emergency Procedures</MenuItem>
                <MenuItem value="Landing Techniques">Landing Techniques</MenuItem>
                <MenuItem value="Aircraft Systems">Aircraft Systems</MenuItem>
                <MenuItem value="General Discussion">General Discussion</MenuItem>
              </TextField>
              
              <TextField
                label="Tags (comma separated)"
                variant="outlined"
                fullWidth
                value={newPostTags}
                onChange={(e) => setNewPostTags(e.target.value)}
                placeholder="e.g. B737, Crosswind, Landing"
              />
            </Box>
          </Box>
        </DialogContent>
        
        <DialogActions>
          <Button onClick={() => setNewPostDialogOpen(false)}>Cancel</Button>
          <Button 
            variant="contained" 
            color="primary"
            onClick={handleNewPostSubmit}
            disabled={!newPostTitle || !newPostContent || !newPostCategory}
          >
            Post Discussion
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

// components/gamification/AchievementTracker.tsx
import React, { useState } from 'react';
import {
  Box,
  Typography,
  Paper,
  Grid,
  Card,
  CardContent,
  LinearProgress,
  Tooltip,
  Avatar,
  Chip,
  Button,
  List,
  ListItem,
  ListItemAvatar,
  ListItemText,
  IconButton,
  Tabs,
  Tab,
  CircularProgress,
} from '@mui/material';
import {
  EmojiEvents,
  CheckCircle,
  Lock,
  Star,
  DirectionsRun,
  FlightTakeoff,
  School,
  Visibility,
  LocalFireDepartment,
} from '@mui/icons-material';

interface Achievement {
  id: string;
  title: string;
  description: string;
  icon: string;
  category: string;
  progress: number; // 0-100
  isCompleted: boolean;
  isLocked: boolean;
  completedDate?: string;
  rewardPoints: number;
  nextMilestone?: {
    description: string;
    requiredValue: number;
    currentValue: number;
  };
}

export const AchievementTracker: React.FC = () => {
  const [activeTab, setActiveTab] = useState(0);

  const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue);
  };

  const [achievements, setAchievements] = useState<Achievement[]>([
    {
      id: 'ach-1',
      title: 'Take-off Master',
      description: 'Complete 50 successful takeoffs across all aircraft types',
      icon: 'flight_takeoff',
      category: 'Flying Skills',
      progress: 100,
      isCompleted: true,
      isLocked: false,
      completedDate: '2023-07-15T14:30:00Z',
      rewardPoints: 500,
      nextMilestone: {
        description: 'Complete 100 successful takeoffs',
        requiredValue: 100,
        currentValue: 72,
      },
    },
    {
      id: 'ach-2',
      title: 'Emergency Response',
      description: 'Successfully handle 10 different emergency scenarios',
      icon: 'warning',
      category: 'Emergency Procedures',
      progress: 70,
      isCompleted: false,
      isLocked: false,
      rewardPoints: 1000,
      nextMilestone: {
        description: 'Handle emergency scenarios',
        requiredValue: 10,
        currentValue: 7,
      },
    },
    {
      id: 'ach-3',
      title: 'Perfect Landing',
      description: 'Achieve 25 landings with "excellent" grading',
      icon: 'flight_land',
      category: 'Flying Skills',
      progress: 40,
      isCompleted: false,
      isLocked: false,
      rewardPoints: 750,
      nextMilestone: {
        description: 'Excellent landings',
        requiredValue: 25,
        currentValue: 10,
      },
    },
    {
      id: 'ach-4',
      title: 'Systems Expert',
      description: 'Complete all aircraft systems training modules with perfect scores',
      icon: 'settings',
      category: 'Knowledge',
      progress: 0,
      isCompleted: false,
      isLocked: true,
      rewardPoints: 1500,
    },
    {
      id: 'ach-5',
      title: 'Crew Communication',
      description: 'Receive "excellent" CRM ratings in 15 sessions',
      icon: 'people',
      category: 'Soft Skills',
      progress: 60,
      isCompleted: false,
      isLocked: false,
      rewardPoints: 800,
      nextMilestone: {
        description: 'Excellent CRM ratings',
        requiredValue: 15,
        currentValue: 9,
      },
    },
    {
      id: 'ach-6',
      title: 'Weather Navigator',
      description: 'Successfully complete 10 approaches in adverse weather conditions',
      icon: 'cloud',
      category: 'Flying Skills',
      progress: 90,
      isCompleted: false,
      isLocked: false,
      rewardPoints: 1200,
      nextMilestone: {
        description: 'Approaches in adverse weather',
        requiredValue: 10,
        currentValue: 9,
      },
    },
  ]);

  const [streaks, setStreaks] = useState({
    current: 12,
    longest: 21,
    thisWeek: 5,
    lastCompleted: '2023-08-16T09:15:00Z',
  });

  const [leaderboard, setLeaderboard] = useState([
    {
      id: 'user-1',
      name: 'Alex Morgan',
      avatar: 'https://randomuser.me/api/portraits/men/32.jpg',
      points: 8750,
      rank: 1,
      achievements: 27,
      isCurrentUser: false,
    },
    {
      id: 'user-2',
      name: 'Sarah Johnson',
      avatar: 'https://randomuser.me/api/portraits/women/65.jpg',
      points: 8400,
      rank: 2,
      achievements: 25,
      isCurrentUser: false,
    },
    {
      id: 'user-3',
      name: 'John Smith',
      points: 7900,
      rank: 3,
      achievements: 24,
      isCurrentUser: true,
    },
    {
      id: 'user-4',
      name: 'Maria Garcia',
      avatar: 'https://randomuser.me/api/portraits/women/42.jpg',
      points: 7300,
      rank: 4,
      achievements: 22,
      isCurrentUser: false,
    },
    {
      id: 'user-5',
      name: 'Robert Chen',
      avatar: 'https://randomuser.me/api/portraits/men/35.jpg',
      points: 6800,
      rank: 5,
      achievements: 21,
      isCurrentUser: false,
    },
  ]);

  const formatDate = (dateStr: string) => {
    return new Date(dateStr).toLocaleDateString(undefined, {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
    });
  };

  const getIconComponent = (iconName: string) => {
    switch (iconName) {
      case 'flight_takeoff':
        return <FlightTakeoff />;
      case 'warning':
        return <Warning />;
      case 'flight_land':
        return <FlightTakeoff style={{ transform: 'rotate(180deg)' }} />;
      case 'settings':
        return <Settings />;
      case 'people':
        return <School />;
      case 'cloud':
        return <Cloud />;
      default:
        return <Star />;
    }
  };

  // Filter achievements based on tab
  const filteredAchievements = achievements.filter((ach) => {
    if (activeTab === 0) return true; // All
    if (activeTab === 1) return ach.isCompleted; // Completed
    if (activeTab === 2) return !ach.isCompleted && !ach.isLocked; // In Progress
    return ach.isLocked; // Locked
  });

  const completedCount = achievements.filter((ach) => ach.isCompleted).length;
  const totalCount = achievements.length;
  const completionPercentage = Math.round((completedCount / totalCount) * 100);

  return (
    <Grid container spacing={4}>
      <Grid item xs={12} md={8}>
        <Paper elevation={2} className="overflow-hidden">
          <Box className="p-4 bg-blue-500 text-white">
            <Box className="flex items-center">
              <EmojiEvents className="mr-2" />
              <Typography variant="h6">Achievements & Milestones</Typography>
            </Box>
          </Box>
          
          <Box className="p-4">
            <Box className="flex justify-between items-center mb-4">
              <Box>
                <Typography variant="subtitle1" className="mb-1">
                  Overall Completion
                </Typography>
                <Box className="flex items-center">
                  <Typography variant="h5" className="mr-2">
                    {completionPercentage}%
                  </Typography>
                  <Typography variant="body2" color="textSecondary">
                    ({completedCount}/{totalCount} achievements)
                  </Typography>
                </Box>
              </Box>
              <Box className="flex items-center">
                <CircularProgress
                  variant="determinate"
                  value={completionPercentage}
                  size={60}
                  thickness={5}
                  color="primary"
                  className="mr-3"
                />
                <Box>
                  <Typography variant="subtitle2" color="primary">
                    Pilot Level: 14
                  </Typography>
                  <LinearProgress
                    variant="determinate"
                    value={75}
                    className="w-32 mt-1"
                  />
                  <Typography variant="caption" color="textSecondary">
                    7,900 / 10,000 XP to next level
                  </Typography>
                </Box>
              </Box>
            </Box>
            
            <Tabs
              value={activeTab}
              onChange={handleTabChange}
              variant="fullWidth"
              className="mb-4"
            >
              <Tab label="All" />
              <Tab label="Completed" />
              <Tab label="In Progress" />
              <Tab label="Locked" />
            </Tabs>
            
            <Grid container spacing={3}>
              {filteredAchievements.map((achievement) => (
                <Grid item xs={12} sm={6} key={achievement.id}>
                  <Card
                    variant="outlined"
                    className={`h-full ${
                      achievement.isCompleted
                        ? 'border-green-300 bg-green-50'
                        : achievement.isLocked
                        ? 'border-gray-300 bg-gray-50'
                        : ''
                    }`}
                  >
                    <CardContent>
                      <Box className="flex items-start">
                        <Avatar
                          className={`mr-3 ${
                            achievement.isCompleted
                              ? 'bg-green-500'
                              : achievement.isLocked
                              ? 'bg-gray-400'
                              : 'bg-blue-500'
                          }`}
                        >
                          {achievement.isLocked ? (
                            <Lock />
                          ) : (
                            getIconComponent(achievement.icon)
                          )}
                        </Avatar>
                        
                        <Box className="flex-grow">
                          <Box className="flex items-center">
                            <Typography variant="subtitle1" className="mr-2">
                              {achievement.title}
                            </Typography>
                            {achievement.isCompleted && (
                              <CheckCircle className="text-green-500" fontSize="small" />
                            )}
                          </Box>
                          
                          <Chip
                            label={achievement.category}
                            size="small"
                            color="primary"
                            variant="outlined"
                            className="mb-2 mt-1"
                          />
                          
                          <Typography variant="body2" color="textSecondary" className="mb-2">
                            {achievement.description}
                          </Typography>
                          
                          {!achievement.isCompleted && !achievement.isLocked && achievement.nextMilestone && (
                            <Box className="mb-2">
                              <Box className="flex justify-between items-center mb-1">
                                <Typography variant="caption" color="textSecondary">
                                  {achievement.nextMilestone.description}
                                </Typography>
                                <Typography variant="caption" color="textSecondary">
                                  {achievement.nextMilestone.currentValue}/
                                  {achievement.nextMilestone.requiredValue}
                                </Typography>
                              </Box>
                              <LinearProgress
                                variant="determinate"
                                value={(achievement.nextMilestone.currentValue / achievement.nextMilestone.requiredValue) * 100}
                              />
                            </Box>
                          )}
                          
                          <Box className="flex justify-between items-center">
                            {achievement.isCompleted ? (
                              <Typography variant="caption" color="textSecondary">
                                Completed on {formatDate(achievement.completedDate!)}
                              </Typography>
                            ) : achievement.isLocked ? (
                              <Typography variant="caption" color="error">
                                Complete previous achievements to unlock
                              </Typography>
                            ) : (
                              <Typography
                                variant="caption"
                                color="primary"
                                className="font-medium"
                              >
                                {achievement.progress}% complete
                              </Typography>
                            )}
                            
                            <Chip
                              label={`+${achievement.rewardPoints} XP`}
                              size="small"
                              className={achievement.isCompleted ? 'bg-green-100' : ''}
                            />
                          </Box>
                        </Box>
                      </Box>
                    </CardContent>
                  </Card>
                </Grid>
              ))}
            </Grid>
          </Box>
        </Paper>
      </Grid>
      
      <Grid item xs={12} md={4}>
        <Grid container spacing={4}>
          <Grid item xs={12}>
            <Paper elevation={2} className="overflow-hidden">
              <Box className="p-3 bg-amber-500 text-white">
                <Box className="flex items-center">
                  <LocalFireDepartment className="mr-2" />
                  <Typography variant="h6">Training Streak</Typography>
                </Box>
              </Box>
              
              <Box className="p-4">
                <Box className="flex justify-between mb-3">
                  <Box className="text-center">
                    <Typography variant="h4" className="font-bold text-amber-500">
                      {streaks.current}
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                      Current Streak
                    </Typography>
                  </Box>
                  
                  <Box className="text-center">
                    <Typography variant="h4" className="font-bold text-amber-500">
                      {streaks.longest}
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                      Longest Streak
                    </Typography>
                  </Box>
                  
                  <Box className="text-center">
                    <Typography variant="h4" className="font-bold text-amber-500">
                      {streaks.thisWeek}
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                      This Week
                    </Typography>
                  </Box>
                </Box>
                
                <Typography variant="caption" color="textSecondary" className="block text-center">
                  Last completed: {formatDate(streaks.lastCompleted)}
                </Typography>
                
                <Button
                  variant="contained"
                  color="warning"
                  fullWidth
                  className="mt-3"
                >
                  Complete Today's Training
                </Button>
              </Box>
            </Paper>
          </Grid>
          
          <Grid item xs={12}>
            <Paper elevation={2} className="overflow-hidden">
              <Box className="p-3 bg-purple-500 text-white">
                <Box className="flex items-center">
                  <EmojiEvents className="mr-2" />
                  <Typography variant="h6">Leaderboard</Typography>
                </Box>
              </Box>
              
              <List>
                {leaderboard.map((user) => (
                  <ListItem
                    key={user.id}
                    className={user.isCurrentUser ? 'bg-blue-50' : ''}
                  >
                    <Box
                      className={`w-8 h-8 flex items-center justify-center mr-2 rounded-full ${
                        user.rank === 1
                          ? 'bg-amber-100 text-amber-800'
                          : user.rank === 2
                          ? 'bg-gray-200 text-gray-800'
                          : user.rank === 3
                          ? 'bg-amber-200 text-amber-800'
                          : 'bg-blue-50 text-blue-800'
                      }`}
                    >
                      {user.rank}
                    </Box>
                    
                    <ListItemAvatar>
                      <Avatar src={user.avatar}>
                        {user.name.charAt(0)}
                      </Avatar>
                    </ListItemAvatar>
                    
                    <ListItemText
                      primary={
                        <Box className="flex items-center">
                          {user.name}
                          {user.isCurrentUser && (
                            <Chip
                              label="You"
                              size="small"
                              color="primary"
                              className="ml-2"
                            />
                          )}
                        </Box>
                      }
                      secondary={
                        <Box className="flex items-center">
                          <Star className="text-amber-500 mr-1" fontSize="small" />
                          <Typography variant="body2">
                            {user.points.toLocaleString()} points • {user.achievements} achievements
                          </Typography>
                        </Box>
                      }
                    />
                    
                    <IconButton size="small">
                      <Visibility fontSize="small" />
                    </IconButton>
                  </ListItem>
                ))}
              </List>
              
              <Box className="p-3 border-t">
                <Button
                  variant="outlined"
                  color="primary"
                  fullWidth
                >
                  View Full Leaderboard
                </Button>
              </Box>
            </Paper>
          </Grid>
        </Grid>
      </Grid>
    </Grid>
  );
};

// components/gamification/DailyChallenge.tsx
import React, { useState } from 'react';
import {
  Box,
  Typography,
  Paper,
  Grid,
  Card,
  CardContent,
  CardActions,
  Button,
  Chip,
  LinearProgress,
  Avatar,
  Divider,
} from '@mui/material';
import {
  AccessTime,
  DirectionsRun,
  CheckCircle,
  StarOutline,
  Star,
  Check,
  FlightTakeoff,
  LocalAirport,
  NavigationOutlined,
  Cloud,
  Settings,
} from '@mui/icons-material';

interface Challenge {
  id: string;
  title: string;
  description: string;
  category: string;
  difficulty: 1 | 2 | 3;
  xpReward: number;
  status: 'active' | 'completed' | 'expired';
  icon: JSX.Element;
  progress?: number;
  expiresAt?: string;
  completedAt?: string;
}

export const DailyChallenge: React.FC = () => {
  const [challenges, setChallenges] = useState<Challenge[]>([
    {
      id: 'challenge-1',
      title: 'Crosswind Master',
      description: 'Complete 3 successful landings with crosswind components above 15 knots',
      category: 'Landing',
      difficulty: 3,
      xpReward: 500,
      status: 'active',
      icon: <NavigationOutlined />,
      progress: 67,
      expiresAt: '2023-08-17T23:59:59Z',
    },
    {
      id: 'challenge-2',
      title: 'System Malfunction',
      description: 'Successfully manage a dual hydraulic system failure scenario',
      category: 'Emergency',
      difficulty: 2,
      xpReward: 300,
      status: 'completed',
      icon: <Settings />,
      completedAt: '2023-08-16T14:30:00Z',
    },
    {
      id: 'challenge-3',
      title: 'Perfect Take-off',
      description: 'Perform a take-off with less than 2° deviation from centerline',
      category: 'Take-off',
      difficulty: 1,
      xpReward: 200,
      status: 'active',
      icon: <FlightTakeoff />,
      expiresAt: '2023-08-17T23:59:59Z',
    },
    {
      id: 'challenge-4',
      title: 'Adverse Weather Navigation',
      description: 'Complete a full flight in thunderstorm conditions without deviating from flight plan',
      category: 'Navigation',
      difficulty: 3,
      xpReward: 450,
      status: 'active',
      icon: <Cloud />,
      expiresAt: '2023-08-17T23:59:59Z',
    },
    {
      id: 'challenge-5',
      title: 'Fuel Efficiency',
      description: 'Complete a medium-haul flight with fuel consumption under target by 5%',
      category: 'Efficiency',
      difficulty: 2,
      xpReward: 350,
      status: 'active',
      icon: <LocalAirport />,
      expiresAt: '2023-08-18T23:59:59Z',
    },
  ]);

  const [showCompleted, setShowCompleted] = useState(false);

  const activeTime = new Date('2023-08-17T23:59:59Z').getTime();
  const currentTime = new Date().getTime();
  const timeRemaining = activeTime - currentTime;
  
  // Format time remaining in hours and minutes
  const hoursRemaining = Math.floor(timeRemaining / (1000 * 60 * 60));
  const minutesRemaining = Math.floor((timeRemaining % (1000 * 60 * 60)) / (1000 * 60));

  const activeChallenges = challenges.filter(c => c.status === 'active');
  const completedChallenges = challenges.filter(c => c.status === 'completed');

  const formatDate = (dateStr: string) => {
    return new Date(dateStr).toLocaleDateString(undefined, {
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  const handleCompleteChallenge = (challengeId: string) => {
    setChallenges(
      challenges.map(challenge =>
        challenge.id === challengeId
          ? {
              ...challenge,
              status: 'completed',
              completedAt: new Date().toISOString(),
            }
          : challenge
      )
    );
  };

  return (
    <Box>
      <Box className="flex justify-between items-center mb-6">
        <Box>
          <Typography variant="h5">Daily Challenges</Typography>
          <Typography variant="body2" color="textSecondary">
            Complete challenges to earn XP and advance your pilot career
          </Typography>
        </Box>
        
        <Box className="flex items-center bg-blue-50 p-2 rounded">
          <AccessTime className="text-blue-500 mr-2" />
          <Typography variant="body1" className="font-medium">
            Challenges refresh in: {hoursRemaining}h {minutesRemaining}m
          </Typography>
        </Box>
      </Box>

      <Grid container spacing={4}>
        <Grid item xs={12} lg={8}>
          <Typography variant="h6" className="mb-3">
            Active Challenges
          </Typography>
          
          <Grid container spacing={3}>
            {activeChallenges.map((challenge) => (
              <Grid item xs={12} sm={6} key={challenge.id}>
                <Card className="h-full flex flex-col">
                  <CardContent className="flex-grow">
                    <Box className="flex items-start">
                      <Avatar
                        className={`mr-3 ${
                          challenge.difficulty === 1
                            ? 'bg-green-500'
                            : challenge.difficulty === 2
                            ? 'bg-amber-500'
                            : 'bg-red-500'
                        }`}
                      >
                        {challenge.icon}
                      </Avatar>
                      
                      <Box className="flex-grow">
                        <Box className="flex justify-between items-start">
                          <Typography variant="subtitle1">{challenge.title}</Typography>
                          <Chip
                            label={`${challenge.difficulty === 1 ? 'Easy' : challenge.difficulty === 2 ? 'Medium' : 'Hard'}`}
                            size="small"
                            color={
                              challenge.difficulty === 1
                                ? 'success'
                                : challenge.difficulty === 2
                                ? 'warning'
                                : 'error'
                            }
                          />
                        </Box>
                        
                        <Chip
                          label={challenge.category}
                          size="small"
                          variant="outlined"
                          className="my-1"
                        />
                        
                        <Typography variant="body2" color="textSecondary" className="mb-3">
                          {challenge.description}
                        </Typography>
                        
                        {challenge.progress !== undefined && (
                          <Box className="mb-1">
                            <Box className="flex justify-between items-center mb-1">
                              <Typography variant="caption" color="textSecondary">
                                Progress
                              </Typography>
                              <Typography variant="caption" color="textSecondary">
                                {challenge.progress}%
                              </Typography>
                            </Box>
                            <LinearProgress
                              variant="determinate"
                              value={challenge.progress}
                            />
                          </Box>
                        )}
                      </Box>
                    </Box>
                  </CardContent>
                  
                  <Divider />
                  
                  <CardActions className="bg-gray-50">
                    <Box className="flex items-center mr-auto">
                      <Star className="text-amber-500 mr-1" />
                      <Typography variant="body2" className="font-medium">
                        +{challenge.xpReward} XP
                      </Typography>
                    </Box>
                    
                    <Button
                      variant="contained"
                      color="primary"
                      size="small"
                      onClick={() => handleCompleteChallenge(challenge.id)}
                      startIcon={<Check />}
                    >
                      Complete
                    </Button>
                  </CardActions>
                </Card>
              </Grid>
            ))}
          </Grid>
          
          <Box className="mt-6">
            <Button
              variant="outlined"
              onClick={() => setShowCompleted(!showCompleted)}
              className="mb-3"
            >
              {showCompleted ? 'Hide Completed' : 'Show Completed'} ({completedChallenges.length})
            </Button>
            
            {showCompleted && (
              <Grid container spacing={3}>
                {completedChallenges.map((challenge) => (
                  <Grid item xs={12} sm={6} key={challenge.id}>
                    <Card className="h-full bg-gray-50">
                      <CardContent>
                        <Box className="flex items-start">
                          <Avatar className="mr-3 bg-green-500">
                            <CheckCircle />
                          </Avatar>
                          
                          <Box className="flex-grow">
                            <Box className="flex justify-between items-start">
                              <Typography variant="subtitle1">{challenge.title}</Typography>
                              <Chip
                                label="Completed"
                                size="small"
                                color="success"
                              />
                            </Box>
                            
                            <Chip
                              label={challenge.category}
                              size="small"
                              variant="outlined"
                              className="my-1"
                            />
                            
                            <Typography variant="body2" color="textSecondary" className="mb-2">
                              {challenge.description}
                            </Typography>
                            
                            <Typography variant="caption" color="textSecondary">
                              Completed on: {formatDate(challenge.completedAt!)}
                            </Typography>
                          </Box>
                        </Box>
                      </CardContent>
                      
                      <Divider />
                      
                      <CardActions>
                        <Box className="flex items-center mr-auto">
                          <Star className="text-amber-500 mr-1" />
                          <Typography variant="body2" className="font-medium">
                            +{challenge.xpReward} XP
                          </Typography>
                        </Box>
                      </CardActions>
                    </Card>
                  </Grid>
                ))}
              </Grid>
            )}
          </Box>
        </Grid>
        
        <Grid item xs={12} lg={4}>
          <Paper elevation={2} className="overflow-hidden">
            <Box className="p-3 bg-purple-500 text-white">
              <Typography variant="h6">Challenge Statistics</Typography>
            </Box>
            
            <Box className="p-4">
              <Grid container spacing={2}>
                <Grid item xs={6}>
                  <Paper variant="outlined" className="p-3 text-center h-full">
                    <Typography variant="h4" className="font-bold text-blue-500">
                      {completedChallenges.length}
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                      Completed Today
                    </Typography>
                  </Paper>
                </Grid>
                
                <Grid item xs={6}>
                  <Paper variant="outlined" className="p-3 text-center h-full">
                    <Typography variant="h4" className="font-bold text-amber-500">
                      {completedChallenges.reduce((sum, c) => sum + c.xpReward, 0)}
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                      XP Earned Today
                    </Typography>
                  </Paper>
                </Grid>
                
                <Grid item xs={6}>
                  <Paper variant="outlined" className="p-3 text-center h-full">
                    <Typography variant="h4" className="font-bold text-green-500">
                      87%
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                      Completion Rate
                    </Typography>
                  </Paper>
                </Grid>
                
                <Grid item xs={6}>
                  <Paper variant="outlined" className="p-3 text-center h-full">
                    <Typography variant="h4" className="font-bold text-purple-500">
                      12
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                      Day Streak
                    </Typography>
                  </Paper>
                </Grid>
              </Grid>
              
              <Box className="mt-4">
                <Typography variant="subtitle2" className="mb-2">
                  Weekly Progress
                </Typography>
                <Box className="flex justify-between">
                  {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map((day, index) => (
                    <Box key={day} className="text-center">
                      <Box
                        className={`w-8 h-8 rounded-full flex items-center justify-center mb-1 mx-auto ${
                          index < 3
                            ? 'bg-green-500 text-white'
                            : index === 3
                            ? 'bg-blue-500 text-white'
                            : 'bg-gray-200'
                        }`}
                      >
                        {index < 4 ? <Check /> : null}
                      </Box>
                      <Typography variant="caption">{day}</Typography>
                    </Box>
                  ))}
                </Box>
              </Box>
              
              <Button
                variant="contained"
                color="primary"
                fullWidth
                startIcon={<Star />}
                className="mt-4"
              >
                View All Achievements
              </Button>
            </Box>
          </Paper>
        </Grid>
      </Grid>
    </Box>
  );
};

// app/community/page.tsx
'use client';

import React, { useState } from 'react';
import { 
  Container, 
  Box, 
  Typography, 
  Tabs, 
  Tab, 
  Paper 
} from '@mui/material';
import { ScenarioMarketplace } from '@/components/community/ScenarioMarketplace';
import { ForumDiscussions } from '@/components/community/ForumDiscussions';

export default function CommunityPage() {
  const [activeTab, setActiveTab] = useState(0);

  const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue);
  };

  return (
    <Container maxWidth="xl">
      <Box className="py-6">
        <Typography variant="h4" className="mb-6">Community & Knowledge Sharing</Typography>
        
        <Paper elevation={1} className="mb-6">
          <Tabs 
            value={activeTab} 
            onChange={handleTabChange}
            variant="scrollable"
            scrollButtons="auto"
          >
            <Tab label="Scenario Marketplace" />
            <Tab label="Discussion Forum" />
            <Tab label="Knowledge Base" />
            <Tab label="Instructor Insights" />
          </Tabs>
        </Paper>
        
        {activeTab === 0 && <ScenarioMarketplace />}
        {activeTab === 1 && <ForumDiscussions />}
        {activeTab === 2 && (
          <Typography variant="body1">Knowledge Base Tab Content</Typography>
        )}
        {activeTab === 3 && (
          <Typography variant="body1">Instructor Insights Tab Content</Typography>
        )}
      </Box>
    </Container>
  );
};

// app/gamification/page.tsx
'use client';

import React, { useState } from 'react';
import { 
  Container, 
  Box, 
  Typography, 
  Tabs, 
  Tab, 
  Paper 
} from '@mui/material';
import { AchievementTracker } from '@/components/gamification/AchievementTracker';
import { DailyChallenge } from '@/components/gamification/DailyChallenge';

export default function GamificationPage() {
  const [activeTab, setActiveTab] = useState(0);

  const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue);
  };

  return (
    <Container maxWidth="xl">
      <Box className="py-6">
        <Typography variant="h4" className="mb-6">Training Gamification</Typography>
        
        <Paper elevation={1} className="mb-6">
          <Tabs 
            value={activeTab} 
            onChange={handleTabChange}
            variant="scrollable"
            scrollButtons="auto"
          >
            <Tab label="Achievements & Milestones" />
            <Tab label="Daily Challenges" />
            <Tab label="Training Path" />
            <Tab label="Rewards" />
          </Tabs>
        </Paper>
        
        {activeTab === 0 && <AchievementTracker />}
        {activeTab === 1 && <DailyChallenge />}
        {activeTab === 2 && (
          <Typography variant="body1">Training Path Tab Content</Typography>
        )}
        {activeTab === 3 && (
          <Typography variant="body1">Rewards Tab Content</Typography>
        )}
      </Box>
    </Container>
  );
};

// src/frontend/components/competency/CompetencyManagement.tsx
import React, { useState, useEffect } from 'react';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { Alert } from '../ui/Alert';
import { Modal } from '../ui/Modal';
import { Input } from '../ui/Input';
import { Form } from '../ui/Form';
import { DataTable, Column } from '../ui/DataTable';

// Types
export enum CompetencyLevel {
  UNSATISFACTORY = 1,
  BASIC = 2,
  PROFICIENT = 3,
  EXEMPLARY = 4
}

export interface CompetencyCategory {
  id: string;
  name: string;
  description: string;
  order: number;
}

export interface Competency {
  id: string;
  name: string;
  description: string;
  categoryId: string;
  indicators: CompetencyIndicator[];
  regulatoryReferences?: string[];
  trainingObjectives?: string[];
  minimumLevel: CompetencyLevel;
}

export interface CompetencyIndicator {
  id: string;
  competencyId: string;
  level: CompetencyLevel;
  description: string;
  criteria: string[];
}

export interface TraineeCompetency {
  id: string;
  traineeId: string;
  traineeName: string;
  competencyId: string;
  competencyName: string;
  categoryId: string;
  categoryName: string;
  assessmentDate: Date;
  level: CompetencyLevel;
  notes?: string;
  assessorId: string;
  assessorName: string;
  evidenceReferences?: string[];
  history: {
    date: Date;
    level: CompetencyLevel;
    assessorName: string;
  }[];
}

// Competency Form Component
interface CompetencyFormProps {
  competency: Partial<Competency>;
  categories: CompetencyCategory[];
  onSave: (competency: Partial<Competency>) => Promise<void>;
  onCancel: () => void;
  isEditing: boolean;
}

const CompetencyForm: React.FC<CompetencyFormProps> = ({
  competency,
  categories,
  onSave,
  onCancel,
  isEditing
}) => {
  const [formData, setFormData] = useState<Partial<Competency>>(competency);
  const [indicators, setIndicators] = useState<Partial<CompetencyIndicator>[]>(
    competency.indicators || [
      { level: CompetencyLevel.UNSATISFACTORY, description: '', criteria: [''] },
      { level: CompetencyLevel.BASIC, description: '', criteria: [''] },
      { level: CompetencyLevel.PROFICIENT, description: '', criteria: [''] },
      { level: CompetencyLevel.EXEMPLARY, description: '', criteria: [''] }
    ]
  );
  const [regulatoryRefs, setRegulatoryRefs] = useState<string[]>(
    competency.regulatoryReferences || ['']
  );
  const [objectives, setObjectives] = useState<string[]>(
    competency.trainingObjectives || ['']
  );
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
    if (errors[name]) {
      setErrors({ ...errors, [name]: '' });
    }
  };

  const handleIndicatorChange = (index: number, field: string, value: any) => {
    const newIndicators = [...indicators];
    (newIndicators[index] as any)[field] = value;
    setIndicators(newIndicators);
  };

  const handleCriteriaChange = (indicatorIndex: number, criteriaIndex: number, value: string) => {
    const newIndicators = [...indicators];
    if (!newIndicators[indicatorIndex].criteria) {
      newIndicators[indicatorIndex].criteria = [''];
    }
    newIndicators[indicatorIndex].criteria![criteriaIndex] = value;
    setIndicators(newIndicators);
  };

  const addCriteria = (indicatorIndex: number) => {
    const newIndicators = [...indicators];
    if (!newIndicators[indicatorIndex].criteria) {
      newIndicators[indicatorIndex].criteria = [''];
    } else {
      newIndicators[indicatorIndex].criteria!.push('');
    }
    setIndicators(newIndicators);
  };

  const removeCriteria = (indicatorIndex: number, criteriaIndex: number) => {
    const newIndicators = [...indicators];
    newIndicators[indicatorIndex].criteria!.splice(criteriaIndex, 1);
    setIndicators(newIndicators);
  };

  const handleRegulatoryRefChange = (index: number, value: string) => {
    const newRefs = [...regulatoryRefs];
    newRefs[index] = value;
    setRegulatoryRefs(newRefs);
  };

  const addRegulatoryRef = () => {
    setRegulatoryRefs([...regulatoryRefs, '']);
  };

  const removeRegulatoryRef = (index: number) => {
    const newRefs = [...regulatoryRefs];
    newRefs.splice(index, 1);
    setRegulatoryRefs(newRefs);
  };

  const handleObjectiveChange = (index: number, value: string) => {
    const newObjectives = [...objectives];
    newObjectives[index] = value;
    setObjectives(newObjectives);
  };

  const addObjective = () => {
    setObjectives([...objectives, '']);
  };

  const removeObjective = (index: number) => {
    const newObjectives = [...objectives];
    newObjectives.splice(index, 1);
    setObjectives(newObjectives);
  };

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};
    
    if (!formData.name?.trim()) {
      newErrors.name = 'Name is required';
    }
    
    if (!formData.categoryId) {
      newErrors.categoryId = 'Category is required';
    }
    
    if (!formData.minimumLevel) {
      newErrors.minimumLevel = 'Minimum level is required';
    }
    
    // Check if at least the minimum level indicator has criteria
    const minLevel = formData.minimumLevel || CompetencyLevel.PROFICIENT;
    const minLevelIndicator = indicators.find(i => i.level === minLevel);
    
    if (!minLevelIndicator || !minLevelIndicator.description?.trim()) {
      newErrors.indicatorDescription = `Description for the minimum level (${minLevel}) is required`;
    }
    
    if (!minLevelIndicator || !minLevelIndicator.criteria || minLevelIndicator.criteria.every(c => !c.trim())) {
      newErrors.indicatorCriteria = `At least one criterion for the minimum level (${minLevel}) is required`;
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    setIsSubmitting(true);
    
    // Filter out empty criteria and references
    const filteredIndicators = indicators.map(indicator => ({
      ...indicator,
      criteria: indicator.criteria?.filter(c => c.trim()) || []
    }));
    
    const filteredRefs = regulatoryRefs.filter(ref => ref.trim());
    const filteredObjectives = objectives.filter(obj => obj.trim());
    
    const competencyData: Partial<Competency> = {
      ...formData,
      indicators: filteredIndicators as CompetencyIndicator[],
      regulatoryReferences: filteredRefs.length > 0 ? filteredRefs : undefined,
      trainingObjectives: filteredObjectives.length > 0 ? filteredObjectives : undefined
    };
    
    try {
      await onSave(competencyData);
    } catch (error) {
      // Handle error
      console.error('Error saving competency:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Form onSubmit={handleSubmit}>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
        <Input
          label="Name"
          name="name"
          value={formData.name || ''}
          onChange={handleInputChange}
          error={errors.name}
          required
        />
        
        <div>
          <label htmlFor="categoryId" className="block text-sm font-medium text-gray-700 mb-1">
            Category
          </label>
          <select
            id="categoryId"
            name="categoryId"
            className={`block w-full pl-3 pr-10 py-2 text-base border-gray-300 ${errors.categoryId ? 'border-red-300' : ''} focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md`}
            value={formData.categoryId || ''}
            onChange={handleInputChange}
            required
          >
            <option value="">Select Category</option>
            {categories.map(category => (
              <option key={category.id} value={category.id}>
                {category.name}
              </option>
            ))}
          </select>
          {errors.categoryId && (
            <p className="mt-1 text-sm text-red-600">{errors.categoryId}</p>
          )}
        </div>
      </div>
      
      <div className="mb-4">
        <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">
          Description
        </label>
        <textarea
          id="description"
          name="description"
          rows={3}
          className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          value={formData.description || ''}
          onChange={handleInputChange}
        />
      </div>
      
      <div className="mb-4">
        <label htmlFor="minimumLevel" className="block text-sm font-medium text-gray-700 mb-1">
          Minimum Required Level
        </label>
        <select
          id="minimumLevel"
          name="minimumLevel"
          className={`block w-full pl-3 pr-10 py-2 text-base border-gray-300 ${errors.minimumLevel ? 'border-red-300' : ''} focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md`}
          value={formData.minimumLevel || CompetencyLevel.PROFICIENT}
          onChange={handleInputChange}
          required
        >
          <option value={CompetencyLevel.UNSATISFACTORY}>1 - Unsatisfactory</option>
          <option value={CompetencyLevel.BASIC}>2 - Basic</option>
          <option value={CompetencyLevel.PROFICIENT}>3 - Proficient</option>
          <option value={CompetencyLevel.EXEMPLARY}>4 - Exemplary</option>
        </select>
        {errors.minimumLevel && (
          <p className="mt-1 text-sm text-red-600">{errors.minimumLevel}</p>
        )}
      </div>
      
      <div className="mb-6">
        <h3 className="text-lg font-medium mb-2">Performance Indicators</h3>
        <div className="space-y-4">
          {indicators.map((indicator, index) => (
            <div key={index} className="border rounded-md p-4">
              <div className="flex items-center mb-2">
                <h4 className="text-base font-medium">
                  Level {indicator.level}: {
                    indicator.level === CompetencyLevel.UNSATISFACTORY ? 'Unsatisfactory' :
                    indicator.level === CompetencyLevel.BASIC ? 'Basic' :
                    indicator.level === CompetencyLevel.PROFICIENT ? 'Proficient' :
                    'Exemplary'
                  }
                </h4>
              </div>
              
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Description
                </label>
                <textarea
                  rows={2}
                  className={`block w-full rounded-md shadow-sm border-gray-300 ${indicator.level === formData.minimumLevel && errors.indicatorDescription ? 'border-red-300' : ''} focus:ring-blue-500 focus:border-blue-500 sm:text-sm`}
                  value={indicator.description || ''}
                  onChange={(e) => handleIndicatorChange(index, 'description', e.target.value)}
                />
                {indicator.level === formData.minimumLevel && errors.indicatorDescription && (
                  <p className="mt-1 text-sm text-red-600">{errors.indicatorDescription}</p>
                )}
              </div>
              
              <div>
                <div className="flex justify-between items-center mb-1">
                  <label className="block text-sm font-medium text-gray-700">
                    Performance Criteria
                  </label>
                  <button
                    type="button"
                    className="inline-flex items-center px-2 py-1 border border-transparent text-xs font-medium rounded text-blue-700 bg-blue-100 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                    onClick={() => addCriteria(index)}
                  >
                    Add Criterion
                  </button>
                </div>
                
                {indicator.criteria && indicator.criteria.map((criterion, criteriaIndex) => (
                  <div key={criteriaIndex} className="flex items-center mb-2">
                    <input
                      type="text"
                      className={`block w-full rounded-md shadow-sm border-gray-300 ${indicator.level === formData.minimumLevel && errors.indicatorCriteria && !criterion.trim() ? 'border-red-300' : ''} focus:ring-blue-500 focus:border-blue-500 sm:text-sm`}
                      value={criterion}
                      onChange={(e) => handleCriteriaChange(index, criteriaIndex, e.target.value)}
                      placeholder="Enter performance criterion"
                    />
                    {indicator.criteria!.length > 1 && (
                      <button
                        type="button"
                        className="ml-2 text-red-600 hover:text-red-800"
                        onClick={() => removeCriteria(index, criteriaIndex)}
                      >
                        <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                      </button>
                    )}
                  </div>
                ))}
                
                {indicator.level === formData.minimumLevel && errors.indicatorCriteria && (
                  <p className="mt-1 text-sm text-red-600">{errors.indicatorCriteria}</p>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
      
      <div className="mb-6">
        <div className="flex justify-between items-center mb-2">
          <h3 className="text-lg font-medium">Regulatory References</h3>
          <button
            type="button"
            className="inline-flex items-center px-2 py-1 border border-transparent text-xs font-medium rounded text-blue-700 bg-blue-100 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            onClick={addRegulatoryRef}
          >
            Add Reference
          </button>
        </div>
        
        {regulatoryRefs.map((ref, index) => (
          <div key={index} className="flex items-center mb-2">
            <input
              type="text"
              className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              value={ref}
              onChange={(e) => handleRegulatoryRefChange(index, e.target.value)}
              placeholder="Enter regulatory reference"
            />
            {regulatoryRefs.length > 1 && (
              <button
                type="button"
                className="ml-2 text-red-600 hover:text-red-800"
                onClick={() => removeRegulatoryRef(index)}
              >
                <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            )}
          </div>
        ))}
      </div>
      
      <div className="mb-6">
        <div className="flex justify-between items-center mb-2">
          <h3 className="text-lg font-medium">Training Objectives</h3>
          <button
            type="button"
            className="inline-flex items-center px-2 py-1 border border-transparent text-xs font-medium rounded text-blue-700 bg-blue-100 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            onClick={addObjective}
          >
            Add Objective
          </button>
        </div>
        
        {objectives.map((objective, index) => (
          <div key={index} className="flex items-center mb-2">
            <input
              type="text"
              className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              value={objective}
              onChange={(e) => handleObjectiveChange(index, e.target.value)}
              placeholder="Enter training objective"
            />
            {objectives.length > 1 && (
              <button
                type="button"
                className="ml-2 text-red-600 hover:text-red-800"
                onClick={() => removeObjective(index)}
              >
                <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            )}
          </div>
        ))}
      </div>
      
      <div className="flex justify-end space-x-3">
        <Button
          variant="outline"
          type="button"
          onClick={onCancel}
        >
          Cancel
        </Button>
        <Button
          variant="primary"
          type="submit"
          isLoading={isSubmitting}
          disabled={isSubmitting}
        >
          {isEditing ? 'Update' : 'Create'} Competency
        </Button>
      </div>
    </Form>
  );
};

// Category Management Component
interface CategoryManagementProps {
  categories: CompetencyCategory[];
  onCreateCategory: (category: Partial<CompetencyCategory>) => Promise<void>;
  onUpdateCategory: (category: CompetencyCategory) => Promise<void>;
  onDeleteCategory: (categoryId: string) => Promise<void>;
}

const CategoryManagement: React.FC<CategoryManagementProps> = ({
  categories,
  onCreateCategory,
  onUpdateCategory,
  onDeleteCategory
}) => {
  const [showCategoryForm, setShowCategoryForm] = useState(false);
  const [editingCategory, setEditingCategory] = useState<CompetencyCategory | null>(null);
  const [categoryFormData, setCategoryFormData] = useState<Partial<CompetencyCategory>>({});
  const [isSaving, setIsSaving] = useState(false);
  const [alertMessage, setAlertMessage] = useState<{ type: 'success' | 'error'; message: string } | null>(null);

  useEffect(() => {
    if (editingCategory) {
      setCategoryFormData(editingCategory);
    } else {
      setCategoryFormData({
        name: '',
        description: '',
        order: categories.length
      });
    }
  }, [editingCategory, categories.length]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setCategoryFormData(prev => ({
      ...prev,
      [name]: name === 'order' ? parseInt(value) : value
    }));
  };

  const handleSaveCategory = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!categoryFormData.name?.trim()) {
      setAlertMessage({ type: 'error', message: 'Category name is required' });
      return;
    }
    
    setIsSaving(true);
    
    try {
      if (editingCategory) {
        await onUpdateCategory({ ...editingCategory, ...categoryFormData } as CompetencyCategory);
        setAlertMessage({ type: 'success', message: 'Category updated successfully' });
      } else {
        await onCreateCategory(categoryFormData);
        setAlertMessage({ type: 'success', message: 'Category created successfully' });
      }
      
      setShowCategoryForm(false);
      setEditingCategory(null);
    } catch (error) {
      setAlertMessage({ 
        type: 'error', 
        message: `Failed to ${editingCategory ? 'update' : 'create'} category: ${error instanceof Error ? error.message : 'Unknown error'}` 
      });
    } finally {
      setIsSaving(false);
    }
  };

  const handleDeleteCategory = async (category: CompetencyCategory) => {
    if (!window.confirm(`Are you sure you want to delete the category "${category.name}"? This may affect competencies assigned to this category.`)) {
      return;
    }
    
    try {
      await onDeleteCategory(category.id);
      setAlertMessage({ type: 'success', message: 'Category deleted successfully' });
    } catch (error) {
      setAlertMessage({ 
        type: 'error', 
        message: `Failed to delete category: ${error instanceof Error ? error.message : 'Unknown error'}` 
      });
    }
  };

  return (
    <div>
      {alertMessage && (
        <Alert
          type={alertMessage.type}
          message={alertMessage.message}
          onClose={() => setAlertMessage(null)}
        />
      )}
      
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-lg font-medium">Categories</h2>
        <Button
          variant="primary"
          onClick={() => {
            setEditingCategory(null);
            setShowCategoryForm(true);
          }}
        >
          Add Category
        </Button>
      </div>
      
      {showCategoryForm && (
        <Card className="mb-4 p-4">
          <h3 className="text-lg font-medium mb-4">{editingCategory ? 'Edit' : 'Add'} Category</h3>
          <Form onSubmit={handleSaveCategory}>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <Input
                label="Name"
                name="name"
                value={categoryFormData.name || ''}
                onChange={handleInputChange}
                required
              />
              
              <Input
                label="Order"
                name="order"
                type="number"
                value={categoryFormData.order?.toString() || '0'}
                onChange={handleInputChange}
              />
            </div>
            
            <div className="mb-4">
              <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">
                Description
              </label>
              <textarea
                id="description"
                name="description"
                rows={3}
                className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                value={categoryFormData.description || ''}
                onChange={handleInputChange}
              />
            </div>
            
            <div className="flex justify-end space-x-3">
              <Button
                variant="outline"
                type="button"
                onClick={() => setShowCategoryForm(false)}
              >
                Cancel
              </Button>
              <Button
                variant="primary"
                type="submit"
                isLoading={isSaving}
                disabled={isSaving}
              >
                {editingCategory ? 'Update' : 'Create'} Category
              </Button>
            </div>
          </Form>
        </Card>
      )}
      
      <div className="bg-white shadow rounded-md overflow-hidden">
        <ul className="divide-y divide-gray-200">
          {categories.sort((a, b) => a.order - b.order).map((category) => (
            <li key={category.id} className="px-4 py-4">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-base font-medium">{category.name}</h3>
                  <p className="text-sm text-gray-500">{category.description}</p>
                </div>
                <div className="flex space-x-2">
                  <button
                    className="text-blue-600 hover:text-blue-800"
                    onClick={() => {
                      setEditingCategory(category);
                      setShowCategoryForm(true);
                    }}
                  >
                    <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                    </svg>
                  </button>
                  <button
                    className="text-red-600 hover:text-red-800"
                    onClick={() => handleDeleteCategory(category)}
                  >
                    <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                    </svg>
                  </button>
                </div>
              </div>
            </li>
          ))}
          {categories.length === 0 && (
            <li className="px-4 py-6 text-center text-gray-500">
              No categories found. Create a category to get started.
            </li>
          )}
        </ul>
      </div>
    </div>
  );
};

// Trainee Assessment Component
interface TraineeAssessmentProps {
  trainee: {
    id: string;
    name: string;
  };
  competency: Competency;
  category: CompetencyCategory;
  existingAssessment?: TraineeCompetency;
  onSave: (assessment: Partial<TraineeCompetency>) => Promise<void>;
  onCancel: () => void;
}

const TraineeAssessment: React.FC<TraineeAssessmentProps> = ({
  trainee,
  competency,
  category,
  existingAssessment,
  onSave,
  onCancel
}) => {
  const [level, setLevel] = useState<CompetencyLevel>(
    existingAssessment?.level || competency.minimumLevel
  );
  const [notes, setNotes] = useState(existingAssessment?.notes || '');
  const [evidence, setEvidence] = useState<string[]>(
    existingAssessment?.evidenceReferences || ['']
  );
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleEvidenceChange = (index: number, value: string) => {
    const newEvidence = [...evidence];
    newEvidence[index] = value;
    setEvidence(newEvidence);
  };

  const addEvidence = () => {
    setEvidence([...evidence, '']);
  };

  const removeEvidence = (index: number) => {
    const newEvidence = [...evidence];
    newEvidence.splice(index, 1);
    setEvidence(newEvidence);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    try {
      const filteredEvidence = evidence.filter(e => e.trim());
      
      const assessmentData: Partial<TraineeCompetency> = {
        traineeId: trainee.id,
        traineeName: trainee.name,
        competencyId: competency.id,
        competencyName: competency.name,
        categoryId: category.id,
        categoryName: category.name,
        level,
        notes: notes.trim() || undefined,
        evidenceReferences: filteredEvidence.length > 0 ? filteredEvidence : undefined,
        ...(existingAssessment?.id ? { id: existingAssessment.id } : {})
      };
      
      await onSave(assessmentData);
    } catch (error) {
      console.error('Error saving assessment:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  // Get current level indicator
  const currentLevelIndicator = competency.indicators.find(i => i.level === level);

  return (
    <div>
      <div className="mb-6">
        <h2 className="text-xl font-medium">{competency.name}</h2>
        <p className="text-gray-500">{competency.description}</p>
        <div className="mt-2">
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
            {category.name}
          </span>
        </div>
      </div>
      
      <Form onSubmit={handleSubmit}>
        <div className="mb-6">
          <h3 className="text-lg font-medium mb-2">Assessment Level</h3>
          <div className="space-y-4">
            {competency.indicators.map((indicator) => (
              <div 
                key={indicator.level}
                className={`border rounded-md p-4 ${level === indicator.level ? 'border-blue-500 bg-blue-50' : 'border-gray-200'}`}
              >
                <div className="flex items-center mb-2">
                  <input
                    type="radio"
                    id={`level-${indicator.level}`}
                    name="level"
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
                    checked={level === indicator.level}
                    onChange={() => setLevel(indicator.level)}
                  />
                  <label htmlFor={`level-${indicator.level}`} className="ml-2 text-base font-medium">
                    Level {indicator.level}: {
                      indicator.level === CompetencyLevel.UNSATISFACTORY ? 'Unsatisfactory' :
                      indicator.level === CompetencyLevel.BASIC ? 'Basic' :
                      indicator.level === CompetencyLevel.PROFICIENT ? 'Proficient' :
                      'Exemplary'
                    }
                  </label>
                </div>
                
                <div className="ml-6">
                  <p className="text-sm mb-2">{indicator.description}</p>
                  
                  {indicator.criteria.length > 0 && (
                    <div>
                      <p className="text-sm font-medium text-gray-700 mb-1">Criteria:</p>
                      <ul className="list-disc list-inside text-sm text-gray-600 space-y-1">
                        {indicator.criteria.map((criterion, index) => (
                          <li key={index}>{criterion}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
          
          {level < competency.minimumLevel && (
            <div className="mt-2 p-3 bg-yellow-50 border border-yellow-200 rounded-md">
              <p className="text-sm text-yellow-800">
                <span className="font-medium">Note:</span> The selected level is below the minimum required level ({competency.minimumLevel}) for this competency.
              </p>
            </div>
          )}
        </div>
        
        <div className="mb-6">
          <label htmlFor="notes" className="block text-sm font-medium text-gray-700 mb-1">
            Assessment Notes
          </label>
          <textarea
            id="notes"
            rows={4}
            className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            value={notes}
            onChange={(e) => setNotes(e.target.value)}
            placeholder="Enter assessment notes and observations"
          />
        </div>
        
        <div className="mb-6">
          <div className="flex justify-between items-center mb-2">
            <h3 className="text-base font-medium">Evidence References</h3>
            <button
              type="button"
              className="inline-flex items-center px-2 py-1 border border-transparent text-xs font-medium rounded text-blue-700 bg-blue-100 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              onClick={addEvidence}
            >
              Add Evidence
            </button>
          </div>
          
          {evidence.map((item, index) => (
            <div key={index} className="flex items-center mb-2">
              <input
                type="text"
                className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                value={item}
                onChange={(e) => handleEvidenceChange(index, e.target.value)}
                placeholder="Enter evidence reference (e.g., training record, simulator session)"
              />
              {evidence.length > 1 && (
                <button
                  type="button"
                  className="ml-2 text-red-600 hover:text-red-800"
                  onClick={() => removeEvidence(index)}
                >
                  <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                </button>
              )}
            </div>
          ))}
        </div>
        
        <div className="flex justify-end space-x-3">
          <Button
            variant="outline"
            type="button"
            onClick={onCancel}
          >
            Cancel
          </Button>
          <Button
            variant="primary"
            type="submit"
            isLoading={isSubmitting}
            disabled={isSubmitting}
          >
            Save Assessment
          </Button>
        </div>
      </Form>
    </div>
  );
};

// Main Competency Management Component
interface CompetencyManagementProps {
  competencies: Competency[];
  categories: CompetencyCategory[];
  traineeCompetencies: TraineeCompetency[];
  onCreateCompetency: (competency: Partial<Competency>) => Promise<void>;
  onUpdateCompetency: (competency: Competency) => Promise<void>;
  onDeleteCompetency: (competencyId: string) => Promise<void>;
  onCreateCategory: (category: Partial<CompetencyCategory>) => Promise<void>;
  onUpdateCategory: (category: CompetencyCategory) => Promise<void>;
  onDeleteCategory: (categoryId: string) => Promise<void>;
  onSaveAssessment: (assessment: Partial<TraineeCompetency>) => Promise<void>;
  onExportCompetencies: () => Promise<void>;
  onImportCompetencies: (file: File) => Promise<void>;
}

export const CompetencyManagement: React.FC<CompetencyManagementProps> = ({
  competencies,
  categories,
  traineeCompetencies,
  onCreateCompetency,
  onUpdateCompetency,
  onDeleteCompetency,
  onCreateCategory,
  onUpdateCategory,
  onDeleteCategory,
  onSaveAssessment,
  onExportCompetencies,
  onImportCompetencies
}) => {
  const [activeTab, setActiveTab] = useState<'competencies' | 'categories' | 'traineeView'>('competencies');
  const [showCompetencyForm, setShowCompetencyForm] = useState(false);
  const [editingCompetency, setEditingCompetency] = useState<Competency | null>(null);
  const [showTraineeAssessment, setShowTraineeAssessment] = useState(false);
  const [selectedCompetency, setSelectedCompetency] = useState<Competency | null>(null);
  const [alertMessage, setAlertMessage] = useState<{ type: 'success' | 'error'; message: string } | null>(null);
  const [selectedTrainee, setSelectedTrainee] = useState<{id: string; name: string} | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [expandedCompetency, setExpandedCompetency] = useState<string | null>(null);
  const fileInputRef = React.useRef<HTMLInputElement>(null);

  // Define competency table columns
  const competencyColumns: Column<Competency>[] = [
    {
      key: 'name',
      header: 'Competency',
      render: (competency) => (
        <div>
          <div className="font-medium">{competency.name}</div>
          <div className="text-xs text-gray-500">
            {categories.find(cat => cat.id === competency.categoryId)?.name}
          </div>
        </div>
      ),
      sortable: true
    },
    {
      key: 'minimumLevel',
      header: 'Min Level',
      render: (competency) => (
        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
          competency.minimumLevel === CompetencyLevel.UNSATISFACTORY ? 'bg-red-100 text-red-800' :
          competency.minimumLevel === CompetencyLevel.BASIC ? 'bg-yellow-100 text-yellow-800' :
          competency.minimumLevel === CompetencyLevel.PROFICIENT ? 'bg-green-100 text-green-800' :
          'bg-blue-100 text-blue-800'
        }`}>
          {competency.minimumLevel}
        </span>
      ),
      sortable: true
    },
    {
      key: 'indicators',
      header: 'Indicators',
      render: (competency) => competency.indicators.length,
      sortable: true
    },
    {
      key: 'actions',
      header: 'Actions',
      render: (competency) => (
        <div className="flex space-x-2">
          <button
            onClick={(e) => {
              e.stopPropagation();
              handleEditCompetency(competency);
            }}
            className="text-blue-600 hover:text-blue-900"
            title="Edit"
          >
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
            </svg>
          </button>
          <button
            onClick={(e) => {
              e.stopPropagation();
              handleDeleteCompetency(competency.id);
            }}
            className="text-red-600 hover:text-red-900"
            title="Delete"
          >
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
            </svg>
          </button>
        </div>
      )
    }
  ];

  // Filter competencies based on search and category
  const filteredCompetencies = competencies.filter(competency => {
    const matchesSearch = 
      searchTerm === '' || 
      competency.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      competency.description?.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesCategory = 
      selectedCategory === 'all' || 
      competency.categoryId === selectedCategory;
    
    return matchesSearch && matchesCategory;
  });

  // Handle create or update competency
  const handleSaveCompetency = async (competencyData: Partial<Competency>) => {
    try {
      if (editingCompetency) {
        await onUpdateCompetency({ ...editingCompetency, ...competencyData } as Competency);
        setAlertMessage({ type: 'success', message: 'Competency updated successfully' });
      } else {
        await onCreateCompetency(competencyData);
        setAlertMessage({ type: 'success', message: 'Competency created successfully' });
      }
      
      setShowCompetencyForm(false);
      setEditingCompetency(null);
    } catch (error) {
      setAlertMessage({ 
        type: 'error', 
        message: `Failed to ${editingCompetency ? 'update' : 'create'} competency: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
      // Keep form open on error
      return Promise.reject(error);
    }
  };

  // Handle edit competency
  const handleEditCompetency = (competency: Competency) => {
    setEditingCompetency(competency);
    setShowCompetencyForm(true);
  };

  // Handle delete competency
  const handleDeleteCompetency = async (competencyId: string) => {
    if (!window.confirm('Are you sure you want to delete this competency? This action cannot be undone.')) {
      return;
    }
    
    try {
      await onDeleteCompetency(competencyId);
      setAlertMessage({ type: 'success', message: 'Competency deleted successfully' });
    } catch (error) {
      setAlertMessage({ 
        type: 'error', 
        message: `Failed to delete competency: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };

  // Handle trainee assessment
  const handleTraineeAssessment = (competency: Competency, trainee: {id: string; name: string}) => {
    setSelectedCompetency(competency);
    setSelectedTrainee(trainee);
    setShowTraineeAssessment(true);
  };

  // Handle save assessment
  const handleSaveAssessment = async (assessmentData: Partial<TraineeCompetency>) => {
    try {
      await onSaveAssessment(assessmentData);
      setAlertMessage({ type: 'success', message: 'Assessment saved successfully' });
      setShowTraineeAssessment(false);
    } catch (error) {
      setAlertMessage({ 
        type: 'error', 
        message: `Failed to save assessment: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
      return Promise.reject(error);
    }
  };

  // Handle export competencies
  const handleExportCompetencies = async () => {
    try {
      await onExportCompetencies();
      setAlertMessage({ type: 'success', message: 'Competencies exported successfully' });
    } catch (error) {
      setAlertMessage({ 
        type: 'error', 
        message: `Failed to export competencies: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };

  // Handle import competencies
  const handleImportCompetencies = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;
    
    try {
      await onImportCompetencies(file);
      setAlertMessage({ type: 'success', message: 'Competencies imported successfully' });
    } catch (error) {
      setAlertMessage({ 
        type: 'error', 
        message: `Failed to import competencies: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    } finally {
      // Reset file input
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    }
  };

  // Toggle expanded competency
  const toggleCompetencyExpand = (competencyId: string) => {
    setExpandedCompetency(expandedCompetency === competencyId ? null : competencyId);
  };

  // Get existing assessment for a competency and trainee
  const getExistingAssessment = (competencyId: string, traineeId: string) => {
    return traineeCompetencies.find(
      tc => tc.competencyId === competencyId && tc.traineeId === traineeId
    );
  };

  // Format assessment level
  const formatAssessmentLevel = (level: CompetencyLevel) => {
    switch (level) {
      case CompetencyLevel.UNSATISFACTORY:
        return { text: 'Unsatisfactory', color: 'bg-red-100 text-red-800' };
      case CompetencyLevel.BASIC:
        return { text: 'Basic', color: 'bg-yellow-100 text-yellow-800' };
      case CompetencyLevel.PROFICIENT:
        return { text: 'Proficient', color: 'bg-green-100 text-green-800' };
      case CompetencyLevel.EXEMPLARY:
        return { text: 'Exemplary', color: 'bg-blue-100 text-blue-800' };
      default:
        return { text: 'Unknown', color: 'bg-gray-100 text-gray-800' };
    }
  };

  const tabs: Tab[] = [
    {
      id: 'competencies',
      label: 'Competencies',
      content: (
        <div>
          <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-4">
            <div className="mb-4 sm:mb-0">
              <h2 className="text-lg font-medium">Competency Management</h2>
              <p className="text-gray-500">Manage pilot competencies, categories, and assessment criteria</p>
            </div>
            
            <div className="flex flex-wrap gap-2">
              <Button
                variant="primary"
                onClick={() => {
                  setEditingCompetency(null);
                  setShowCompetencyForm(true);
                }}
              >
                Add Competency
              </Button>
              
              <Button
                variant="outline"
                onClick={handleExportCompetencies}
              >
                Export
              </Button>
              
              <Button
                variant="outline"
                onClick={() => fileInputRef.current?.click()}
              >
                Import
              </Button>
              <input
                type="file"
                ref={fileInputRef}
                className="hidden"
                accept=".json,.csv"
                onChange={handleImportCompetencies}
              />
            </div>
          </div>
          
          <div className="mb-6 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <div>
              <label htmlFor="search" className="block text-sm font-medium text-gray-700 mb-1">
                Search Competencies
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <svg className="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                  </svg>
                </div>
                <input
                  type="text"
                  id="search"
                  className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  placeholder="Search by name or description"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
              </div>
            </div>
            
            <div>
              <label htmlFor="category-filter" className="block text-sm font-medium text-gray-700 mb-1">
                Filter by Category
              </label>
              <select
                id="category-filter"
                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
              >
                <option value="all">All Categories</option>
                {categories.map(category => (
                  <option key={category.id} value={category.id}>
                    {category.name}
                  </option>
                ))}
              </select>
            </div>
          </div>
          
          {filteredCompetencies.length > 0 ? (
            <div className="space-y-4">
              {filteredCompetencies.map(competency => {
                const category = categories.find(cat => cat.id === competency.categoryId);
                const isExpanded = expandedCompetency === competency.id;
                
                return (
                  <Card key={competency.id} className="cursor-pointer hover:shadow-md transition-shadow">
                    <div 
                      className="p-4"
                      onClick={() => toggleCompetencyExpand(competency.id)}
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex items-center">
                          <div className={`transform transition-transform ${isExpanded ? 'rotate-90' : ''}`}>
                            <svg className="h-5 w-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path>
                            </svg>
                          </div>
                          <div className="ml-2">
                            <h3 className="text-lg font-medium">{competency.name}</h3>
                            <div className="flex items-center mt-1 space-x-2">
                              {category && (
                                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                                  {category.name}
                                </span>
                              )}
                              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                competency.minimumLevel === CompetencyLevel.UNSATISFACTORY ? 'bg-red-100 text-red-800' :
                                competency.minimumLevel === CompetencyLevel.BASIC ? 'bg-yellow-100 text-yellow-800' :
                                competency.minimumLevel === CompetencyLevel.PROFICIENT ? 'bg-green-100 text-green-800' :
                                'bg-blue-100 text-blue-800'
                              }`}>
                                Min Level: {competency.minimumLevel}
                              </span>
                            </div>
                          </div>
                        </div>
                        <div className="flex space-x-2">
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              handleEditCompetency(competency);
                            }}
                            className="text-blue-600 hover:text-blue-900"
                            title="Edit"
                          >
                            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                            </svg>
                          </button>
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              handleDeleteCompetency(competency.id);
                            }}
                            className="text-red-600 hover:text-red-900"
                            title="Delete"
                          >
                            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                            </svg>
                          </button>
                        </div>
                      </div>
                      
                      {competency.description && (
                        <p className="mt-2 text-sm text-gray-500">{competency.description}</p>
                      )}
                    </div>
                    
                    {isExpanded && (
                      <div className="border-t px-4 py-3">
                        <h4 className="text-base font-medium mb-2">Performance Indicators</h4>
                        <div className="space-y-3">
                          {competency.indicators.map((indicator) => {
                            const level = formatAssessmentLevel(indicator.level);
                            return (
                              <div key={indicator.level} className="bg-gray-50 p-3 rounded-md">
                                <div className="flex items-center mb-1">
                                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${level.color}`}>
                                    Level {indicator.level}: {level.text}
                                  </span>
                                </div>
                                <p className="text-sm">{indicator.description}</p>
                                {indicator.criteria.length > 0 && (
                                  <div className="mt-1">
                                    <p className="text-xs font-medium text-gray-500">Criteria:</p>
                                    <ul className="list-disc list-inside text-xs text-gray-500 mt-1">
                                      {indicator.criteria.map((criterion, idx) => (
                                        <li key={idx}>{criterion}</li>
                                      ))}
                                    </ul>
                                  </div>
                                )}
                              </div>
                            );
                          })}
                        </div>
                        
                        {(competency.regulatoryReferences?.length || competency.trainingObjectives?.length) && (
                          <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                            {competency.regulatoryReferences?.length && (
                              <div>
                                <h4 className="text-sm font-medium mb-1">Regulatory References</h4>
                                <ul className="list-disc list-inside text-sm text-gray-500">
                                  {competency.regulatoryReferences.map((ref, index) => (
                                    <li key={index}>{ref}</li>
                                  ))}
                                </ul>
                              </div>
                            )}
                            
                            {competency.trainingObjectives?.length && (
                              <div>
                                <h4 className="text-sm font-medium mb-1">Training Objectives</h4>
                                <ul className="list-disc list-inside text-sm text-gray-500">
                                  {competency.trainingObjectives.map((obj, index) => (
                                    <li key={index}>{obj}</li>
                                  ))}
                                </ul>
                              </div>
                            )}
                          </div>
                        )}
                      </div>
                    )}
                  </Card>
                );
              })}
            </div>
          ) : (
            <div className="text-center py-8 bg-gray-50 rounded-md">
              <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
              <h3 className="mt-2 text-sm font-medium text-gray-900">No competencies found</h3>
              <p className="mt-1 text-sm text-gray-500">
                {searchTerm || selectedCategory !== 'all' ? 
                  'Try adjusting your search or filter criteria.' : 
                  'Get started by creating a new competency.'}
              </p>
              <div className="mt-6">
                <Button
                  variant="primary"
                  onClick={() => {
                    setEditingCompetency(null);
                    setShowCompetencyForm(true);
                  }}
                >
                  Add Competency
                </Button>
              </div>
            </div>
          )}
        </div>
      )
    },
    {
      id: 'categories',
      label: 'Categories',
      content: (
        <CategoryManagement
          categories={categories}
          onCreateCategory={onCreateCategory}
          onUpdateCategory={onUpdateCategory}
          onDeleteCategory={onDeleteCategory}
        />
      )
    },
    {
      id: 'traineeView',
      label: 'Trainee View',
      content: (
        <div>
          <div className="mb-6">
            <h2 className="text-lg font-medium">Trainee Competency View</h2>
            <p className="text-gray-500">View and assess trainee competencies</p>
          </div>
          
          <div className="mb-6">
            {/* Trainee selection and view would go here */}
            <p className="text-gray-500">Select a trainee to view and assess their competencies.</p>
          </div>
        </div>
      )
    }
  ];

  return (
    <div className="competency-management">
      {alertMessage && (
        <Alert
          type={alertMessage.type}
          message={alertMessage.message}
          onClose={() => setAlertMessage(null)}
        />
      )}
      
      <Tabs
        tabs={tabs}
        defaultTabId="competencies"
        onChange={(tabId) => setActiveTab(tabId as any)}
      />
      
      {/* Competency Form Modal */}
      {showCompetencyForm && (
        <Modal
          isOpen={showCompetencyForm}
          onClose={() => setShowCompetencyForm(false)}
          title={`${editingCompetency ? 'Edit' : 'Create'} Competency`}
          size="xl"
        >
          <CompetencyForm
            competency={editingCompetency || {}}
            categories={categories}
            onSave={handleSaveCompetency}
            onCancel={() => setShowCompetencyForm(false)}
            isEditing={!!editingCompetency}
          />
        </Modal>
      )}
      
      {/* Trainee Assessment Modal */}
      {showTraineeAssessment && selectedCompetency && selectedTrainee && (
        <Modal
          isOpen={showTraineeAssessment}
          onClose={() => setShowTraineeAssessment(false)}
          title={`Assess Competency: ${selectedCompetency.name}`}
          size="lg"
        >
          <TraineeAssessment
            trainee={selectedTrainee}
            competency={selectedCompetency}
            category={categories.find(cat => cat.id === selectedCompetency.categoryId)!}
            existingAssessment={getExistingAssessment(selectedCompetency.id, selectedTrainee.id)}
            onSave={handleSaveAssessment}
            onCancel={() => setShowTraineeAssessment(false)}
          />
        </Modal>
      )}
    </div>
  );
};

// src/frontend/components/compliance/ComplianceEngine.tsx
import React, { useState, useEffect } from 'react';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { Tabs, Tab } from '../ui/Tabs';
import { DataTable, Column } from '../ui/DataTable';
import { Alert } from '../ui/Alert';
import { Modal } from '../ui/Modal';

// Types
export enum ComplianceStatus {
  COMPLIANT = 'compliant',
  PARTIALLY_COMPLIANT = 'partiallyCompliant',
  NON_COMPLIANT = 'nonCompliant',
  UNKNOWN = 'unknown'
}

export interface RegulatoryFramework {
  id: string;
  name: string;
  version: string;
  authority: string;
  description: string;
  effectiveDate: Date;
  requirements: RegulatoryRequirement[];
}

export interface RegulatoryRequirement {
  id: string;
  frameworkId: string;
  code: string;
  title: string;
  description: string;
  priority: 'critical' | 'high' | 'medium' | 'low';
  applicability: {
    aircraftTypes?: string[];
    pilotTypes?: string[];
    trainingTypes?: string[];
  };
  references?: string[];
}

export interface ComplianceTrainingMapping {
  id: string;
  requirementId: string;
  syllabusElementId: string;
  status: ComplianceStatus;
  coveragePercent: number;
  notes?: string;
  lastChecked: Date;
  checkedBy: string;
}

export interface ComplianceReport {
  id: string;
  trainingProgramId: string;
  trainingProgramName: string;
  frameworkId: string;
  frameworkName: string;
  generatedDate: Date;
  generatedBy: string;
  overallStatus: ComplianceStatus;
  requirementStatuses: {
    requirementId: string;
    status: ComplianceStatus;
    details: string;
    mappings: string[];
  }[];
}

export interface TrainingProgram {
  id: string;
  name: string;
  version: string;
  description: string;
  appliedFrameworks: string[];
  lastCheckedDate?: Date;
  complianceStatus?: ComplianceStatus;
}

// Component
interface RequirementDetailProps {
  requirement: RegulatoryRequirement;
  mappings: ComplianceTrainingMapping[];
  onClose: () => void;
  onAddMapping?: () => void;
}

const RequirementDetail: React.FC<RequirementDetailProps> = ({
  requirement,
  mappings,
  onClose,
  onAddMapping
}) => {
  return (
    <Modal
      isOpen={true}
      onClose={onClose}
      title={`Requirement: ${requirement.code}`}
      size="lg"
    >
      <div className="space-y-6">
        <div>
          <h3 className="text-lg font-medium">{requirement.title}</h3>
          <p className="mt-1 text-sm text-gray-500">{requirement.description}</p>
          
          <div className="mt-3 flex items-center space-x-3">
            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
              requirement.priority === 'critical' ? 'bg-red-100 text-red-800' :
              requirement.priority === 'high' ? 'bg-orange-100 text-orange-800' :
              requirement.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :
              'bg-green-100 text-green-800'
            }`}>
              {requirement.priority}
            </span>
            
            {requirement.applicability.aircraftTypes && (
              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                {requirement.applicability.aircraftTypes.join(', ')}
              </span>
            )}
            
            {requirement.applicability.pilotTypes && (
              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                {requirement.applicability.pilotTypes.join(', ')}
              </span>
            )}
          </div>
        </div>
        
        <div>
          <h3 className="text-base font-medium mb-2">Training Mappings</h3>
          
          {mappings.length > 0 ? (
            <div className="border rounded-md overflow-hidden">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Syllabus Element
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Status
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Coverage
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Last Checked
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {mappings.map(mapping => (
                    <tr key={mapping.id}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                        {mapping.syllabusElementId}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                          mapping.status === ComplianceStatus.COMPLIANT ? 'bg-green-100 text-green-800' :
                          mapping.status === ComplianceStatus.PARTIALLY_COMPLIANT ? 'bg-yellow-100 text-yellow-800' :
                          mapping.status === ComplianceStatus.NON_COMPLIANT ? 'bg-red-100 text-red-800' :
                          'bg-gray-100 text-gray-800'
                        }`}>
                          {mapping.status === ComplianceStatus.COMPLIANT ? 'Compliant' :
                           mapping.status === ComplianceStatus.PARTIALLY_COMPLIANT ? 'Partially Compliant' :
                           mapping.status === ComplianceStatus.NON_COMPLIANT ? 'Non-Compliant' :
                           'Unknown'}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {mapping.coveragePercent}%
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {new Date(mapping.lastChecked).toLocaleDateString()}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          ) : (
            <div className="bg-gray-50 p-4 rounded-md text-center">
              <p className="text-sm text-gray-500">
                No training elements mapped to this requirement.
              </p>
            </div>
          )}
          
          {onAddMapping && (
            <div className="mt-4">
              <Button
                variant="outline"
                onClick={onAddMapping}
              >
                Add Mapping
              </Button>
            </div>
          )}
        </div>
        
        {requirement.references && requirement.references.length > 0 && (
          <div>
            <h3 className="text-base font-medium mb-2">References</h3>
            <ul className="list-disc list-inside text-sm text-gray-500">
              {requirement.references.map((ref, index) => (
                <li key={index}>{ref}</li>
              ))}
            </ul>
          </div>
        )}
      </div>
    </Modal>
  );
};

interface ReportDetailProps {
  report: ComplianceReport;
  requirements: RegulatoryRequirement[];
  onClose: () => void;
  onExportPdf?: () => void;
}

const ReportDetail: React.FC<ReportDetailProps> = ({
  report,
  requirements,
  onClose,
  onExportPdf
}) => {
  // Count statuses
  const compliantCount = report.requirementStatuses.filter(s => s.status === ComplianceStatus.COMPLIANT).length;
  const partiallyCompliantCount = report.requirementStatuses.filter(s => s.status === ComplianceStatus.PARTIALLY_COMPLIANT).length;
  const nonCompliantCount = report.requirementStatuses.filter(s => s.status === ComplianceStatus.NON_COMPLIANT).length;
  
  // Calculate compliance percentage
  const totalRequirements = report.requirementStatuses.length;
  const compliancePercentage = Math.round(
    ((compliantCount + (partiallyCompliantCount * 0.5)) / totalRequirements) * 100
  );
  
  // Group requirements by priority
  const requirementsByPriority = {
    critical: report.requirementStatuses.filter(
      s => requirements.find(r => r.id === s.requirementId)?.priority === 'critical'
    ),
    high: report.requirementStatuses.filter(
      s => requirements.find(r => r.id === s.requirementId)?.priority === 'high'
    ),
    medium: report.requirementStatuses.filter(
      s => requirements.find(r => r.id === s.requirementId)?.priority === 'medium'
    ),
    low: report.requirementStatuses.filter(
      s => requirements.find(r => r.id === s.requirementId)?.priority === 'low'
    )
  };
  
  return (
    <Modal
      isOpen={true}
      onClose={onClose}
      title={`Compliance Report: ${report.trainingProgramName}`}
      size="xl"
    >
      <div className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="bg-gray-50 p-4 rounded-md">
            <p className="text-sm text-gray-500">Framework</p>
            <p className="text-lg font-medium">{report.frameworkName}</p>
          </div>
          
          <div className="bg-gray-50 p-4 rounded-md">
            <p className="text-sm text-gray-500">Report Date</p>
            <p className="text-lg font-medium">{new Date(report.generatedDate).toLocaleDateString()}</p>
          </div>
          
          <div className="bg-gray-50 p-4 rounded-md">
            <p className="text-sm text-gray-500">Generated By</p>
            <p className="text-lg font-medium">{report.generatedBy}</p>
          </div>
        </div>
        
        <div className="bg-white p-6 rounded-lg border">
          <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-6">
            <div className="flex items-center mb-4 md:mb-0">
              <div className={`h-12 w-12 rounded-full flex items-center justify-center ${
                report.overallStatus === ComplianceStatus.COMPLIANT ? 'bg-green-100' :
                report.overallStatus === ComplianceStatus.PARTIALLY_COMPLIANT ? 'bg-yellow-100' :
                'bg-red-100'
              }`}>
                {report.overallStatus === ComplianceStatus.COMPLIANT ? (
                  <svg className="h-8 w-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                ) : report.overallStatus === ComplianceStatus.PARTIALLY_COMPLIANT ? (
                  <svg className="h-8 w-8 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
                  </svg>
                ) : (
                  <svg className="h-8 w-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                )}
              </div>
              
              <div className="ml-4">
                <h3 className="text-xl font-bold">Overall Status</h3>
                <p className="text-lg">
                  {report.overallStatus === ComplianceStatus.COMPLIANT ? 'Compliant' :
                   report.overallStatus === ComplianceStatus.PARTIALLY_COMPLIANT ? 'Partially Compliant' :
                   'Non-Compliant'}
                </p>
              </div>
            </div>
            
            <div className="text-center">
              <div className="text-3xl font-bold">{compliancePercentage}%</div>
              <p className="text-sm text-gray-500">Compliance Rate</p>
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <div className="bg-green-50 p-4 rounded-md">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="h-8 w-8 rounded-full bg-green-100 flex items-center justify-center">
                    <svg className="h-5 w-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                  </div>
                </div>
                <div className="ml-3">
                  <p className="text-sm font-medium text-green-800">Compliant</p>
                  <p className="text-xl font-bold text-green-900">{compliantCount}</p>
                </div>
              </div>
            </div>
            
            <div className="bg-yellow-50 p-4 rounded-md">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="h-8 w-8 rounded-full bg-yellow-100 flex items-center justify-center">
                    <svg className="h-5 w-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
                    </svg>
                  </div>
                </div>
                <div className="ml-3">
                  <p className="text-sm font-medium text-yellow-800">Partially Compliant</p>
                  <p className="text-xl font-bold text-yellow-900">{partiallyCompliantCount}</p>
                </div>
              </div>
            </div>
            
            <div className="bg-red-50 p-4 rounded-md">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="h-8 w-8 rounded-full bg-red-100 flex items-center justify-center">
                    <svg className="h-5 w-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </div>
                </div>
                <div className="ml-3">
                  <p className="text-sm font-medium text-red-800">Non-Compliant</p>
                  <p className="text-xl font-bold text-red-900">{nonCompliantCount}</p>
                </div>
              </div>
            </div>
          </div>
          
          <div className="space-y-6">
            {requirementsByPriority.critical.length > 0 && (
              <div>
                <h3 className="text-lg font-medium mb-3">Critical Requirements</h3>
                <div className="bg-gray-50 rounded-md overflow-hidden">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-100">
                      <tr>
                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Requirement
                        </th>
                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Status
                        </th>
                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Details
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {requirementsByPriority.critical.map(status => {
                        const requirement = requirements.find(r => r.id === status.requirementId);
                        return (
                          <tr key={status.requirementId}>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <div className="text-sm font-medium text-gray-900">
                                {requirement?.code}
                              </div>
                              <div className="text-sm text-gray-500">
                                {requirement?.title}
                              </div>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                status.status === ComplianceStatus.COMPLIANT ? 'bg-green-100 text-green-800' :
                                status.status === ComplianceStatus.PARTIALLY_COMPLIANT ? 'bg-yellow-100 text-yellow-800' :
                                status.status === ComplianceStatus.NON_COMPLIANT ? 'bg-red-100 text-red-800' :
                                'bg-gray-100 text-gray-800'
                              }`}>
                                {status.status === ComplianceStatus.COMPLIANT ? 'Compliant' :
                                 status.status === ComplianceStatus.PARTIALLY_COMPLIANT ? 'Partially Compliant' :
                                 status.status === ComplianceStatus.NON_COMPLIANT ? 'Non-Compliant' :
                                 'Unknown'}
                              </span>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                              {status.details}
                            </td>
                          </tr>
                        );
                      })}
                    </tbody>
                  </table>
                </div>
              </div>
            )}
            
            {requirementsByPriority.high.length > 0 && (
              <div>
                <h3 className="text-lg font-medium mb-3">High Priority Requirements</h3>
                <div className="bg-gray-50 rounded-md overflow-hidden">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-100">
                      <tr>
                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Requirement
                        </th>
                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Status
                        </th>
                        <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Details
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {requirementsByPriority.high.map(status => {
                        const requirement = requirements.find(r => r.id === status.requirementId);
                        return (
                          <tr key={status.requirementId}>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <div className="text-sm font-medium text-gray-900">
                                {requirement?.code}
                              </div>
                              <div className="text-sm text-gray-500">
                                {requirement?.title}
                              </div>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                status.status === ComplianceStatus.COMPLIANT ? 'bg-green-100 text-green-800' :
                                status.status === ComplianceStatus.PARTIALLY_COMPLIANT ? 'bg-yellow-100 text-yellow-800' :
                                status.status === ComplianceStatus.NON_COMPLIANT ? 'bg-red-100 text-red-800' :
                                'bg-gray-100 text-gray-800'
                              }`}>
                                {status.status === ComplianceStatus.COMPLIANT ? 'Compliant' :
                                 status.status === ComplianceStatus.PARTIALLY_COMPLIANT ? 'Partially Compliant' :
                                 status.status === ComplianceStatus.NON_COMPLIANT ? 'Non-Compliant' :
                                 'Unknown'}
                              </span>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                              {status.details}
                            </td>
                          </tr>
                        );
                      })}
                    </tbody>
                  </table>
                </div>
              </div>
            )}
          </div>
        </div>
        
        {onExportPdf && (
          <div className="flex justify-end">
            <Button
              variant="primary"
              onClick={onExportPdf}
            >
              Export Report as PDF
            </Button>
          </div>
        )}
      </div>
    </Modal>
  );
};

// Main Component
interface ComplianceEngineProps {
  frameworks: RegulatoryFramework[];
  trainingPrograms: TrainingProgram[];
  mappings: ComplianceTrainingMapping[];
  reports: ComplianceReport[];
  onCheckCompliance: (programId: string, frameworkId: string) => Promise<ComplianceReport>;
  onGenerateReport: (programId: string, frameworkId: string) => Promise<string>;
  onAddMapping: (requirementId: string, syllabusElementId: string, status: ComplianceStatus) => Promise<void>;
  onUpdateMapping: (mappingId: string, updates: Partial<ComplianceTrainingMapping>) => Promise<void>;
  onExportReport: (reportId: string, format: 'pdf' | 'csv') => Promise<void>;
}

export const ComplianceEngine: React.FC<ComplianceEngineProps> = ({
  frameworks,
  trainingPrograms,
  mappings,
  reports,
  onCheckCompliance,
  onGenerateReport,
  onAddMapping,
  onUpdateMapping,
  onExportReport
}) => {
  const [activeTab, setActiveTab] = useState<'frameworks' | 'training' | 'reports'>('frameworks');
  const [selectedFramework, setSelectedFramework] = useState<string | null>(null);
  const [selectedProgram, setSelectedProgram] = useState<string | null>(null);
  const [selectedRequirement, setSelectedRequirement] = useState<RegulatoryRequirement | null>(null);
  const [selectedReport, setSelectedReport] = useState<ComplianceReport | null>(null);
  const [isCheckingCompliance, setIsCheckingCompliance] = useState(false);
  const [isGeneratingReport, setIsGeneratingReport] = useState(false);
  const [alertMessage, setAlertMessage] = useState<{ type: 'success' | 'error' | 'warning'; message: string } | null>(null);
  
  // Flatten all requirements from all frameworks
  const allRequirements = frameworks.flatMap(framework => framework.requirements);
  
  // Get framework details by ID
  const getFramework = (id: string) => {
    return frameworks.find(framework => framework.id === id);
  };
  
  // Get training program details by ID
  const getTrainingProgram = (id: string) => {
    return trainingPrograms.find(program => program.id === id);
  };
  
  // Get requirement mappings
  const getRequirementMappings = (requirementId: string) => {
    return mappings.filter(mapping => mapping.requirementId === requirementId);
  };
  
  // Check compliance for a training program
  const handleCheckCompliance = async () => {
    if (!selectedProgram || !selectedFramework) {
      setAlertMessage({
        type: 'error',
        message: 'Please select both a training program and a framework.'
      });
      return;
    }
    
    setIsCheckingCompliance(true);
    
    try {
      const report = await onCheckCompliance(selectedProgram, selectedFramework);
      
      setSelectedReport(report);
      
      setAlertMessage({
        type: 'success',
        message: 'Compliance check completed successfully.'
      });
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to check compliance: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    } finally {
      setIsCheckingCompliance(false);
    }
  };
  
  // Generate compliance report
  const handleGenerateReport = async () => {
    if (!selectedProgram || !selectedFramework) {
      setAlertMessage({
        type: 'error',
        message: 'Please select both a training program and a framework.'
      });
      return;
    }
    
    setIsGeneratingReport(true);
    
    try {
      const reportId = await onGenerateReport(selectedProgram, selectedFramework);
      
      const generatedReport = reports.find(report => report.id === reportId);
      if (generatedReport) {
        setSelectedReport(generatedReport);
      }
      
      setAlertMessage({
        type: 'success',
        message: 'Compliance report generated successfully.'
      });
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to generate report: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    } finally {
      setIsGeneratingReport(false);
    }
  };
  
  // Export report as PDF
  const handleExportReportPdf = async (reportId: string) => {
    try {
      await onExportReport(reportId, 'pdf');
      
      setAlertMessage({
        type: 'success',
        message: 'Report exported successfully.'
      });
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to export report: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };
  
  // Define columns for framework requirements table
  const requirementColumns: Column<RegulatoryRequirement>[] = [
    {
      key: 'code',
      header: 'Code',
      render: (req) => (
        <div className="font-medium text-blue-600 hover:text-blue-900 cursor-pointer">
          {req.code}
        </div>
      ),
      sortable: true
    },
    {
      key: 'title',
      header: 'Title',
      render: (req) => req.title,
      sortable: true
    },
    {
      key: 'priority',
      header: 'Priority',
      render: (req) => (
        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
          req.priority === 'critical' ? 'bg-red-100 text-red-800' :
          req.priority === 'high' ? 'bg-orange-100 text-orange-800' :
          req.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :
          'bg-green-100 text-green-800'
        }`}>
          {req.priority}
        </span>
      ),
      sortable: true
    },
    {
      key: 'mappings',
      header: 'Mappings',
      render: (req) => {
        const reqMappings = mappings.filter(m => m.requirementId === req.id);
        const compliantCount = reqMappings.filter(m => m.status === ComplianceStatus.COMPLIANT).length;
        const partialCount = reqMappings.filter(m => m.status === ComplianceStatus.PARTIALLY_COMPLIANT).length;
        const nonCompliantCount = reqMappings.filter(m => m.status === ComplianceStatus.NON_COMPLIANT).length;
        
        return (
          <div className="flex space-x-1">
            {compliantCount > 0 && (
              <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-100 text-green-800">
                {compliantCount}
              </span>
            )}
            {partialCount > 0 && (
              <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-yellow-100 text-yellow-800">
                {partialCount}
              </span>
            )}
            {nonCompliantCount > 0 && (
              <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-100 text-red-800">
                {nonCompliantCount}
              </span>
            )}
            {reqMappings.length === 0 && (
              <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800">
                0
              </span>
            )}
          </div>
        );
      }
    }
  ];
  
  // Define columns for training programs table
  const programColumns: Column<TrainingProgram>[] = [
    {
      key: 'name',
      header: 'Program Name',
      render: (program) => (
        <div className="font-medium text-blue-600 hover:text-blue-900 cursor-pointer">
          {program.name}
        </div>
      ),
      sortable: true
    },
    {
      key: 'version',
      header: 'Version',
      render: (program) => program.version,
      sortable: true
    },
    {
      key: 'frameworks',
      header: 'Frameworks',
      render: (program) => {
        return (
          <div className="flex flex-wrap gap-1">
            {program.appliedFrameworks.map(frameworkId => {
              const framework = frameworks.find(f => f.id === frameworkId);
              return framework ? (
                <span key={frameworkId} className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">
                  {framework.name}
                </span>
              ) : null;
            })}
          </div>
        );
      }
    },
    {
      key: 'compliance',
      header: 'Compliance Status',
      render: (program) => (
        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
          program.complianceStatus === ComplianceStatus.COMPLIANT ? 'bg-green-100 text-green-800' :
          program.complianceStatus === ComplianceStatus.PARTIALLY_COMPLIANT ? 'bg-yellow-100 text-yellow-800' :
          program.complianceStatus === ComplianceStatus.NON_COMPLIANT ? 'bg-red-100 text-red-800' :
          'bg-gray-100 text-gray-800'
        }`}>
          {program.complianceStatus === ComplianceStatus.COMPLIANT ? 'Compliant' :
           program.complianceStatus === ComplianceStatus.PARTIALLY_COMPLIANT ? 'Partially Compliant' :
           program.complianceStatus === ComplianceStatus.NON_COMPLIANT ? 'Non-Compliant' :
           'Not Checked'}
        </span>
      ),
      sortable: true
    },
    {
      key: 'lastChecked',
      header: 'Last Checked',
      render: (program) => program.lastCheckedDate ? new Date(program.lastCheckedDate).toLocaleDateString() : 'Never',
      sortable: true
    }
  ];
  
  // Define columns for reports table
  const reportColumns: Column<ComplianceReport>[] = [
    {
      key: 'trainingProgramName',
      header: 'Program',
      render: (report) => (
        <div className="font-medium text-blue-600 hover:text-blue-900 cursor-pointer">
          {report.trainingProgramName}
        </div>
      ),
      sortable: true
    },
    {
      key: 'frameworkName',
      header: 'Framework',
      render: (report) => report.frameworkName,
      sortable: true
    },
    {
      key: 'generatedDate',
      header: 'Date',
      render: (report) => new Date(report.generatedDate).toLocaleDateString(),
      sortable: true
    },
    {
      key: 'overallStatus',
      header: 'Status',
      render: (report) => (
        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
          report.overallStatus === ComplianceStatus.COMPLIANT ? 'bg-green-100 text-green-800' :
          report.overallStatus === ComplianceStatus.PARTIALLY_COMPLIANT ? 'bg-yellow-100 text-yellow-800' :
          report.overallStatus === ComplianceStatus.NON_COMPLIANT ? 'bg-red-100 text-red-800' :
          'bg-gray-100 text-gray-800'
        }`}>
          {report.overallStatus === ComplianceStatus.COMPLIANT ? 'Compliant' :
           report.overallStatus === ComplianceStatus.PARTIALLY_COMPLIANT ? 'Partially Compliant' :
           report.overallStatus === ComplianceStatus.NON_COMPLIANT ? 'Non-Compliant' :
           'Unknown'}
        </span>
      ),
      sortable: true
    },
    {
      key: 'actions',
      header: 'Actions',
      render: (report) => (
        <div className="flex space-x-2">
          <button
            onClick={(e) => {
              e.stopPropagation();
              handleExportReportPdf(report.id);
            }}
            className="text-blue-600 hover:text-blue-900"
            title="Export as PDF"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
            </svg>
          </button>
        </div>
      )
    }
  ];
  
  const tabs: Tab[] = [
    {
      id: 'frameworks',
      label: 'Regulatory Frameworks',
      content: (
        <div className="space-y-6">
          {/* Framework selector */}
          <Card>
            <div className="mb-4">
              <label htmlFor="framework-select" className="block text-sm font-medium text-gray-700">
                Select Regulatory Framework
              </label>
              <select
                id="framework-select"
                className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={selectedFramework || ''}
                onChange={(e) => setSelectedFramework(e.target.value || null)}
              >
                <option value="">-- Select Framework --</option>
                {frameworks.map(framework => (
                  <option key={framework.id} value={framework.id}>
                    {framework.name} (v{framework.version})
                  </option>
                ))}
              </select>
            </div>
            
            {selectedFramework && (
              <div>
                {frameworks
                  .filter(framework => framework.id === selectedFramework)
                  .map(framework => (
                    <div key={framework.id}>
                      <h3 className="text-lg font-medium mb-2">{framework.name}</h3>
                      <p className="text-sm text-gray-500 mb-2">{framework.description}</p>
                      
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                        <div>
                          <p className="text-xs text-gray-500">Authority</p>
                          <p className="font-medium">{framework.authority}</p>
                        </div>
                        <div>
                          <p className="text-xs text-gray-500">Version</p>
                          <p className="font-medium">{framework.version}</p>
                        </div>
                        <div>
                          <p className="text-xs text-gray-500">Effective Date</p>
                          <p className="font-medium">{new Date(framework.effectiveDate).toLocaleDateString()}</p>
                        </div>
                      </div>
                    </div>
                  ))}
              </div>
            )}
          </Card>
          
          {/* Requirements table */}
          {selectedFramework && (
            <Card>
              <div className="mb-4">
                <h3 className="text-lg font-medium">Requirements</h3>
              </div>
              
              <DataTable
                columns={requirementColumns}
                data={frameworks
                  .filter(framework => framework.id === selectedFramework)
                  .flatMap(framework => framework.requirements)}
                keyExtractor={(req) => req.id}
                onRowClick={(req) => setSelectedRequirement(req)}
              />
            </Card>
          )}
        </div>
      )
    },
    {
      id: 'training',
      label: 'Training Programs',
      content: (
        <div className="space-y-6">
          {/* Compliance check card */}
          <Card>
            <div className="mb-4">
              <h3 className="text-lg font-medium">Check Compliance</h3>
              <p className="text-sm text-gray-500">Select a training program and regulatory framework to check compliance.</p>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <div>
                <label htmlFor="program-select" className="block text-sm font-medium text-gray-700">
                  Select Training Program
                </label>
                <select
                  id="program-select"
                  className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                  value={selectedProgram || ''}
                  onChange={(e) => setSelectedProgram(e.target.value || null)}
                >
                  <option value="">-- Select Program --</option>
                  {trainingPrograms.map(program => (
                    <option key={program.id} value={program.id}>
                      {program.name} (v{program.version})
                    </option>
                  ))}
                </select>
              </div>
              
              <div>
                <label htmlFor="framework-select-check" className="block text-sm font-medium text-gray-700">
                  Select Regulatory Framework
                </label>
                <select
                  id="framework-select-check"
                  className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                  value={selectedFramework || ''}
                  onChange={(e) => setSelectedFramework(e.target.value || null)}
                >
                  <option value="">-- Select Framework --</option>
                  {frameworks.map(framework => (
                    <option key={framework.id} value={framework.id}>
                      {framework.name} (v{framework.version})
                    </option>
                  ))}
                </select>
              </div>
            </div>
            
            <div className="flex space-x-2">
              <Button
                variant="primary"
                onClick={handleCheckCompliance}
                isLoading={isCheckingCompliance}
                disabled={isCheckingCompliance || !selectedProgram || !selectedFramework}
              >
                Check Compliance
              </Button>
              
              <Button
                variant="outline"
                onClick={handleGenerateReport}
                isLoading={isGeneratingReport}
                disabled={isGeneratingReport || !selectedProgram || !selectedFramework}
              >
                Generate Report
              </Button>
            </div>
          </Card>
          
          {/* Training programs table */}
          <Card>
            <div className="mb-4">
              <h3 className="text-lg font-medium">Training Programs</h3>
            </div>
            
            <DataTable
              columns={programColumns}
              data={trainingPrograms}
              keyExtractor={(program) => program.id}
              onRowClick={(program) => setSelectedProgram(program.id)}
            />
          </Card>
        </div>
      )
    },
    {
      id: 'reports',
      label: 'Compliance Reports',
      content: (
        <div className="space-y-6">
          {/* Reports table */}
          <Card>
            <div className="mb-4">
              <h3 className="text-lg font-medium">Generated Reports</h3>
            </div>
            
            {reports.length > 0 ? (
              <DataTable
                columns={reportColumns}
                data={reports}
                keyExtractor={(report) => report.id}
                onRowClick={(report) => setSelectedReport(report)}
              />
            ) : (
              <div className="p-8 text-center">
                <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path>
                </svg>
                <h3 className="mt-2 text-sm font-medium text-gray-900">No reports</h3>
                <p className="mt-1 text-sm text-gray-500">
                  Generate a compliance report to see it here.
                </p>
                <div className="mt-6">
                  <Button
                    variant="primary"
                    onClick={() => setActiveTab('training')}
                  >
                    Generate Report
                  </Button>
                </div>
              </div>
            )}
          </Card>
        </div>
      )
    }
  ];

  return (
    <div className="compliance-engine">
      {/* Alert message */}
      {alertMessage && (
        <Alert
          type={alertMessage.type}
          message={alertMessage.message}
          onClose={() => setAlertMessage(null)}
        />
      )}
      
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6">
        <h2 className="text-2xl font-bold text-gray-900">Regulatory Compliance Engine</h2>
      </div>
      
      {/* Main tabs */}
      <Tabs
        tabs={tabs}
        defaultTabId="frameworks"
        onChange={(tabId) => setActiveTab(tabId as any)}
      />
      
      {/* Requirement Detail Modal */}
      {selectedRequirement && (
        <RequirementDetail
          requirement={selectedRequirement}
          mappings={getRequirementMappings(selectedRequirement.id)}
          onClose={() => setSelectedRequirement(null)}
          onAddMapping={() => {
            // In a real implementation, this would open a modal to add a new mapping
            console.log('Add mapping for', selectedRequirement.id);
          }}
        />
      )}
      
      {/* Report Detail Modal */}
      {selectedReport && (
        <ReportDetail
          report={selectedReport}
          requirements={allRequirements}
          onClose={() => setSelectedReport(null)}
          onExportPdf={() => handleExportReportPdf(selectedReport.id)}
        />
      )}
    </div>
  );
};
// components/compliance/RegulatoryComplianceMatrix.tsx
import React, { useState } from 'react';
import {
  Box,
  Paper,
  Typography,
  Chip,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  IconButton,
  Tooltip,
  Button,
  TextField,
  InputAdornment,
  Menu,
  MenuItem,
  FormControl,
  InputLabel,
  Select,
  CircularProgress,
} from '@mui/material';
import {
  Search,
  FilterList,
  CheckCircle,
  Warning,
  Error as ErrorIcon,
  Info,
  CloudDownload,
  MoreVert,
  Visibility,
} from '@mui/icons-material';

interface RegulatoryRequirement {
  id: string;
  code: string;
  description: string;
  authority: string;
  category: string;
  status: 'compliant' | 'partially-compliant' | 'non-compliant' | 'not-applicable';
  mappedElements: {
    id: string;
    type: 'module' | 'exercise' | 'document';
    name: string;
  }[];
  lastVerified?: string;
  notes?: string;
}

export const RegulatoryComplianceMatrix: React.FC = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [filterAnchorEl, setFilterAnchorEl] = useState<null | HTMLElement>(null);
  const [selectedAuthority, setSelectedAuthority] = useState<string>('all');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [selectedStatus, setSelectedStatus] = useState<string>('all');
  const [loading, setLoading] = useState(false);
  const [actionMenuAnchorEl, setActionMenuAnchorEl] = useState<null | HTMLElement>(null);
  const [selectedRequirement, setSelectedRequirement] = useState<RegulatoryRequirement | null>(null);

  // Mock data
  const requirements: RegulatoryRequirement[] = [
    {
      id: 'req-1',
      code: 'EASA FCL.725.A(b)(1)',
      description: 'Technical training covering aircraft systems knowledge',
      authority: 'EASA',
      category: 'Type Rating',
      status: 'compliant',
      mappedElements: [
        { id: 'mod-1', type: 'module', name: 'Aircraft Systems - Powerplant' },
        { id: 'mod-2', type: 'module', name: 'Aircraft Systems - Hydraulics' },
        { id: 'ex-1', type: 'exercise', name: 'Systems Knowledge Evaluation' },
      ],
      lastVerified: '2023-07-15T14:30:00Z',
    },
    {
      id: 'req-2',
      code: 'EASA FCL.725.A(b)(3)',
      description: 'Flying training covering normal, abnormal and emergency procedures',
      authority: 'EASA',
      category: 'Type Rating',
      status: 'partially-compliant',
      mappedElements: [
        { id: 'mod-3', type: 'module', name: 'Normal Procedures' },
        { id: 'mod-4', type: 'module', name: 'Abnormal Procedures' },
      ],
      lastVerified: '2023-07-10T09:15:00Z',
      notes: 'Emergency procedures coverage needs enhancement',
    },
    {
      id: 'req-3',
      code: 'FAA 14 CFR §61.31(a)',
      description: 'Type rating requirements for large aircraft and turbine-powered aircraft',
      authority: 'FAA',
      category: 'Type Rating',
      status: 'non-compliant',
      mappedElements: [],
      lastVerified: '2023-07-05T11:30:00Z',
      notes: 'No mapped content for this requirement yet',
    },
    {
      id: 'req-4',
      code: 'ICAO Annex 1-2.1.3',
      description: 'Requirements for the issue of multi-crew pilot license',
      authority: 'ICAO',
      category: 'MPL',
      status: 'compliant',
      mappedElements: [
        { id: 'mod-5', type: 'module', name: 'Multi-Crew Coordination' },
        { id: 'doc-1', type: 'document', name: 'ICAO MPL Compliance Guide' },
      ],
      lastVerified: '2023-07-12T15:45:00Z',
    },
    {
      id: 'req-5',
      code: 'DGCA CAR Section 7 Series M Part II',
      description: 'Requirements for issue of licenses and ratings for pilots',
      authority: 'DGCA',
      category: 'Licensing',
      status: 'not-applicable',
      mappedElements: [],
      lastVerified: '2023-07-08T10:20:00Z',
      notes: 'Not applicable for current training programs',
    },
  ];

  const handleFilterClick = (event: React.MouseEvent<HTMLElement>) => {
    setFilterAnchorEl(event.currentTarget);
  };

  const handleCloseFilter = () => {
    setFilterAnchorEl(null);
  };

  const handleAuthorityChange = (event: React.ChangeEvent<{ value: unknown }>) => {
    setSelectedAuthority(event.target.value as string);
  };

  const handleCategoryChange = (event: React.ChangeEvent<{ value: unknown }>) => {
    setSelectedCategory(event.target.value as string);
  };

  const handleStatusChange = (event: React.ChangeEvent<{ value: unknown }>) => {
    setSelectedStatus(event.target.value as string);
  };

  const handleActionMenuOpen = (event: React.MouseEvent<HTMLElement>, requirement: RegulatoryRequirement) => {
    setActionMenuAnchorEl(event.currentTarget);
    setSelectedRequirement(requirement);
  };

  const handleActionMenuClose = () => {
    setActionMenuAnchorEl(null);
    setSelectedRequirement(null);
  };

  const handleExportCSV = () => {
    // Implementation would go here
    console.log('Exporting to CSV...');
  };

  // Filter the requirements based on search and filters
  const filteredRequirements = requirements.filter((req) => {
    // Apply search filter
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      if (
        !req.code.toLowerCase().includes(query) &&
        !req.description.toLowerCase().includes(query) &&
        !req.authority.toLowerCase().includes(query) &&
        !req.category.toLowerCase().includes(query)
      ) {
        return false;
      }
    }

    // Apply authority filter
    if (selectedAuthority !== 'all' && req.authority !== selectedAuthority) {
      return false;
    }

    // Apply category filter
    if (selectedCategory !== 'all' && req.category !== selectedCategory) {
      return false;
    }

    // Apply status filter
    if (selectedStatus !== 'all' && req.status !== selectedStatus) {
      return false;
    }

    return true;
  });

  const formatDate = (dateString?: string) => {
    if (!dateString) return 'Not verified';
    return new Date(dateString).toLocaleDateString(undefined, {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
    });
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'compliant':
        return <CheckCircle fontSize="small" className="text-green-500" />;
      case 'partially-compliant':
        return <Warning fontSize="small" className="text-amber-500" />;
      case 'non-compliant':
        return <ErrorIcon fontSize="small" className="text-red-500" />;
      case 'not-applicable':
        return <Info fontSize="small" className="text-gray-500" />;
      default:
        return null;
    }
  };

  const getStatusChip = (status: string) => {
    switch (status) {
      case 'compliant':
        return <Chip label="Compliant" size="small" color="success" />;
      case 'partially-compliant':
        return <Chip label="Partially Compliant" size="small" color="warning" />;
      case 'non-compliant':
        return <Chip label="Non-Compliant" size="small" color="error" />;
      case 'not-applicable':
        return <Chip label="Not Applicable" size="small" color="default" />;
      default:
        return null;
    }
  };

  // Get unique authorities and categories for filters
  const authorities = ['all', ...new Set(requirements.map((req) => req.authority))];
  const categories = ['all', ...new Set(requirements.map((req) => req.category))];

  return (
    <Paper elevation={2} className="overflow-hidden">
      <Box className="p-4 bg-gray-50 border-b flex justify-between items-center">
        <Typography variant="h6">Regulatory Compliance Matrix</Typography>
        <Button
          variant="outlined"
          startIcon={<CloudDownload />}
          onClick={handleExportCSV}
        >
          Export
        </Button>
      </Box>

      <Box className="p-4">
        <Box className="flex flex-wrap gap-3 mb-4">
          <TextField
            placeholder="Search requirements..."
            variant="outlined"
            size="small"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="flex-grow"
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <Search />
                </InputAdornment>
              ),
            }}
          />

          <Button 
            variant="outlined" 
            startIcon={<FilterList />} 
            onClick={handleFilterClick}
          >
            Filters
          </Button>
        </Box>

        {loading ? (
          <Box className="flex justify-center p-6">
            <CircularProgress />
          </Box>
        ) : filteredRequirements.length === 0 ? (
          <Box className="text-center p-6">
            <Typography variant="body1" color="textSecondary">
              No requirements found matching your filters
            </Typography>
            <Button
              variant="text"
              color="primary"
              onClick={() => {
                setSearchQuery('');
                setSelectedAuthority('all');
                setSelectedCategory('all');
                setSelectedStatus('all');
              }}
              className="mt-2"
            >
              Clear Filters
            </Button>
          </Box>
        ) : (
          <TableContainer>
            <Table>
              <TableHead className="bg-gray-50">
                <TableRow>
                  <TableCell>Requirement Code</TableCell>
                  <TableCell>Description</TableCell>
                  <TableCell>Authority</TableCell>
                  <TableCell>Category</TableCell>
                  <TableCell>Status</TableCell>
                  <TableCell>Mapped Elements</TableCell>
                  <TableCell>Last Verified</TableCell>
                  <TableCell>Actions</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {filteredRequirements.map((req) => (
                  <TableRow key={req.id} hover>
                    <TableCell className="font-medium">{req.code}</TableCell>
                    <TableCell>{req.description}</TableCell>
                    <TableCell>{req.authority}</TableCell>
                    <TableCell>{req.category}</TableCell>
                    <TableCell>
                      <Box className="flex items-center">
                        {getStatusIcon(req.status)}
                        <Typography variant="body2" className="ml-1">
                          {getStatusChip(req.status)}
                        </Typography>
                      </Box>
                    </TableCell>
                    <TableCell>
                      {req.mappedElements.length > 0 ? (
                        <Chip
                          label={`${req.mappedElements.length} elements`}
                          size="small"
                          color="primary"
                          variant="outlined"
                        />
                      ) : (
                        <Typography variant="body2" color="textSecondary">
                          None
                        </Typography>
                      )}
                    </TableCell>
                    <TableCell>{formatDate(req.lastVerified)}</TableCell>
                    <TableCell>
                      <IconButton
                        size="small"
                        onClick={(e) => handleActionMenuOpen(e, req)}
                      >
                        <MoreVert fontSize="small" />
                      </IconButton>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        )}
      </Box>

      {/* Filters Menu */}
      <Menu
        anchorEl={filterAnchorEl}
        open={Boolean(filterAnchorEl)}
        onClose={handleCloseFilter}
        PaperProps={{
          elevation: 2,
          sx: { width: 300, maxHeight: 500, p: 2 },
        }}
      >
        <Typography variant="subtitle2" className="mb-3">
          Filter Requirements
        </Typography>

        <FormControl fullWidth variant="outlined" size="small" className="mb-3">
          <InputLabel>Authority</InputLabel>
          <Select
            value={selectedAuthority}
            onChange={handleAuthorityChange}
            label="Authority"
          >
            {authorities.map((authority) => (
              <MenuItem key={authority} value={authority}>
                {authority === 'all' ? 'All Authorities' : authority}
              </MenuItem>
            ))}
          </Select>
        </FormControl>

        <FormControl fullWidth variant="outlined" size="small" className="mb-3">
          <InputLabel>Category</InputLabel>
          <Select
            value={selectedCategory}
            onChange={handleCategoryChange}
            label="Category"
          >
            {categories.map((category) => (
              <MenuItem key={category} value={category}>
                {category === 'all' ? 'All Categories' : category}
              </MenuItem>
            ))}
          </Select>
        </FormControl>

        <FormControl fullWidth variant="outlined" size="small" className="mb-3">
          <InputLabel>Status</InputLabel>
          <Select
            value={selectedStatus}
            onChange={handleStatusChange}
            label="Status"
          >
            <MenuItem value="all">All Statuses</MenuItem>
            <MenuItem value="compliant">Compliant</MenuItem>
            <MenuItem value="partially-compliant">Partially Compliant</MenuItem>
            <MenuItem value="non-compliant">Non-Compliant</MenuItem>
            <MenuItem value="not-applicable">Not Applicable</MenuItem>
          </Select>
        </FormControl>

        <Box className="flex justify-end mt-2">
          <Button
            variant="text"
            onClick={() => {
              setSelectedAuthority('all');
              setSelectedCategory('all');
              setSelectedStatus('all');
            }}
            className="mr-2"
          >
            Reset
          </Button>
          <Button variant="contained" onClick={handleCloseFilter}>
            Apply Filters
          </Button>
        </Box>
      </Menu>

      {/* Action Menu */}
      <Menu
        anchorEl={actionMenuAnchorEl}
        open={Boolean(actionMenuAnchorEl)}
        onClose={handleActionMenuClose}
      >
        <MenuItem onClick={handleActionMenuClose}>
          <Visibility fontSize="small" className="mr-2" />
          View Details
        </MenuItem>
        <MenuItem onClick={handleActionMenuClose}>
          <Visibility fontSize="small" className="mr-2" />
          View Mapped Elements
        </MenuItem>
        <MenuItem onClick={handleActionMenuClose}>
          <CloudDownload fontSize="small" className="mr-2" />
          Export Details
        </MenuItem>
      </Menu>
    </Paper>
  );
};

// components/compliance/AuditTrailLog.tsx
import React, { useState, useEffect } from 'react';
import {
  Box,
  Paper,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Chip,
  TextField,
  InputAdornment,
  Button,
  IconButton,
  Tooltip,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Pagination,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  List,
  ListItem,
  ListItemText,
  CircularProgress,
} from '@mui/material';
import {
  Search,
  FilterList,
  Event,
  Person,
  Info,
  Warning,
  SyncAlt,
  Edit,
  Add,
  Delete,
  Visibility,
  Download,
  CloudDownload,
  Close,
} from '@mui/icons-material';

interface AuditLogEntry {
  id: string;
  timestamp: string;
  userId: string;
  userName: string;
  userRole: string;
  action: string;
  entityType: string;
  entityId: string;
  entityName: string;
  changes?: {
    field: string;
    oldValue: string;
    newValue: string;
  }[];
  ipAddress: string;
  severity: 'info' | 'warning' | 'critical';
  isVerified: boolean; // Whether the entry has been verified on blockchain
}

export const AuditTrailLog: React.FC = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedUserId, setSelectedUserId] = useState<string>('all');
  const [selectedEntityType, setSelectedEntityType] = useState<string>('all');
  const [selectedAction, setSelectedAction] = useState<string>('all');
  const [selectedSeverity, setSelectedSeverity] = useState<string>('all');
  const [page, setPage] = useState(1);
  const [loading, setLoading] = useState(false);
  const [detailsOpen, setDetailsOpen] = useState(false);
  const [selectedEntry, setSelectedEntry] = useState<AuditLogEntry | null>(null);
  
  // Mock data
  const auditLogs: AuditLogEntry[] = [
    {
      id: 'log-1',
      timestamp: '2023-08-15T14:30:00Z',
      userId: 'user-1',
      userName: 'John Miller',
      userRole: 'Instructor',
      action: 'create',
      entityType: 'syllabus',
      entityId: 'syllabus-1',
      entityName: 'B737 Type Rating Syllabus',
      ipAddress: '192.168.1.100',
      severity: 'info',
      isVerified: true,
    },
    {
      id: 'log-2',
      timestamp: '2023-08-15T15:45:00Z',
      userId: 'user-1',
      userName: 'John Miller',
      userRole: 'Instructor',
      action: 'modify',
      entityType: 'exercise',
      entityId: 'exercise-23',
      entityName: 'Engine Failure After Takeoff',
      changes: [
        { field: 'description', oldValue: 'Basic engine failure scenario', newValue: 'Comprehensive engine failure with additional complications' },
        { field: 'duration', oldValue: '60', newValue: '90' },
      ],
      ipAddress: '192.168.1.100',
      severity: 'info',
      isVerified: true,
    },
    {
      id: 'log-3',
      timestamp: '2023-08-16T09:20:00Z',
      userId: 'user-2',
      userName: 'Sarah Johnson',
      userRole: 'Admin',
      action: 'delete',
      entityType: 'document',
      entityId: 'document-15',
      entityName: 'Outdated Training Manual',
      ipAddress: '192.168.1.105',
      severity: 'warning',
      isVerified: true,
    },
    {
      id: 'log-4',
      timestamp: '2023-08-16T11:30:00Z',
      userId: 'user-3',
      userName: 'Mike Davis',
      userRole: 'Instructor',
      action: 'approve',
      entityType: 'assessment',
      entityId: 'assessment-42',
      entityName: 'Final Type Rating Checkride',
      ipAddress: '192.168.1.110',
      severity: 'critical',
      isVerified: true,
    },
    {
      id: 'log-5',
      timestamp: '2023-08-16T16:15:00Z',
      userId: 'user-2',
      userName: 'Sarah Johnson',
      userRole: 'Admin',
      action: 'modify',
      entityType: 'user',
      entityId: 'user-5',
      entityName: 'Robert Chen',
      changes: [
        { field: 'role', oldValue: 'Trainee', newValue: 'Instructor' },
        { field: 'permissions', oldValue: 'basic_access', newValue: 'instructor_access' },
      ],
      ipAddress: '192.168.1.105',
      severity: 'warning',
      isVerified: false,
    },
  ];

  const itemsPerPage = 10;
  const totalPages = Math.ceil(auditLogs.length / itemsPerPage);

  // Simulate loading data
  useEffect(() => {
    setLoading(true);
    const timer = setTimeout(() => {
      setLoading(false);
    }, 500);
    return () => clearTimeout(timer);
  }, [page, selectedUserId, selectedEntityType, selectedAction, selectedSeverity, searchQuery]);

  const handlePageChange = (_: React.ChangeEvent<unknown>, value: number) => {
    setPage(value);
  };

  const handleViewDetails = (entry: AuditLogEntry) => {
    setSelectedEntry(entry);
    setDetailsOpen(true);
  };

  const handleCloseDetails = () => {
    setDetailsOpen(false);
    setSelectedEntry(null);
  };

  const handleExportLogs = () => {
    // Implementation would go here
    console.log('Exporting audit logs...');
  };

  // Filter the audit logs based on search and filters
  const filteredLogs = auditLogs.filter((log) => {
    // Apply search filter
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      if (
        !log.userName.toLowerCase().includes(query) &&
        !log.entityName.toLowerCase().includes(query) &&
        !log.action.toLowerCase().includes(query)
      ) {
        return false;
      }
    }

    // Apply user filter
    if (selectedUserId !== 'all' && log.userId !== selectedUserId) {
      return false;
    }

    // Apply entity type filter
    if (selectedEntityType !== 'all' && log.entityType !== selectedEntityType) {
      return false;
    }

    // Apply action filter
    if (selectedAction !== 'all' && log.action !== selectedAction) {
      return false;
    }

    // Apply severity filter
    if (selectedSeverity !== 'all' && log.severity !== selectedSeverity) {
      return false;
    }

    return true;
  });

  const paginatedLogs = filteredLogs.slice(
    (page - 1) * itemsPerPage,
    page * itemsPerPage
  );

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString(undefined, {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  const getActionChip = (action: string) => {
    switch (action) {
      case 'create':
        return <Chip label="Create" size="small" color="success" />;
      case 'modify':
        return <Chip label="Modify" size="small" color="primary" />;
      case 'delete':
        return <Chip label="Delete" size="small" color="error" />;
      case 'approve':
        return <Chip label="Approve" size="small" color="info" />;
      default:
        return <Chip label={action} size="small" />;
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'info':
        return <Info className="text-blue-500" />;
      case 'warning':
        return <Warning className="text-amber-500" />;
      case 'critical':
        return <Warning className="text-red-500" />;
      default:
        return <Info className="text-gray-500" />;
    }
  };

  // Get unique users, entity types, and actions for filters
  const users = [
    { id: 'all', name: 'All Users' },
    ...auditLogs
      .filter((log, index, self) => self.findIndex((l) => l.userId === log.userId) === index)
      .map((log) => ({ id: log.userId, name: log.userName })),
  ];

  const entityTypes = [
    'all',
    ...new Set(auditLogs.map((log) => log.entityType)),
  ];

  const actions = [
    'all',
    ...new Set(auditLogs.map((log) => log.action)),
  ];

  return (
    <Paper elevation={2} className="overflow-hidden">
      <Box className="p-4 bg-gray-50 border-b flex justify-between items-center">
        <Typography variant="h6">Audit Trail Log</Typography>
        <Button
          variant="outlined"
          startIcon={<CloudDownload />}
          onClick={handleExportLogs}
        >
          Export Logs
        </Button>
      </Box>

      <Box className="p-4">
        <Box className="flex flex-wrap gap-3 mb-4">
          <TextField
            placeholder="Search logs..."
            variant="outlined"
            size="small"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="flex-grow"
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <Search />
                </InputAdornment>
              ),
            }}
          />

          <FormControl variant="outlined" size="small" sx={{ minWidth: 150 }}>
            <InputLabel>User</InputLabel>
            <Select
              value={selectedUserId}
              onChange={(e) => setSelectedUserId(e.target.value as string)}
              label="User"
            >
              {users.map((user) => (
                <MenuItem key={user.id} value={user.id}>
                  {user.name}
                </MenuItem>
              ))}
            </Select>
          </FormControl>

          <FormControl variant="outlined" size="small" sx={{ minWidth: 150 }}>
            <InputLabel>Entity Type</InputLabel>
            <Select
              value={selectedEntityType}
              onChange={(e) => setSelectedEntityType(e.target.value as string)}
              label="Entity Type"
            >
              {entityTypes.map((type) => (
                <MenuItem key={type} value={type}>
                  {type === 'all' ? 'All Entity Types' : type}
                </MenuItem>
              ))}
            </Select>
          </FormControl>

          <FormControl variant="outlined" size="small" sx={{ minWidth: 150 }}>
            <InputLabel>Action</InputLabel>
            <Select
              value={selectedAction}
              onChange={(e) => setSelectedAction(e.target.value as string)}
              label="Action"
            >
              {actions.map((action) => (
                <MenuItem key={action} value={action}>
                  {action === 'all' ? 'All Actions' : action}
                </MenuItem>
              ))}
            </Select>
          </FormControl>

          <FormControl variant="outlined" size="small" sx={{ minWidth: 150 }}>
            <InputLabel>Severity</InputLabel>
            <Select
              value={selectedSeverity}
              onChange={(e) => setSelectedSeverity(e.target.value as string)}
              label="Severity"
            >
              <MenuItem value="all">All Severities</MenuItem>
              <MenuItem value="info">Info</MenuItem>
              <MenuItem value="warning">Warning</MenuItem>
              <MenuItem value="critical">Critical</MenuItem>
            </Select>
          </FormControl>
        </Box>

        {loading ? (
          <Box className="flex justify-center p-6">
            <CircularProgress />
          </Box>
        ) : paginatedLogs.length === 0 ? (
          <Box className="text-center p-6">
            <Typography variant="body1" color="textSecondary">
              No audit logs found matching your filters
            </Typography>
            <Button
              variant="text"
              color="primary"
              onClick={() => {
                setSearchQuery('');
                setSelectedUserId('all');
                setSelectedEntityType('all');
                setSelectedAction('all');
                setSelectedSeverity('all');
              }}
              className="mt-2"
            >
              Clear Filters
            </Button>
          </Box>
        ) : (
          <TableContainer>
            <Table>
              <TableHead className="bg-gray-50">
                <TableRow>
                  <TableCell width="180">Timestamp</TableCell>
                  <TableCell>User</TableCell>
                  <TableCell>Action</TableCell>
                  <TableCell>Entity</TableCell>
                  <TableCell>Blockchain Verified</TableCell>
                  <TableCell>Actions</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {paginatedLogs.map((log) => (
                  <TableRow key={log.id} hover>
                    <TableCell className="whitespace-nowrap">
                      <Box className="flex items-center">
                        {getSeverityIcon(log.severity)}
                        <Typography variant="body2" className="ml-2">
                          {formatDate(log.timestamp)}
                        </Typography>
                      </Box>
                    </TableCell>
                    <TableCell>
                      <Box className="flex items-center">
                        <Person fontSize="small" className="mr-1 text-gray-400" />
                        <Box>
                          <Typography variant="body2" className="font-medium">
                            {log.userName}
                          </Typography>
                          <Typography variant="caption" color="textSecondary">
                            {log.userRole}
                          </Typography>
                        </Box>
                      </Box>
                    </TableCell>
                    <TableCell>{getActionChip(log.action)}</TableCell>
                    <TableCell>
                      <Typography variant="body2" className="font-medium">
                        {log.entityName}
                      </Typography>
                      <Typography variant="caption" color="textSecondary">
                        {log.entityType}
                      </Typography>
                    </TableCell>
                    <TableCell>
                      {log.isVerified ? (
                        <Chip
                          icon={<CheckCircle fontSize="small" />}
                          label="Verified"
                          size="small"
                          color="success"
                          variant="outlined"
                        />
                      ) : (
                        <Chip
                          icon={<SyncAlt fontSize="small" />}
                          label="Pending"
                          size="small"
                          color="default"
                          variant="outlined"
                        />
                      )}
                    </TableCell>
                    <TableCell>
                      <Tooltip title="View Details">
                        <IconButton size="small" onClick={() => handleViewDetails(log)}>
                          <Visibility fontSize="small" />
                        </IconButton>
                      </Tooltip>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        )}

        {filteredLogs.length > itemsPerPage && (
          <Box className="flex justify-center mt-4">
            <Pagination
              count={totalPages}
              page={page}
              onChange={handlePageChange}
              color="primary"
            />
          </Box>
        )}
      </Box>

      {/* Details Dialog */}
      <Dialog
        open={detailsOpen}
        onClose={handleCloseDetails}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle className="flex justify-between items-center">
          <Typography variant="h6">Audit Log Details</Typography>
          <IconButton onClick={handleCloseDetails} size="small">
            <Close />
          </IconButton>
        </DialogTitle>
        <DialogContent dividers>
          {selectedEntry && (
            <Box>
              <Box className="grid grid-cols-2 gap-4 mb-4">
                <Box>
                  <Typography variant="subtitle2" color="textSecondary">
                    Timestamp
                  </Typography>
                  <Typography variant="body1">
                    {formatDate(selectedEntry.timestamp)}
                  </Typography>
                </Box>
                <Box>
                  <Typography variant="subtitle2" color="textSecondary">
                    User
                  </Typography>
                  <Typography variant="body1">
                    {selectedEntry.userName} ({selectedEntry.userRole})
                  </Typography>
                </Box>
                <Box>
                  <Typography variant="subtitle2" color="textSecondary">
                    Action
                  </Typography>
                  <Typography variant="body1">
                    {getActionChip(selectedEntry.action)}
                  </Typography>
                </Box>
                <Box>
                  <Typography variant="subtitle2" color="textSecondary">
                    Entity
                  </Typography>
                  <Typography variant="body1">
                    {selectedEntry.entityName} ({selectedEntry.entityType})
                  </Typography>
                </Box>
                <Box>
                  <Typography variant="subtitle2" color="textSecondary">
                    IP Address
                  </Typography>
                  <Typography variant="body1">{selectedEntry.ipAddress}</Typography>
                </Box>
                <Box>
                  <Typography variant="subtitle2" color="textSecondary">
                    Blockchain Verification
                  </Typography>
                  <Typography variant="body1">
                    {selectedEntry.isVerified ? (
                      <Box className="flex items-center">
                        <CheckCircle fontSize="small" className="text-green-500 mr-1" />
                        Verified on Blockchain
                      </Box>
                    ) : (
                      <Box className="flex items-center">
                        <SyncAlt fontSize="small" className="text-gray-500 mr-1" />
                        Verification Pending
                      </Box>
                    )}
                  </Typography>
                </Box>
              </Box>

              {selectedEntry.changes && selectedEntry.changes.length > 0 && (
                <Box className="mt-4">
                  <Typography variant="subtitle2" className="mb-2">
                    Changes
                  </Typography>
                  <TableContainer>
                    <Table size="small">
                      <TableHead className="bg-gray-50">
                        <TableRow>
                          <TableCell>Field</TableCell>
                          <TableCell>Old Value</TableCell>
                          <TableCell>New Value</TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {selectedEntry.changes.map((change, index) => (
                          <TableRow key={index}>
                            <TableCell className="font-medium">{change.field}</TableCell>
                            <TableCell>{change.oldValue}</TableCell>
                            <TableCell>{change.newValue}</TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </TableContainer>
                </Box>
              )}
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseDetails}>Close</Button>
          <Button 
            variant="outlined" 
            startIcon={<Download />}
            onClick={handleCloseDetails}
          >
            Export Details
          </Button>
        </DialogActions>
      </Dialog>
    </Paper>
  );
};

// components/compliance/RegulatoryUpdatesTracker.tsx
import React, { useState } from 'react';
import {
  Box,
  Paper,
  Typography,
  Card,
  CardContent,
  Chip,
  Divider,
  Button,
  IconButton,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  ListItemSecondaryAction,
  Tabs,
  Tab,
  TextField,
  InputAdornment,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
} from '@mui/material';
import {
  Notifications,
  NotificationsActive,
  Search,
  FilterAlt,
  NewReleases,
  CheckCircle,
  ErrorOutline,
  PriorityHigh,
  Schedule,
  CalendarToday,
  ArrowForward,
  Refresh,
  MoreVert,
  Visibility,
  Download,
  Article,
  OpenInNew,
  Assessment,
  Close,
} from '@mui/icons-material';

interface RegulatoryUpdate {
  id: string;
  title: string;
  description: string;
  authority: string;
  releaseDate: string;
  effectiveDate: string;
  category: string;
  tags: string[];
  status: 'new' | 'in-review' | 'analyzed' | 'implemented';
  impactLevel: 'low' | 'medium' | 'high' | 'critical';
  impactAreas: string[];
  documentUrl: string;
  assignedTo?: {
    id: string;
    name: string;
  };
}

export const RegulatoryUpdatesTracker: React.FC = () => {
  const [activeTab, setActiveTab] = useState(0);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedUpdate, setSelectedUpdate] = useState<RegulatoryUpdate | null>(null);
  const [updateDetailsOpen, setUpdateDetailsOpen] = useState(false);
  const [impactAnalysisOpen, setImpactAnalysisOpen] = useState(false);

  // Mock data
  const updates: RegulatoryUpdate[] = [
    {
      id: 'update-1',
      title: 'EASA FCL.740 Amendment - Recency Requirements Update',
      description: 'Updates to recency requirements for pilot license holders, introducing new provisions for maintaining currency during extended periods of inactivity.',
      authority: 'EASA',
      releaseDate: '2023-07-15T00:00:00Z',
      effectiveDate: '2023-10-01T00:00:00Z',
      category: 'Pilot Licensing',
      tags: ['Recency', 'License', 'Currency'],
      status: 'new',
      impactLevel: 'high',
      impactAreas: ['Type Rating Training', 'Recurrent Training'],
      documentUrl: 'https://example.com/easa-fcl740-amendment',
    },
    {
      id: 'update-2',
      title: 'FAA AC 120-117 - Pilot Professional Development',
      description: 'New Advisory Circular providing guidance on pilot professional development programs, including mentoring and leadership training requirements.',
      authority: 'FAA',
      releaseDate: '2023-07-10T00:00:00Z',
      effectiveDate: '2023-09-15T00:00:00Z',
      category: 'Training Programs',
      tags: ['Professional Development', 'Mentoring', 'Leadership'],
      status: 'in-review',
      impactLevel: 'medium',
      impactAreas: ['Instructor Training', 'CRM Training'],
      documentUrl: 'https://example.com/faa-ac120-117',
      assignedTo: {
        id: 'user-2',
        name: 'Sarah Johnson',
      },
    },
    {
      id: 'update-3',
      title: 'ICAO Annex 1 Amendment 177 - MPL Requirements',
      description: 'Updates to Multi-crew Pilot License (MPL) requirements, introducing enhanced simulation training provisions and competency assessment criteria.',
      authority: 'ICAO',
      releaseDate: '2023-06-20T00:00:00Z',
      effectiveDate: '2023-11-01T00:00:00Z',
      category: 'MPL Training',
      tags: ['MPL', 'Simulation', 'Competency Assessment'],
      status: 'analyzed',
      impactLevel: 'critical',
      impactAreas: ['MPL Programs', 'Simulator Training', 'Assessments'],
      documentUrl: 'https://example.com/icao-annex1-amdt177',
      assignedTo: {
        id: 'user-1',
        name: 'John Miller',
      },
    },
    {
      id: 'update-4',
      title: 'DGCA CAR Section 7 Series M Part I - Remote Pilot License',
      description: 'New regulations for Remote Pilot License issuance and training requirements for unmanned aircraft systems (UAS).',
      authority: 'DGCA',
      releaseDate: '2023-06-05T00:00:00Z',
      effectiveDate: '2023-08-01T00:00:00Z',
      category: 'UAS Training',
      tags: ['Remote Pilot', 'Drone', 'UAS'],
      status: 'implemented',
      impactLevel: 'low',
      impactAreas: ['UAS Training Programs'],
      documentUrl: 'https://example.com/dgca-car-remote-pilot',
    },
  ];

  const handleTabChange = (_: React.ChangeEvent<{}>, newValue: number) => {
    setActiveTab(newValue);
  };

  const handleViewDetails = (update: RegulatoryUpdate) => {
    setSelectedUpdate(update);
    setUpdateDetailsOpen(true);
  };

  const handleCloseDetails = () => {
    setUpdateDetailsOpen(false);
  };

  const handleViewImpactAnalysis = (update: RegulatoryUpdate) => {
    setSelectedUpdate(update);
    setImpactAnalysisOpen(true);
  };

  const handleCloseImpactAnalysis = () => {
    setImpactAnalysisOpen(false);
  };

  // Filter updates based on tab and search
  const filteredUpdates = updates.filter((update) => {
    // Filter by tab
    if (activeTab === 1 && update.status !== 'new') return false;
    if (activeTab === 2 && update.status !== 'in-review') return false;
    if (activeTab === 3 && update.status !== 'analyzed') return false;
    if (activeTab === 4 && update.status !== 'implemented') return false;

    // Filter by search
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      return (
        update.title.toLowerCase().includes(query) ||
        update.description.toLowerCase().includes(query) ||
        update.authority.toLowerCase().includes(query) ||
        update.category.toLowerCase().includes(query) ||
        update.tags.some((tag) => tag.toLowerCase().includes(query))
      );
    }

    return true;
  });

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString(undefined, {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
    });
  };

  const getImpactLevelChip = (level: string) => {
    switch (level) {
      case 'low':
        return <Chip label="Low Impact" size="small" color="success" />;
      case 'medium':
        return <Chip label="Medium Impact" size="small" color="info" />;
      case 'high':
        return <Chip label="High Impact" size="small" color="warning" />;
      case 'critical':
        return <Chip label="Critical Impact" size="small" color="error" />;
      default:
        return null;
    }
  };

  const getStatusChip = (status: string) => {
    switch (status) {
      case 'new':
        return <Chip label="New" size="small" color="error" icon={<NewReleases />} />;
      case 'in-review':
        return <Chip label="In Review" size="small" color="warning" icon={<Assessment />} />;
      case 'analyzed':
        return <Chip label="Analyzed" size="small" color="info" icon={<CheckCircle />} />;
      case 'implemented':
        return <Chip label="Implemented" size="small" color="success" icon={<CheckCircle />} />;
      default:
        return null;
    }
  };

  return (
    <Paper elevation={2} className="overflow-hidden">
      <Box className="p-4 bg-gray-50 border-b">
        <Box className="flex justify-between items-center">
          <Typography variant="h6">Regulatory Updates Tracker</Typography>
          <Button 
            variant="contained" 
            color="primary" 
            startIcon={<Refresh />}
          >
            Check for Updates
          </Button>
        </Box>
      </Box>

      <Box className="p-4">
        <Box className="flex flex-wrap gap-3 mb-4">
          <TextField
            placeholder="Search updates..."
            variant="outlined"
            size="small"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="flex-grow"
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <Search />
                </InputAdornment>
              ),
            }}
          />

          <Tabs
            value={activeTab}
            onChange={handleTabChange}
            variant="scrollable"
            scrollButtons="auto"
            className="min-w-0"
          >
            <Tab label="All" />
            <Tab 
              label="New" 
              icon={<Chip label={updates.filter(u => u.status === 'new').length} size="small" color="error" />}
              iconPosition="end"
            />
            <Tab 
              label="In Review" 
              icon={<Chip label={updates.filter(u => u.status === 'in-review').length} size="small" color="warning" />}
              iconPosition="end"
            />
            <Tab 
              label="Analyzed" 
              icon={<Chip label={updates.filter(u => u.status === 'analyzed').length} size="small" color="info" />}
              iconPosition="end"
            />
            <Tab 
              label="Implemented" 
              icon={<Chip label={updates.filter(u => u.status === 'implemented').length} size="small" color="success" />}
              iconPosition="end"
            />
          </Tabs>
        </Box>

        {filteredUpdates.length === 0 ? (
          <Box className="text-center p-6">
            <Typography variant="body1" color="textSecondary">
              No regulatory updates found
            </Typography>
          </Box>
        ) : (
          <List className="space-y-4">
            {filteredUpdates.map((update) => (
              <Card key={update.id} variant="outlined">
                <CardContent className="pb-2">
                  <Box className="flex justify-between items-start">
                    <Box className="flex items-center mb-2">
                      {getStatusChip(update.status)}
                      <Typography variant="subtitle1" className="ml-2 font-medium">
                        {update.title}
                      </Typography>
                    </Box>
                    {getImpactLevelChip(update.impactLevel)}
                  </Box>
                  
                  <Typography variant="body2" color="textSecondary" className="mb-3">
                    {update.description}
                  </Typography>
                  
                  <Box className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-3">
                    <Box>
                      <Typography variant="caption" color="textSecondary" className="block">
                        Authority
                      </Typography>
                      <Typography variant="body2">{update.authority}</Typography>
                    </Box>
                    
                    <Box>
                      <Typography variant="caption" color="textSecondary" className="block">
                        Released
                      </Typography>
                      <Typography variant="body2">{formatDate(update.releaseDate)}</Typography>
                    </Box>
                    
                    <Box>
                      <Typography variant="caption" color="textSecondary" className="block">
                        Effective Date
                      </Typography>
                      <Typography variant="body2" className="flex items-center">
                        {formatDate(update.effectiveDate)}
                        {new Date(update.effectiveDate) > new Date() && (
                          <Schedule className="ml-1 text-amber-500" fontSize="small" />
                        )}
                      </Typography>
                    </Box>
                  </Box>
                  
                  <Box className="flex flex-wrap gap-1 mb-2">
                    <Chip
                      label={update.category}
                      size="small"
                      color="primary"
                      variant="outlined"
                    />
                    {update.tags.map((tag) => (
                      <Chip key={tag} label={tag} size="small" variant="outlined" />
                    ))}
                  </Box>
                  
                  {update.assignedTo && (
                    <Box className="mt-2">
                      <Typography variant="caption" color="textSecondary" className="block">
                        Assigned to
                      </Typography>
                      <Typography variant="body2">{update.assignedTo.name}</Typography>
                    </Box>
                  )}
                </CardContent>
                
                <Divider />
                
                <Box className="flex justify-between items-center px-4 py-2">
                  <Box>
                    <Button
                      size="small"
                      startIcon={<Article />}
                      href={update.documentUrl}
                      target="_blank"
                      rel="noopener"
                    >
                      View Document
                    </Button>
                  </Box>
                  
                  <Box>
                    <Button
                      size="small"
                      startIcon={<Assessment />}
                      onClick={() => handleViewImpactAnalysis(update)}
                      disabled={update.status === 'new'}
                    >
                      Impact Analysis
                    </Button>
                    <Button
                      size="small"
                      startIcon={<Visibility />}
                      onClick={() => handleViewDetails(update)}
                      className="ml-2"
                    >
                      Details
                    </Button>
                  </Box>
                </Box>
              </Card>
            ))}
          </List>
        )}
      </Box>

      {/* Update Details Dialog */}
      <Dialog
        open={updateDetailsOpen}
        onClose={handleCloseDetails}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle className="flex justify-between items-center">
          <Typography variant="h6">Regulatory Update Details</Typography>
          <IconButton onClick={handleCloseDetails} size="small">
            <Close />
          </IconButton>
        </DialogTitle>
        <DialogContent dividers>
          {selectedUpdate && (
            <Box>
              <Box className="flex justify-between items-start mb-4">
                <Typography variant="h6">{selectedUpdate.title}</Typography>
                {getStatusChip(selectedUpdate.status)}
              </Box>
              
              <Typography variant="body1" className="mb-4">
                {selectedUpdate.description}
              </Typography>
              
              <Box className="grid grid-cols-2 gap-4 mb-4">
                <Box>
                  <Typography variant="subtitle2" color="textSecondary">
                    Authority
                  </Typography>
                  <Typography variant="body1">{selectedUpdate.authority}</Typography>
                </Box>
                
                <Box>
                  <Typography variant="subtitle2" color="textSecondary">
                    Category
                  </Typography>
                  <Typography variant="body1">{selectedUpdate.category}</Typography>
                </Box>
                
                <Box>
                  <Typography variant="subtitle2" color="textSecondary">
                    Release Date
                  </Typography>
                  <Typography variant="body1">
                    {formatDate(selectedUpdate.releaseDate)}
                  </Typography>
                </Box>
                
                <Box>
                  <Typography variant="subtitle2" color="textSecondary">
                    Effective Date
                  </Typography>
                  <Typography variant="body1">
                    {formatDate(selectedUpdate.effectiveDate)}
                  </Typography>
                </Box>
                
                <Box>
                  <Typography variant="subtitle2" color="textSecondary">
                    Impact Level
                  </Typography>
                  <Typography variant="body1">
                    {getImpactLevelChip(selectedUpdate.impactLevel)}
                  </Typography>
                </Box>
                
                <Box>
                  <Typography variant="subtitle2" color="textSecondary">
                    Assigned To
                  </Typography>
                  <Typography variant="body1">
                    {selectedUpdate.assignedTo?.name || 'Not assigned'}
                  </Typography>
                </Box>
              </Box>
              
              <Box className="mb-4">
                <Typography variant="subtitle2" color="textSecondary">
                  Impact Areas
                </Typography>
                <Box className="flex flex-wrap gap-1 mt-1">
                  {selectedUpdate.impactAreas.map((area) => (
                    <Chip key={area} label={area} />
                  ))}
                </Box>
              </Box>
              
              <Box className="mb-4">
                <Typography variant="subtitle2" color="textSecondary">
                  Tags
                </Typography>
                <Box className="flex flex-wrap gap-1 mt-1">
                  {selectedUpdate.tags.map((tag) => (
                    <Chip key={tag} label={tag} variant="outlined" size="small" />
                  ))}
                </Box>
              </Box>
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseDetails}>Close</Button>
          <Button
            variant="outlined"
            startIcon={<Article />}
            href={selectedUpdate?.documentUrl}
            target="_blank"
            rel="noopener"
          >
            View Original Document
          </Button>
          <Button
            variant="contained"
            startIcon={<Assessment />}
            onClick={() => {
              handleCloseDetails();
              if (selectedUpdate) handleViewImpactAnalysis(selectedUpdate);
            }}
            disabled={selectedUpdate?.status === 'new'}
          >
            View Impact Analysis
          </Button>
        </DialogActions>
      </Dialog>

      {/* Impact Analysis Dialog */}
      <Dialog
        open={impactAnalysisOpen}
        onClose={handleCloseImpactAnalysis}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle className="flex justify-between items-center">
          <Typography variant="h6">Impact Analysis</Typography>
          <IconButton onClick={handleCloseImpactAnalysis} size="small">
            <Close />
          </IconButton>
        </DialogTitle>
        <DialogContent dividers>
          {selectedUpdate && (
            <Box>
              <Box className="flex justify-between items-start mb-4">
                <Typography variant="h6">{selectedUpdate.title}</Typography>
                {getImpactLevelChip(selectedUpdate.impactLevel)}
              </Box>
              
              <Box className="bg-amber-50 border border-amber-200 rounded p-3 mb-4">
                <Typography variant="subtitle2" className="text-amber-800">
                  Executive Summary
                </Typography>
                <Typography variant="body2" className="text-amber-700">
                  This regulatory update has significant impacts on our training programs, specifically in the areas of {selectedUpdate.impactAreas.join(', ')}. Implementation will require updates to syllabus content, instructor training, and assessment methods.
                </Typography>
              </Box>
              
              <Typography variant="subtitle1" className="mb-2">
                Affected Training Elements
              </Typography>
              <TableContainer className="mb-4">
                <Table size="small">
                  <TableHead className="bg-gray-50">
                    <TableRow>
                      <TableCell>Element Type</TableCell>
                      <TableCell>Name</TableCell>
                      <TableCell>Impact Level</TableCell>
                      <TableCell>Required Changes</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    <TableRow>
                      <TableCell>Syllabus</TableCell>
                      <TableCell>B737 Type Rating</TableCell>
                      <TableCell>
                        <Chip label="High" size="small" color="warning" />
                      </TableCell>
                      <TableCell>Update module content and assessment criteria</TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell>Module</TableCell>
                      <TableCell>Aircraft Systems</TableCell>
                      <TableCell>
                        <Chip label="Medium" size="small" color="info" />
                      </TableCell>
                      <TableCell>Add new content on system limitations</TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell>Exercise</TableCell>
                      <TableCell>Emergency Procedures</TableCell>
                      <TableCell>
                        <Chip label="Critical" size="small" color="error" />
                      </TableCell>
                      <TableCell>Complete revision of exercise objectives and scenarios</TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell>Assessment</TableCell>
                      <TableCell>Final Checkride</TableCell>
                      <TableCell>
                        <Chip label="High" size="small" color="warning" />
                      </TableCell>
                      <TableCell>Update grading criteria and minimum performance standards</TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </TableContainer>
              
              <Typography variant="subtitle1" className="mb-2">
                Implementation Timeline
              </Typography>
              <List className="border rounded mb-4">
                <ListItem>
                  <ListItemIcon>
                    <CalendarToday color="primary" />
                  </ListItemIcon>
                  <ListItemText
                    primary="Phase 1: Documentation Updates"
                    secondary="August 1 - August 15, 2023"
                  />
                </ListItem>
                <Divider variant="inset" component="li" />
                <ListItem>
                  <ListItemIcon>
                    <CalendarToday color="primary" />
                  </ListItemIcon>
                  <ListItemText
                    primary="Phase 2: Instructor Training"
                    secondary="August 16 - August 31, 2023"
                  />
                </ListItem>
                <Divider variant="inset" component="li" />
                <ListItem>
                  <ListItemIcon>
                    <CalendarToday color="primary" />
                  </ListItemIcon>
                  <ListItemText
                    primary="Phase 3: Syllabus and Content Updates"
                    secondary="September 1 - September 15, 2023"
                  />
                </ListItem>
                <Divider variant="inset" component="li" />
                <ListItem>
                  <ListItemIcon>
                    <CalendarToday color="primary" />
                  </ListItemIcon>
                  <ListItemText
                    primary="Phase 4: Implementation and Verification"
                    secondary="September 16 - September 30, 2023"
                  />
                </ListItem>
              </List>
              
              <Typography variant="subtitle1" className="mb-2">
                Resources Required
              </Typography>
              <Box className="grid grid-cols-2 gap-4 mb-4">
                <Paper variant="outlined" className="p-3">
                  <Typography variant="subtitle2">Staff Resources</Typography>
                  <Typography variant="body2">
                    • 2 Instructional Designers: 80 hours<br />
                    • 4 Subject Matter Experts: 40 hours each<br />
                    • 1 Compliance Officer: 60 hours
                  </Typography>
                </Paper>
                
                <Paper variant="outlined" className="p-3">
                  <Typography variant="subtitle2">Technical Resources</Typography>
                  <Typography variant="body2">
                    • Training content updates<br />
                    • Simulator scenario reprogramming<br />
                    • Assessment tool reconfiguration
                  </Typography>
                </Paper>
              </Box>
              
              <Typography variant="subtitle1" className="mb-2">
                Risk Assessment
              </Typography>
              <TableContainer>
                <Table size="small">
                  <TableHead className="bg-gray-50">
                    <TableRow>
                      <TableCell>Risk</TableCell>
                      <TableCell>Severity</TableCell>
                      <TableCell>Mitigation Strategy</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    <TableRow>
                      <TableCell>Insufficient implementation time</TableCell>
                      <TableCell>
                        <Chip label="High" size="small" color="error" />
                      </TableCell>
                      <TableCell>Request extension from authority; prioritize critical elements</TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell>Instructor adaptation challenges</TableCell>
                      <TableCell>
                        <Chip label="Medium" size="small" color="warning" />
                      </TableCell>
                      <TableCell>Conduct early workshops; provide detailed guidance materials</TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell>Compliance interpretation errors</TableCell>
                      <TableCell>
                        <Chip label="Medium" size="small" color="warning" />
                      </TableCell>
                      <TableCell>Seek official clarification; consult with regulatory experts</TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </TableContainer>
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseImpactAnalysis}>Close</Button>
          <Button
            variant="outlined"
            startIcon={<Download />}
          >
            Download Analysis
          </Button>
        </DialogActions>
      </Dialog>
    </Paper>
  );
};

// app/compliance/page.tsx
'use client';

import React, { useState } from 'react';
import { 
  Container, 
  Box, 
  Typography, 
  Tabs, 
  Tab, 
  Paper 
} from '@mui/material';
import { RegulatoryComplianceMatrix } from '@/components/compliance/RegulatoryComplianceMatrix';
import { AuditTrailLog } from '@/components/compliance/AuditTrailLog';
import { RegulatoryUpdatesTracker } from '@/components/compliance/RegulatoryUpdatesTracker';

export default function CompliancePage() {
  const [activeTab, setActiveTab] = useState(0);

  const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue);
  };

  return (
    <Container maxWidth="xl">
      <Box className="py-6">
        <Typography variant="h4" className="mb-6">Compliance & Audit Management</Typography>
        
        <Paper elevation={1} className="mb-6">
          <Tabs 
            value={activeTab} 
            onChange={handleTabChange}
            variant="scrollable"
            scrollButtons="auto"
          >
            <Tab label="Regulatory Compliance Matrix" />
            <Tab label="Audit Trail Log" />
            <Tab label="Regulatory Updates Tracker" />
            <Tab label="Document Verification" />
          </Tabs>
        </Paper>
        
        {activeTab === 0 && <RegulatoryComplianceMatrix />}
        {activeTab === 1 && <AuditTrailLog />}
        {activeTab === 2 && <RegulatoryUpdatesTracker />}
        {activeTab === 3 && (
          <Typography variant="body1">Document Verification Tab Content</Typography>
        )}
      </Box>
    </Container>
  );
};

// src/frontend/components/ui/Button.tsx
import React from 'react';

export type ButtonVariant = 'primary' | 'secondary' | 'danger' | 'success' | 'outline';
export type ButtonSize = 'small' | 'medium' | 'large';

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: ButtonVariant;
  size?: ButtonSize;
  isLoading?: boolean;
  leftIcon?: React.ReactNode;
  rightIcon?: React.ReactNode;
}

export const Button: React.FC<ButtonProps> = ({
  variant = 'primary',
  size = 'medium',
  isLoading = false,
  leftIcon,
  rightIcon,
  children,
  className = '',
  disabled,
  ...rest
}) => {
  // Base classes
  const baseClasses = 'font-medium rounded focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors';
  
  // Size classes
  const sizeClasses = {
    small: 'px-3 py-1.5 text-sm',
    medium: 'px-4 py-2',
    large: 'px-6 py-3 text-lg',
  };
  
  // Variant classes
  const variantClasses = {
    primary: 'bg-blue-600 hover:bg-blue-700 text-white focus:ring-blue-500',
    secondary: 'bg-gray-600 hover:bg-gray-700 text-white focus:ring-gray-500',
    danger: 'bg-red-600 hover:bg-red-700 text-white focus:ring-red-500',
    success: 'bg-green-600 hover:bg-green-700 text-white focus:ring-green-500',
    outline: 'border border-gray-300 bg-white text-gray-700 hover:bg-gray-50 focus:ring-blue-500',
  };
  
  const classes = `${baseClasses} ${sizeClasses[size]} ${variantClasses[variant]} ${className}`;
  
  return (
    <button
      className={classes}
      disabled={isLoading || disabled}
      aria-disabled={isLoading || disabled}
      {...rest}
    >
      {isLoading && (
        <span className="mr-2">
          <svg className="animate-spin h-4 w-4 text-current" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        </span>
      )}
      {leftIcon && !isLoading && <span className="mr-2">{leftIcon}</span>}
      {children}
      {rightIcon && <span className="ml-2">{rightIcon}</span>}
    </button>
  );
};

// src/frontend/components/ui/Input.tsx
import React, { forwardRef } from 'react';

export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
  label?: string;
  error?: string;
  helpText?: string;
}

export const Input = forwardRef<HTMLInputElement, InputProps>(
  ({ label, error, helpText, className = '', id, ...rest }, ref) => {
    const inputId = id || `input-${Math.random().toString(36).substr(2, 9)}`;
    
    return (
      <div className="mb-4">
        {label && (
          <label htmlFor={inputId} className="block text-sm font-medium text-gray-700 mb-1">
            {label}
          </label>
        )}
        <input
          ref={ref}
          id={inputId}
          className={`block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm ${
            error ? 'border-red-300' : ''
          } ${className}`}
          aria-invalid={error ? 'true' : 'false'}
          aria-describedby={error ? `${inputId}-error` : helpText ? `${inputId}-help` : undefined}
          {...rest}
        />
        {error && (
          <p className="mt-1 text-sm text-red-600" id={`${inputId}-error`}>
            {error}
          </p>
        )}
        {helpText && !error && (
          <p className="mt-1 text-sm text-gray-500" id={`${inputId}-help`}>
            {helpText}
          </p>
        )}
      </div>
    );
  }
);

Input.displayName = 'Input';

// src/frontend/components/ui/Select.tsx
import React, { forwardRef } from 'react';

export interface SelectOption {
  value: string;
  label: string;
}

export interface SelectProps extends Omit<React.SelectHTMLAttributes<HTMLSelectElement>, 'onChange'> {
  options: SelectOption[];
  label?: string;
  error?: string;
  helpText?: string;
  onChange?: (value: string) => void;
}

export const Select = forwardRef<HTMLSelectElement, SelectProps>(
  ({ label, error, helpText, options, className = '', id, onChange, ...rest }, ref) => {
    const selectId = id || `select-${Math.random().toString(36).substr(2, 9)}`;
    
    const handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
      if (onChange) {
        onChange(e.target.value);
      }
    };
    
    return (
      <div className="mb-4">
        {label && (
          <label htmlFor={selectId} className="block text-sm font-medium text-gray-700 mb-1">
            {label}
          </label>
        )}
        <select
          ref={ref}
          id={selectId}
          className={`block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm ${
            error ? 'border-red-300' : ''
          } ${className}`}
          aria-invalid={error ? 'true' : 'false'}
          aria-describedby={error ? `${selectId}-error` : helpText ? `${selectId}-help` : undefined}
          onChange={handleChange}
          {...rest}
        >
          {options.map((option) => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
        {error && (
          <p className="mt-1 text-sm text-red-600" id={`${selectId}-error`}>
            {error}
          </p>
        )}
        {helpText && !error && (
          <p className="mt-1 text-sm text-gray-500" id={`${selectId}-help`}>
            {helpText}
          </p>
        )}
      </div>
    );
  }
);

Select.displayName = 'Select';

// src/frontend/components/ui/Form.tsx
import React from 'react';

export interface FormProps extends React.FormHTMLAttributes<HTMLFormElement> {
  onSubmit: (e: React.FormEvent<HTMLFormElement>) => void;
}

export const Form: React.FC<FormProps> = ({ children, onSubmit, className = '', ...rest }) => {
  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    onSubmit(e);
  };

  return (
    <form onSubmit={handleSubmit} className={className} {...rest}>
      {children}
    </form>
  );
};

// src/frontend/components/ui/Alert.tsx
import React from 'react';

export type AlertType = 'info' | 'success' | 'warning' | 'error';

interface AlertProps {
  type: AlertType;
  title?: string;
  message: string;
  onClose?: () => void;
}

export const Alert: React.FC<AlertProps> = ({ type, title, message, onClose }) => {
  const typeClasses = {
    info: 'bg-blue-50 text-blue-800 border-blue-200',
    success: 'bg-green-50 text-green-800 border-green-200',
    warning: 'bg-yellow-50 text-yellow-800 border-yellow-200',
    error: 'bg-red-50 text-red-800 border-red-200'
  };

  const iconClasses = {
    info: 'text-blue-400',
    success: 'text-green-400',
    warning: 'text-yellow-400',
    error: 'text-red-400'
  };

  return (
    <div className={`rounded-md border p-4 ${typeClasses[type]}`} role="alert">
      <div className="flex">
        <div className="flex-shrink-0">
          {/* Icon based on type */}
          <svg className={`h-5 w-5 ${iconClasses[type]}`} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
            {type === 'info' && <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />}
            {type === 'success' && <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />}
            {type === 'warning' && <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />}
            {type === 'error' && <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />}
          </svg>
        </div>
        <div className="ml-3">
          {title && <h3 className="text-sm font-medium">{title}</h3>}
          <div className="text-sm">{message}</div>
        </div>
        {onClose && (
          <div className="ml-auto pl-3">
            <div className="-mx-1.5 -my-1.5">
              <button
                type="button"
                className={`inline-flex rounded-md p-1.5 focus:outline-none focus:ring-2 focus:ring-offset-2`}
                onClick={onClose}
              >
                <span className="sr-only">Dismiss</span>
                <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                  <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
                </svg>
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

// src/frontend/components/ui/Modal.tsx
import React, { useEffect, useRef } from 'react';
import { createPortal } from 'react-dom';

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  children: React.ReactNode;
  footer?: React.ReactNode;
  size?: 'sm' | 'md' | 'lg' | 'xl';
}

export const Modal: React.FC<ModalProps> = ({
  isOpen,
  onClose,
  title,
  children,
  footer,
  size = 'md'
}) => {
  const modalRef = useRef<HTMLDivElement>(null);
  
  useEffect(() => {
    const handleEsc = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };
    
    const handleClickOutside = (event: MouseEvent) => {
      if (modalRef.current && !modalRef.current.contains(event.target as Node)) {
        onClose();
      }
    };
    
    if (isOpen) {
      document.addEventListener('keydown', handleEsc);
      document.addEventListener('mousedown', handleClickOutside);
      document.body.style.overflow = 'hidden';
    }
    
    return () => {
      document.removeEventListener('keydown', handleEsc);
      document.removeEventListener('mousedown', handleClickOutside);
      document.body.style.overflow = 'unset';
    };
  }, [isOpen, onClose]);
  
  if (!isOpen) return null;
  
  const sizeClasses = {
    sm: 'max-w-sm',
    md: 'max-w-md',
    lg: 'max-w-lg',
    xl: 'max-w-xl'
  };
  
  return createPortal(
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex min-h-screen items-end justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0">
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>
        <span className="hidden sm:inline-block sm:h-screen sm:align-middle">&#8203;</span>
        <div
          ref={modalRef}
          className={`inline-block transform rounded-lg bg-white text-left align-bottom shadow-xl transition-all sm:my-8 sm:align-middle ${sizeClasses[size]} w-full`}
          role="dialog"
          aria-modal="true"
          aria-labelledby="modal-title"
        >
          <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
            <div className="sm:flex sm:items-start">
              <div className="mt-3 text-center sm:mt-0 sm:text-left w-full">
                <h3 className="text-lg font-medium leading-6 text-gray-900" id="modal-title">
                  {title}
                </h3>
                <div className="mt-2">{children}</div>
              </div>
            </div>
          </div>
          {footer && (
            <div className="bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6">
              {footer}
            </div>
          )}
        </div>
      </div>
    </div>,
    document.body
  );
};

// src/frontend/components/ui/Card.tsx
import React from 'react';

interface CardProps {
  title?: string;
  subtitle?: string;
  children: React.ReactNode;
  footer?: React.ReactNode;
  className?: string;
}

export const Card: React.FC<CardProps> = ({ 
  title, 
  subtitle, 
  children, 
  footer,
  className = ''
}) => {
  return (
    <div className={`bg-white shadow overflow-hidden sm:rounded-lg ${className}`}>
      {(title || subtitle) && (
        <div className="px-4 py-5 sm:px-6">
          {title && <h3 className="text-lg leading-6 font-medium text-gray-900">{title}</h3>}
          {subtitle && <p className="mt-1 max-w-2xl text-sm text-gray-500">{subtitle}</p>}
        </div>
      )}
      <div className="px-4 py-5 sm:p-6">{children}</div>
      {footer && <div className="px-4 py-4 sm:px-6 bg-gray-50">{footer}</div>}
    </div>
  );
};

// src/frontend/components/ui/Tabs.tsx
import React, { useState } from 'react';

export interface Tab {
  id: string;
  label: string;
  content: React.ReactNode;
}

interface TabsProps {
  tabs: Tab[];
  defaultTabId?: string;
  orientation?: 'horizontal' | 'vertical';
  onChange?: (tabId: string) => void;
}

export const Tabs: React.FC<TabsProps> = ({
  tabs,
  defaultTabId,
  orientation = 'horizontal',
  onChange
}) => {
  const [activeTabId, setActiveTabId] = useState(defaultTabId || tabs[0]?.id);
  
  const handleTabClick = (tabId: string) => {
    setActiveTabId(tabId);
    if (onChange) {
      onChange(tabId);
    }
  };
  
  const activeTab = tabs.find(tab => tab.id === activeTabId);
  
  return (
    <div className={orientation === 'vertical' ? 'sm:flex' : ''}>
      <div className={orientation === 'vertical' ? 'sm:w-64 sm:border-r sm:border-gray-200' : 'border-b border-gray-200'}>
        <nav
          className={
            orientation === 'vertical'
              ? 'flex flex-col -mb-px space-y-1'
              : 'flex -mb-px space-x-8'
          }
          aria-label="Tabs"
        >
          {tabs.map(tab => (
            <button
              key={tab.id}
              onClick={() => handleTabClick(tab.id)}
              className={`
                ${
                  activeTabId === tab.id
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }
                ${
                  orientation === 'vertical'
                    ? 'py-2 px-3 text-left border-l-2'
                    : 'py-4 px-1 text-center border-b-2'
                }
                font-medium text-sm
              `}
              aria-current={activeTabId === tab.id ? 'page' : undefined}
            >
              {tab.label}
            </button>
          ))}
        </nav>
      </div>
      <div className={orientation === 'vertical' ? 'sm:flex-1 sm:p-4' : 'pt-4'}>
        {activeTab && activeTab.content}
      </div>
    </div>
  );
};

// src/frontend/components/ui/DataTable.tsx
import React, { useState } from 'react';

export interface Column<T> {
  key: string;
  header: string;
  render?: (row: T) => React.ReactNode;
  sortable?: boolean;
}

export type SortDirection = 'asc' | 'desc';

interface DataTableProps<T> {
  columns: Column<T>[];
  data: T[];
  keyExtractor: (item: T) => string;
  onRowClick?: (item: T) => void;
  emptyMessage?: string;
  pagination?: {
    pageSize: number;
    totalItems: number;
    currentPage: number;
    onPageChange: (page: number) => void;
  };
}

export function DataTable<T>({
  columns,
  data,
  keyExtractor,
  onRowClick,
  emptyMessage = 'No data available',
  pagination
}: DataTableProps<T>) {
  const [sortConfig, setSortConfig] = useState<{ key: string; direction: SortDirection } | null>(null);
  
  const handleSort = (key: string) => {
    let direction: SortDirection = 'asc';
    if (sortConfig && sortConfig.key === key && sortConfig.direction === 'asc') {
      direction = 'desc';
    }
    setSortConfig({ key, direction });
  };
  
  const sortedData = React.useMemo(() => {
    let sortableData = [...data];
    if (sortConfig !== null) {
      sortableData.sort((a: any, b: any) => {
        if (a[sortConfig.key] < b[sortConfig.key]) {
          return sortConfig.direction === 'asc' ? -1 : 1;
        }
        if (a[sortConfig.key] > b[sortConfig.key]) {
          return sortConfig.direction === 'asc' ? 1 : -1;
        }
        return 0;
      });
    }
    return sortableData;
  }, [data, sortConfig]);
  
  const totalPages = pagination ? Math.ceil(pagination.totalItems / pagination.pageSize) : 0;
  
  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            {columns.map(column => (
              <th
                key={column.key}
                scope="col"
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
              >
                {column.sortable ? (
                  <button
                    className="flex items-center group focus:outline-none"
                    onClick={() => handleSort(column.key)}
                  >
                    {column.header}
                    <span className="ml-1">
                      {sortConfig?.key === column.key ? (
                        sortConfig.direction === 'asc' ? (
                          <svg className="h-4 w-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z" clipRule="evenodd" />
                          </svg>
                        ) : (
                          <svg className="h-4 w-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                          </svg>
                        )
                      ) : (
                        <svg className="h-4 w-4 text-gray-400 opacity-0 group-hover:opacity-100" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M10 3a1 1 0 01.707.293l3 3a1 1 0 01-1.414 1.414L10 5.414 7.707 7.707a1 1 0 01-1.414-1.414l3-3A1 1 0 0110 3zm-3.707 9.293a1 1 0 011.414 0L10 14.586l2.293-2.293a1 1 0 011.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clipRule="evenodd" />
                        </svg>
                      )}
                    </span>
                  </button>
                ) : (
                  column.header
                )}
              </th>
            ))}
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {sortedData.length > 0 ? (
            sortedData.map(item => (
              <tr
                key={keyExtractor(item)}
                className={onRowClick ? 'cursor-pointer hover:bg-gray-50' : ''}
                onClick={onRowClick ? () => onRowClick(item) : undefined}
              >
                {columns.map(column => (
                  <td key={column.key} className="px-6 py-4 whitespace-nowrap">
                    {column.render ? column.render(item) : (item as any)[column.key]}
                  </td>
                ))}
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan={columns.length} className="px-6 py-4 text-center text-sm text-gray-500">
                {emptyMessage}
              </td>
            </tr>
          )}
        </tbody>
      </table>
      
      {pagination && totalPages > 1 && (
        <div className="px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
          <div className="flex-1 flex justify-between sm:hidden">
            <button
              onClick={() => pagination.onPageChange(pagination.currentPage - 1)}
              disabled={pagination.currentPage === 1}
              className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
            >
              Previous
            </button>
            <button
              onClick={() => pagination.onPageChange(pagination.currentPage + 1)}
              disabled={pagination.currentPage === totalPages}
              className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
            >
              Next
            </button>
          </div>
          <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
            <div>
              <p className="text-sm text-gray-700">
                Showing <span className="font-medium">{Math.min((pagination.currentPage - 1) * pagination.pageSize + 1, pagination.totalItems)}</span> to{' '}
                <span className="font-medium">
                  {Math.min(pagination.currentPage * pagination.pageSize, pagination.totalItems)}
                </span>{' '}
                of <span className="font-medium">{pagination.totalItems}</span> results
              </p>
            </div>
            <div>
              <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                <button
                  onClick={() => pagination.onPageChange(pagination.currentPage - 1)}
                  disabled={pagination.currentPage === 1}
                  className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50"
                >
                  <span className="sr-only">Previous</span>
                  <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                    <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
                  </svg>
                </button>
                {/* Page buttons */}
                {Array.from({ length: Math.min(5, totalPages) }).map((_, i) => {
                  let pageNumber: number;
                  if (totalPages <= 5) {
                    pageNumber = i + 1;
                  } else if (pagination.currentPage <= 3) {
                    pageNumber = i + 1;
                  } else if (pagination.currentPage >= totalPages - 2) {
                    pageNumber = totalPages - 4 + i;
                  } else {
                    pageNumber = pagination.currentPage - 2 + i;
                  }
                  
                  return (
                    <button
                      key={pageNumber}
                      onClick={() => pagination.onPageChange(pageNumber)}
                      className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${
                        pagination.currentPage === pageNumber
                          ? 'z-10 bg-blue-50 border-blue-500 text-blue-600'
                          : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
                      }`}
                    >
                      {pageNumber}
                    </button>
                  );
                })}
                <button
                  onClick={() => pagination.onPageChange(pagination.currentPage + 1)}
                  disabled={pagination.currentPage === totalPages}
                  className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50"
                >
                  <span className="sr-only">Next</span>
                  <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                    <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
                  </svg>
                </button>
              </nav>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
// src/frontend/components/courses/CourseManagement.tsx
import React, { useState, useEffect } from 'react';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { DataTable, Column } from '../ui/DataTable';
import { Alert } from '../ui/Alert';
import { Modal } from '../ui/Modal';
import { Input } from '../ui/Input';
import { Form } from '../ui/Form';

// Types
export interface Course {
  id: string;
  title: string;
  description: string;
  status: 'draft' | 'active' | 'archived';
  modules: CourseModule[];
  startDate?: Date;
  endDate?: Date;
  instructors: string[];
  enrolledTrainees: number;
  tags: string[];
  lastModified: Date;
  createdBy: string;
}

export interface CourseModule {
  id: string;
  title: string;
  description: string;
  order: number;
  lessons: CourseLesson[];
  duration: number; // in minutes
  status: 'draft' | 'active' | 'locked';
}

export interface CourseLesson {
  id: string;
  title: string;
  description: string;
  order: number;
  content: string;
  exercises: string[];
  duration: number; // in minutes
  status: 'draft' | 'active' | 'locked';
}

export interface CourseFilter {
  status?: 'draft' | 'active' | 'archived';
  instructor?: string;
  tag?: string;
  searchTerm?: string;
}

// Course List Component
interface CourseListProps {
  courses: Course[];
  onViewCourse: (id: string) => void;
  onEditCourse: (id: string) => void;
  onDeleteCourse: (id: string) => Promise<void>;
  onCreateCourse: () => void;
  onDuplicateCourse: (id: string) => Promise<void>;
  onFilterChange: (filters: CourseFilter) => void;
  availableTags: string[];
  instructors: { id: string; name: string }[];
}

export const CourseList: React.FC<CourseListProps> = ({
  courses,
  onViewCourse,
  onEditCourse,
  onDeleteCourse,
  onCreateCourse,
  onDuplicateCourse,
  onFilterChange,
  availableTags,
  instructors
}) => {
  const [filter, setFilter] = useState<CourseFilter>({});
  const [alertMessage, setAlertMessage] = useState<{ type: 'success' | 'error'; message: string } | null>(null);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState<string | null>(null);
  
  // Update filter
  const updateFilter = (newFilter: Partial<CourseFilter>) => {
    const updatedFilter = { ...filter, ...newFilter };
    setFilter(updatedFilter);
    onFilterChange(updatedFilter);
  };
  
  // Reset filter
  const resetFilter = () => {
    setFilter({});
    onFilterChange({});
  };
  
  // Handle delete course
  const handleDeleteCourse = async (id: string) => {
    try {
      await onDeleteCourse(id);
      setAlertMessage({
        type: 'success',
        message: 'Course deleted successfully'
      });
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to delete course: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    } finally {
      setShowDeleteConfirm(null);
    }
  };
  
  // Handle duplicate course
  const handleDuplicateCourse = async (id: string) => {
    try {
      await onDuplicateCourse(id);
      setAlertMessage({
        type: 'success',
        message: 'Course duplicated successfully'
      });
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to duplicate course: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };
  
  // Define table columns
  const columns: Column<Course>[] = [
    {
      key: 'title',
      header: 'Course',
      render: (course) => (
        <div>
          <div className="font-medium text-blue-600 hover:text-blue-900">{course.title}</div>
          <div className="text-sm text-gray-500 truncate">{course.description}</div>
          <div className="mt-1 flex flex-wrap gap-1">
            {course.tags.map((tag, index) => (
              <span 
                key={index}
                className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800"
              >
                {tag}
              </span>
            ))}
          </div>
        </div>
      ),
      sortable: true
    },
    {
      key: 'status',
      header: 'Status',
      render: (course) => (
        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
          course.status === 'active' ? 'bg-green-100 text-green-800' : 
          course.status === 'draft' ? 'bg-yellow-100 text-yellow-800' : 
          'bg-gray-100 text-gray-800'
        }`}>
          {course.status.charAt(0).toUpperCase() + course.status.slice(1)}
        </span>
      ),
      sortable: true
    },
    {
      key: 'modules',
      header: 'Modules',
      render: (course) => (
        <div className="text-center">
          {course.modules.length}
        </div>
      ),
      sortable: true
    },
    {
      key: 'trainees',
      header: 'Trainees',
      render: (course) => (
        <div className="text-center">
          {course.enrolledTrainees}
        </div>
      ),
      sortable: true
    },
    {
      key: 'dates',
      header: 'Dates',
      render: (course) => (
        <div>
          {course.startDate && course.endDate ? (
            <span className="text-sm">
              {new Date(course.startDate).toLocaleDateString()} - {new Date(course.endDate).toLocaleDateString()}
            </span>
          ) : (
            <span className="text-sm text-gray-500">No dates set</span>
          )}
        </div>
      ),
      sortable: true
    },
    {
      key: 'actions',
      header: 'Actions',
      render: (course) => (
        <div className="flex space-x-2">
          <button
            onClick={(e) => {
              e.stopPropagation();
              onViewCourse(course.id);
            }}
            className="text-blue-600 hover:text-blue-900"
            title="View"
          >
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
            </svg>
          </button>
          <button
            onClick={(e) => {
              e.stopPropagation();
              onEditCourse(course.id);
            }}
            className="text-blue-600 hover:text-blue-900"
            title="Edit"
          >
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
            </svg>
          </button>
          <button
            onClick={(e) => {
              e.stopPropagation();
              handleDuplicateCourse(course.id);
            }}
            className="text-blue-600 hover:text-blue-900"
            title="Duplicate"
          >
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
            </svg>
          </button>
          <button
            onClick={(e) => {
              e.stopPropagation();
              setShowDeleteConfirm(course.id);
            }}
            className="text-red-600 hover:text-red-900"
            title="Delete"
          >
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
            </svg>
          </button>
        </div>
      )
    }
  ];
  
  return (
    <div className="course-list">
      {alertMessage && (
        <Alert
          type={alertMessage.type}
          message={alertMessage.message}
          onClose={() => setAlertMessage(null)}
        />
      )}
      
      {/* Filters */}
      <Card className="mb-6">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4">
          <h2 className="text-lg font-medium">Course Filters</h2>
          <div className="mt-2 sm:mt-0">
            <Button
              variant="outline"
              size="small"
              onClick={resetFilter}
            >
              Reset Filters
            </Button>
          </div>
        </div>
        
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          <div>
            <label htmlFor="status-filter" className="block text-sm font-medium text-gray-700 mb-1">
              Status
            </label>
            <select
              id="status-filter"
              className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
              value={filter.status || ''}
              onChange={(e) => updateFilter({ status: e.target.value as any || undefined })}
            >
              <option value="">All Statuses</option>
              <option value="draft">Draft</option>
              <option value="active">Active</option>
              <option value="archived">Archived</option>
            </select>
          </div>
          
          <div>
            <label htmlFor="instructor-filter" className="block text-sm font-medium text-gray-700 mb-1">
              Instructor
            </label>
            <select
              id="instructor-filter"
              className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
              value={filter.instructor || ''}
              onChange={(e) => updateFilter({ instructor: e.target.value || undefined })}
            >
              <option value="">All Instructors</option>
              {instructors.map(instructor => (
                <option key={instructor.id} value={instructor.id}>
                  {instructor.name}
                </option>
              ))}
            </select>
          </div>
          
          <div>
            <label htmlFor="tag-filter" className="block text-sm font-medium text-gray-700 mb-1">
              Tag
            </label>
            <select
              id="tag-filter"
              className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
              value={filter.tag || ''}
              onChange={(e) => updateFilter({ tag: e.target.value || undefined })}
            >
              <option value="">All Tags</option>
              {availableTags.map(tag => (
                <option key={tag} value={tag}>
                  {tag}
                </option>
              ))}
            </select>
          </div>
          
          <div>
            <label htmlFor="search-filter" className="block text-sm font-medium text-gray-700 mb-1">
              Search
            </label>
            <input
              type="text"
              id="search-filter"
              className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
              placeholder="Search course title..."
              value={filter.searchTerm || ''}
              onChange={(e) => updateFilter({ searchTerm: e.target.value || undefined })}
            />
          </div>
        </div>
      </Card>
      
      {/* Course List */}
      <Card>
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4">
          <h2 className="text-lg font-medium">Courses</h2>
          <Button
            variant="primary"
            onClick={onCreateCourse}
          >
            Create New Course
          </Button>
        </div>
        
        <DataTable
          columns={columns}
          data={courses}
          keyExtractor={(course) => course.id}
          onRowClick={(course) => onViewCourse(course.id)}
          pagination={{
            pageSize: 10,
            totalItems: courses.length,
            currentPage: 1,
            onPageChange: () => {}
          }}
          emptyMessage="No courses found. Adjust your filters or create a new course."
        />
      </Card>
      
      {/* Delete Confirmation Modal */}
      {showDeleteConfirm && (
        <Modal
          isOpen={true}
          onClose={() => setShowDeleteConfirm(null)}
          title="Delete Course"
          size="md"
        >
          <div className="mb-6">
            <p className="text-gray-700">
              Are you sure you want to delete this course? This action cannot be undone.
            </p>
            {courses.find(c => c.id === showDeleteConfirm)?.enrolledTrainees > 0 && (
              <div className="mt-4 p-3 bg-yellow-50 border-l-4 border-yellow-400 text-yellow-700">
                <p className="font-medium">Warning:</p>
                <p>
                  This course has enrolled trainees. Deleting it will remove their access to the course content.
                </p>
              </div>
            )}
          </div>
          
          <div className="flex justify-end space-x-3">
            <Button
              variant="outline"
              onClick={() => setShowDeleteConfirm(null)}
            >
              Cancel
            </Button>
            <Button
              variant="danger"
              onClick={() => handleDeleteCourse(showDeleteConfirm)}
            >
              Delete Course
            </Button>
          </div>
        </Modal>
      )}
    </div>
  );
};

// Course Form Component
interface CourseFormProps {
  course?: Course;
  instructors: { id: string; name: string }[];
  availableTags: string[];
  onSave: (course: Partial<Course>) => Promise<void>;
  onCancel: () => void;
}

export const CourseForm: React.FC<CourseFormProps> = ({
  course,
  instructors,
  availableTags,
  onSave,
  onCancel
}) => {
  const [formData, setFormData] = useState<Partial<Course>>(course || {
    title: '',
    description: '',
    status: 'draft',
    modules: [],
    instructors: [],
    tags: [],
  });
  const [selectedTag, setSelectedTag] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [alertMessage, setAlertMessage] = useState<{ type: 'success' | 'error'; message: string } | null>(null);
  
  // Handle input change
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };
  
  // Handle multi-select (instructors)
  const handleInstructorChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const selected = Array.from(e.target.selectedOptions, option => option.value);
    setFormData({ ...formData, instructors: selected });
  };
  
  // Handle tag add
  const handleAddTag = () => {
    if (selectedTag && !formData.tags?.includes(selectedTag)) {
      setFormData({ ...formData, tags: [...(formData.tags || []), selectedTag] });
      setSelectedTag('');
    }
  };
  
  // Handle tag remove
  const handleRemoveTag = (tag: string) => {
    setFormData({ ...formData, tags: formData.tags?.filter(t => t !== tag) });
  };
  
  // Handle form submit
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    try {
      await onSave(formData);
      setAlertMessage({
        type: 'success',
        message: `Course ${course ? 'updated' : 'created'} successfully`
      });
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to ${course ? 'update' : 'create'} course: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    } finally {
      setIsSubmitting(false);
    }
  };
  
  return (
    <div className="course-form">
      {alertMessage && (
        <Alert
          type={alertMessage.type}
          message={alertMessage.message}
          onClose={() => setAlertMessage(null)}
        />
      )}
      
      <Card>
        <div className="mb-6">
          <h2 className="text-lg font-medium">{course ? 'Edit Course' : 'Create New Course'}</h2>
        </div>
        
        <Form onSubmit={handleSubmit}>
          <div className="space-y-6">
            <Input
              label="Course Title"
              name="title"
              value={formData.title || ''}
              onChange={handleInputChange}
              required
            />
            
            <div>
              <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">
                Description
              </label>
              <textarea
                id="description"
                name="description"
                rows={3}
                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={formData.description || ''}
                onChange={handleInputChange}
                required
              ></textarea>
            </div>
            
            <div>
              <label htmlFor="status" className="block text-sm font-medium text-gray-700 mb-1">
                Status
              </label>
              <select
                id="status"
                name="status"
                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={formData.status || 'draft'}
                onChange={handleInputChange}
              >
                <option value="draft">Draft</option>
                <option value="active">Active</option>
                <option value="archived">Archived</option>
              </select>
            </div>
            
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div>
                <label htmlFor="startDate" className="block text-sm font-medium text-gray-700 mb-1">
                  Start Date
                </label>
                <input
                  type="date"
                  id="startDate"
                  name="startDate"
                  className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                  value={formData.startDate ? new Date(formData.startDate).toISOString().slice(0, 10) : ''}
                  onChange={(e) => {
                    if (e.target.value) {
                      setFormData({ ...formData, startDate: new Date(e.target.value) });
                    } else {
                      const newFormData = { ...formData };
                      delete newFormData.startDate;
                      setFormData(newFormData);
                    }
                  }}
                />
              </div>
              
              <div>
                <label htmlFor="endDate" className="block text-sm font-medium text-gray-700 mb-1">
                  End Date
                </label>
                <input
                  type="date"
                  id="endDate"
                  name="endDate"
                  className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                  value={formData.endDate ? new Date(formData.endDate).toISOString().slice(0, 10) : ''}
                  onChange={(e) => {
                    if (e.target.value) {
                      setFormData({ ...formData, endDate: new Date(e.target.value) });
                    } else {
                      const newFormData = { ...formData };
                      delete newFormData.endDate;
                      setFormData(newFormData);
                    }
                  }}
                  min={formData.startDate ? new Date(formData.startDate).toISOString().slice(0, 10) : ''}
                />
              </div>
            </div>
            
            <div>
              <label htmlFor="instructors" className="block text-sm font-medium text-gray-700 mb-1">
                Instructors
              </label>
              <select
                id="instructors"
                name="instructors"
                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                multiple
                value={formData.instructors || []}
                onChange={handleInstructorChange}
              >
                {instructors.map(instructor => (
                  <option key={instructor.id} value={instructor.id}>
                    {instructor.name}
                  </option>
                ))}
              </select>
              <p className="mt-1 text-xs text-gray-500">Hold Ctrl/Cmd to select multiple instructors</p>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Tags
              </label>
              <div className="flex space-x-2">
                <select
                  className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                  value={selectedTag}
                  onChange={(e) => setSelectedTag(e.target.value)}
                >
                  <option value="">Select a tag</option>
                  {availableTags
                    .filter(tag => !formData.tags?.includes(tag))
                    .map(tag => (
                      <option key={tag} value={tag}>
                        {tag}
                      </option>
                    ))}
                </select>
                <Button
                  type="button"
                  variant="outline"
                  onClick={handleAddTag}
                  disabled={!selectedTag}
                >
                  Add
                </Button>
              </div>
              <div className="mt-2 flex flex-wrap gap-2">
                {formData.tags?.map(tag => (
                  <div 
                    key={tag} 
                    className="inline-flex items-center px-2.5 py-0.5 rounded-md text-sm font-medium bg-blue-100 text-blue-800"
                  >
                    {tag}
                    <button
                      type="button"
                      className="ml-1.5 inline-flex text-blue-400 hover:text-blue-600 focus:outline-none"
                      onClick={() => handleRemoveTag(tag)}
                    >
                      <svg className="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                      </svg>
                    </button>
                  </div>
                ))}
              </div>
            </div>
            
            <div className="flex justify-end space-x-3 pt-4 border-t">
              <Button
                type="button"
                variant="outline"
                onClick={onCancel}
              >
                Cancel
              </Button>
              <Button
                type="submit"
                variant="primary"
                isLoading={isSubmitting}
                disabled={isSubmitting}
              >
                {course ? 'Update Course' : 'Create Course'}
              </Button>
            </div>
          </div>
        </Form>
      </Card>
    </div>
  );
};

// Course Detail Component
interface CourseDetailProps {
  course: Course;
  onEditCourse: () => void;
  onViewTrainees: () => void;
  onAddModule: () => void;
  onEditModule: (moduleId: string) => void;
  onDeleteModule: (moduleId: string) => Promise<void>;
  onAddLesson: (moduleId: string) => void;
  onEditLesson: (moduleId: string, lessonId: string) => void;
  onDeleteLesson: (moduleId: string, lessonId: string) => Promise<void>;
  onReorderModule: (moduleId: string, newOrder: number) => Promise<void>;
  onReorderLesson: (moduleId: string, lessonId: string, newOrder: number) => Promise<void>;
}

export const CourseDetail: React.FC<CourseDetailProps> = ({
  course,
  onEditCourse,
  onViewTrainees,
  onAddModule,
  onEditModule,
  onDeleteModule,
  onAddLesson,
  onEditLesson,
  onDeleteLesson,
  onReorderModule,
  onReorderLesson
}) => {
  const [expandedModules, setExpandedModules] = useState<Set<string>>(new Set());
  const [alertMessage, setAlertMessage] = useState<{ type: 'success' | 'error'; message: string } | null>(null);
  const [confirmDeleteModule, setConfirmDeleteModule] = useState<string | null>(null);
  const [confirmDeleteLesson, setConfirmDeleteLesson] = useState<{ moduleId: string; lessonId: string } | null>(null);
  
  // Toggle module expanded state
  const toggleModule = (moduleId: string) => {
    const newExpandedModules = new Set(expandedModules);
    if (newExpandedModules.has(moduleId)) {
      newExpandedModules.delete(moduleId);
    } else {
      newExpandedModules.add(moduleId);
    }
    setExpandedModules(newExpandedModules);
  };
  
  // Handle module deletion
  const handleDeleteModule = async (moduleId: string) => {
    try {
      await onDeleteModule(moduleId);
      setAlertMessage({
        type: 'success',
        message: 'Module deleted successfully'
      });
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to delete module: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    } finally {
      setConfirmDeleteModule(null);
    }
  };
  
  // Handle lesson deletion
  const handleDeleteLesson = async (moduleId: string, lessonId: string) => {
    try {
      await onDeleteLesson(moduleId, lessonId);
      setAlertMessage({
        type: 'success',
        message: 'Lesson deleted successfully'
      });
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to delete lesson: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    } finally {
      setConfirmDeleteLesson(null);
    }
  };
  
  // Calculate total duration
  const calculateTotalDuration = () => {
    let total = 0;
    course.modules.forEach(module => {
      total += module.duration;
    });
    return total;
  };
  
  // Format duration
  const formatDuration = (minutes: number) => {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    
    if (hours === 0) {
      return `${mins} min`;
    } else if (mins === 0) {
      return `${hours} hr`;
    } else {
      return `${hours} hr ${mins} min`;
    }
  };
  
  // Handle module reordering
  const handleMoveModule = async (moduleId: string, direction: 'up' | 'down') => {
    const moduleIndex = course.modules.findIndex(m => m.id === moduleId);
    if (moduleIndex === -1) return;
    
    let newOrder;
    if (direction === 'up' && moduleIndex > 0) {
      newOrder = course.modules[moduleIndex - 1].order;
    } else if (direction === 'down' && moduleIndex < course.modules.length - 1) {
      newOrder = course.modules[moduleIndex + 1].order;
    } else {
      return;
    }
    
    try {
      await onReorderModule(moduleId, newOrder);
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to reorder module: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };
  
  // Handle lesson reordering
  const handleMoveLesson = async (moduleId: string, lessonId: string, direction: 'up' | 'down') => {
    const module = course.modules.find(m => m.id === moduleId);
    if (!module) return;
    
    const lessonIndex = module.lessons.findIndex(l => l.id === lessonId);
    if (lessonIndex === -1) return;
    
    let newOrder;
    if (direction === 'up' && lessonIndex > 0) {
      newOrder = module.lessons[lessonIndex - 1].order;
    } else if (direction === 'down' && lessonIndex < module.lessons.length - 1) {
      newOrder = module.lessons[lessonIndex + 1].order;
    } else {
      return;
    }
    
    try {
      await onReorderLesson(moduleId, lessonId, newOrder);
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to reorder lesson: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };
  
  // Sort modules by order
  const sortedModules = [...course.modules].sort((a, b) => a.order - b.order);
  
  return (
    <div className="course-detail">
      {alertMessage && (
        <Alert
          type={alertMessage.type}
          message={alertMessage.message}
          onClose={() => setAlertMessage(null)}
        />
      )}
      
      {/* Course Header */}
      <Card className="mb-6">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between">
          <div>
            <h1 className="text-2xl font-bold text-gray-900 mb-1">{course.title}</h1>
            <p className="text-gray-500">{course.description}</p>
            
            <div className="mt-4 grid grid-cols-2 md:grid-cols-4 gap-4">
              <div>
                <p className="text-sm text-gray-500">Status</p>
                <p className="font-medium">
                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                    course.status === 'active' ? 'bg-green-100 text-green-800' : 
                    course.status === 'draft' ? 'bg-yellow-100 text-yellow-800' : 
                    'bg-gray-100 text-gray-800'
                  }`}>
                    {course.status.charAt(0).toUpperCase() + course.status.slice(1)}
                  </span>
                </p>
              </div>
              
              <div>
                <p className="text-sm text-gray-500">Trainees</p>
                <p className="font-medium">{course.enrolledTrainees}</p>
              </div>
              
              <div>
                <p className="text-sm text-gray-500">Modules</p>
                <p className="font-medium">{course.modules.length}</p>
              </div>
              
              <div>
                <p className="text-sm text-gray-500">Duration</p>
                <p className="font-medium">{formatDuration(calculateTotalDuration())}</p>
              </div>
            </div>
            
            <div className="mt-4">
              <p className="text-sm text-gray-500">Scheduled</p>
              <p className="font-medium">
                {course.startDate && course.endDate ? (
                  `${new Date(course.startDate).toLocaleDateString()} - ${new Date(course.endDate).toLocaleDateString()}`
                ) : (
                  'Not scheduled'
                )}
              </p>
            </div>
            
            <div className="mt-4">
              <p className="text-sm text-gray-500">Tags</p>
              <div className="mt-1 flex flex-wrap gap-1">
                {course.tags.map((tag, index) => (
                  <span 
                    key={index}
                    className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800"
                  >
                    {tag}
                  </span>
                ))}
              </div>
            </div>
          </div>
          
          <div className="mt-4 md:mt-0 flex flex-col space-y-2">
            <Button
              variant="primary"
              onClick={onEditCourse}
            >
              Edit Course
            </Button>
            <Button
              variant="outline"
              onClick={onViewTrainees}
            >
              View Trainees
            </Button>
          </div>
        </div>
      </Card>
      
      {/* Modules & Lessons */}
      <Card>
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6">
          <h2 className="text-lg font-medium">Course Content</h2>
          <Button
            variant="primary"
            onClick={onAddModule}
          >
            Add Module
          </Button>
        </div>
        
        {sortedModules.length > 0 ? (
          <div className="space-y-6">
            {sortedModules.map((module, moduleIndex) => (
              <div key={module.id} className="border rounded-lg overflow-hidden">
                <div 
                  className={`px-4 py-3 cursor-pointer ${
                    expandedModules.has(module.id) ? 'bg-gray-100' : 'bg-gray-50 hover:bg-gray-100'
                  }`}
                  onClick={() => toggleModule(module.id)}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center">
                      <div className={`mr-2 transform ${expandedModules.has(module.id) ? 'rotate-90' : ''} transition-transform`}>
                        <svg className="h-5 w-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path>
                        </svg>
                      </div>
                      <div>
                        <div className="font-medium">{module.title}</div>
                        <div className="text-sm text-gray-500">
                          {module.lessons.length} lesson{module.lessons.length !== 1 ? 's' : ''} • {formatDuration(module.duration)}
                        </div>
                      </div>
                    </div>
                    <div className="flex space-x-2">
                      <div className="flex space-x-1">
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            handleMoveModule(module.id, 'up');
                          }}
                          className="text-gray-400 hover:text-gray-600"
                          disabled={moduleIndex === 0}
                          title="Move Up"
                        >
                          <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 15l7-7 7 7"></path>
                          </svg>
                        </button>
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            handleMoveModule(module.id, 'down');
                          }}
                          className="text-gray-400 hover:text-gray-600"
                          disabled={moduleIndex === sortedModules.length - 1}
                          title="Move Down"
                        >
                          <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7"></path>
                          </svg>
                        </button>
                      </div>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          onAddLesson(module.id);
                        }}
                        className="text-green-600 hover:text-green-800"
                        title="Add Lesson"
                      >
                        <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                      </button>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          onEditModule(module.id);
                        }}
                        className="text-blue-600 hover:text-blue-800"
                        title="Edit Module"
                      >
                        <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                        </svg>
                      </button>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          setConfirmDeleteModule(module.id);
                        }}
                        className="text-red-600 hover:text-red-800"
                        title="Delete Module"
                      >
                        <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                        </svg>
                      </button>
                    </div>
                  </div>
                  
                  {module.description && (
                    <p className="mt-1 text-sm text-gray-500">{module.description}</p>
                  )}
                </div>
                
                {expandedModules.has(module.id) && (
                  <div className="p-4 border-t">
                    {module.lessons.length > 0 ? (
                      <div className="space-y-3">
                        {[...module.lessons].sort((a, b) => a.order - b.order).map((lesson, lessonIndex) => (
                          <div key={lesson.id} className="flex items-center justify-between p-3 border rounded-md bg-white">
                            <div>
                              <div className="font-medium">{lesson.title}</div>
                              <div className="text-sm text-gray-500">
                                {formatDuration(lesson.duration)} • {lesson.exercises.length} exercise{lesson.exercises.length !== 1 ? 's' : ''}
                              </div>
                            </div>
                            <div className="flex space-x-2">
                              <div className="flex space-x-1">
                                <button
                                  onClick={() => handleMoveLesson(module.id, lesson.id, 'up')}
                                  className="text-gray-400 hover:text-gray-600"
                                  disabled={lessonIndex === 0}
                                  title="Move Up"
                                >
                                  <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 15l7-7 7 7"></path>
                                  </svg>
                                </button>
                                <button
                                  onClick={() => handleMoveLesson(module.id, lesson.id, 'down')}
                                  className="text-gray-400 hover:text-gray-600"
                                  disabled={lessonIndex === module.lessons.length - 1}
                                  title="Move Down"
                                >
                                  <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7"></path>
                                  </svg>
                                </button>
                              </div>
                              <button
                                onClick={() => onEditLesson(module.id, lesson.id)}
                                className="text-blue-600 hover:text-blue-800"
                                title="Edit Lesson"
                              >
                                <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                </svg>
                              </button>
                              <button
                                onClick={() => setConfirmDeleteLesson({ moduleId: module.id, lessonId: lesson.id })}
                                className="text-red-600 hover:text-red-800"
                                title="Delete Lesson"
                              >
                                <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                </svg>
                              </button>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="text-center py-6 text-gray-500">
                        <p>No lessons in this module yet.</p>
                        <Button
                          variant="outline"
                          size="small"
                          onClick={() => onAddLesson(module.id)}
                          className="mt-2"
                        >
                          Add Lesson
                        </Button>
                      </div>
                    )}
                  </div>
                )}
              </div>
            ))}
          </div>
        ) : (
          <div className="text-center py-8 text-gray-500">
            <p>No modules in this course yet.</p>
            <Button
              variant="outline"
              onClick={onAddModule}
              className="mt-2"
            >
              Add First Module
            </Button>
          </div>
        )}
      </Card>
      
      {/* Delete Module Confirmation Modal */}
      {confirmDeleteModule && (
        <Modal
          isOpen={true}
          onClose={() => setConfirmDeleteModule(null)}
          title="Delete Module"
          size="md"
        >
          <div className="mb-6">
            <p className="text-gray-700">
              Are you sure you want to delete this module? This action cannot be undone.
            </p>
            <div className="mt-4 p-3 bg-yellow-50 border-l-4 border-yellow-400 text-yellow-700">
              <p className="font-medium">Warning:</p>
              <p>
                Deleting this module will also delete all its lessons and content.
              </p>
            </div>
          </div>
          
          <div className="flex justify-end space-x-3">
            <Button
              variant="outline"
              onClick={() => setConfirmDeleteModule(null)}
            >
              Cancel
            </Button>
            <Button
              variant="danger"
              onClick={() => handleDeleteModule(confirmDeleteModule)}
            >
              Delete Module
            </Button>
          </div>
        </Modal>
      )}
      
      {/* Delete Lesson Confirmation Modal */}
      {confirmDeleteLesson && (
        <Modal
          isOpen={true}
          onClose={() => setConfirmDeleteLesson(null)}
          title="Delete Lesson"
          size="md"
        >
          <div className="mb-6">
            <p className="text-gray-700">
              Are you sure you want to delete this lesson? This action cannot be undone.
            </p>
            <div className="mt-4 p-3 bg-yellow-50 border-l-4 border-yellow-400 text-yellow-700">
              <p className="font-medium">Warning:</p>
              <p>
                Deleting this lesson will also delete all its content and exercises.
              </p>
            </div>
          </div>
          
          <div className="flex justify-end space-x-3">
            <Button
              variant="outline"
              onClick={() => setConfirmDeleteLesson(null)}
            >
              Cancel
            </Button>
            <Button
              variant="danger"
              onClick={() => handleDeleteLesson(confirmDeleteLesson.moduleId, confirmDeleteLesson.lessonId)}
            >
              Delete Lesson
            </Button>
          </div>
        </Modal>
      )}
    </div>
  );
};
// pages/dashboard.tsx
import { useState, useEffect } from 'react';
import { NextPage } from 'next';
import Head from 'next/head';
import DashboardLayout from '../components/analytics/DashboardLayout';
import SyllabusBuilder from '../components/syllabus/SyllabusBuilder';
import DocumentUploader from '../components/documents/DocumentUploader';
import GradingForm from '../components/assessment/GradingForm';
import Button from '../components/ui/Button';
import analyticsService, { KpiMetric } from '../services/analyticsService';
import syllabusService, { Syllabus } from '../services/syllabusService';
import assessmentService, { AssessmentItem } from '../services/assessmentService';

const Dashboard: NextPage = () => {
  // State for active section
  const [activeSection, setActiveSection] = useState<'analytics' | 'syllabus' | 'documents' | 'assessment'>('analytics');
  
  // Analytics state
  const [kpis, setKpis] = useState<KpiMetric[]>([]);
  
  // Syllabus state
  const [syllabi, setSyllabi] = useState<Syllabus[]>([]);
  const [selectedSyllabusId, setSelectedSyllabusId] = useState<string | null>(null);
  
  // Assessment state
  const [assessments, setAssessments] = useState<AssessmentItem[]>([]);
  const [selectedAssessmentId, setSelectedAssessmentId] = useState<string | null>(null);
  
  // Loading states
  const [analyticsLoading, setAnalyticsLoading] = useState<boolean>(true);
  const [syllabusLoading, setSyllabusLoading] = useState<boolean>(true);
  const [assessmentLoading, setAssessmentLoading] = useState<boolean>(true);
  
  // Error states
  const [error, setError] = useState<string | null>(null);
  
  // Load initial data
  useEffect(() => {
    const fetchDashboardData = async () => {
      try {
        // Load KPIs for analytics
        setAnalyticsLoading(true);
        const kpiData = await analyticsService.getKpiMetrics();
        setKpis(kpiData);
        setAnalyticsLoading(false);
        
        // Load syllabi
        setSyllabusLoading(true);
        const syllabiData = await syllabusService.getAllSyllabi();
        setSyllabi(syllabiData);
        setSyllabusLoading(false);
        
        // Load assessments
        setAssessmentLoading(true);
        const { assessments: assessmentsData } = await assessmentService.getAllAssessments(
          undefined, // status
          undefined, // traineeId
          undefined, // instructorId
          undefined, // from
          undefined, // to
          5,        // limit
          0         // offset
        );
        setAssessments(assessmentsData);
        setAssessmentLoading(false);
      } catch (err) {
        console.error('Error loading dashboard data:', err);
        setError('Failed to load dashboard data. Please try again.');
        setAnalyticsLoading(false);
        setSyllabusLoading(false);
        setAssessmentLoading(false);
      }
    };
    
    fetchDashboardData();
  }, []);
  
  // Handle syllabus save
  const handleSyllabusSave = (syllabus: Syllabus) => {
    // Update syllabi list with the new/updated syllabus
    setSyllabi(prevSyllabi => {
      const index = prevSyllabi.findIndex(s => s.id === syllabus.id);
      if (index >= 0) {
        // Update existing syllabus
        const updated = [...prevSyllabi];
        updated[index] = syllabus;
        return updated;
      } else {
        // Add new syllabus
        return [...prevSyllabi, syllabus];
      }
    });
    
    // Reset selection
    setSelectedSyllabusId(null);
  };
  
  // Handle assessment completion
  const handleAssessmentComplete = (assessment: AssessmentItem) => {
    // Update assessments list with the completed assessment
    setAssessments(prevAssessments => {
      const index = prevAssessments.findIndex(a => a.id === assessment.id);
      if (index >= 0) {
        // Update existing assessment
        const updated = [...prevAssessments];
        updated[index] = assessment;
        return updated;
      } else {
        // Add new assessment
        return [...prevAssessments, assessment];
      }
    });
    
    // Reset selection
    setSelectedAssessmentId(null);
  };
  
  return (
    <>
      <Head>
        <title>Dashboard | Advanced Pilot Training Platform</title>
        <meta name="description" content="Dashboard for the Advanced Pilot Training Platform" />
      </Head>
      
      <div className="min-h-screen bg-gray-50">
        {/* Navigation */}
        <header className="bg-white shadow-sm">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between h-16">
              <div className="flex">
                <div className="flex-shrink-0 flex items-center">
                  <h1 className="text-xl font-bold text-blue-600">Advanced Pilot Training Platform</h1>
                </div>
                <nav className="ml-6 flex space-x-8">
                  <button
                    onClick={() => setActiveSection('analytics')}
                    className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                      activeSection === 'analytics'
                        ? 'border-blue-500 text-gray-900'
                        : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
                    }`}
                  >
                    Analytics
                  </button>
                  <button
                    onClick={() => setActiveSection('syllabus')}
                    className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                      activeSection === 'syllabus'
                        ? 'border-blue-500 text-gray-900'
                        : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
                    }`}
                  >
                    Syllabus
                  </button>
                  <button
                    onClick={() => setActiveSection('documents')}
                    className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                      activeSection === 'documents'
                        ? 'border-blue-500 text-gray-900'
                        : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
                    }`}
                  >
                    Documents
                  </button>
                  <button
                    onClick={() => setActiveSection('assessment')}
                    className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                      activeSection === 'assessment'
                        ? 'border-blue-500 text-gray-900'
                        : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
                    }`}
                  >
                    Assessment
                  </button>
                </nav>
              </div>
              <div className="flex items-center">
                <div className="ml-4 flex items-center md:ml-6">
                  <button
                    type="button"
                    className="bg-white p-1 rounded-full text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  >
                    <span className="sr-only">View notifications</span>
                    <svg 
                      xmlns="http://www.w3.org/2000/svg" 
                      className="h-6 w-6" 
                      fill="none" 
                      viewBox="0 0 24 24" 
                      stroke="currentColor"
                    >
                      <path 
                        strokeLinecap="round" 
                        strokeLinejoin="round" 
                        strokeWidth={1.5} 
                        d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" 
                      />
                    </svg>
                  </button>
                  
                  {/* Profile dropdown */}
                  <div className="ml-3 relative">
                    <div>
                      <button
                        type="button"
                        className="max-w-xs bg-white flex items-center text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        id="user-menu-button"
                      >
                        <span className="sr-only">Open user menu</span>
                        <div className="h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center text-blue-800 font-semibold">
                          JD
                        </div>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </header>
        
        {/* Main content */}
        <main className="py-6">
          {/* Error message */}
          {error && (
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mb-6">
              <div className="bg-red-50 p-4 rounded-md text-red-700">
                {error}
                <button
                  onClick={() => setError(null)}
                  className="ml-2 text-red-500 hover:text-red-700"
                >
                  Dismiss
                </button>
              </div>
            </div>
          )}
          
          {/* Analytics section */}
          {activeSection === 'analytics' && (
            <div className="max-w-7xl mx-auto sm:px-6 lg:px-8">
              <DashboardLayout />
            </div>
          )}
          
          {/* Syllabus section */}
          {activeSection === 'syllabus' && (
            <div className="max-w-7xl mx-auto sm:px-6 lg:px-8">
              {selectedSyllabusId ? (
                <SyllabusBuilder
                  syllabusId={selectedSyllabusId}
                  onSave={handleSyllabusSave}
                  onCancel={() => setSelectedSyllabusId(null)}
                />
              ) : (
                <div className="bg-white shadow rounded-lg">
                  <div className="px-4 py-5 sm:px-6 flex justify-between items-center">
                    <h2 className="text-lg font-medium text-gray-900">Training Syllabi</h2>
                    <Button 
                      variant="primary"
                      onClick={() => setSelectedSyllabusId('')} // Empty string for new syllabus
                    >
                      Create New Syllabus
                    </Button>
                  </div>
                  <div className="border-t border-gray-200">
                    {syllabusLoading ? (
                      <div className="p-6 flex justify-center">
                        <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>
                      </div>
                    ) : syllabi.length === 0 ? (
                      <div className="p-6 text-center text-gray-500">
                        <p>No syllabi found. Create your first syllabus to get started.</p>
                      </div>
                    ) : (
                      <ul className="divide-y divide-gray-200">
                        {syllabi.map((syllabus) => (
                          <li key={syllabus.id} className="px-4 py-4 sm:px-6 hover:bg-gray-50">
                            <div className="flex items-center justify-between">
                              <button
                                onClick={() => setSelectedSyllabusId(syllabus.id)}
                                className="text-left"
                              >
                                <p className="text-sm font-medium text-blue-600 truncate">{syllabus.title}</p>
                                <p className="text-sm text-gray-500 truncate">{syllabus.description}</p>
                              </button>
                              <div className="ml-2 flex-shrink-0 flex">
                                <p className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                  v{syllabus.version}
                                </p>
                              </div>
                            </div>
                            <div className="mt-2 sm:flex sm:justify-between">
                              <div className="sm:flex">
                                <p className="flex items-center text-sm text-gray-500">
                                  {syllabus.modules.length} modules
                                </p>
                              </div>
                              <div className="mt-2 flex items-center text-sm text-gray-500 sm:mt-0">
                                <p>
                                  Updated {new Date(syllabus.updatedAt).toLocaleDateString()}
                                </p>
                              </div>
                            </div>
                          </li>
                        ))}
                      </ul>
                    )}
                  </div>
                </div>
              )}
            </div>
          )}
          
          {/* Documents section */}
          {activeSection === 'documents' && (
            <div className="max-w-7xl mx-auto sm:px-6 lg:px-8">
              <div className="bg-white shadow rounded-lg p-6">
                <h2 className="text-lg font-medium text-gray-900 mb-6">Document Management</h2>
                <DocumentUploader 
                  onUploadComplete={(documents) => {
                    console.log('Documents uploaded:', documents);
                    // Here you could update some state or show a success message
                  }}
                  onUploadError={(error) => {
                    console.error('Upload error:', error);
                    setError('Failed to upload documents. Please try again.');
                  }}
                />
              </div>
            </div>
          )}
          
          {/* Assessment section */}
          {activeSection === 'assessment' && (
            <div className="max-w-7xl mx-auto sm:px-6 lg:px-8">
              {selectedAssessmentId ? (
                <GradingForm
                  assessmentId={selectedAssessmentId}
                  onComplete={handleAssessmentComplete}
                  onCancel={() => setSelectedAssessmentId(null)}
                />
              ) : (
                <div className="bg-white shadow rounded-lg">
                  <div className="px-4 py-5 sm:px-6 flex justify-between items-center">
                    <h2 className="text-lg font-medium text-gray-900">Recent Assessments</h2>
                    <Button 
                      variant="primary"
                      onClick={() => {
                        // In a real app, you would open a form to create a new assessment
                        alert('In a complete implementation, this would open a form to create a new assessment');
                      }}
                    >
                      Create New Assessment
                    </Button>
                  </div>
                  <div className="border-t border-gray-200">
                    {assessmentLoading ? (
                      <div className="p-6 flex justify-center">
                        <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>
                      </div>
                    ) : assessments.length === 0 ? (
                      <div className="p-6 text-center text-gray-500">
                        <p>No assessments found. Create your first assessment to get started.</p>
                      </div>
                    ) : (
                      <ul className="divide-y divide-gray-200">
                        {assessments.map((assessment) => (
                          <li key={assessment.id} className="px-4 py-4 sm:px-6 hover:bg-gray-50">
                            <div className="flex items-center justify-between">
                              <button
                                onClick={() => setSelectedAssessmentId(assessment.id)}
                                className="text-left"
                              >
                                <p className="text-sm font-medium text-blue-600 truncate">
                                  {assessment.exerciseName} Assessment
                                </p>
                                <p className="text-sm text-gray-500 truncate">
                                  {assessment.moduleName} &gt; {assessment.lessonName}
                                </p>
                              </button>
                              <div className="ml-2 flex-shrink-0 flex">
                                <p className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                                  assessment.status === 'draft' ? 'bg-gray-100 text-gray-800' :
                                  assessment.status === 'in_progress' ? 'bg-yellow-100 text-yellow-800' :
                                  assessment.status === 'completed' ? 'bg-green-100 text-green-800' :
                                  assessment.status === 'submitted' ? 'bg-purple-100 text-purple-800' :
                                  assessment.status === 'approved' ? 'bg-emerald-100 text-emerald-800' :
                                  'bg-red-100 text-red-800'
                                }`}>
                                  {assessment.status.replace('_', ' ')}
                                </p>
                              </div>
                            </div>
                            <div className="mt-2 sm:flex sm:justify-between">
                              <div className="sm:flex">
                                <p className="flex items-center text-sm text-gray-500">
                                  Trainee: {assessment.traineeName}
                                </p>
                                <p className="mt-2 flex items-center text-sm text-gray-500 sm:mt-0 sm:ml-6">
                                  Instructor: {assessment.instructorName}
                                </p>
                              </div>
                              <div className="mt-2 flex items-center text-sm text-gray-500 sm:mt-0">
                                <p>
                                  {assessment.completedAt 
                                    ? `Completed ${new Date(assessment.completedAt).toLocaleDateString()}`
                                    : `Created ${new Date(assessment.createdAt).toLocaleDateString()}`
                                  }
                                </p>
                              </div>
                            </div>
                          </li>
                        ))}
                      </ul>
                    )}
                  </div>
                </div>
              )}
            </div>
          )}
        </main>
      </div>
    </>
  );
};

export default Dashboard;

// src/frontend/components/visualization/DataVisualization.tsx
import React, { useState, useEffect } from 'react';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';

// Import visualization components from Recharts
import {
  ResponsiveContainer,
  LineChart, Line,
  BarChart, Bar,
  PieChart, Pie, Cell,
  AreaChart, Area,
  XAxis, YAxis, CartesianGrid, Tooltip, Legend,
  RadarChart, Radar, PolarGrid, PolarAngleAxis, PolarRadiusAxis
} from 'recharts';

// Types
export interface ChartDataPoint {
  name: string;
  value: number;
  [key: string]: any;
}

export interface MultiSeriesChartDataPoint {
  name: string;
  [key: string]: any;
}

export interface PieChartDataPoint {
  name: string;
  value: number;
  color?: string;
}

export interface RadarChartDataPoint {
  subject: string;
  value: number;
  fullMark?: number;
}

export type ChartType = 'line' | 'bar' | 'pie' | 'area' | 'radar' | 'stacked-bar' | 'composed';

// Color palette for charts
const COLORS = [
  '#3B82F6', // blue-500
  '#10B981', // emerald-500
  '#F59E0B', // amber-500
  '#EF4444', // red-500
  '#8B5CF6', // violet-500
  '#EC4899', // pink-500
  '#06B6D4', // cyan-500
  '#F97316'  // orange-500
];

// Helper function to get color for a series
const getColor = (index: number): string => {
  return COLORS[index % COLORS.length];
};

// Base Chart Component
interface BaseChartProps {
  title?: string;
  description?: string;
  height?: number;
  children: React.ReactNode;
  legend?: boolean;
  grid?: boolean;
}

export const BaseChart: React.FC<BaseChartProps> = ({
  title,
  description,
  height = 300,
  children,
  legend = true,
  grid = true
}) => {
  return (
    <Card>
      {(title || description) && (
        <div className="mb-4">
          {title && <h3 className="text-lg font-medium">{title}</h3>}
          {description && <p className="text-sm text-gray-500">{description}</p>}
        </div>
      )}
      <div style={{ width: '100%', height: `${height}px` }}>
        <ResponsiveContainer width="100%" height="100%">
          {children}
        </ResponsiveContainer>
      </div>
    </Card>
  );
};

// Line Chart Component
interface LineChartProps {
  data: MultiSeriesChartDataPoint[];
  series: string[];
  xAxisKey?: string;
  title?: string;
  description?: string;
  height?: number;
  grid?: boolean;
  legend?: boolean;
  tooltipFormatter?: (value: any, name: string) => [string, string];
  onClick?: (data: any) => void;
  colors?: string[];
}

export const LineChartComponent: React.FC<LineChartProps> = ({
  data,
  series,
  xAxisKey = 'name',
  title,
  description,
  height = 300,
  grid = true,
  legend = true,
  tooltipFormatter,
  onClick,
  colors
}) => {
  return (
    <BaseChart title={title} description={description} height={height} legend={legend} grid={grid}>
      <LineChart
        data={data}
        onClick={onClick}
        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
      >
        {grid && <CartesianGrid strokeDasharray="3 3" />}
        <XAxis dataKey={xAxisKey} />
        <YAxis />
        <Tooltip formatter={tooltipFormatter} />
        {legend && <Legend />}
        {series.map((key, index) => (
          <Line
            key={key}
            type="monotone"
            dataKey={key}
            stroke={colors ? colors[index % colors.length] : getColor(index)}
            activeDot={{ r: 8 }}
            strokeWidth={2}
          />
        ))}
      </LineChart>
    </BaseChart>
  );
};

// Bar Chart Component
interface BarChartProps {
  data: MultiSeriesChartDataPoint[];
  series: string[];
  xAxisKey?: string;
  title?: string;
  description?: string;
  height?: number;
  grid?: boolean;
  legend?: boolean;
  stacked?: boolean;
  tooltipFormatter?: (value: any, name: string) => [string, string];
  onClick?: (data: any) => void;
  colors?: string[];
}

export const BarChartComponent: React.FC<BarChartProps> = ({
  data,
  series,
  xAxisKey = 'name',
  title,
  description,
  height = 300,
  grid = true,
  legend = true,
  stacked = false,
  tooltipFormatter,
  onClick,
  colors
}) => {
  return (
    <BaseChart title={title} description={description} height={height} legend={legend} grid={grid}>
      <BarChart
        data={data}
        onClick={onClick}
        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
      >
        {grid && <CartesianGrid strokeDasharray="3 3" />}
        <XAxis dataKey={xAxisKey} />
        <YAxis />
        <Tooltip formatter={tooltipFormatter} />
        {legend && <Legend />}
        {series.map((key, index) => (
          <Bar
            key={key}
            dataKey={key}
            fill={colors ? colors[index % colors.length] : getColor(index)}
            stackId={stacked ? 'stack' : undefined}
          />
        ))}
      </BarChart>
    </BaseChart>
  );
};

// Pie Chart Component
interface PieChartProps {
  data: PieChartDataPoint[];
  title?: string;
  description?: string;
  height?: number;
  legend?: boolean;
  innerRadius?: number;
  outerRadius?: number;
  tooltipFormatter?: (value: any, name: string) => [string, string];
  onClick?: (data: any) => void;
  colors?: string[];
}

export const PieChartComponent: React.FC<PieChartProps> = ({
  data,
  title,
  description,
  height = 300,
  legend = true,
  innerRadius = 0,
  outerRadius = 80,
  tooltipFormatter,
  onClick,
  colors
}) => {
  return (
    <BaseChart title={title} description={description} height={height} legend={legend}>
      <PieChart margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
        <Pie
          data={data}
          cx="50%"
          cy="50%"
          labelLine={false}
          label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
          outerRadius={outerRadius}
          innerRadius={innerRadius}
          fill="#8884d8"
          dataKey="value"
          onClick={onClick}
        >
          {data.map((entry, index) => (
            <Cell 
              key={`cell-${index}`} 
              fill={entry.color || (colors ? colors[index % colors.length] : getColor(index))} 
            />
          ))}
        </Pie>
        <Tooltip formatter={tooltipFormatter} />
        {legend && <Legend />}
      </PieChart>
    </BaseChart>
  );
};

// Area Chart Component
interface AreaChartProps {
  data: MultiSeriesChartDataPoint[];
  series: string[];
  xAxisKey?: string;
  title?: string;
  description?: string;
  height?: number;
  grid?: boolean;
  legend?: boolean;
  stacked?: boolean;
  tooltipFormatter?: (value: any, name: string) => [string, string];
  onClick?: (data: any) => void;
  colors?: string[];
}

export const AreaChartComponent: React.FC<AreaChartProps> = ({
  data,
  series,
  xAxisKey = 'name',
  title,
  description,
  height = 300,
  grid = true,
  legend = true,
  stacked = true,
  tooltipFormatter,
  onClick,
  colors
}) => {
  return (
    <BaseChart title={title} description={description} height={height} legend={legend} grid={grid}>
      <AreaChart
        data={data}
        onClick={onClick}
        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
      >
        {grid && <CartesianGrid strokeDasharray="3 3" />}
        <XAxis dataKey={xAxisKey} />
        <YAxis />
        <Tooltip formatter={tooltipFormatter} />
        {legend && <Legend />}
        {series.map((key, index) => (
          <Area
            key={key}
            type="monotone"
            dataKey={key}
            stackId={stacked ? "1" : `stack-${index}`}
            stroke={colors ? colors[index % colors.length] : getColor(index)}
            fill={colors ? colors[index % colors.length] : getColor(index)}
            fillOpacity={0.6}
          />
        ))}
      </AreaChart>
    </BaseChart>
  );
};

// Radar Chart Component
interface RadarChartProps {
  data: RadarChartDataPoint[];
  series: string[];
  title?: string;
  description?: string;
  height?: number;
  legend?: boolean;
  tooltipFormatter?: (value: any, name: string) => [string, string];
  onClick?: (data: any) => void;
  colors?: string[];
}

export const RadarChartComponent: React.FC<RadarChartProps> = ({
  data,
  series,
  title,
  description,
  height = 300,
  legend = true,
  tooltipFormatter,
  onClick,
  colors
}) => {
  return (
    <BaseChart title={title} description={description} height={height} legend={legend}>
      <RadarChart cx="50%" cy="50%" outerRadius="80%" data={data} onClick={onClick}>
        <PolarGrid />
        <PolarAngleAxis dataKey="subject" />
        <PolarRadiusAxis />
        <Tooltip formatter={tooltipFormatter} />
        {legend && <Legend />}
        {series.map((key, index) => (
          <Radar
            key={key}
            name={key}
            dataKey={key}
            stroke={colors ? colors[index % colors.length] : getColor(index)}
            fill={colors ? colors[index % colors.length] : getColor(index)}
            fillOpacity={0.6}
          />
        ))}
      </RadarChart>
    </BaseChart>
  );
};

// Custom Tooltip Components
interface CustomTooltipProps {
  active?: boolean;
  payload?: any[];
  label?: string;
  formatter?: (value: any, name: string) => [string, string];
  valuePrefix?: string;
  valueSuffix?: string;
}

export const CustomTooltip: React.FC<CustomTooltipProps> = ({
  active,
  payload,
  label,
  formatter,
  valuePrefix = '',
  valueSuffix = ''
}) => {
  if (!active || !payload || payload.length === 0) {
    return null;
  }

  return (
    <div className="bg-white shadow-md rounded-md p-3 border border-gray-200">
      <p className="font-medium text-gray-900">{label}</p>
      <div className="mt-2">
        {payload.map((entry, index) => {
          let displayValue = entry.value;
          let displayName = entry.name;
          
          if (formatter) {
            [displayValue, displayName] = formatter(entry.value, entry.name);
          }
          
          return (
            <div key={`item-${index}`} className="flex items-center mb-1">
              <div 
                className="w-3 h-3 mr-2 rounded-full" 
                style={{ backgroundColor: entry.color }}
              ></div>
              <span className="text-sm text-gray-600">
                {displayName}: {valuePrefix}{displayValue}{valueSuffix}
              </span>
            </div>
          );
        })}
      </div>
    </div>
  );
};

// Performance Dashboard Components
interface PerformanceMetric {
  name: string;
  value: number;
  progress?: number;
  target?: number;
  trend?: 'up' | 'down' | 'neutral';
  previousValue?: number;
  unit?: string;
  color?: string;
}

interface PerformanceCardProps {
  metric: PerformanceMetric;
  onClick?: () => void;
}

export const PerformanceCard: React.FC<PerformanceCardProps> = ({ metric, onClick }) => {
  const getTrendIcon = () => {
    if (!metric.trend) return null;
    
    switch (metric.trend) {
      case 'up':
        return (
          <svg className="h-5 w-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 11l5-5m0 0l5 5m-5-5v12"></path>
          </svg>
        );
      case 'down':
        return (
          <svg className="h-5 w-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17 13l-5 5m0 0l-5-5m5 5V6"></path>
          </svg>
        );
      case 'neutral':
        return (
          <svg className="h-5 w-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 12h14"></path>
          </svg>
        );
      default:
        return null;
    }
  };
  
  const getProgressColor = () => {
    if (!metric.progress) return 'bg-blue-500';
    
    if (metric.progress >= 100) return 'bg-green-500';
    if (metric.progress >= 70) return 'bg-blue-500';
    if (metric.progress >= 40) return 'bg-yellow-500';
    return 'bg-red-500';
  };
  
  return (
    <Card className="cursor-pointer hover:shadow-md transition-shadow" onClick={onClick}>
      <div className="flex items-center">
        {metric.color && (
          <div className="w-2 h-16 rounded-full mr-4" style={{ backgroundColor: metric.color }}></div>
        )}
        <div className="flex-grow">
          <p className="text-sm text-gray-500">{metric.name}</p>
          <div className="flex items-center">
            <span className="text-2xl font-semibold">
              {metric.value}{metric.unit}
            </span>
            {metric.previousValue !== undefined && (
              <div className="flex items-center ml-2">
                {getTrendIcon()}
                <span className={`text-sm ${
                  metric.trend === 'up' ? 'text-green-500' :
                  metric.trend === 'down' ? 'text-red-500' :
                  'text-gray-500'
                }`}>
                  {Math.abs(metric.value - metric.previousValue).toFixed(1)}{metric.unit}
                </span>
              </div>
            )}
          </div>
          
          {metric.progress !== undefined && (
            <div className="mt-2">
              <div className="flex justify-between text-xs text-gray-500 mb-1">
                <span>{metric.progress}%</span>
                {metric.target && <span>Target: {metric.target}{metric.unit}</span>}
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div
                  className={`h-2 rounded-full ${getProgressColor()}`}
                  style={{ width: `${Math.min(100, metric.progress)}%` }}
                ></div>
              </div>
            </div>
          )}
        </div>
      </div>
    </Card>
  );
};

// Metrics Dashboard
interface MetricsDashboardProps {
  metrics: PerformanceMetric[];
  lineChartData?: MultiSeriesChartDataPoint[];
  lineChartSeries?: string[];
  barChartData?: MultiSeriesChartDataPoint[];
  barChartSeries?: string[];
  pieChartData?: PieChartDataPoint[];
  onMetricClick?: (metric: PerformanceMetric) => void;
  onExportPDF?: () => void;
  onExportCSV?: () => void;
  title?: string;
  description?: string;
}

export const MetricsDashboard: React.FC<MetricsDashboardProps> = ({
  metrics,
  lineChartData,
  lineChartSeries,
  barChartData,
  barChartSeries,
  pieChartData,
  onMetricClick,
  onExportPDF,
  onExportCSV,
  title = 'Performance Metrics',
  description
}) => {
  return (
    <div className="metrics-dashboard">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">{title}</h2>
          {description && <p className="text-gray-500">{description}</p>}
        </div>
        
        <div className="flex space-x-2 mt-2 sm:mt-0">
          {onExportPDF && (
            <Button variant="outline" size="small" onClick={onExportPDF}>
              Export PDF
            </Button>
          )}
          {onExportCSV && (
            <Button variant="outline" size="small" onClick={onExportCSV}>
              Export CSV
            </Button>
          )}
        </div>
      </div>
      
      {/* Metrics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
        {metrics.map((metric, index) => (
          <PerformanceCard
            key={index}
            metric={metric}
            onClick={() => onMetricClick && onMetricClick(metric)}
          />
        ))}
      </div>
      
      {/* Charts Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {lineChartData && lineChartSeries && (
          <LineChartComponent
            data={lineChartData}
            series={lineChartSeries}
            title="Trends Over Time"
            height={300}
          />
        )}
        
        {barChartData && barChartSeries && (
          <BarChartComponent
            data={barChartData}
            series={barChartSeries}
            title="Comparison"
            height={300}
          />
        )}
        
        {pieChartData && (
          <PieChartComponent
            data={pieChartData}
            title="Distribution"
            height={300}
          />
        )}
      </div>
    </div>
  );
};

// Performance Comparison Component
interface PerformanceComparisonProps {
  traineeData: {
    id: string;
    name: string;
    metrics: Record<string, number>;
    color?: string;
  }[];
  metricLabels: Record<string, string>;
  metricDescriptions?: Record<string, string>;
  benchmarkData?: Record<string, number>;
  title?: string;
  description?: string;
  onTraineeSelect?: (traineeId: string) => void;
}

export const PerformanceComparison: React.FC<PerformanceComparisonProps> = ({
  traineeData,
  metricLabels,
  metricDescriptions = {},
  benchmarkData,
  title = 'Performance Comparison',
  description,
  onTraineeSelect
}) => {
  const [selectedMetric, setSelectedMetric] = useState<string>(Object.keys(metricLabels)[0]);
  const [selectedTrainees, setSelectedTrainees] = useState<string[]>(traineeData.map(t => t.id));
  
  // Format data for bar chart
  const getBarChartData = () => {
    return [
      {
        name: metricLabels[selectedMetric],
        ...selectedTrainees.reduce((acc, traineeId) => {
          const trainee = traineeData.find(t => t.id === traineeId);
          if (trainee) {
            acc[trainee.name] = trainee.metrics[selectedMetric];
          }
          return acc;
        }, {} as Record<string, number>),
        ...(benchmarkData ? { Benchmark: benchmarkData[selectedMetric] } : {})
      }
    ];
  };
  
  // Format data for radar chart
  const getRadarChartData = () => {
    return Object.keys(metricLabels).map(metric => ({
      subject: metricLabels[metric],
      ...selectedTrainees.reduce((acc, traineeId) => {
        const trainee = traineeData.find(t => t.id === traineeId);
        if (trainee) {
          acc[trainee.name] = trainee.metrics[metric];
        }
        return acc;
      }, {} as Record<string, number>),
      ...(benchmarkData ? { Benchmark: benchmarkData[metric] } : {})
    }));
  };
  
  // Get series for bar chart
  const getBarChartSeries = () => {
    const series = selectedTrainees.map(traineeId => {
      const trainee = traineeData.find(t => t.id === traineeId);
      return trainee ? trainee.name : '';
    }).filter(Boolean);
    
    if (benchmarkData) {
      series.push('Benchmark');
    }
    
    return series;
  };
  
  // Get series for radar chart
  const getRadarChartSeries = () => {
    const series = selectedTrainees.map(traineeId => {
      const trainee = traineeData.find(t => t.id === traineeId);
      return trainee ? trainee.name : '';
    }).filter(Boolean);
    
    if (benchmarkData) {
      series.push('Benchmark');
    }
    
    return series;
  };
  
  // Get colors for charts
  const getChartColors = () => {
    const colors = selectedTrainees.map(traineeId => {
      const trainee = traineeData.find(t => t.id === traineeId);
      return trainee?.color || '';
    }).filter(Boolean);
    
    if (benchmarkData) {
      colors.push('#64748B'); // slate-500 for benchmark
    }
    
    return colors.length > 0 ? colors : undefined;
  };
  
  // Handle trainee selection
  const handleTraineeToggle = (traineeId: string) => {
    setSelectedTrainees(prev => {
      if (prev.includes(traineeId)) {
        return prev.filter(id => id !== traineeId);
      } else {
        return [...prev, traineeId];
      }
    });
  };
  
  return (
    <div className="performance-comparison">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">{title}</h2>
          {description && <p className="text-gray-500">{description}</p>}
        </div>
      </div>
      
      <Card className="mb-6">
        <div className="mb-4">
          <h3 className="text-lg font-medium">Select Trainees to Compare</h3>
        </div>
        
        <div className="flex flex-wrap gap-2">
          {traineeData.map(trainee => (
            <div
              key={trainee.id}
              className={`
                px-3 py-1.5 rounded-full text-sm cursor-pointer transition-colors
                ${selectedTrainees.includes(trainee.id)
                  ? 'bg-blue-100 text-blue-800 border-2 border-blue-300'
                  : 'bg-gray-100 text-gray-800 border-2 border-transparent hover:bg-gray-200'
                }
              `}
              onClick={() => handleTraineeToggle(trainee.id)}
            >
              {trainee.name}
            </div>
          ))}
        </div>
      </Card>
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
        <Card>
          <div className="mb-4">
            <h3 className="text-lg font-medium">Metric Comparison</h3>
            <p className="text-sm text-gray-500">Compare performance on specific metrics</p>
          </div>
          
          <div className="mb-4">
            <label htmlFor="metric-select" className="block text-sm font-medium text-gray-700">
              Select Metric
            </label>
            <select
              id="metric-select"
              className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
              value={selectedMetric}
              onChange={(e) => setSelectedMetric(e.target.value)}
            >
              {Object.entries(metricLabels).map(([key, label]) => (
                <option key={key} value={key}>
                  {label}
                </option>
              ))}
            </select>
            
            {metricDescriptions[selectedMetric] && (
              <p className="mt-1 text-sm text-gray-500">
                {metricDescriptions[selectedMetric]}
              </p>
            )}
          </div>
          
          {selectedTrainees.length > 0 ? (
            <BarChartComponent
              data={getBarChartData()}
              series={getBarChartSeries()}
              height={300}
              colors={getChartColors()}
            />
          ) : (
            <div className="p-8 text-center text-gray-500">
              Please select at least one trainee to compare.
            </div>
          )}
        </Card>
        
        <Card>
          <div className="mb-4">
            <h3 className="text-lg font-medium">Overall Comparison</h3>
            <p className="text-sm text-gray-500">Compare all metrics across trainees</p>
          </div>
          
          {selectedTrainees.length > 0 ? (
            <RadarChartComponent
              data={getRadarChartData()}
              series={getRadarChartSeries()}
              height={300}
              colors={getChartColors()}
            />
          ) : (
            <div className="p-8 text-center text-gray-500">
              Please select at least one trainee to compare.
            </div>
          )}
        </Card>
      </div>
      
      {/* Detail Tables */}
      <Card>
        <div className="mb-4">
          <h3 className="text-lg font-medium">Detailed Metrics</h3>
        </div>
        
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Metric
                </th>
                {selectedTrainees.map(traineeId => {
                  const trainee = traineeData.find(t => t.id === traineeId);
                  return trainee ? (
                    <th key={trainee.id} scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      {trainee.name}
                    </th>
                  ) : null;
                })}
                {benchmarkData && (
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Benchmark
                  </th>
                )}
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {Object.entries(metricLabels).map(([metric, label]) => (
                <tr key={metric} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-medium text-gray-900">{label}</div>
                    {metricDescriptions[metric] && (
                      <div className="text-xs text-gray-500">{metricDescriptions[metric]}</div>
                    )}
                  </td>
                  {selectedTrainees.map(traineeId => {
                    const trainee = traineeData.find(t => t.id === traineeId);
                    return trainee ? (
                      <td key={trainee.id} className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">{trainee.metrics[metric]}</div>
                      </td>
                    ) : null;
                  })}
                  {benchmarkData && (
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">{benchmarkData[metric]}</div>
                    </td>
                  )}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </Card>
    </div>
  );
};

// Time Series Visualization Component
interface TimeSeriesDataPoint {
  date: string | Date;
  [key: string]: any;
}

interface TimeSeriesVisualizationProps {
  data: TimeSeriesDataPoint[];
  series: string[];
  dateKey?: string;
  title?: string;
  description?: string;
  onTimeRangeChange?: (start: Date, end: Date) => void;
  onExportData?: () => void;
  timeRanges?: { label: string; start: Date; end: Date }[];
  annotations?: { date: string | Date; label: string; color?: string }[];
}

export const TimeSeriesVisualization: React.FC<TimeSeriesVisualizationProps> = ({
  data,
  series,
  dateKey = 'date',
  title = 'Time Series Analysis',
  description,
  onTimeRangeChange,
  onExportData,
  timeRanges = [
    { label: 'Last 7 Days', start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), end: new Date() },
    { label: 'Last 30 Days', start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), end: new Date() },
    { label: 'Last 90 Days', start: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000), end: new Date() },
    { label: 'Year to Date', start: new Date(new Date().getFullYear(), 0, 1), end: new Date() }
  ],
  annotations
}) => {
  const [selectedTimeRange, setSelectedTimeRange] = useState<string>(timeRanges[0].label);
  const [filteredData, setFilteredData] = useState<TimeSeriesDataPoint[]>(data);
  const [selectedSeries, setSelectedSeries] = useState<string[]>(series);
  
  // Apply time range filter
  useEffect(() => {
    const range = timeRanges.find(r => r.label === selectedTimeRange);
    if (range) {
      const filtered = data.filter(item => {
        const itemDate = typeof item[dateKey] === 'string' ? new Date(item[dateKey]) : item[dateKey] as Date;
        return itemDate >= range.start && itemDate <= range.end;
      });
      setFilteredData(filtered);
      
      if (onTimeRangeChange) {
        onTimeRangeChange(range.start, range.end);
      }
    }
  }, [selectedTimeRange, data, dateKey, timeRanges, onTimeRangeChange]);
  
  // Handle series toggle
  const handleSeriesToggle = (seriesName: string) => {
    setSelectedSeries(prev => {
      if (prev.includes(seriesName)) {
        return prev.filter(name => name !== seriesName);
      } else {
        return [...prev, seriesName];
      }
    });
  };
  
  return (
    <div className="time-series-visualization">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">{title}</h2>
          {description && <p className="text-gray-500">{description}</p>}
        </div>
        
        {onExportData && (
          <Button variant="outline" size="small" onClick={onExportData}>
            Export Data
          </Button>
        )}
      </div>
      
      <Card className="mb-6">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4">
          <div>
            <h3 className="text-lg font-medium">Time Series Data</h3>
          </div>
          
          <div className="flex flex-wrap gap-2 mt-2 sm:mt-0">
            {timeRanges.map((range) => (
              <button
                key={range.label}
                className={`px-3 py-1 text-sm rounded-md ${
                  selectedTimeRange === range.label
                    ? 'bg-blue-100 text-blue-800 font-medium'
                    : 'bg-gray-100 text-gray-800 hover:bg-gray-200'
                }`}
                onClick={() => setSelectedTimeRange(range.label)}
              >
                {range.label}
              </button>
            ))}
          </div>
        </div>
        
        <div className="mb-4">
          <div className="flex flex-wrap gap-2">
            {series.map(seriesName => (
              <div
                key={seriesName}
                className={`
                  flex items-center px-3 py-1.5 rounded-full text-sm cursor-pointer transition-colors
                  ${selectedSeries.includes(seriesName)
                    ? 'bg-blue-100 text-blue-800 border-2 border-blue-300'
                    : 'bg-gray-100 text-gray-800 border-2 border-transparent hover:bg-gray-200'
                  }
                `}
                onClick={() => handleSeriesToggle(seriesName)}
              >
                <div 
                  className="w-3 h-3 rounded-full mr-2" 
                  style={{ backgroundColor: getColor(series.indexOf(seriesName)) }}
                ></div>
                {seriesName}
              </div>
            ))}
          </div>
        </div>
        
        <LineChartComponent
          data={filteredData}
          series={selectedSeries}
          xAxisKey={dateKey}
          height={400}
        />
      </Card>
      
      {/* Detail Table */}
      <Card>
        <div className="mb-4">
          <h3 className="text-lg font-medium">Data Table</h3>
        </div>
        
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Date
                </th>
                {selectedSeries.map(seriesName => (
                  <th key={seriesName} scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    {seriesName}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredData.map((item, index) => (
                <tr key={index} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-900">
                      {typeof item[dateKey] === 'string' 
                        ? item[dateKey] 
                        : (item[dateKey] as Date).toLocaleDateString()}
                    </div>
                  </td>
                  {selectedSeries.map(seriesName => (
                    <td key={seriesName} className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">{item[seriesName]}</div>
                    </td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </Card>
    </div>
  );
};

// components/debriefing/SessionReplayPlayer.tsx
import React, { useState, useRef, useEffect } from 'react';
import {
  Box,
  Paper,
  Typography,
  Slider,
  IconButton,
  Tooltip,
  Grid,
  Divider,
  Chip,
} from '@mui/material';
import {
  PlayArrow,
  Pause,
  FastForward,
  FastRewind,
  SkipNext,
  SkipPrevious,
  Flag,
  Bookmark,
  FlagOutlined,
  BookmarkOutlined,
} from '@mui/icons-material';

interface TimelineEvent {
  id: string;
  timestamp: number; // in seconds
  type: 'flag' | 'bookmark' | 'system' | 'annotation';
  title: string;
  description?: string;
  severity?: 'info' | 'warning' | 'critical';
  parameters?: Record<string, any>;
}

interface SessionReplayPlayerProps {
  videoUrl: string;
  duration: number; // in seconds
  events: TimelineEvent[];
  onAddEvent?: (type: 'flag' | 'bookmark', timestamp: number) => void;
  onEventClick?: (event: TimelineEvent) => void;
}

export const SessionReplayPlayer: React.FC<SessionReplayPlayerProps> = ({
  videoUrl,
  duration,
  events,
  onAddEvent,
  onEventClick,
}) => {
  const [playing, setPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [playbackRate, setPlaybackRate] = useState(1);
  const videoRef = useRef<HTMLVideoElement>(null);

  useEffect(() => {
    const video = videoRef.current;
    if (!video) return;

    const updateTime = () => {
      setCurrentTime(video.currentTime);
    };

    video.addEventListener('timeupdate', updateTime);
    video.addEventListener('ended', () => setPlaying(false));

    return () => {
      video.removeEventListener('timeupdate', updateTime);
      video.removeEventListener('ended', () => setPlaying(false));
    };
  }, []);

  const togglePlay = () => {
    const video = videoRef.current;
    if (!video) return;

    if (playing) {
      video.pause();
    } else {
      video.play();
    }
    setPlaying(!playing);
  };

  const handleSliderChange = (_: Event, newValue: number | number[]) => {
    const time = newValue as number;
    setCurrentTime(time);
    if (videoRef.current) {
      videoRef.current.currentTime = time;
    }
  };

  const handleFastForward = () => {
    if (videoRef.current) {
      videoRef.current.currentTime += 10;
    }
  };

  const handleRewind = () => {
    if (videoRef.current) {
      videoRef.current.currentTime -= 10;
    }
  };

  const handleAddFlag = () => {
    onAddEvent?.('flag', currentTime);
  };

  const handleAddBookmark = () => {
    onAddEvent?.('bookmark', currentTime);
  };

  const handleEventSeek = (timestamp: number) => {
    setCurrentTime(timestamp);
    if (videoRef.current) {
      videoRef.current.currentTime = timestamp;
    }
  };

  // Sort events by timestamp
  const sortedEvents = [...events].sort((a, b) => a.timestamp - b.timestamp);

  // Find the nearest event to current time
  const currentEventIndex = sortedEvents.findIndex(
    (event) => event.timestamp > currentTime
  ) - 1;

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const getEventColor = (type: string, severity?: string) => {
    if (type === 'flag') {
      return severity === 'critical'
        ? 'text-red-500'
        : severity === 'warning'
        ? 'text-amber-500'
        : 'text-blue-500';
    }
    if (type === 'bookmark') return 'text-purple-500';
    if (type === 'annotation') return 'text-green-500';
    return 'text-gray-500';
  };

  const getEventIcon = (type: string, severity?: string) => {
    if (type === 'flag') {
      return severity === 'critical' ? (
        <Flag className="text-red-500" />
      ) : severity === 'warning' ? (
        <Flag className="text-amber-500" />
      ) : (
        <FlagOutlined className="text-blue-500" />
      );
    }
    if (type === 'bookmark') return <BookmarkOutlined className="text-purple-500" />;
    if (type === 'annotation') return <Bookmark className="text-green-500" />;
    return null;
  };

  return (
    <Paper elevation={3} className="overflow-hidden">
      <Box className="bg-black relative">
        <video
          ref={videoRef}
          src={videoUrl}
          className="w-full aspect-video"
          onClick={togglePlay}
        />

        {/* Video overlay for playback control */}
        <Box
          className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-40 opacity-0 hover:opacity-100 transition-opacity cursor-pointer"
          onClick={togglePlay}
        >
          <IconButton size="large" className="text-white">
            {playing ? (
              <Pause fontSize="large" />
            ) : (
              <PlayArrow fontSize="large" />
            )}
          </IconButton>
        </Box>

        {/* Timeline events markers */}
        <Box
          className="absolute bottom-8 left-0 right-0"
          sx={{ pointerEvents: 'none' }}
        >
          {events.map((event) => (
            <Tooltip
              key={event.id}
              title={event.title}
              placement="top"
              arrow
            >
              <Box
                className={`absolute w-4 h-4 -ml-2 rounded-full cursor-pointer ${getEventColor(
                  event.type,
                  event.severity
                )}`}
                style={{
                  left: `${(event.timestamp / duration) * 100}%`,
                  bottom: '12px',
                }}
                sx={{ pointerEvents: 'auto' }}
                onClick={() => handleEventSeek(event.timestamp)}
              />
            </Tooltip>
          ))}
        </Box>
      </Box>

      <Box className="p-3 bg-gray-100">
        <Grid container spacing={2} alignItems="center">
          <Grid item xs>
            <Slider
              value={currentTime}
              min={0}
              max={duration}
              onChange={handleSliderChange}
              aria-labelledby="video-progress-slider"
              className="mt-1"
            />
          </Grid>
          <Grid item>
            <Typography variant="body2" className="whitespace-nowrap">
              {formatTime(currentTime)} / {formatTime(duration)}
            </Typography>
          </Grid>
        </Grid>

        <Box className="flex items-center justify-between mt-2">
          <Box className="flex items-center">
            <IconButton onClick={handleRewind} size="small">
              <FastRewind />
            </IconButton>
            <IconButton onClick={togglePlay} size="small" className="mx-1">
              {playing ? <Pause /> : <PlayArrow />}
            </IconButton>
            <IconButton onClick={handleFastForward} size="small">
              <FastForward />
            </IconButton>
          </Box>

          <Box className="flex items-center">
            <Tooltip title="Add Flag">
              <IconButton onClick={handleAddFlag} size="small">
                <FlagOutlined />
              </IconButton>
            </Tooltip>
            <Tooltip title="Add Bookmark">
              <IconButton onClick={handleAddBookmark} size="small">
                <BookmarkOutlined />
              </IconButton>
            </Tooltip>
          </Box>
        </Box>
      </Box>

      <Divider />

      <Box className="p-3 bg-white max-h-60 overflow-y-auto">
        <Typography variant="subtitle2" className="mb-2">
          Timeline Events
        </Typography>

        {sortedEvents.length === 0 ? (
          <Typography variant="body2" color="textSecondary" className="text-center py-2">
            No events in timeline
          </Typography>
        ) : (
          <Box className="space-y-2">
            {sortedEvents.map((event, index) => (
              <Box
                key={event.id}
                className={`p-2 rounded border ${
                  index === currentEventIndex ? 'bg-blue-50 border-blue-300' : 'border-gray-200'
                } cursor-pointer hover:bg-gray-50`}
                onClick={() => {
                  handleEventSeek(event.timestamp);
                  onEventClick?.(event);
                }}
              >
                <Box className="flex items-center">
                  {getEventIcon(event.type, event.severity)}
                  <Typography variant="body2" className="font-medium ml-2">
                    {event.title}
                  </Typography>
                  <Typography variant="caption" color="textSecondary" className="ml-auto">
                    {formatTime(event.timestamp)}
                  </Typography>
                </Box>
                {event.description && (
                  <Typography variant="caption" className="block mt-1 ml-6">
                    {event.description}
                  </Typography>
                )}
              </Box>
            ))}
          </Box>
        )}
      </Box>
    </Paper>
  );
};

// components/debriefing/TelemetryDataViewer.tsx
import React, { useState } from 'react';
import {
  Box,
  Paper,
  Typography,
  Tabs,
  Tab,
  Grid,
  FormControlLabel,
  Checkbox,
  Tooltip,
  Card,
  CardContent,
} from '@mui/material';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  ResponsiveContainer,
  Legend,
  Tooltip as RechartsTooltip,
  ReferenceLine,
} from 'recharts';
import { Info, Warning } from '@mui/icons-material';

interface Parameter {
  id: string;
  name: string;
  unit: string;
  color: string;
  range?: [number, number]; // min, max values
  thresholds?: {
    min?: number;
    max?: number;
    target?: number;
  };
}

interface ParameterGroup {
  id: string;
  name: string;
  parameters: Parameter[];
}

interface TelemetryData {
  timestamp: number; // in seconds
  [key: string]: number;
}

interface TelemetryDataViewerProps {
  data: TelemetryData[];
  parameterGroups: ParameterGroup[];
  currentTime: number;
  onParameterClick?: (parameterId: string) => void;
}

export const TelemetryDataViewer: React.FC<TelemetryDataViewerProps> = ({
  data,
  parameterGroups,
  currentTime,
  onParameterClick,
}) => {
  const [activeTabIndex, setActiveTabIndex] = useState(0);
  const [selectedParameters, setSelectedParameters] = useState<Record<string, boolean>>(
    Object.fromEntries(
      parameterGroups.flatMap((group) => 
        group.parameters.map((param) => [param.id, param.id === parameterGroups[0].parameters[0].id])
      )
    )
  );
  const [timeWindow, setTimeWindow] = useState(60); // seconds of data to show

  const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {
    setActiveTabIndex(newValue);
  };

  const handleParameterToggle = (parameterId: string) => {
    setSelectedParameters({
      ...selectedParameters,
      [parameterId]: !selectedParameters[parameterId],
    });
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  // Filter data for the currently visible time window
  const visibleStartTime = Math.max(0, currentTime - timeWindow / 2);
  const visibleEndTime = currentTime + timeWindow / 2;
  const visibleData = data.filter(
    (point) => point.timestamp >= visibleStartTime && point.timestamp <= visibleEndTime
  );

  const activeGroup = parameterGroups[activeTabIndex];
  const activeParameters = activeGroup.parameters.filter(
    (param) => selectedParameters[param.id]
  );

  // Get min/max values for parameters to set chart domain
  const yDomains: Record<string, [number, number]> = {};
  activeParameters.forEach((param) => {
    if (param.range) {
      yDomains[param.id] = param.range;
    } else {
      const values = visibleData.map((d) => d[param.id]).filter((v) => v !== undefined);
      const min = Math.min(...values);
      const max = Math.max(...values);
      const padding = (max - min) * 0.1;
      yDomains[param.id] = [min - padding, max + padding];
    }
  });

  return (
    <Paper elevation={3} className="overflow-hidden">
      <Box className="p-3 bg-gray-50 border-b">
        <Typography variant="subtitle1">Telemetry Data</Typography>
      </Box>

      <Box className="p-3">
        <Tabs
          value={activeTabIndex}
          onChange={handleTabChange}
          variant="scrollable"
          scrollButtons="auto"
          className="mb-3"
        >
          {parameterGroups.map((group) => (
            <Tab key={group.id} label={group.name} />
          ))}
        </Tabs>

        <Grid container spacing={3}>
          <Grid item xs={12} md={9}>
            <Paper variant="outlined" className="p-3">
              <Box className="mb-2 flex justify-between items-center">
                <Typography variant="subtitle2">
                  {activeGroup.name} Parameters
                </Typography>
                <Typography variant="caption" color="textSecondary">
                  Time Window: {timeWindow}s
                </Typography>
              </Box>

              {activeParameters.length === 0 ? (
                <Box className="flex justify-center items-center h-64 bg-gray-50">
                  <Typography color="textSecondary">
                    Select parameters to display
                  </Typography>
                </Box>
              ) : (
                <ResponsiveContainer width="100%" height={350}>
                  <LineChart
                    data={visibleData}
                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                  >
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis
                      dataKey="timestamp"
                      type="number"
                      domain={[visibleStartTime, visibleEndTime]}
                      tickFormatter={formatTime}
                    />
                    <RechartsTooltip
                      formatter={(value: number, name: string) => {
                        const param = activeGroup.parameters.find((p) => p.id === name);
                        return [`${value} ${param?.unit || ''}`, param?.name || name];
                      }}
                      labelFormatter={(label: number) => `Time: ${formatTime(label)}`}
                    />
                    <Legend />

                    {/* Current time reference line */}
                    <ReferenceLine
                      x={currentTime}
                      stroke="#666"
                      strokeDasharray="3 3"
                      label={{ value: 'Current', position: 'insideTopRight' }}
                    />

                    {activeParameters.map((param) => (
                      <React.Fragment key={param.id}>
                        <YAxis
                          yAxisId={param.id}
                          orientation={
                            activeParameters.indexOf(param) % 2 === 0
                              ? 'left'
                              : 'right'
                          }
                          domain={yDomains[param.id]}
                          tickFormatter={(value) => `${value} ${param.unit}`}
                          hide={activeParameters.length > 2}
                        />
                        <Line
                          type="monotone"
                          dataKey={param.id}
                          name={param.name}
                          stroke={param.color}
                          yAxisId={param.id}
                          dot={false}
                          activeDot={{ r: 8 }}
                        />

                        {/* Thresholds */}
                        {param.thresholds?.min !== undefined && (
                          <ReferenceLine
                            y={param.thresholds.min}
                            yAxisId={param.id}
                            stroke={param.color}
                            strokeDasharray="3 3"
                            opacity={0.5}
                          />
                        )}
                        {param.thresholds?.max !== undefined && (
                          <ReferenceLine
                            y={param.thresholds.max}
                            yAxisId={param.id}
                            stroke={param.color}
                            strokeDasharray="3 3"
                            opacity={0.5}
                          />
                        )}
                        {param.thresholds?.target !== undefined && (
                          <ReferenceLine
                            y={param.thresholds.target}
                            yAxisId={param.id}
                            stroke={param.color}
                            strokeDasharray="5 5"
                            opacity={0.7}
                          />
                        )}
                      </React.Fragment>
                    ))}
                  </LineChart>
                </ResponsiveContainer>
              )}
            </Paper>
          </Grid>

          <Grid item xs={12} md={3}>
            <Paper variant="outlined" className="p-3">
              <Typography variant="subtitle2" className="mb-2">
                Parameters
              </Typography>

              <Box className="space-y-1 max-h-80 overflow-y-auto">
                {activeGroup.parameters.map((param) => (
                  <Box
                    key={param.id}
                    className={`
                      p-2 rounded border cursor-pointer
                      ${
                        selectedParameters[param.id]
                          ? 'bg-blue-50 border-blue-300'
                          : 'bg-white border-gray-200 hover:bg-gray-50'
                      }
                    `}
                    onClick={() => handleParameterToggle(param.id)}
                  >
                    <Box className="flex items-center">
                      <Box
                        className="w-3 h-3 rounded-full mr-2"
                        style={{ backgroundColor: param.color }}
                      />
                      <Typography variant="body2">{param.name}</Typography>
                    </Box>
                    {selectedParameters[param.id] && (
                      <Box className="mt-1 pl-5">
                        <Typography variant="caption" color="textSecondary">
                          Current: {data[data.length - 1]?.[param.id] || 'N/A'} {param.unit}
                        </Typography>
                      </Box>
                    )}
                  </Box>
                ))}
              </Box>
            </Paper>

            <Box className="mt-3">
              <Card variant="outlined">
                <CardContent>
                  <Typography variant="subtitle2" gutterBottom>
                    Current Values
                  </Typography>
                  {activeParameters.length === 0 ? (
                    <Typography variant="body2" color="textSecondary">
                      No parameters selected
                    </Typography>
                  ) : (
                    <Box className="space-y-2">
                      {activeParameters.map((param) => {
                        const currentValue = data.find(
                          (d) => Math.abs(d.timestamp - currentTime) < 0.1
                        )?.[param.id];

                        let status = 'normal';
                        if (currentValue !== undefined && param.thresholds) {
                          if (
                            (param.thresholds.min !== undefined &&
                              currentValue < param.thresholds.min) ||
                            (param.thresholds.max !== undefined &&
                              currentValue > param.thresholds.max)
                          ) {
                            status = 'warning';
                          }
                        }

                        return (
                          <Box
                            key={param.id}
                            className={`p-2 rounded ${
                              status === 'warning'
                                ? 'bg-amber-50 border border-amber-200'
                                : 'bg-gray-50'
                            }`}
                          >
                            <Typography variant="body2" className="flex items-center">
                              {status === 'warning' && (
                                <Warning
                                  className="text-amber-500 mr-1"
                                  fontSize="small"
                                />
                              )}
                              {param.name}
                            </Typography>
                            <Typography
                              variant="h6"
                              className="font-medium"
                              style={{ color: param.color }}
                            >
                              {currentValue !== undefined
                                ? `${currentValue} ${param.unit}`
                                : 'N/A'}
                            </Typography>
                          </Box>
                        );
                      })}
                    </Box>
                  )}
                </CardContent>
              </Card>
            </Box>
          </Grid>
        </Grid>
      </Box>
    </Paper>
  );
};

// components/debriefing/PerformanceAssessmentGrid.tsx
import React, { useState } from 'react';
import {
  Box,
  Paper,
  Typography,
  Grid,
  Rating,
  TextField,
  Button,
  Chip,
  Divider,
  IconButton,
  Collapse,
  Tooltip,
} from '@mui/material';
import {
  ExpandMore,
  ExpandLess,
  Add,
  Save,
  WarningAmber,
  CheckCircle,
  Info,
} from '@mui/icons-material';

interface CompetencyArea {
  id: string;
  name: string;
  description: string;
  elements: CompetencyElement[];
}

interface CompetencyElement {
  id: string;
  name: string;
  description: string;
  required: boolean;
  regulatoryReference?: string;
  grading?: {
    score: number;
    notes: string;
    instructor: string;
    timestamp: string;
  };
  aiSuggestion?: {
    score: number;
    reasoning: string;
  };
}

interface PerformanceAssessmentGridProps {
  competencyAreas: CompetencyArea[];
  onSaveGrading: (elementId: string, score: number, notes: string) => void;
  onFinalize?: () => void;
}

export const PerformanceAssessmentGrid: React.FC<PerformanceAssessmentGridProps> = ({
  competencyAreas,
  onSaveGrading,
  onFinalize,
}) => {
  const [expandedAreas, setExpandedAreas] = useState<Record<string, boolean>>(
    Object.fromEntries(competencyAreas.map((area) => [area.id, true]))
  );
  const [notes, setNotes] = useState<Record<string, string>>({});
  const [ratings, setRatings] = useState<Record<string, number>>({});

  const toggleArea = (areaId: string) => {
    setExpandedAreas({
      ...expandedAreas,
      [areaId]: !expandedAreas[areaId],
    });
  };

  const handleRatingChange = (elementId: string, newValue: number | null) => {
    if (newValue === null) return;
    setRatings({
      ...ratings,
      [elementId]: newValue,
    });
  };

  const handleNotesChange = (elementId: string, value: string) => {
    setNotes({
      ...notes,
      [elementId]: value,
    });
  };

  const handleSaveGrading = (elementId: string) => {
    const score = ratings[elementId] || 0;
    const noteText = notes[elementId] || '';
    onSaveGrading(elementId, score, noteText);
  };

  // Calculate completion percentage
  const totalElements = competencyAreas.reduce(
    (sum, area) => sum + area.elements.length,
    0
  );
  const gradedElements = competencyAreas.reduce(
    (sum, area) =>
      sum +
      area.elements.filter(
        (element) => element.grading?.score || ratings[element.id]
      ).length,
    0
  );
  const completionPercentage = Math.round((gradedElements / totalElements) * 100);

  return (
    <Paper elevation={3} className="overflow-hidden">
      <Box className="p-4 bg-gray-50 border-b">
        <Box className="flex justify-between items-center">
          <Typography variant="h6">Performance Assessment</Typography>
          <Box className="text-right">
            <Typography variant="body2">
              Completion: {completionPercentage}%
            </Typography>
            <Box className="w-40 h-2 bg-gray-200 rounded-full mt-1">
              <Box
                className="h-2 bg-blue-500 rounded-full"
                style={{ width: `${completionPercentage}%` }}
              />
            </Box>
          </Box>
        </Box>
      </Box>

      <Box className="p-4">
        <Box className="mb-4">
          <Grid container spacing={2} alignItems="center">
            <Grid item>
              <Typography variant="subtitle1">Grading Scale:</Typography>
            </Grid>
            <Grid item>
              <Chip label="1 - Unsatisfactory" color="error" />
            </Grid>
            <Grid item>
              <Chip label="2 - Below Standard" color="warning" />
            </Grid>
            <Grid item>
              <Chip label="3 - Satisfactory" color="success" />
            </Grid>
            <Grid item>
              <Chip label="4 - Excellent" color="primary" />
            </Grid>
          </Grid>
        </Box>

        <Box className="space-y-4">
          {competencyAreas.map((area) => (
            <Paper key={area.id} variant="outlined" className="overflow-hidden">
              <Box
                className="p-3 bg-gray-50 flex items-center justify-between cursor-pointer"
                onClick={() => toggleArea(area.id)}
              >
                <Typography variant="subtitle1" className="font-medium">
                  {area.name}
                </Typography>
                {expandedAreas[area.id] ? <ExpandLess /> : <ExpandMore />}
              </Box>

              <Collapse in={expandedAreas[area.id]}>
                <Box className="p-3">
                  <Typography variant="body2" color="textSecondary" className="mb-3">
                    {area.description}
                  </Typography>

                  <Box className="space-y-4">
                    {area.elements.map((element) => {
                      const grading = element.grading;
                      const currentRating = ratings[element.id] ?? grading?.score ?? 0;
                      const currentNotes = notes[element.id] ?? grading?.notes ?? '';
                      const hasAiSuggestion = !!element.aiSuggestion;
                      const aiDifference =
                        hasAiSuggestion &&
                        currentRating > 0 &&
                        Math.abs(currentRating - element.aiSuggestion!.score) >= 2;

                      return (
                        <Box key={element.id} className="border rounded p-3">
                          <Box className="flex justify-between items-start">
                            <Box>
                              <Box className="flex items-center">
                                <Typography variant="subtitle2">
                                  {element.name}
                                </Typography>
                                {element.required && (
                                  <Chip
                                    label="Required"
                                    size="small"
                                    color="primary"
                                    className="ml-2"
                                  />
                                )}
                                {element.regulatoryReference && (
                                  <Tooltip title={`Regulatory Reference: ${element.regulatoryReference}`}>
                                    <Info
                                      fontSize="small"
                                      className="ml-2 text-gray-500"
                                    />
                                  </Tooltip>
                                )}
                              </Box>
                              <Typography
                                variant="body2"
                                color="textSecondary"
                                className="mt-1"
                              >
                                {element.description}
                              </Typography>
                            </Box>

                            {hasAiSuggestion && (
                              <Tooltip
                                title={
                                  <Box>
                                    <Typography variant="subtitle2">
                                      AI Suggested Score: {element.aiSuggestion!.score}
                                    </Typography>
                                    <Typography variant="body2">
                                      {element.aiSuggestion!.reasoning}
                                    </Typography>
                                  </Box>
                                }
                              >
                                <Chip
                                  icon={<Info />}
                                  label="AI Suggestion"
                                  variant="outlined"
                                  size="small"
                                  color={aiDifference ? 'warning' : 'default'}
                                />
                              </Tooltip>
                            )}
                          </Box>

                          <Box className="mt-3">
                            <Grid container spacing={3}>
                              <Grid item xs={12} md={6}>
                                <Box className="flex items-center">
                                  <Typography
                                    component="span"
                                    variant="body2"
                                    className="mr-2"
                                  >
                                    Rating:
                                  </Typography>
                                  <Rating
                                    value={currentRating}
                                    onChange={(_, newValue) =>
                                      handleRatingChange(element.id, newValue)
                                    }
                                    max={4}
                                  />
                                  <Typography
                                    component="span"
                                    variant="body2"
                                    className="ml-2"
                                  >
                                    {currentRating > 0
                                      ? currentRating === 1
                                        ? 'Unsatisfactory'
                                        : currentRating === 2
                                        ? 'Below Standard'
                                        : currentRating === 3
                                        ? 'Satisfactory'
                                        : 'Excellent'
                                      : 'Not Rated'}
                                  </Typography>
                                </Box>

                                {grading && (
                                  <Box className="mt-1">
                                    <Typography
                                      variant="caption"
                                      color="textSecondary"
                                    >
                                      Graded by {grading.instructor} on{' '}
                                      {new Date(
                                        grading.timestamp
                                      ).toLocaleDateString()}
                                    </Typography>
                                  </Box>
                                )}
                              </Grid>

                              <Grid item xs={12} md={6}>
                                <TextField
                                  label="Notes"
                                  variant="outlined"
                                  fullWidth
                                  multiline
                                  rows={2}
                                  size="small"
                                  value={currentNotes}
                                  onChange={(e) =>
                                    handleNotesChange(element.id, e.target.value)
                                  }
                                />
                              </Grid>
                            </Grid>

                            <Box className="mt-2 flex justify-end">
                              <Button
                                variant="outlined"
                                size="small"
                                startIcon={<Save />}
                                onClick={() => handleSaveGrading(element.id)}
                                disabled={
                                  !ratings[element.id] &&
                                  !notes[element.id] &&
                                  !!grading
                                }
                              >
                                Save
                              </Button>
                            </Box>
                          </Box>
                        </Box>
                      );
                    })}
                  </Box>
                </Box>
              </Collapse>
            </Paper>
          ))}
        </Box>

        <Box className="mt-6 flex justify-end">
          <Button
            variant="contained"
            color="primary"
            onClick={onFinalize}
            disabled={completionPercentage < 100}
            startIcon={<CheckCircle />}
          >
            Finalize Assessment
          </Button>
        </Box>
      </Box>
    </Paper>
  );
};

// components/debriefing/AnnotationTool.tsx
import React, { useState } from 'react';
import {
  Box,
  Paper,
  Typography,
  TextField,
  Button,
  IconButton,
  Menu,
  MenuItem,
  ListItemIcon,
  ListItemText,
  Tooltip,
  Chip,
  Divider,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
} from '@mui/material';
import {
  Flag,
  Bookmark,
  Add,
  Delete,
  Edit,
  Share,
  MoreVert,
  Comment,
  Warning,
  Info,
  Error as ErrorIcon,
} from '@mui/icons-material';

interface Annotation {
  id: string;
  type: 'flag' | 'bookmark' | 'comment';
  timestamp: number;
  title: string;
  description: string;
  severity?: 'info' | 'warning' | 'critical';
  author: string;
  createdAt: string;
}

interface AnnotationToolProps {
  annotations: Annotation[];
  currentTime: number;
  onAddAnnotation: (annotation: Omit<Annotation, 'id' | 'author' | 'createdAt'>) => void;
  onEditAnnotation: (id: string, updates: Partial<Annotation>) => void;
  onDeleteAnnotation: (id: string) => void;
  onJumpToAnnotation: (timestamp: number) => void;
}

export const AnnotationTool: React.FC<AnnotationToolProps> = ({
  annotations,
  currentTime,
  onAddAnnotation,
  onEditAnnotation,
  onDeleteAnnotation,
  onJumpToAnnotation,
}) => {
  const [newAnnotationType, setNewAnnotationType] = useState<'flag' | 'bookmark' | 'comment'>('comment');
  const [newAnnotationTitle, setNewAnnotationTitle] = useState('');
  const [newAnnotationDescription, setNewAnnotationDescription] = useState('');
  const [newAnnotationSeverity, setNewAnnotationSeverity] = useState<'info' | 'warning' | 'critical'>('info');
  
  const [editingAnnotation, setEditingAnnotation] = useState<Annotation | null>(null);
  const [editDialogOpen, setEditDialogOpen] = useState(false);
  
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
  const [selectedAnnotation, setSelectedAnnotation] = useState<Annotation | null>(null);
  
  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };
  
  const handleActionMenuOpen = (event: React.MouseEvent<HTMLElement>, annotation: Annotation) => {
    setAnchorEl(event.currentTarget);
    setSelectedAnnotation(annotation);
  };
  
  const handleActionMenuClose = () => {
    setAnchorEl(null);
    setSelectedAnnotation(null);
  };
  
  const handleEdit = () => {
    setEditingAnnotation(selectedAnnotation);
    setEditDialogOpen(true);
    handleActionMenuClose();
  };
  
  const handleDelete = () => {
    if (selectedAnnotation) {
      onDeleteAnnotation(selectedAnnotation.id);
    }
    handleActionMenuClose();
  };
  
  const handleJumpTo = () => {
    if (selectedAnnotation) {
      onJumpToAnnotation(selectedAnnotation.timestamp);
    }
    handleActionMenuClose();
  };
  
  const handleAddAnnotation = () => {
    onAddAnnotation({
      type: newAnnotationType,
      timestamp: currentTime,
      title: newAnnotationTitle,
      description: newAnnotationDescription,
      severity: newAnnotationType === 'flag' ? newAnnotationSeverity : undefined,
    });
    
    // Reset form
    setNewAnnotationTitle('');
    setNewAnnotationDescription('');
  };
  
  const handleEditDialogSave = () => {
    if (editingAnnotation) {
      onEditAnnotation(editingAnnotation.id, {
        title: editingAnnotation.title,
        description: editingAnnotation.description,
        severity: editingAnnotation.severity,
      });
    }
    setEditDialogOpen(false);
    setEditingAnnotation(null);
  };
  
  const handleEditDialogCancel = () => {
    setEditDialogOpen(false);
    setEditingAnnotation(null);
  };
  
  const getTypeIcon = (type: string, severity?: string) => {
    if (type === 'flag') {
      return severity === 'critical' ? (
        <Flag className="text-red-500" />
      ) : severity === 'warning' ? (
        <Flag className="text-amber-500" />
      ) : (
        <Flag className="text-blue-500" />
      );
    }
    if (type === 'bookmark') return <Bookmark className="text-purple-500" />;
    return <Comment className="text-green-500" />;
  };
  
  const getSeverityChip = (severity?: string) => {
    if (!severity || severity === 'info') {
      return <Chip size="small" icon={<Info />} label="Info" color="info" />;
    }
    if (severity === 'warning') {
      return <Chip size="small" icon={<Warning />} label="Warning" color="warning" />;
    }
    return <Chip size="small" icon={<ErrorIcon />} label="Critical" color="error" />;
  };
  
  // Sort annotations by timestamp
  const sortedAnnotations = [...annotations].sort((a, b) => a.timestamp - b.timestamp);
  
  return (
    <Paper elevation={3} className="overflow-hidden">
      <Box className="p-4 bg-gray-50 border-b">
        <Typography variant="h6">Annotations & Comments</Typography>
      </Box>
      
      <Box className="p-4">
        <Paper variant="outlined" className="p-3 mb-4">
          <Typography variant="subtitle2" className="mb-2">
            Add Annotation at {formatTime(currentTime)}
          </Typography>
          
          <Box className="mb-3 flex flex-wrap gap-2">
            <Button
              variant={newAnnotationType === 'comment' ? 'contained' : 'outlined'}
              size="small"
              startIcon={<Comment />}
              onClick={() => setNewAnnotationType('comment')}
            >
              Comment
            </Button>
            <Button
              variant={newAnnotationType === 'flag' ? 'contained' : 'outlined'}
              size="small"
              startIcon={<Flag />}
              onClick={() => setNewAnnotationType('flag')}
            >
              Flag
            </Button>
            <Button
              variant={newAnnotationType === 'bookmark' ? 'contained' : 'outlined'}
              size="small"
              startIcon={<Bookmark />}
              onClick={() => setNewAnnotationType('bookmark')}
            >
              Bookmark
            </Button>
          </Box>
          
          {newAnnotationType === 'flag' && (
            <Box className="mb-3 flex flex-wrap gap-2">
              <Button
                variant={newAnnotationSeverity === 'info' ? 'contained' : 'outlined'}
                size="small"
                color="info"
                onClick={() => setNewAnnotationSeverity('info')}
              >
                Info
              </Button>
              <Button
                variant={newAnnotationSeverity === 'warning' ? 'contained' : 'outlined'}
                size="small"
                color="warning"
                onClick={() => setNewAnnotationSeverity('warning')}
              >
                Warning
              </Button>
              <Button
                variant={newAnnotationSeverity === 'critical' ? 'contained' : 'outlined'}
                size="small"
                color="error"
                onClick={() => setNewAnnotationSeverity('critical')}
              >
                Critical
              </Button>
            </Box>
          )}
          
          <TextField
            label="Title"
            variant="outlined"
            fullWidth
            size="small"
            value={newAnnotationTitle}
            onChange={(e) => setNewAnnotationTitle(e.target.value)}
            className="mb-3"
          />
          
          <TextField
            label="Description"
            variant="outlined"
            fullWidth
            multiline
            rows={2}
            value={newAnnotationDescription}
            onChange={(e) => setNewAnnotationDescription(e.target.value)}
            className="mb-3"
          />
          
          <Box className="flex justify-end">
            <Button
              variant="contained"
              color="primary"
              startIcon={<Add />}
              onClick={handleAddAnnotation}
              disabled={!newAnnotationTitle}
            >
              Add
            </Button>
          </Box>
        </Paper>
        
        <Typography variant="subtitle2" className="mb-2">
          All Annotations
        </Typography>
        
        {sortedAnnotations.length === 0 ? (
          <Typography variant="body2" color="textSecondary" className="text-center py-4">
            No annotations yet
          </Typography>
        ) : (
          <Box className="space-y-3 max-h-96 overflow-y-auto">
            {sortedAnnotations.map((annotation) => (
              <Paper
                key={annotation.id}
                variant="outlined"
                className="p-3 hover:bg-gray-50"
              >
                <Box className="flex justify-between items-start">
                  <Box className="flex items-start">
                    <Box className="mr-3 mt-1">
                      {getTypeIcon(annotation.type, annotation.severity)}
                    </Box>
                    
                    <Box>
                      <Box className="flex items-center">
                        <Typography variant="subtitle2" className="mr-2">
                          {annotation.title}
                        </Typography>
                        {annotation.type === 'flag' && getSeverityChip(annotation.severity)}
                      </Box>
                      
                      <Typography variant="body2" className="mt-1">
                        {annotation.description}
                      </Typography>
                      
                      <Box className="flex items-center mt-2">
                        <Typography variant="caption" color="textSecondary">
                          {annotation.author} • {new Date(annotation.createdAt).toLocaleString()}
                        </Typography>
                        <Tooltip title={`Jump to ${formatTime(annotation.timestamp)}`}>
                          <Button
                            size="small"
                            onClick={() => onJumpToAnnotation(annotation.timestamp)}
                            className="ml-2"
                          >
                            {formatTime(annotation.timestamp)}
                          </Button>
                        </Tooltip>
                      </Box>
                    </Box>
                  </Box>
                  
                  <IconButton
                    size="small"
                    onClick={(e) => handleActionMenuOpen(e, annotation)}
                  >
                    <MoreVert />
                  </IconButton>
                </Box>
              </Paper>
            ))}
          </Box>
        )}
      </Box>
      
      {/* Action Menu */}
      <Menu
        anchorEl={anchorEl}
        open={Boolean(anchorEl)}
        onClose={handleActionMenuClose}
      >
        <MenuItem onClick={handleJumpTo}>
          <ListItemIcon>
            <Bookmark fontSize="small" />
          </ListItemIcon>
          <ListItemText>Jump to</ListItemText>
        </MenuItem>
        <MenuItem onClick={handleEdit}>
          <ListItemIcon>
            <Edit fontSize="small" />
          </ListItemIcon>
          <ListItemText>Edit</ListItemText>
        </MenuItem>
        <MenuItem onClick={handleActionMenuClose}>
          <ListItemIcon>
            <Share fontSize="small" />
          </ListItemIcon>
          <ListItemText>Share</ListItemText>
        </MenuItem>
        <Divider />
        <MenuItem onClick={handleDelete} className="text-red-600">
          <ListItemIcon>
            <Delete fontSize="small" className="text-red-600" />
          </ListItemIcon>
          <ListItemText>Delete</ListItemText>
        </MenuItem>
      </Menu>
      
      {/* Edit Dialog */}
      <Dialog open={editDialogOpen} onClose={handleEditDialogCancel} maxWidth="sm" fullWidth>
        <DialogTitle>Edit Annotation</DialogTitle>
        <DialogContent>
          <Box className="pt-2">
            {editingAnnotation?.type === 'flag' && (
              <Box className="mb-3 flex flex-wrap gap-2">
                <Button
                  variant={editingAnnotation.severity === 'info' ? 'contained' : 'outlined'}
                  size="small"
                  color="info"
                  onClick={() => setEditingAnnotation({...editingAnnotation, severity: 'info'})}
                >
                  Info
                </Button>
                <Button
                  variant={editingAnnotation.severity === 'warning' ? 'contained' : 'outlined'}
                  size="small"
                  color="warning"
                  onClick={() => setEditingAnnotation({...editingAnnotation, severity: 'warning'})}
                >
                  Warning
                </Button>
                <Button
                  variant={editingAnnotation.severity === 'critical' ? 'contained' : 'outlined'}
                  size="small"
                  color="error"
                  onClick={() => setEditingAnnotation({...editingAnnotation, severity: 'critical'})}
                >
                  Critical
                </Button>
              </Box>
            )}
            
            <TextField
              label="Title"
              variant="outlined"
              fullWidth
              value={editingAnnotation?.title || ''}
              onChange={(e) => editingAnnotation && setEditingAnnotation({...editingAnnotation, title: e.target.value})}
              className="mb-3"
            />
            
            <TextField
              label="Description"
              variant="outlined"
              fullWidth
              multiline
              rows={3}
              value={editingAnnotation?.description || ''}
              onChange={(e) => editingAnnotation && setEditingAnnotation({...editingAnnotation, description: e.target.value})}
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleEditDialogCancel}>Cancel</Button>
          <Button onClick={handleEditDialogSave} variant="contained" color="primary">
            Save
          </Button>
        </DialogActions>
      </Dialog>
    </Paper>
  );
};

// app/debriefing/[sessionId]/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import {
  Box,
  Container,
  Typography,
  Paper,
  Grid,
  Button,
  Tabs,
  Tab,
  Divider,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  CircularProgress,
} from '@mui/material';
import {
  Download,
  Print,
  Share,
  FileDownload,
  Close,
  CloudDownload,
  Assessment,
  Save,
} from '@mui/icons-material';
import { SessionReplayPlayer } from '@/components/debriefing/SessionReplayPlayer';
import { TelemetryDataViewer } from '@/components/debriefing/TelemetryDataViewer';
import { PerformanceAssessmentGrid } from '@/components/debriefing/PerformanceAssessmentGrid';
import { AnnotationTool } from '@/components/debriefing/AnnotationTool';
import { debriefingApi } from '@/lib/api/apiClient';

// Mock session data
const mockSessionData = {
  id: 'session-123',
  title: 'B737-800 Type Rating - Session 5',
  date: '2023-08-15T14:30:00Z',
  trainee: {
    id: 'trainee-456',
    name: 'John Smith',
    position: 'First Officer',
  },
  instructor: {
    id: 'instructor-789',
    name: 'Captain Sarah Johnson',
  },
  scenario: {
    id: 'scenario-101',
    title: 'Engine Failure After Takeoff',
    description: 'Practice handling of engine failure shortly after takeoff from KJFK',
  },
  duration: 3600, // in seconds
  status: 'completed',
  videoUrl: 'https://example.com/mock-video.mp4', // This would be a real URL in production
};

// Mock timeline events
const mockTimelineEvents = [
  {
    id: 'event-1',
    timestamp: 120, // in seconds
    type: 'system',
    title: 'Takeoff',
    description: 'Aircraft rotated at V2+10',
    severity: 'info',
  },
  {
    id: 'event-2',
    timestamp: 180,
    type: 'system',
    title: 'Engine 1 Failure',
    description: 'Simulated engine failure was triggered',
    severity: 'critical',
  },
  {
    id: 'event-3',
    timestamp: 195,
    type: 'flag',
    title: 'Delayed Response',
    description: 'Trainee took 15 seconds to identify engine failure',
    severity: 'warning',
  },
  {
    id: 'event-4',
    timestamp: 240,
    type: 'system',
    title: 'Engine Secured',
    description: 'Engine shutdown procedure completed',
    severity: 'info',
  },
  {
    id: 'event-5',
    timestamp: 300,
    type: 'bookmark',
    title: 'Good CRM Example',
    description: 'Clear communication and task delegation',
  },
  {
    id: 'event-6',
    timestamp: 420,
    type: 'annotation',
    title: 'ATC Communication',
    description: 'Proper emergency declaration with all required elements',
  },
];

// Mock telemetry data
const generateTelemetryData = () => {
  const data = [];
  for (let i = 0; i < 3600; i += 5) {
    // Generate a data point every 5 seconds
    const point: Record<string, number> = {
      timestamp: i,
      altitude: 5000 + Math.sin(i / 100) * 1000 + (i < 200 ? i * 25 : 0),
      speed: 250 + Math.sin(i / 120) * 20,
      heading: 270 + Math.sin(i / 150) * 10,
      pitch: Math.sin(i / 50) * 5,
      roll: Math.sin(i / 40) * 8,
      n1_engine1: i < 180 ? 90 + Math.sin(i / 30) * 2 : 0,
      n1_engine2: 90 + Math.sin(i / 30) * 2,
      flaps: i < 300 ? 15 - Math.min(15, Math.floor(i / 60) * 5) : 0,
      gear: i < 150 ? 1 : 0,
    };
    data.push(point);
  }
  return data;
};

const mockTelemetryData = generateTelemetryData();

// Mock parameter groups
const mockParameterGroups = [
  {
    id: 'aircraft',
    name: 'Aircraft Parameters',
    parameters: [
      {
        id: 'altitude',
        name: 'Altitude',
        unit: 'ft',
        color: '#3b82f6',
      },
      {
        id: 'speed',
        name: 'Indicated Airspeed',
        unit: 'kts',
        color: '#f59e0b',
        thresholds: {
          min: 180,
          max: 320,
        },
      },
      {
        id: 'heading',
        name: 'Heading',
        unit: '°',
        color: '#10b981',
      },
    ],
  },
  {
    id: 'attitude',
    name: 'Attitude',
    parameters: [
      {
        id: 'pitch',
        name: 'Pitch',
        unit: '°',
        color: '#8b5cf6',
        thresholds: {
          min: -10,
          max: 15,
        },
      },
      {
        id: 'roll',
        name: 'Roll',
        unit: '°',
        color: '#ec4899',
        thresholds: {
          min: -30,
          max: 30,
        },
      },
    ],
  },
  {
    id: 'engines',
    name: 'Engines',
    parameters: [
      {
        id: 'n1_engine1',
        name: 'N1 Engine 1',
        unit: '%',
        color: '#ef4444',
      },
      {
        id: 'n1_engine2',
        name: 'N1 Engine 2',
        unit: '%',
        color: '#84cc16',
      },
    ],
  },
  {
    id: 'configuration',
    name: 'Configuration',
    parameters: [
      {
        id: 'flaps',
        name: 'Flaps Position',
        unit: '°',
        color: '#6366f1',
      },
      {
        id: 'gear',
        name: 'Landing Gear',
        unit: '',
        color: '#f43f5e',
      },
    ],
  },
];

// Mock annotations
const mockAnnotations = [
  {
    id: 'annotation-1',
    type: 'flag',
    timestamp: 195,
    title: 'Delayed Response',
    description: 'Trainee took 15 seconds to identify engine failure',
    severity: 'warning',
    author: 'Capt. Johnson',
    createdAt: '2023-08-15T14:35:00Z',
  },
  {
    id: 'annotation-2',
    type: 'bookmark',
    timestamp: 300,
    title: 'Good CRM Example',
    description: 'Clear communication and task delegation',
    author: 'Capt. Johnson',
    createdAt: '2023-08-15T14:40:00Z',
  },
  {
    id: 'annotation-3',
    type: 'comment',
    timestamp: 420,
    title: 'ATC Communication',
    description: 'Proper emergency declaration with all required elements',
    author: 'Capt. Johnson',
    createdAt: '2023-08-15T14:45:00Z',
  },
];

// Mock competency areas
const mockCompetencyAreas = [
  {
    id: 'area-1',
    name: 'Technical',
    description: 'Technical operation of the aircraft systems, instruments and controls',
    elements: [
      {
        id: 'element-1-1',
        name: 'Aircraft Systems Knowledge',
        description: 'Demonstrates knowledge of aircraft systems and limitations',
        required: true,
        regulatoryReference: 'EASA FCL.725.A(b)(1)',
        grading: {
          score: 3,
          notes: 'Good overall systems knowledge, but hesitated on electrical bus isolation procedure',
          instructor: 'Capt. Johnson',
          timestamp: '2023-08-15T16:30:00Z',
        },
      },
      {
        id: 'element-1-2',
        name: 'Normal Procedures',
        description: 'Properly executes normal checklists and procedures',
        required: true,
        grading: {
          score: 4,
          notes: 'Excellent execution of all normal procedures with proper flow and timing',
          instructor: 'Capt. Johnson',
          timestamp: '2023-08-15T16:31:00Z',
        },
      },
      {
        id: 'element-1-3',
        name: 'Abnormal/Emergency Procedures',
        description: 'Correctly identifies, assesses and manages abnormal situations',
        required: true,
        regulatoryReference: 'EASA FCL.725.A(b)(3)',
        aiSuggestion: {
          score: 2,
          reasoning: 'Detected 15-second delay in engine failure recognition and non-standard memory items execution',
        },
      },
    ],
  },
  {
    id: 'area-2',
    name: 'Non-Technical',
    description: 'Crew Resource Management, decision making, leadership and teamwork',
    elements: [
      {
        id: 'element-2-1',
        name: 'Communication',
        description: 'Communicates clearly with ATC, cabin crew and other flight crew',
        required: true,
        grading: {
          score: 3,
          notes: 'Generally clear communication but missed readback of runway assignment',
          instructor: 'Capt. Johnson',
          timestamp: '2023-08-15T16:33:00Z',
        },
      },
      {
        id: 'element-2-2',
        name: 'Decision Making',
        description: 'Makes appropriate decisions based on all available information',
        required: true,
        aiSuggestion: {
          score: 4,
          reasoning: 'Consistently made appropriate decisions throughout the emergency scenario',
        },
      },
      {
        id: 'element-2-3',
        name: 'Workload Management',
        description: 'Prioritizes tasks effectively and manages workload',
        required: false,
      },
    ],
  },
];

export default function DebriefingSessionPage({ params }: { params: { sessionId: string } }) {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [sessionData, setSessionData] = useState(mockSessionData);
  const [timelineEvents, setTimelineEvents] = useState(mockTimelineEvents);
  const [telemetryData, setTelemetryData] = useState(mockTelemetryData);
  const [parameterGroups, setParameterGroups] = useState(mockParameterGroups);
  const [annotations, setAnnotations] = useState(mockAnnotations);
  const [competencyAreas, setCompetencyAreas] = useState(mockCompetencyAreas);
  
  const [currentTime, setCurrentTime] = useState(0);
  const [activeTab, setActiveTab] = useState(0);
  const [reportDialogOpen, setReportDialogOpen] = useState(false);
  const [reportGenerating, setReportGenerating] = useState(false);
  const [reportOptions, setReportOptions] = useState({
    includeAnnotations: true,
    includeAssessment: true,
    includeCharts: true,
    additionalComments: '',
  });
  
  useEffect(() => {
    // Fetch session data
    const fetchSessionData = async () => {
      setLoading(true);
      try {
        // In a real app, you would fetch real data here
        // const data = await debriefingApi.getSessionDetails(params.sessionId);
        // setSessionData(data.sessionData);
        // setTimelineEvents(data.timelineEvents);
        // setTelemetryData(data.telemetryData);
        // setParameterGroups(data.parameterGroups);
        // setAnnotations(data.annotations);
        // setCompetencyAreas(data.competencyAreas);
        
        // Simulate API call
        await new Promise(resolve => setTimeout(resolve, 1500));
        
        // Using mock data for this example
        setLoading(false);
      } catch (err: any) {
        setError(err.message || 'Failed to load session data');
        setLoading(false);
      }
    };
    
    fetchSessionData();
  }, [params.sessionId]);
  
  const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue);
  };
  
  const handleAddAnnotation = (annotation: any) => {
    const newAnnotation = {
      ...annotation,
      id: `annotation-${Date.now()}`,
      author: 'Capt. Johnson', // Would come from current user in real app
      createdAt: new Date().toISOString(),
    };
    
    setAnnotations([...annotations, newAnnotation]);
    
    // Also add to timeline events for the player
    if (annotation.type !== 'comment') {
      const newEvent = {
        id: `event-${Date.now()}`,
        timestamp: annotation.timestamp,
        type: annotation.type,
        title: annotation.title,
        description: annotation.description,
        severity: annotation.severity,
      };
      
      setTimelineEvents([...timelineEvents, newEvent]);
    }
  };
  
  const handleEditAnnotation = (id: string, updates: any) => {
    const updatedAnnotations = annotations.map(anno => 
      anno.id === id ? { ...anno, ...updates } : anno
    );
    setAnnotations(updatedAnnotations);
    
    // Also update timeline events
    const annotation = annotations.find(a => a.id === id);
    if (annotation && annotation.type !== 'comment') {
      const eventId = timelineEvents.find(e => 
        e.type === annotation.type && 
        e.timestamp === annotation.timestamp && 
        e.title === annotation.title
      )?.id;
      
      if (eventId) {
        const updatedEvents = timelineEvents.map(event =>
          event.id === eventId ? { 
            ...event, 
            title: updates.title || event.title,
            description: updates.description || event.description,
            severity: updates.severity || event.severity
          } : event
        );
        setTimelineEvents(updatedEvents);
      }
    }
  };
  
  const handleDeleteAnnotation = (id: string) => {
    const annotation = annotations.find(a => a.id === id);
    setAnnotations(annotations.filter(a => a.id !== id));
    
    // Also remove from timeline events
    if (annotation && annotation.type !== 'comment') {
      const eventId = timelineEvents.find(e => 
        e.type === annotation.type && 
        e.timestamp === annotation.timestamp && 
        e.title === annotation.title
      )?.id;
      
      if (eventId) {
        setTimelineEvents(timelineEvents.filter(e => e.id !== eventId));
      }
    }
  };
  
  const handleJumpToTime = (timestamp: number) => {
    setCurrentTime(timestamp);
  };
  
  const handleSaveGrading = (elementId: string, score: number, notes: string) => {
    const updatedAreas = competencyAreas.map(area => ({
      ...area,
      elements: area.elements.map(element =>
        element.id === elementId
          ? {
              ...element,
              grading: {
                score,
                notes,
                instructor: 'Capt. Johnson', // Would come from current user
                timestamp: new Date().toISOString(),
              },
            }
          : element
      ),
    }));
    
    setCompetencyAreas(updatedAreas);
  };
  
  const handleAddEvent = (type: 'flag' | 'bookmark', timestamp: number) => {
    const newEvent = {
      id: `event-${Date.now()}`,
      timestamp,
      type,
      title: `New ${type === 'flag' ? 'Flag' : 'Bookmark'}`,
      description: '',
      severity: type === 'flag' ? 'info' : undefined,
    };
    
    setTimelineEvents([...timelineEvents, newEvent]);
  };
  
  const handleEventClick = (event: any) => {
    // Could be used to show more details or edit the event
    console.log('Event clicked:', event);
  };
  
  const handleGenerateReport = async () => {
    setReportGenerating(true);
    
    try {
      // In a real app, call the API to generate the report
      // const blob = await debriefingApi.generateReport(params.sessionId, {
      //   format: 'pdf',
      //   options: reportOptions
      // });
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Mock download a PDF
      const link = document.createElement('a');
      link.href = '#';
      link.download = `Debrief_${params.sessionId}.pdf`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      setReportDialogOpen(false);
    } catch (err: any) {
      console.error('Failed to generate report', err);
    } finally {
      setReportGenerating(false);
    }
  };
  
  const handleFinalizeAssessment = () => {
    // In a real app, would submit the assessment
    alert('Assessment finalized and submitted to training record');
  };
  
  if (loading) {
    return (
      <Container maxWidth="xl">
        <Box className="py-12 flex flex-col items-center">
          <CircularProgress size={60} className="mb-4" />
          <Typography variant="h6">Loading Session Data...</Typography>
        </Box>
      </Container>
    );
  }
  
  if (error) {
    return (
      <Container maxWidth="xl">
        <Box className="py-12 text-center">
          <Typography variant="h6" color="error" className="mb-4">
            {error}
          </Typography>
          <Button variant="contained" color="primary" onClick={() => window.location.reload()}>
            Retry
          </Button>
        </Box>
      </Container>
    );
  }
  
  return (
    <Container maxWidth="xl">
      <Box className="py-6">
        <Box className="flex justify-between items-start mb-6">
          <Box>
            <Typography variant="h4" className="mb-1">
              {sessionData.title}
            </Typography>
            <Typography variant="subtitle1" color="textSecondary">
              {new Date(sessionData.date).toLocaleString()} • {sessionData.scenario.title}
            </Typography>
          </Box>
          
          <Box className="flex space-x-2">
            <Button 
              variant="outlined" 
              startIcon={<Download />}
              onClick={() => setReportDialogOpen(true)}
            >
              Generate Report
            </Button>
            <Button variant="outlined" startIcon={<Print />}>
              Print
            </Button>
            <Button variant="outlined" startIcon={<Share />}>
              Share
            </Button>
          </Box>
        </Box>
        
        <Grid container spacing={4}>
          <Grid item xs={12} md={6}>
            <Paper className="p-4 mb-4">
              <Grid container spacing={3}>
                <Grid item xs={12} sm={6}>
                  <Typography variant="subtitle2" color="textSecondary">
                    Trainee
                  </Typography>
                  <Typography variant="body1">
                    {sessionData.trainee.name}
                  </Typography>
                  <Typography variant="body2" color="textSecondary">
                    {sessionData.trainee.position}
                  </Typography>
                </Grid>
                
                <Grid item xs={12} sm={6}>
                  <Typography variant="subtitle2" color="textSecondary">
                    Instructor
                  </Typography>
                  <Typography variant="body1">
                    {sessionData.instructor.name}
                  </Typography>
                </Grid>
                
                <Grid item xs={12}>
                  <Typography variant="subtitle2" color="textSecondary">
                    Scenario
                  </Typography>
                  <Typography variant="body1">
                    {sessionData.scenario.title}
                  </Typography>
                  <Typography variant="body2" color="textSecondary">
                    {sessionData.scenario.description}
                  </Typography>
                </Grid>
              </Grid>
            </Paper>
            
            <SessionReplayPlayer 
              videoUrl={sessionData.videoUrl}
              duration={sessionData.duration}
              events={timelineEvents}
              onAddEvent={handleAddEvent}
              onEventClick={handleEventClick}
            />
          </Grid>
          
          <Grid item xs={12} md={6}>
            <Paper elevation={1} className="mb-4">
              <Tabs
                value={activeTab}
                onChange={handleTabChange}
                variant="scrollable"
                scrollButtons="auto"
              >
                <Tab label="Telemetry" />
                <Tab label="Assessment" />
                <Tab label="Annotations" />
              </Tabs>
            </Paper>
            
            {activeTab === 0 && (
              <TelemetryDataViewer
                data={telemetryData}
                parameterGroups={parameterGroups}
                currentTime={currentTime}
              />
            )}
            
            {activeTab === 1 && (
              <PerformanceAssessmentGrid
                competencyAreas={competencyAreas}
                onSaveGrading={handleSaveGrading}
                onFinalize={handleFinalizeAssessment}
              />
            )}
            
            {activeTab === 2 && (
              <AnnotationTool
                annotations={annotations}
                currentTime={currentTime}
                onAddAnnotation={handleAddAnnotation}
                onEditAnnotation={handleEditAnnotation}
                onDeleteAnnotation={handleDeleteAnnotation}
                onJumpToAnnotation={handleJumpToTime}
              />
            )}
          </Grid>
        </Grid>
      </Box>
      
      {/* Generate Report Dialog */}
      <Dialog 
        open={reportDialogOpen} 
        onClose={() => setReportDialogOpen(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>
          Generate Debrief Report
          <IconButton
            onClick={() => setReportDialogOpen(false)}
            className="absolute right-2 top-2"
          >
            <Close />
          </IconButton>
        </DialogTitle>
        
        <DialogContent dividers>
          <Box className="space-y-4">
            <Typography variant="subtitle2">
              Report Options
            </Typography>
            
            <Box className="space-y-2">
              <label className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  checked={reportOptions.includeAnnotations}
                  onChange={(e) => setReportOptions({...reportOptions, includeAnnotations: e.target.checked})}
                  className="h-4 w-4"
                />
                <span>Include annotations and timeline events</span>
              </label>
              
              <label className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  checked={reportOptions.includeAssessment}
                  onChange={(e) => setReportOptions({...reportOptions, includeAssessment: e.target.checked})}
                  className="h-4 w-4"
                />
                <span>Include competency assessment</span>
              </label>
              
              <label className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  checked={reportOptions.includeCharts}
                  onChange={(e) => setReportOptions({...reportOptions, includeCharts: e.target.checked})}
                  className="h-4 w-4"
                />
                <span>Include telemetry charts</span>
              </label>
            </Box>
            
            <Divider />
            
            <Box>
              <Typography variant="subtitle2" className="mb-2">
                Additional Comments
              </Typography>
              <TextField
                fullWidth
                multiline
                rows={4}
                variant="outlined"
                placeholder="Add any additional comments for the report..."
                value={reportOptions.additionalComments}
                onChange={(e) => setReportOptions({...reportOptions, additionalComments: e.target.value})}
              />
            </Box>
          </Box>
        </DialogContent>
        
        <DialogActions>
          <Button onClick={() => setReportDialogOpen(false)}>Cancel</Button>
          <Button
            variant="contained"
            color="primary"
            startIcon={reportGenerating ? <CircularProgress size={20} /> : <Assessment />}
            onClick={handleGenerateReport}
            disabled={reportGenerating}
          >
            {reportGenerating ? 'Generating...' : 'Generate PDF'}
          </Button>
        </DialogActions>
      </Dialog>
    </Container>
  );
}

// components/document-intelligence/DocumentUploader.tsx
import React, { useState, useCallback } from 'react';
import { useDropzone } from 'react-dropzone';
import { 
  Box, 
  Typography, 
  Paper, 
  LinearProgress, 
  Chip, 
  Button, 
  Select, 
  MenuItem, 
  FormControl, 
  InputLabel, 
  TextField 
} from '@mui/material';
import { CloudUpload, CheckCircle, Error } from '@mui/icons-material';
import { documentApi } from '@/lib/api/apiClient';

type DocumentType = 'training' | 'regulatory' | 'manual' | 'syllabus' | 'other';

export interface DocumentUploaderProps {
  onUploadComplete: (documentId: string) => void;
  allowedTypes?: string[];
  maxFileSize?: number; // in bytes
}

export const DocumentUploader: React.FC<DocumentUploaderProps> = ({
  onUploadComplete,
  allowedTypes = ['.pdf', '.docx', '.xlsx', '.pptx', '.html'],
  maxFileSize = 20 * 1024 * 1024, // 20MB
}) => {
  const [file, setFile] = useState<File | null>(null);
  const [uploading, setUploading] = useState(false);
  const [progress, setProgress] = useState(0);
  const [error, setError] = useState<string | null>(null);
  const [documentType, setDocumentType] = useState<DocumentType>('training');
  const [description, setDescription] = useState('');

  const onDrop = useCallback((acceptedFiles: File[]) => {
    setError(null);
    
    if (acceptedFiles.length === 0) {
      return;
    }
    
    const selectedFile = acceptedFiles[0];
    
    // Check file size
    if (selectedFile.size > maxFileSize) {
      setError(`File size exceeds the maximum limit of ${maxFileSize / (1024 * 1024)}MB`);
      return;
    }
    
    setFile(selectedFile);
  }, [maxFileSize]);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({ 
    onDrop,
    accept: allowedTypes.reduce((acc, type) => {
      acc[type] = [];
      return acc;
    }, {} as Record<string, string[]>),
    maxFiles: 1,
  });

  const handleUpload = async () => {
    if (!file) return;
    
    setUploading(true);
    setProgress(0);
    
    try {
      // Simulate upload progress
      const progressInterval = setInterval(() => {
        setProgress(prev => {
          const newProgress = prev + Math.random() * 10;
          return newProgress >= 90 ? 90 : newProgress;
        });
      }, 500);
      
      const result = await documentApi.uploadDocument(file, {
        documentType,
        description: description || undefined,
      });
      
      clearInterval(progressInterval);
      setProgress(100);
      
      // Wait a moment to show 100% before completing
      setTimeout(() => {
        onUploadComplete(result.documentId);
        setUploading(false);
        setFile(null);
        setDescription('');
      }, 500);
      
    } catch (err: any) {
      setError(err.message || 'An error occurred during upload');
      setUploading(false);
    }
  };

  const cancelUpload = () => {
    setFile(null);
    setError(null);
  };

  return (
    <Paper elevation={3} className="p-6">
      <Typography variant="h6" className="mb-4">Upload Document</Typography>
      
      {!file ? (
        <div {...getRootProps()} className={`
          border-2 border-dashed rounded-lg p-8 text-center cursor-pointer
          transition-colors duration-200
          ${isDragActive ? 'border-blue-500 bg-blue-50' : 'border-gray-300 hover:border-blue-400'}
        `}>
          <input {...getInputProps()} />
          <CloudUpload className="text-gray-400 text-5xl mb-2" />
          <Typography variant="body1" className="mb-1">
            Drag & drop a document here, or click to select
          </Typography>
          <Typography variant="body2" color="textSecondary">
            Supported formats: {allowedTypes.join(', ')}
          </Typography>
        </div>
      ) : (
        <Box>
          <Box className="flex items-center mb-4">
            <CheckCircle className="text-green-500 mr-2" />
            <Typography variant="body1">{file.name}</Typography>
            <Chip 
              label={`${(file.size / (1024 * 1024)).toFixed(2)} MB`}
              size="small"
              className="ml-2"
            />
          </Box>
          
          <div className="mb-4">
            <FormControl fullWidth className="mb-3">
              <InputLabel id="document-type-label">Document Type</InputLabel>
              <Select
                labelId="document-type-label"
                value={documentType}
                label="Document Type"
                onChange={(e) => setDocumentType(e.target.value as DocumentType)}
                disabled={uploading}
              >
                <MenuItem value="training">Training Document</MenuItem>
                <MenuItem value="regulatory">Regulatory Document</MenuItem>
                <MenuItem value="manual">Aircraft Manual</MenuItem>
                <MenuItem value="syllabus">Syllabus</MenuItem>
                <MenuItem value="other">Other</MenuItem>
              </Select>
            </FormControl>
            
            <TextField
              label="Description (optional)"
              fullWidth
              multiline
              rows={2}
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              disabled={uploading}
            />
          </div>
          
          {uploading ? (
            <Box>
              <LinearProgress 
                variant="determinate" 
                value={progress} 
                className="mb-2"
              />
              <Typography variant="body2" className="text-right">
                {Math.round(progress)}%
              </Typography>
            </Box>
          ) : (
            <Box className="flex gap-3">
              <Button 
                variant="contained" 
                color="primary"
                onClick={handleUpload}
                className="flex-1"
              >
                Upload
              </Button>
              <Button 
                variant="outlined"
                onClick={cancelUpload}
              >
                Cancel
              </Button>
            </Box>
          )}
        </Box>
      )}
      
      {error && (
        <Box className="mt-4 p-3 bg-red-50 text-red-700 rounded-md flex items-center">
          <Error className="mr-2" />
          <Typography variant="body2">{error}</Typography>
        </Box>
      )}
    </Paper>
  );
};

// components/document-intelligence/DocumentAnalysisViewer.tsx
import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Paper, 
  Typography, 
  Tabs, 
  Tab, 
  CircularProgress,
  Chip,
  List,
  ListItem,
  ListItemText,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Grid
} from '@mui/material';
import { ExpandMore, InsertDriveFile, WarningAmber, CheckCircle } from '@mui/icons-material';
import { documentApi } from '@/lib/api/apiClient';
import { DocumentViewer } from './DocumentViewer';

interface DocumentAnalysisViewerProps {
  documentId: string;
}

interface AnalysisData {
  documentId: string;
  status: 'processing' | 'completed' | 'error';
  documentType: string;
  fileName: string;
  fileUrl: string;
  extractedContent: {
    title?: string;
    sections: {
      title: string;
      content: string;
      pageNumber: number;
    }[];
    keyPhrases: string[];
    regulations: {
      code: string;
      description: string;
      relevance: number;
    }[];
    trainingObjectives: {
      id: string;
      description: string;
      competency: string;
      level: 'knowledge' | 'skill' | 'attitude';
    }[];
    entities: {
      text: string;
      type: string;
      pageNumber: number;
      count: number;
    }[];
  };
  processingProgress?: number;
  error?: string;
}

export const DocumentAnalysisViewer: React.FC<DocumentAnalysisViewerProps> = ({ documentId }) => {
  const [activeTab, setActiveTab] = useState(0);
  const [analysisData, setAnalysisData] = useState<AnalysisData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  useEffect(() => {
    let pollingInterval: NodeJS.Timeout;
    
    const fetchAnalysis = async () => {
      try {
        const data = await documentApi.getDocumentAnalysis(documentId);
        setAnalysisData(data);
        
        if (data.status === 'processing') {
          // If still processing, poll every 3 seconds
          pollingInterval = setInterval(fetchAnalysis, 3000);
        } else {
          setLoading(false);
          clearInterval(pollingInterval);
        }
      } catch (err: any) {
        setError(err.message || 'Failed to fetch document analysis');
        setLoading(false);
        clearInterval(pollingInterval);
      }
    };
    
    fetchAnalysis();
    
    return () => {
      clearInterval(pollingInterval);
    };
  }, [documentId]);
  
  const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue);
  };
  
  if (loading && (!analysisData || analysisData.status === 'processing')) {
    return (
      <Paper elevation={3} className="p-6">
        <Box className="flex flex-col items-center py-8">
          <CircularProgress size={48} className="mb-4" />
          <Typography variant="h6">
            Analyzing Document...
          </Typography>
          {analysisData?.processingProgress && (
            <Typography variant="body2" color="textSecondary" className="mt-2">
              {Math.round(analysisData.processingProgress)}% complete
            </Typography>
          )}
        </Box>
      </Paper>
    );
  }
  
  if (error || analysisData?.status === 'error') {
    return (
      <Paper elevation={3} className="p-6">
        <Box className="flex items-center text-red-600 mb-4">
          <WarningAmber className="mr-2" />
          <Typography variant="h6">Analysis Failed</Typography>
        </Box>
        <Typography variant="body1">
          {error || analysisData?.error || 'Failed to analyze the document. Please try again.'}
        </Typography>
      </Paper>
    );
  }
  
  if (!analysisData) {
    return null;
  }
  
  return (
    <Paper elevation={3} className="overflow-hidden">
      <Box className="p-4 bg-gray-50 border-b">
        <Box className="flex items-center mb-2">
          <InsertDriveFile className="mr-2 text-blue-500" />
          <Typography variant="h6">
            {analysisData.extractedContent.title || analysisData.fileName}
          </Typography>
          <Chip 
            label={analysisData.documentType}
            size="small"
            color="primary"
            className="ml-2"
          />
        </Box>
      </Box>
      
      <Box>
        <Tabs 
          value={activeTab} 
          onChange={handleTabChange}
          variant="scrollable"
          scrollButtons="auto"
          className="border-b"
        >
          <Tab label="Document" />
          <Tab label="Content Structure" />
          <Tab label="Training Objectives" />
          <Tab label="Regulatory Mapping" />
          <Tab label="Key Terms" />
        </Tabs>
        
        <Box className="p-4">
          {activeTab === 0 && (
            <DocumentViewer fileUrl={analysisData.fileUrl} fileName={analysisData.fileName} />
          )}
          
          {activeTab === 1 && (
            <Box>
              <Typography variant="subtitle1" className="mb-2">Document Structure</Typography>
              <List>
                {analysisData.extractedContent.sections.map((section, index) => (
                  <Accordion key={index}>
                    <AccordionSummary expandIcon={<ExpandMore />}>
                      <Typography>
                        {section.title || `Section ${index + 1}`}
                        <Chip 
                          label={`Page ${section.pageNumber}`}
                          size="small"
                          className="ml-2"
                          variant="outlined"
                        />
                      </Typography>
                    </AccordionSummary>
                    <AccordionDetails>
                      <Typography variant="body2" style={{ whiteSpace: 'pre-line' }}>
                        {section.content}
                      </Typography>
                    </AccordionDetails>
                  </Accordion>
                ))}
              </List>
            </Box>
          )}
          
          {activeTab === 2 && (
            <Box>
              <Typography variant="subtitle1" className="mb-3">Identified Training Objectives</Typography>
              <Grid container spacing={2}>
                {analysisData.extractedContent.trainingObjectives.map((objective, index) => (
                  <Grid item xs={12} sm={6} key={index}>
                    <Paper className="p-3" variant="outlined">
                      <Box className="flex items-center mb-1">
                        <Chip 
                          label={objective.competency}
                          size="small"
                          color="primary"
                          className="mr-2"
                        />
                        <Chip 
                          label={objective.level}
                          size="small"
                          color={
                            objective.level === 'knowledge' ? 'info' :
                            objective.level === 'skill' ? 'success' : 'warning'
                          }
                        />
                      </Box>
                      <Typography variant="body2">{objective.description}</Typography>
                    </Paper>
                  </Grid>
                ))}
              </Grid>
            </Box>
          )}
          
          {activeTab === 3 && (
            <Box>
              <Typography variant="subtitle1" className="mb-3">Regulatory Compliance Mapping</Typography>
              <List>
                {analysisData.extractedContent.regulations.map((regulation, index) => (
                  <ListItem key={index} className="mb-2 rounded" sx={{ bgcolor: 'background.paper' }}>
                    <ListItemText
                      primary={
                        <Box className="flex items-center">
                          <Chip 
                            label={regulation.code}
                            color="secondary"
                            size="small"
                            className="mr-2"
                          />
                          <Typography variant="body1">{regulation.description}</Typography>
                        </Box>
                      }
                      secondary={
                        <Box className="flex items-center mt-1">
                          <Typography variant="body2" color="textSecondary">
                            Relevance: 
                          </Typography>
                          <Box 
                            className="ml-2 h-2 rounded-full bg-gray-200"
                            sx={{ width: 100 }}
                          >
                            <Box 
                              className="h-2 rounded-full bg-blue-500"
                              sx={{ width: `${regulation.relevance * 100}%` }}
                            />
                          </Box>
                          <Typography variant="body2" color="textSecondary" className="ml-2">
                            {Math.round(regulation.relevance * 100)}%
                          </Typography>
                        </Box>
                      }
                    />
                  </ListItem>
                ))}
              </List>
            </Box>
          )}
          
          {activeTab === 4 && (
            <Box>
              <Typography variant="subtitle1" className="mb-3">Key Terms and Entities</Typography>
              <Box className="mb-4">
                <Typography variant="subtitle2" className="mb-2">Key Phrases</Typography>
                <Box className="flex flex-wrap gap-2">
                  {analysisData.extractedContent.keyPhrases.map((phrase, index) => (
                    <Chip 
                      key={index}
                      label={phrase}
                      variant="outlined"
                    />
                  ))}
                </Box>
              </Box>
              
              <Typography variant="subtitle2" className="mb-2">Entities</Typography>
              <Grid container spacing={2}>
                {analysisData.extractedContent.entities.map((entity, index) => (
                  <Grid item xs={12} sm={6} md={4} key={index}>
                    <Paper className="p-3" variant="outlined">
                      <Typography variant="body2" className="font-medium">{entity.text}</Typography>
                      <Box className="flex justify-between mt-1">
                        <Chip 
                          label={entity.type}
                          size="small"
                          variant="outlined"
                        />
                        <Typography variant="caption" color="textSecondary">
                          Found {entity.count} times
                        </Typography>
                      </Box>
                    </Paper>
                  </Grid>
                ))}
              </Grid>
            </Box>
          )}
        </Box>
      </Box>
    </Paper>
  );
};

// components/document-intelligence/DocumentViewer.tsx
import React, { useState } from 'react';
import { Box, Paper, Typography, CircularProgress, IconButton } from '@mui/material';
import { ZoomIn, ZoomOut, SkipPrevious, SkipNext, Fullscreen } from '@mui/icons-material';

interface DocumentViewerProps {
  fileUrl: string;
  fileName: string;
}

export const DocumentViewer: React.FC<DocumentViewerProps> = ({ fileUrl, fileName }) => {
  const [loading, setLoading] = useState(true);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [zoom, setZoom] = useState(1);
  const [fullscreen, setFullscreen] = useState(false);
  
  const handlePrevPage = () => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1);
    }
  };
  
  const handleNextPage = () => {
    if (currentPage < totalPages) {
      setCurrentPage(currentPage + 1);
    }
  };
  
  const handleZoomIn = () => {
    setZoom(prev => Math.min(prev + 0.25, 3));
  };
  
  const handleZoomOut = () => {
    setZoom(prev => Math.max(prev - 0.25, 0.5));
  };
  
  const toggleFullscreen = () => {
    setFullscreen(!fullscreen);
  };
  
  // Determine file type from extension
  const fileExtension = fileName.split('.').pop()?.toLowerCase();
  
  return (
    <Box className={`flex flex-col ${fullscreen ? 'fixed inset-0 z-50 bg-white' : 'h-full'}`}>
      <Box className="flex justify-between items-center p-2 bg-gray-100">
        <Box className="flex items-center">
          <IconButton onClick={handlePrevPage} disabled={currentPage <= 1}>
            <SkipPrevious />
          </IconButton>
          <Typography variant="body2" className="mx-2">
            Page {currentPage} of {totalPages}
          </Typography>
          <IconButton onClick={handleNextPage} disabled={currentPage >= totalPages}>
            <SkipNext />
          </IconButton>
        </Box>
        
        <Box className="flex items-center">
          <IconButton onClick={handleZoomOut} disabled={zoom <= 0.5}>
            <ZoomOut />
          </IconButton>
          <Typography variant="body2" className="mx-2">
            {Math.round(zoom * 100)}%
          </Typography>
          <IconButton onClick={handleZoomIn} disabled={zoom >= 3}>
            <ZoomIn />
          </IconButton>
          <IconButton onClick={toggleFullscreen} className="ml-2">
            <Fullscreen />
          </IconButton>
        </Box>
      </Box>
      
      <Box 
        className="flex-1 overflow-auto p-4 bg-gray-200 flex justify-center"
        style={{ height: fullscreen ? 'calc(100vh - 56px)' : '600px' }}
      >
        <Box
          style={{ 
            transform: `scale(${zoom})`,
            transformOrigin: 'top center',
            transition: 'transform 0.2s'
          }}
          className="bg-white shadow-lg"
        >
          {loading && (
            <Box className="absolute inset-0 flex items-center justify-center">
              <CircularProgress />
            </Box>
          )}
          
          {fileExtension === 'pdf' && (
            <iframe
              src={`${fileUrl}#page=${currentPage}`}
              title="PDF Document"
              width="800"
              height={fullscreen ? 'calc(100vh - 120px)' : '800'}
              onLoad={() => setLoading(false)}
              style={{ border: 'none' }}
            />
          )}
          
          {(fileExtension === 'docx' || fileExtension === 'xlsx' || fileExtension === 'pptx') && (
            <iframe
              src={`https://view.officeapps.live.com/op/embed.aspx?src=${encodeURIComponent(fileUrl)}`}
              title="Office Document"
              width="800"
              height={fullscreen ? 'calc(100vh - 120px)' : '800'}
              onLoad={() => setLoading(false)}
              style={{ border: 'none' }}
            />
          )}
          
          {fileExtension === 'html' && (
            <iframe
              src={fileUrl}
              title="HTML Document"
              width="800"
              height={fullscreen ? 'calc(100vh - 120px)' : '800'}
              onLoad={() => setLoading(false)}
              style={{ border: 'none' }}
            />
          )}
          
          {fileExtension === 'txt' && (
            <Box 
              width="800"
              height={fullscreen ? 'calc(100vh - 120px)' : '800'}
              sx={{ overflowY: 'auto', p: 4 }}
              className="bg-white"
            >
              <Typography component="pre" variant="body2">
                {/* Text content would be loaded here */}
                Loading text content...
              </Typography>
            </Box>
          )}
        </Box>
      </Box>
    </Box>
  );
};

// components/document-intelligence/DocumentLibrary.tsx
import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  Grid, 
  Paper, 
  Card, 
  CardContent, 
  CardActions, 
  Button, 
  IconButton,
  TextField,
  InputAdornment,
  Chip,
  Menu,
  MenuItem,
  CircularProgress,
  Divider,
  Select,
  FormControl,
  InputLabel,
  Pagination
} from '@mui/material';
import { 
  Search, 
  FilterList, 
  InsertDriveFile, 
  PictureAsPdf, 
  Description, 
  Slideshow, 
  Code,
  MoreVert,
  DeleteOutline
} from '@mui/icons-material';
import { documentApi } from '@/lib/api/apiClient';
import { DocumentUploader } from './DocumentUploader';

interface Document {
  id: string;
  fileName: string;
  fileType: string;
  uploadDate: string;
  documentType: string;
  status: 'processing' | 'completed' | 'error';
  size: number;
  description?: string;
  thumbnail?: string;
}

export const DocumentLibrary: React.FC = () => {
  const [documents, setDocuments] = useState<Document[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [filterAnchorEl, setFilterAnchorEl] = useState<null | HTMLElement>(null);
  const [typeFilter, setTypeFilter] = useState<string>('all');
  const [sortBy, setSortBy] = useState<string>('uploadDate');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');
  const [page, setPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [selectedDocumentId, setSelectedDocumentId] = useState<string | null>(null);
  const [actionMenuAnchorEl, setActionMenuAnchorEl] = useState<null | HTMLElement>(null);
  const [actionDocument, setActionDocument] = useState<Document | null>(null);
  const [showUploader, setShowUploader] = useState(false);
  
  useEffect(() => {
    fetchDocuments();
  }, [page, typeFilter, sortBy, sortOrder, searchQuery]);
  
  const fetchDocuments = async () => {
    setLoading(true);
    setError(null);
    
    try {
      const filters: Record<string, any> = {};
      
      if (typeFilter !== 'all') {
        filters.documentType = typeFilter;
      }
      
      if (searchQuery) {
        filters.search = searchQuery;
      }
      
      const result = await documentApi.getUserDocuments({
        page,
        limit: 12,
        filters,
      });
      
      setDocuments(result.documents);
      setTotalPages(result.totalPages);
    } catch (err: any) {
      setError(err.message || 'Failed to fetch documents');
    } finally {
      setLoading(false);
    }
  };
  
  const handleFilterClick = (event: React.MouseEvent<HTMLElement>) => {
    setFilterAnchorEl(event.currentTarget);
  };
  
  const handleFilterClose = () => {
    setFilterAnchorEl(null);
  };
  
  const handleActionMenuOpen = (event: React.MouseEvent<HTMLElement>, document: Document) => {
    setActionMenuAnchorEl(event.currentTarget);
    setActionDocument(document);
  };
  
  const handleActionMenuClose = () => {
    setActionMenuAnchorEl(null);
    setActionDocument(null);
  };
  
  const handlePageChange = (_: React.ChangeEvent<unknown>, value: number) => {
    setPage(value);
  };
  
  const handleUploadComplete = (documentId: string) => {
    setShowUploader(false);
    fetchDocuments();
    setSelectedDocumentId(documentId);
  };
  
  const getFileIcon = (fileType: string) => {
    switch (fileType.toLowerCase()) {
      case 'pdf':
        return <PictureAsPdf className="text-red-500" />;
      case 'docx':
      case 'doc':
        return <Description className="text-blue-500" />;
      case 'pptx':
      case 'ppt':
        return <Slideshow className="text-orange-500" />;
      case 'html':
        return <Code className="text-green-500" />;
      default:
        return <InsertDriveFile className="text-gray-500" />;
    }
  };
  
  const formatFileSize = (bytes: number) => {
    if (bytes < 1024) return `${bytes} B`;
    if (bytes < 1048576) return `${(bytes / 1024).toFixed(1)} KB`;
    return `${(bytes / 1048576).toFixed(1)} MB`;
  };
  
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString(undefined, {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
    });
  };
  
  return (
    <Box>
      <Box className="flex justify-between items-center mb-6">
        <Typography variant="h5">Document Library</Typography>
        <Button 
          variant="contained" 
          color="primary"
          onClick={() => setShowUploader(!showUploader)}
        >
          {showUploader ? 'Hide Uploader' : 'Upload Document'}
        </Button>
      </Box>
      
      {showUploader && (
        <Box className="mb-6">
          <DocumentUploader onUploadComplete={handleUploadComplete} />
        </Box>
      )}
      
      <Paper elevation={1} className="p-4 mb-6">
        <Box className="flex flex-wrap gap-4 items-center">
          <TextField
            placeholder="Search documents..."
            variant="outlined"
            size="small"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <Search />
                </InputAdornment>
              ),
            }}
            className="flex-grow"
          />
          
          <Box className="flex items-center gap-4">
            <FormControl size="small" sx={{ minWidth: 120 }}>
              <InputLabel id="sort-by-label">Sort By</InputLabel>
              <Select
                labelId="sort-by-label"
                label="Sort By"
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
              >
                <MenuItem value="uploadDate">Upload Date</MenuItem>
                <MenuItem value="fileName">File Name</MenuItem>
                <MenuItem value="size">File Size</MenuItem>
                <MenuItem value="documentType">Document Type</MenuItem>
              </Select>
            </FormControl>
            
            <IconButton
              onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}
              title={sortOrder === 'asc' ? 'Ascending' : 'Descending'}
            >
              {sortOrder === 'asc' ? '↑' : '↓'}
            </IconButton>
            
            <Button 
              startIcon={<FilterList />} 
              onClick={handleFilterClick}
              variant="outlined"
              size="small"
            >
              Filter
            </Button>
            
            <Menu
              anchorEl={filterAnchorEl}
              open={Boolean(filterAnchorEl)}
              onClose={handleFilterClose}
            >
              <MenuItem 
                onClick={() => { setTypeFilter('all'); handleFilterClose(); }}
                selected={typeFilter === 'all'}
              >
                All Types
              </MenuItem>
              <Divider />
              <MenuItem 
                onClick={() => { setTypeFilter('training'); handleFilterClose(); }}
                selected={typeFilter === 'training'}
              >
                Training Documents
              </MenuItem>
              <MenuItem 
                onClick={() => { setTypeFilter('regulatory'); handleFilterClose(); }}
                selected={typeFilter === 'regulatory'}
              >
                Regulatory Documents
              </MenuItem>
              <MenuItem 
                onClick={() => { setTypeFilter('manual'); handleFilterClose(); }}
                selected={typeFilter === 'manual'}
              >
                Aircraft Manuals
              </MenuItem>
              <MenuItem 
                onClick={() => { setTypeFilter('syllabus'); handleFilterClose(); }}
                selected={typeFilter === 'syllabus'}
              >
                Syllabi
              </MenuItem>
              <MenuItem 
                onClick={() => { setTypeFilter('other'); handleFilterClose(); }}
                selected={typeFilter === 'other'}
              >
                Other
              </MenuItem>
            </Menu>
          </Box>
        </Box>
      </Paper>
      
      {loading ? (
        <Box className="flex justify-center p-12">
          <CircularProgress />
        </Box>
      ) : error ? (
        <Paper className="p-6 text-center text-red-600">
          <Typography variant="body1">{error}</Typography>
        </Paper>
      ) : documents.length === 0 ? (
        <Paper className="p-12 text-center">
          <Typography variant="h6" className="mb-2">No documents found</Typography>
          <Typography variant="body2" color="textSecondary">
            Upload some documents or adjust your filters
          </Typography>
        </Paper>
      ) : (
        <Grid container spacing={3}>
          {documents.map((doc) => (
            <Grid item xs={12} sm={6} md={4} lg={3} key={doc.id}>
              <Card 
                className={`h-full ${selectedDocumentId === doc.id ? 'ring-2 ring-blue-500' : ''}`}
                elevation={selectedDocumentId === doc.id ? 3 : 1}
              >
                <Box className="p-4 flex items-center">
                  {getFileIcon(doc.fileType)}
                  <Typography variant="body1" className="ml-2 truncate flex-1" title={doc.fileName}>
                    {doc.fileName}
                  </Typography>
                  <IconButton size="small" onClick={(e) => handleActionMenuOpen(e, doc)}>
                    <MoreVert />
                  </IconButton>
                </Box>
                
                <CardContent className="pt-0">
                  <Box className="flex items-center mb-2">
                    <Chip
                      label={doc.documentType}
                      size="small"
                      color="primary"
                      variant="outlined"
                    />
                    <Chip
                      label={doc.status === 'completed' ? 'Analyzed' : 
                             doc.status === 'processing' ? 'Processing' : 'Failed'}
                      size="small"
                      color={doc.status === 'completed' ? 'success' : 
                             doc.status === 'processing' ? 'info' : 'error'}
                      className="ml-2"
                    />
                  </Box>
                  
                  {doc.thumbnail ? (
                    <Box 
                      className="mb-2 h-32 bg-gray-100 rounded overflow-hidden flex items-center justify-center"
                    >
                      <img 
                        src={doc.thumbnail} 
                        alt={doc.fileName} 
                        className="object-contain h-full w-full"
                      />
                    </Box>
                  ) : (
                    <Box className="mb-2 h-32 bg-gray-100 rounded flex items-center justify-center">
                      {getFileIcon(doc.fileType)}
                    </Box>
                  )}
                  
                  <Typography variant="caption" className="block text-gray-500">
                    Uploaded: {formatDate(doc.uploadDate)}
                  </Typography>
                  <Typography variant="caption" className="block text-gray-500">
                    Size: {formatFileSize(doc.size)}
                  </Typography>
                </CardContent>
                
                <CardActions>
                  <Button 
                    size="small" 
                    color="primary"
                    onClick={() => setSelectedDocumentId(doc.id)}
                    fullWidth
                  >
                    View Analysis
                  </Button>
                </CardActions>
              </Card>
            </Grid>
          ))}
        </Grid>
      )}
      
      {totalPages > 1 && (
        <Box className="flex justify-center mt-6">
          <Pagination 
            count={totalPages} 
            page={page} 
            onChange={handlePageChange} 
            color="primary" 
          />
        </Box>
      )}
      
      <Menu
        anchorEl={actionMenuAnchorEl}
        open={Boolean(actionMenuAnchorEl)}
        onClose={handleActionMenuClose}
      >
        <MenuItem onClick={handleActionMenuClose}>
          View Details
        </MenuItem>
        <MenuItem onClick={handleActionMenuClose}>
          Download
        </MenuItem>
        <MenuItem onClick={handleActionMenuClose}>
          Share
        </MenuItem>
        <MenuItem onClick={handleActionMenuClose}>
          Add to Syllabus
        </MenuItem>
        <Divider />
        <MenuItem 
          onClick={handleActionMenuClose}
          className="text-red-600"
        >
          <DeleteOutline fontSize="small" className="mr-2" />
          Delete
        </MenuItem>
      </Menu>

      {selectedDocumentId && (
        <Box className="mt-6">
          <Typography variant="h6" className="mb-3">Document Analysis</Typography>
          <DocumentAnalysisViewer documentId={selectedDocumentId} />
        </Box>
      )}
    </Box>
  );
};

// app/document-intelligence/page.tsx
'use client';

import React from 'react';
import { Box, Container, Typography, Paper, Tabs, Tab } from '@mui/material';
import { DocumentLibrary } from '@/components/document-intelligence/DocumentLibrary';

export default function DocumentIntelligencePage() {
  const [activeTab, setActiveTab] = React.useState(0);
  
  const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue);
  };
  
  return (
    <Container maxWidth="xl">
      <Box className="py-6">
        <Typography variant="h4" className="mb-6">Document Intelligence</Typography>
        
        <Paper elevation={1} className="mb-6">
          <Tabs 
            value={activeTab} 
            onChange={handleTabChange}
            variant="scrollable"
            scrollButtons="auto"
          >
            <Tab label="Document Library" />
            <Tab label="Upload & Analysis" />
            <Tab label="Knowledge Graph" />
            <Tab label="Terminology" />
          </Tabs>
        </Paper>
        
        {activeTab === 0 && <DocumentLibrary />}
        {activeTab === 1 && (
          <Typography variant="body1">Upload & Analysis Tab Content</Typography>
        )}
        {activeTab === 2 && (
          <Typography variant="body1">Knowledge Graph Tab Content</Typography>
        )}
        {activeTab === 3 && (
          <Typography variant="body1">Terminology Tab Content</Typography>
        )}
      </Box>
    </Container>
  );
}

// src/frontend/components/document/DocumentManagement.tsx
import React, { useState, useCallback, useEffect } from 'react';
import { useDropzone } from 'react-dropzone';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { DataTable, Column } from '../ui/DataTable';
import { Modal } from '../ui/Modal';
import { Alert } from '../ui/Alert';

// Types
export enum DocumentStatus {
  PENDING = 'pending',
  UPLOADING = 'uploading',
  PROCESSING = 'processing',
  COMPLETED = 'completed',
  FAILED = 'failed'
}

export enum DocumentType {
  PDF = 'pdf',
  DOCX = 'docx',
  XLSX = 'xlsx',
  PPTX = 'pptx',
  HTML = 'html',
  OTHER = 'other'
}

export interface Document {
  id: string;
  name: string;
  type: DocumentType;
  size: number;
  uploadedAt: Date;
  status: DocumentStatus;
  progress?: number;
  error?: string;
  tags?: string[];
  category?: string;
  processingResults?: {
    extractedContent?: boolean;
    extractedStructure?: boolean;
    extractedRegulations?: boolean;
    confidence?: number;
  };
}

export interface DocumentCategory {
  id: string;
  name: string;
}

// Type guard for accepted file types
const isAcceptedFileType = (type: string): type is DocumentType => {
  return Object.values(DocumentType).includes(type as DocumentType);
};

// Convert file object to document object
const fileToDocument = (file: File): Omit<Document, 'id'> => {
  const extension = file.name.split('.').pop()?.toLowerCase() || '';
  let type: DocumentType;
  
  switch (extension) {
    case 'pdf':
      type = DocumentType.PDF;
      break;
    case 'docx':
    case 'doc':
      type = DocumentType.DOCX;
      break;
    case 'xlsx':
    case 'xls':
      type = DocumentType.XLSX;
      break;
    case 'pptx':
    case 'ppt':
      type = DocumentType.PPTX;
      break;
    case 'html':
    case 'htm':
      type = DocumentType.HTML;
      break;
    default:
      type = DocumentType.OTHER;
  }
  
  return {
    name: file.name,
    type,
    size: file.size,
    uploadedAt: new Date(),
    status: DocumentStatus.PENDING,
    progress: 0
  };
};

// Format file size for display
const formatFileSize = (bytes: number): string => {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

// Component for uploading and managing documents
interface DocumentManagementProps {
  documents: Document[];
  categories?: DocumentCategory[];
  onUpload: (files: File[]) => Promise<void>;
  onDelete: (documentId: string) => Promise<void>;
  onPreview: (documentId: string) => void;
  onProcess: (documentId: string) => Promise<void>;
  onCategorize: (documentId: string, categoryId: string) => Promise<void>;
  onTagsUpdate: (documentId: string, tags: string[]) => Promise<void>;
}

export const DocumentManagement: React.FC<DocumentManagementProps> = ({
  documents,
  categories = [],
  onUpload,
  onDelete,
  onPreview,
  onProcess,
  onCategorize,
  onTagsUpdate
}) => {
  const [uploadingFiles, setUploadingFiles] = useState<Document[]>([]);
  const [selectedDocument, setSelectedDocument] = useState<Document | null>(null);
  const [isPreviewModalOpen, setIsPreviewModalOpen] = useState(false);
  const [isBatchUploading, setIsBatchUploading] = useState(false);
  const [alertMessage, setAlertMessage] = useState<{ type: 'success' | 'error'; message: string } | null>(null);
  const [tagsInput, setTagsInput] = useState('');

  // Set up dropzone
  const onDrop = useCallback(async (acceptedFiles: File[]) => {
    try {
      setIsBatchUploading(true);
      
      // Convert files to document objects
      const newDocuments = acceptedFiles.map(file => ({
        ...fileToDocument(file),
        id: `temp-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
      }));
      
      // Add to uploading files
      setUploadingFiles(prev => [...prev, ...newDocuments]);
      
      // Call upload handler
      await onUpload(acceptedFiles);
      
      // Show success message
      setAlertMessage({
        type: 'success',
        message: `Successfully uploaded ${acceptedFiles.length} document${acceptedFiles.length > 1 ? 's' : ''}.`
      });
    } catch (error) {
      // Show error message
      setAlertMessage({
        type: 'error',
        message: `Error uploading documents: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    } finally {
      setIsBatchUploading(false);
      setUploadingFiles([]);
    }
  }, [onUpload]);
  
  // Configure dropzone
  const { getRootProps, getInputProps, isDragActive, open } = useDropzone({
    onDrop,
    noClick: true,
    accept: {
      'application/pdf': ['.pdf'],
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx'],
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': ['.xlsx'],
      'application/vnd.openxmlformats-officedocument.presentationml.presentation': ['.pptx'],
      'text/html': ['.html', '.htm']
    }
  });

  // Clear alert after 5 seconds
  useEffect(() => {
    if (alertMessage) {
      const timer = setTimeout(() => {
        setAlertMessage(null);
      }, 5000);
      
      return () => clearTimeout(timer);
    }
  }, [alertMessage]);

  // Handle document preview
  const handlePreview = (documentId: string) => {
    const document = documents.find(doc => doc.id === documentId);
    if (document) {
      setSelectedDocument(document);
      setIsPreviewModalOpen(true);
      onPreview(documentId);
    }
  };

  // Handle document deletion
  const handleDelete = async (documentId: string) => {
    try {
      await onDelete(documentId);
      
      setAlertMessage({
        type: 'success',
        message: 'Document deleted successfully.'
      });
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Error deleting document: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };

  // Handle document category update
  const handleCategoryChange = async (documentId: string, categoryId: string) => {
    try {
      await onCategorize(documentId, categoryId);
      
      setAlertMessage({
        type: 'success',
        message: 'Document category updated successfully.'
      });
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Error updating category: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };

  // Handle document tags update
  const handleTagsUpdate = async () => {
    if (!selectedDocument) return;
    
    try {
      const tags = tagsInput.split(',').map(tag => tag.trim()).filter(Boolean);
      await onTagsUpdate(selectedDocument.id, tags);
      
      setAlertMessage({
        type: 'success',
        message: 'Tags updated successfully.'
      });
      
      // Close the modal
      setIsPreviewModalOpen(false);
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Error updating tags: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };

  // Define table columns
  const columns: Column<Document>[] = [
    {
      key: 'name',
      header: 'Document Name',
      render: (doc) => (
        <div className="flex items-center">
          {/* Document type icon */}
          <span className="mr-2">
            {doc.type === DocumentType.PDF && (
              <svg className="w-5 h-5 text-red-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                <path fillRule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z" clipRule="evenodd" />
              </svg>
            )}
            {doc.type === DocumentType.DOCX && (
              <svg className="w-5 h-5 text-blue-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                <path fillRule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z" clipRule="evenodd" />
              </svg>
            )}
            {doc.type === DocumentType.XLSX && (
              <svg className="w-5 h-5 text-green-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                <path fillRule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z" clipRule="evenodd" />
              </svg>
            )}
            {doc.type === DocumentType.PPTX && (
              <svg className="w-5 h-5 text-orange-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                <path fillRule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z" clipRule="evenodd" />
              </svg>
            )}
            {(doc.type === DocumentType.HTML || doc.type === DocumentType.OTHER) && (
              <svg className="w-5 h-5 text-gray-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                <path fillRule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z" clipRule="evenodd" />
              </svg>
            )}
          </span>
          
          {/* Document name */}
          <span className="font-medium">{doc.name}</span>
        </div>
      ),
      sortable: true
    },
    {
      key: 'size',
      header: 'Size',
      render: (doc) => formatFileSize(doc.size),
      sortable: true
    },
    {
      key: 'uploadedAt',
      header: 'Uploaded',
      render: (doc) => new Date(doc.uploadedAt).toLocaleDateString(),
      sortable: true
    },
    {
      key: 'status',
      header: 'Status',
      render: (doc) => {
        let statusClass = '';
        let statusText = '';
        
        switch (doc.status) {
          case DocumentStatus.PENDING:
            statusClass = 'bg-gray-100 text-gray-800';
            statusText = 'Pending';
            break;
          case DocumentStatus.UPLOADING:
            statusClass = 'bg-blue-100 text-blue-800';
            statusText = `Uploading ${doc.progress ? Math.round(doc.progress) + '%' : ''}`;
            break;
          case DocumentStatus.PROCESSING:
            statusClass = 'bg-yellow-100 text-yellow-800';
            statusText = 'Processing';
            break;
          case DocumentStatus.COMPLETED:
            statusClass = 'bg-green-100 text-green-800';
            statusText = 'Completed';
            break;
          case DocumentStatus.FAILED:
            statusClass = 'bg-red-100 text-red-800';
            statusText = 'Failed';
            break;
        }
        
        return (
          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${statusClass}`}>
            {statusText}
          </span>
        );
      },
      sortable: true
    },
    {
      key: 'category',
      header: 'Category',
      render: (doc) => {
        const category = categories.find(cat => cat.id === doc.category);
        
        return (
          <select
            className="block w-full pl-3 pr-10 py-1 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
            value={doc.category || ''}
            onChange={(e) => handleCategoryChange(doc.id, e.target.value)}
          >
            <option value="">Uncategorized</option>
            {categories.map(cat => (
              <option key={cat.id} value={cat.id}>
                {cat.name}
              </option>
            ))}
          </select>
        );
      }
    },
    {
      key: 'actions',
      header: 'Actions',
      render: (doc) => (
        <div className="flex space-x-2">
          <button
            onClick={(e) => { e.stopPropagation(); handlePreview(doc.id); }}
            className="text-blue-600 hover:text-blue-900"
            title="Preview"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
            </svg>
          </button>
          
          {doc.status === DocumentStatus.COMPLETED && (
            <button
              onClick={(e) => { e.stopPropagation(); onProcess(doc.id); }}
              className="text-green-600 hover:text-green-900"
              title="Process"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"></path>
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </button>
          )}
          
          <button
            onClick={(e) => { e.stopPropagation(); handleDelete(doc.id); }}
            className="text-red-600 hover:text-red-900"
            title="Delete"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
            </svg>
          </button>
        </div>
      )
    }
  ];

  return (
    <div className="document-management">
      {/* Alert message */}
      {alertMessage && (
        <div className="mb-4">
          <Alert
            type={alertMessage.type}
            message={alertMessage.message}
            onClose={() => setAlertMessage(null)}
          />
        </div>
      )}
      
      {/* Dropzone */}
      <div
        {...getRootProps()}
        className={`
          border-2 border-dashed rounded-lg p-6 mb-6 text-center
          ${isDragActive ? 'border-blue-400 bg-blue-50' : 'border-gray-300 hover:border-gray-400'}
        `}
      >
        <input {...getInputProps()} />
        
        <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
        </svg>
        
        {isDragActive ? (
          <p className="mt-2 text-sm text-gray-600">Drop the files here ...</p>
        ) : (
          <div>
            <p className="mt-2 text-sm text-gray-600">
              Drag and drop files here, or
              <button
                type="button"
                className="ml-1 text-blue-600 hover:text-blue-500 focus:outline-none focus:underline"
                onClick={open}
              >
                browse
              </button>
            </p>
            <p className="mt-1 text-xs text-gray-500">
              Supported formats: PDF, DOCX, XLSX, PPTX, HTML
            </p>
          </div>
        )}
        
        {isBatchUploading && (
          <div className="mt-4">
            <p className="text-sm text-gray-600">Uploading documents...</p>
            <div className="mt-2 h-1 w-full bg-gray-200 rounded-full overflow-hidden">
              <div className="h-full bg-blue-600 rounded-full animate-pulse"></div>
            </div>
          </div>
        )}
      </div>
      
      {/* Uploading files progress */}
      {uploadingFiles.length > 0 && (
        <Card className="mb-6">
          <h3 className="text-lg font-medium mb-4">Uploading Files</h3>
          
          {uploadingFiles.map(file => (
            <div key={file.id} className="mb-3">
              <div className="flex justify-between mb-1">
                <span className="text-sm font-medium">{file.name}</span>
                <span className="text-sm text-gray-500">{file.progress ? `${Math.round(file.progress)}%` : 'Starting...'}</span>
              </div>
              <div className="w-full h-2 bg-gray-200 rounded-full">
                <div
                  className="h-full bg-blue-600 rounded-full"
                  style={{ width: `${file.progress || 0}%` }}
                ></div>
              </div>
            </div>
          ))}
        </Card>
      )}
      
      {/* Documents table */}
      <Card>
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-lg font-medium">Documents</h2>
          <Button
            variant="primary"
            onClick={open}
            leftIcon={
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
              </svg>
            }
          >
            Upload Documents
          </Button>
        </div>
        
        <DataTable
          columns={columns}
          data={documents}
          keyExtractor={(doc) => doc.id}
          onRowClick={(doc) => handlePreview(doc.id)}
          emptyMessage="No documents uploaded yet. Use the upload button to add documents."
        />
      </Card>
      
      {/* Document preview modal */}
      {selectedDocument && (
        <Modal
          isOpen={isPreviewModalOpen}
          onClose={() => setIsPreviewModalOpen(false)}
          title="Document Details"
          size="lg"
        >
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <h3 className="text-sm font-medium text-gray-500">Document Name</h3>
              <p className="mt-1">{selectedDocument.name}</p>
            </div>
            
            <div>
              <h3 className="text-sm font-medium text-gray-500">Document Type</h3>
              <p className="mt-1">{selectedDocument.type.toUpperCase()}</p>
            </div>
            
            <div>
              <h3 className="text-sm font-medium text-gray-500">Size</h3>
              <p className="mt-1">{formatFileSize(selectedDocument.size)}</p>
            </div>
            
            <div>
              <h3 className="text-sm font-medium text-gray-500">Uploaded</h3>
              <p className="mt-1">{new Date(selectedDocument.uploadedAt).toLocaleString()}</p>
            </div>
            
            <div>
              <h3 className="text-sm font-medium text-gray-500">Status</h3>
              <p className="mt-1">
                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                  selectedDocument.status === DocumentStatus.COMPLETED ? 'bg-green-100 text-green-800' :
                  selectedDocument.status === DocumentStatus.FAILED ? 'bg-red-100 text-red-800' :
                  selectedDocument.status === DocumentStatus.PROCESSING ? 'bg-yellow-100 text-yellow-800' :
                  'bg-gray-100 text-gray-800'
                }`}>
                  {selectedDocument.status}
                </span>
              </p>
            </div>
            
            <div>
              <h3 className="text-sm font-medium text-gray-500">Category</h3>
              <p className="mt-1">
                {selectedDocument.category ? 
                  categories.find(cat => cat.id === selectedDocument.category)?.name || 'Unknown' :
                  'Uncategorized'
                }
              </p>
            </div>
          </div>
          
          {/* Processing results */}
          {selectedDocument.processingResults && (
            <div className="mb-4">
              <h3 className="text-sm font-medium text-gray-500 mb-2">Processing Results</h3>
              
              <div className="grid grid-cols-2 gap-2">
                <div className="flex items-center">
                  <div className={`flex-shrink-0 h-4 w-4 rounded-full ${selectedDocument.processingResults.extractedContent ? 'bg-green-500' : 'bg-gray-300'}`}></div>
                  <span className="ml-2 text-sm">Content Extraction</span>
                </div>
                
                <div className="flex items-center">
                  <div className={`flex-shrink-0 h-4 w-4 rounded-full ${selectedDocument.processingResults.extractedStructure ? 'bg-green-500' : 'bg-gray-300'}`}></div>
                  <span className="ml-2 text-sm">Structure Recognition</span>
                </div>
                
                <div className="flex items-center">
                  <div className={`flex-shrink-0 h-4 w-4 rounded-full ${selectedDocument.processingResults.extractedRegulations ? 'bg-green-500' : 'bg-gray-300'}`}></div>
                  <span className="ml-2 text-sm">Regulations Extraction</span>
                </div>
                
                {selectedDocument.processingResults.confidence !== undefined && (
                  <div className="flex items-center">
                    <span className="text-sm font-medium">{Math.round(selectedDocument.processingResults.confidence * 100)}%</span>
                    <span className="ml-2 text-sm">Confidence Score</span>
                  </div>
                )}
              </div>
            </div>
          )}
          
          {/* Tags */}
          <div className="mb-4">
            <h3 className="text-sm font-medium text-gray-500 mb-2">Tags</h3>
            
            <div className="flex flex-wrap gap-2 mb-2">
              {selectedDocument.tags && selectedDocument.tags.length > 0 ? (
                selectedDocument.tags.map((tag, index) => (
                  <span key={index} className="inline-flex items-center px-2.5 py-0.5 rounded-md text-sm font-medium bg-blue-100 text-blue-800">
                    {tag}
                  </span>
                ))
              ) : (
                <span className="text-sm text-gray-500">No tags</span>
              )}
            </div>
            
            <div className="mt-2">
              <label htmlFor="tags-input" className="block text-sm font-medium text-gray-700 mb-1">
                Update Tags (comma separated)
              </label>
              <div className="flex">
                <input
                  type="text"
                  id="tags-input"
                  className="flex-grow rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  placeholder="e.g. training, regulation, procedures"
                  value={tagsInput}
                  onChange={(e) => setTagsInput(e.target.value)}
                />
                <Button
                  variant="primary"
                  size="small"
                  className="ml-2"
                  onClick={handleTagsUpdate}
                >
                  Update
                </Button>
              </div>
            </div>
          </div>
          
          {/* Document preview (placeholder) */}
          <div className="border rounded-lg p-4 flex items-center justify-center h-64 bg-gray-50">
            <p className="text-gray-500">Document preview would be displayed here</p>
          </div>
          
          <div className="mt-4 flex justify-end space-x-2">
            {selectedDocument.status === DocumentStatus.COMPLETED && (
              <Button
                variant="primary"
                onClick={() => {
                  setIsPreviewModalOpen(false);
                  onProcess(selectedDocument.id);
                }}
              >
                Process Document
              </Button>
            )}
            <Button
              variant="outline"
              onClick={() => setIsPreviewModalOpen(false)}
            >
              Close
            </Button>
          </div>
        </Modal>
      )}
    </div>
  );
};
// services/documentService.ts
import apiClient, { ApiResponse } from './api';

// Document types
export type DocumentType = 'PDF' | 'DOCX' | 'XLSX' | 'HTML' | 'PPTX';

// Document status
export type ProcessingStatus = 'PENDING' | 'PROCESSING' | 'COMPLETED' | 'FAILED';

// Document metadata
export interface DocumentMetadata {
  id: string;
  title: string;
  description?: string;
  type: DocumentType;
  size: number;
  createdAt: string;
  updatedAt: string;
  status: ProcessingStatus;
  progress?: number;
  tags?: string[];
  ownerId: string;
  version: number;
  complianceStatus?: 'COMPLIANT' | 'NON_COMPLIANT' | 'PENDING';
}

// Extracted content from document
export interface DocumentContent {
  text: string;
  entities: {
    type: string;
    value: string;
    confidence: number;
    position: { start: number; end: number };
  }[];
  sections: {
    title: string;
    content: string;
    level: number;
  }[];
  tables: {
    id: string;
    caption?: string;
    data: string[][];
  }[];
  regulatoryReferences?: {
    standard: string;
    section: string;
    text: string;
  }[];
}

// Upload options
export interface UploadOptions {
  tags?: string[];
  description?: string;
  shouldProcess?: boolean;
  onProgress?: (percentage: number) => void;
}

// Document service class
class DocumentService {
  private readonly baseUrl = '/document';

  // Get all documents
  async getAllDocuments(): Promise<DocumentMetadata[]> {
    const response = await apiClient.get<DocumentMetadata[]>(`${this.baseUrl}`);
    return response.data;
  }

  // Get document by ID
  async getDocumentById(id: string): Promise<DocumentMetadata> {
    const response = await apiClient.get<DocumentMetadata>(`${this.baseUrl}/${id}`);
    return response.data;
  }

  // Get document content by ID
  async getDocumentContent(id: string): Promise<DocumentContent> {
    const response = await apiClient.get<DocumentContent>(`${this.baseUrl}/${id}/content`);
    return response.data;
  }

  // Upload a single document
  async uploadDocument(
    file: File,
    options: UploadOptions = {}
  ): Promise<DocumentMetadata> {
    const formData = new FormData();
    formData.append('file', file);
    
    if (options.tags) {
      options.tags.forEach(tag => {
        formData.append('tags[]', tag);
      });
    }
    
    if (options.description) {
      formData.append('description', options.description);
    }
    
    formData.append('shouldProcess', options.shouldProcess !== false ? 'true' : 'false');
    
    const response = await apiClient.request<DocumentMetadata>({
      method: 'POST',
      url: `${this.baseUrl}/upload`,
      data: formData,
      headers: {
        'Content-Type': 'multipart/form-data',
      },
      onUploadProgress: (progressEvent) => {
        if (options.onProgress && progressEvent.total) {
          const percentage = Math.round(
            (progressEvent.loaded * 100) / progressEvent.total
          );
          options.onProgress(percentage);
        }
      },
    });
    
    return response.data;
  }

  // Upload multiple documents
  async uploadDocuments(
    files: File[],
    options: UploadOptions = {}
  ): Promise<DocumentMetadata[]> {
    const formData = new FormData();
    
    files.forEach((file, index) => {
      formData.append(`files[${index}]`, file);
    });
    
    if (options.tags) {
      options.tags.forEach(tag => {
        formData.append('tags[]', tag);
      });
    }
    
    if (options.description) {
      formData.append('description', options.description);
    }
    
    formData.append('shouldProcess', options.shouldProcess !== false ? 'true' : 'false');
    
    const response = await apiClient.request<DocumentMetadata[]>({
      method: 'POST',
      url: `${this.baseUrl}/batch-upload`,
      data: formData,
      headers: {
        'Content-Type': 'multipart/form-data',
      },
      onUploadProgress: (progressEvent) => {
        if (options.onProgress && progressEvent.total) {
          const percentage = Math.round(
            (progressEvent.loaded * 100) / progressEvent.total
          );
          options.onProgress(percentage);
        }
      },
    });
    
    return response.data;
  }

  // Get document processing status
  async getProcessingStatus(id: string): Promise<{ status: ProcessingStatus; progress?: number }> {
    const response = await apiClient.get<{ status: ProcessingStatus; progress?: number }>(
      `${this.baseUrl}/${id}/status`
    );
    return response.data;
  }

  // Delete document
  async deleteDocument(id: string): Promise<void> {
    await apiClient.delete(`${this.baseUrl}/${id}`);
  }

  // Update document metadata
  async updateDocument(
    id: string,
    updates: {
      title?: string;
      description?: string;
      tags?: string[];
    }
  ): Promise<DocumentMetadata> {
    const response = await apiClient.patch<DocumentMetadata>(
      `${this.baseUrl}/${id}`,
      updates
    );
    return response.data;
  }

  // Get document version history
  async getVersionHistory(id: string): Promise<DocumentMetadata[]> {
    const response = await apiClient.get<DocumentMetadata[]>(
      `${this.baseUrl}/${id}/versions`
    );
    return response.data;
  }

  // Get document preview URL
  getPreviewUrl(id: string): string {
    return `${process.env.NEXT_PUBLIC_API_URL}${this.baseUrl}/${id}/preview`;
  }

  // Download original document
  async downloadDocument(id: string): Promise<Blob> {
    const response = await apiClient.request<Blob>({
      method: 'GET',
      url: `${this.baseUrl}/${id}/download`,
      responseType: 'blob',
    });
    return response.data;
  }

  // Extract regulatory compliance information
  async extractComplianceInfo(id: string): Promise<{
    standard: string;
    section: string;
    compliant: boolean;
    details: string;
  }[]> {
    const response = await apiClient.get<{
      standard: string;
      section: string;
      compliant: boolean;
      details: string;
    }[]>(`${this.baseUrl}/${id}/compliance`);
    return response.data;
  }
}

export const documentService = new DocumentService();
export default documentService;

// components/documents/DocumentUploader.tsx
import React, { useState, useRef, useCallback } from 'react';
import { useDropzone } from 'react-dropzone';
import documentService, { DocumentMetadata, UploadOptions } from '../../services/documentService';
import Button from '../ui/Button';

interface DocumentUploaderProps {
  onUploadComplete?: (documents: DocumentMetadata[]) => void;
  onUploadError?: (error: Error) => void;
  maxFiles?: number;
  acceptedFileTypes?: string[];
  maxFileSize?: number; // in bytes
  tags?: string[];
  description?: string;
  autoProcess?: boolean;
}

const DocumentUploader: React.FC<DocumentUploaderProps> = ({
  onUploadComplete,
  onUploadError,
  maxFiles = 10,
  acceptedFileTypes = ['.pdf', '.docx', '.xlsx', '.html', '.pptx'],
  maxFileSize = 50 * 1024 * 1024, // 50MB default
  tags = [],
  description = '',
  autoProcess = true,
}) => {
  const [files, setFiles] = useState<File[]>([]);
  const [uploading, setUploading] = useState(false);
  const [progress, setProgress] = useState<Record<string, number>>({});
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [uploadedDocs, setUploadedDocs] = useState<DocumentMetadata[]>([]);
  
  // Accept only specified file types
  const acceptedTypes = acceptedFileTypes.reduce((acc, type) => {
    // Convert file extensions to MIME types
    const mimeType = type === '.pdf' ? 'application/pdf' :
                    type === '.docx' ? 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' :
                    type === '.xlsx' ? 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' :
                    type === '.html' ? 'text/html' :
                    type === '.pptx' ? 'application/vnd.openxmlformats-officedocument.presentationml.presentation' :
                    type;
    return { ...acc, [mimeType]: [] };
  }, {});

  // Handle file drop
  const onDrop = useCallback((acceptedFiles: File[], rejectedFiles: any[]) => {
    // Handle accepted files
    if (acceptedFiles.length > 0) {
      setFiles(prevFiles => [...prevFiles, ...acceptedFiles].slice(0, maxFiles));
    }
    
    // Handle rejected files
    if (rejectedFiles.length > 0) {
      const newErrors: Record<string, string> = { ...errors };
      
      rejectedFiles.forEach(rejected => {
        const { file, errors: fileErrors } = rejected;
        const errorMessages = fileErrors.map((err: any) => {
          if (err.code === 'file-too-large') {
            return `File is too large. Max size is ${maxFileSize / (1024 * 1024)}MB.`;
          }
          if (err.code === 'file-invalid-type') {
            return `Invalid file type. Accepted types: ${acceptedFileTypes.join(', ')}.`;
          }
          return err.message;
        }).join(', ');
        
        newErrors[file.name] = errorMessages;
      });
      
      setErrors(newErrors);
    }
  }, [maxFiles, errors, acceptedFileTypes, maxFileSize]);

  // Configure dropzone
  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: acceptedTypes,
    maxSize: maxFileSize,
    multiple: maxFiles > 1,
  });

  // Handle file removal
  const handleRemoveFile = (index: number) => {
    setFiles(files => files.filter((_, i) => i !== index));
    
    // Also remove any errors for this file
    const removedFile = files[index];
    if (removedFile && errors[removedFile.name]) {
      const newErrors = { ...errors };
      delete newErrors[removedFile.name];
      setErrors(newErrors);
    }
  };

  // Upload files
  const handleUpload = async () => {
    if (files.length === 0) return;
    
    setUploading(true);
    const uploadedDocuments: DocumentMetadata[] = [];
    
    try {
      // If only one file, use single upload method
      if (files.length === 1) {
        const options: UploadOptions = {
          tags,
          description,
          shouldProcess: autoProcess,
          onProgress: (percentage) => {
            setProgress(prev => ({
              ...prev,
              [files[0].name]: percentage
            }));
          }
        };
        
        const result = await documentService.uploadDocument(files[0], options);
        uploadedDocuments.push(result);
      } 
      // Otherwise use batch upload
      else {
        const options: UploadOptions = {
          tags,
          description,
          shouldProcess: autoProcess,
          onProgress: (percentage) => {
            // For batch uploads, apply the same progress to all files
            const newProgress: Record<string, number> = {};
            files.forEach(file => {
              newProgress[file.name] = percentage;
            });
            setProgress(newProgress);
          }
        };
        
        const results = await documentService.uploadDocuments(files, options);
        uploadedDocuments.push(...results);
      }
      
      // Update state and call callback
      setUploadedDocs(prev => [...prev, ...uploadedDocuments]);
      if (onUploadComplete) {
        onUploadComplete(uploadedDocuments);
      }
      
      // Clear files after successful upload
      setFiles([]);
      setProgress({});
    } catch (error) {
      console.error('Upload error:', error);
      if (onUploadError) {
        onUploadError(error as Error);
      }
      
      // Set general error for all files
      const newErrors: Record<string, string> = {};
      files.forEach(file => {
        newErrors[file.name] = 'Upload failed. Please try again.';
      });
      setErrors(newErrors);
    } finally {
      setUploading(false);
    }
  };

  // Format file size for display
  const formatFileSize = (bytes: number): string => {
    if (bytes < 1024) return bytes + ' bytes';
    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';
    return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
  };

  return (
    <div className="w-full space-y-4">
      {/* Dropzone */}
      <div
        {...getRootProps()}
        className={`
          p-6 border-2 border-dashed rounded-lg text-center cursor-pointer
          transition-colors duration-200
          ${isDragActive ? 'border-blue-500 bg-blue-50' : 'border-gray-300 hover:border-blue-400'}
          ${uploading ? 'opacity-50 pointer-events-none' : ''}
        `}
      >
        <input {...getInputProps()} />
        <div className="space-y-2">
          <div className="flex justify-center">
            <svg 
              xmlns="http://www.w3.org/2000/svg" 
              className="h-12 w-12 text-gray-400"
              fill="none" 
              viewBox="0 0 24 24" 
              stroke="currentColor"
            >
              <path 
                strokeLinecap="round" 
                strokeLinejoin="round" 
                strokeWidth={1.5} 
                d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" 
              />
            </svg>
          </div>
          <div className="text-gray-700 font-medium">
            {isDragActive ? 'Drop files here' : 'Drag & drop files here'}
          </div>
          <div className="text-gray-500 text-sm">
            or <span className="text-blue-500">browse files</span>
          </div>
          <div className="text-xs text-gray-400">
            Accepted file types: {acceptedFileTypes.join(', ')}
          </div>
          <div className="text-xs text-gray-400">
            Max file size: {formatFileSize(maxFileSize)}
          </div>
        </div>
      </div>

      {/* File list */}
      {files.length > 0 && (
        <div className="bg-gray-50 border border-gray-200 rounded-lg overflow-hidden">
          <div className="p-4 font-medium text-gray-700 border-b border-gray-200 bg-gray-100">
            Files to upload ({files.length}/{maxFiles})
          </div>
          <ul className="divide-y divide-gray-200">
            {files.map((file, index) => (
              <li key={`${file.name}-${index}`} className="p-4 flex items-center">
                {/* File icon based on type */}
                <div className="flex-shrink-0 mr-3">
                  <svg 
                    xmlns="http://www.w3.org/2000/svg" 
                    className="h-6 w-6 text-gray-500"
                    fill="none" 
                    viewBox="0 0 24 24" 
                    stroke="currentColor"
                  >
                    <path 
                      strokeLinecap="round" 
                      strokeLinejoin="round" 
                      strokeWidth={1.5} 
                      d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" 
                    />
                  </svg>
                </div>
                
                {/* File info */}
                <div className="flex-1 min-w-0">
                  <div className="text-sm font-medium text-gray-800 truncate">
                    {file.name}
                  </div>
                  <div className="text-xs text-gray-500">
                    {formatFileSize(file.size)}
                  </div>
                  
                  {/* Error message if any */}
                  {errors[file.name] && (
                    <div className="text-xs text-red-500 mt-1">
                      {errors[file.name]}
                    </div>
                  )}
                  
                  {/* Progress bar */}
                  {uploading && progress[file.name] !== undefined && (
                    <div className="w-full mt-2 bg-gray-200 rounded-full h-2">
                      <div 
                        className="bg-blue-600 h-2 rounded-full transition-all duration-300 ease-in-out" 
                        style={{ width: `${progress[file.name]}%` }}
                      />
                    </div>
                  )}
                </div>
                
                {/* Remove button */}
                {!uploading && (
                  <button
                    type="button"
                    onClick={() => handleRemoveFile(index)}
                    className="ml-2 flex-shrink-0 text-gray-400 hover:text-red-500 focus:outline-none"
                  >
                    <svg 
                      xmlns="http://www.w3.org/2000/svg" 
                      className="h-5 w-5" 
                      fill="none" 
                      viewBox="0 0 24 24" 
                      stroke="currentColor"
                    >
                      <path 
                        strokeLinecap="round" 
                        strokeLinejoin="round" 
                        strokeWidth={1.5} 
                        d="M6 18L18 6M6 6l12 12" 
                      />
                    </svg>
                  </button>
                )}
              </li>
            ))}
          </ul>
        </div>
      )}

      {/* Upload button */}
      {files.length > 0 && (
        <div className="flex justify-end">
          <Button
            variant="primary"
            onClick={handleUpload}
            isLoading={uploading}
            disabled={uploading || Object.keys(errors).length > 0}
            leftIcon={
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                className="h-5 w-5" 
                fill="none" 
                viewBox="0 0 24 24" 
                stroke="currentColor"
              >
                <path 
                  strokeLinecap="round" 
                  strokeLinejoin="round" 
                  strokeWidth={1.5} 
                  d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" 
                />
              </svg>
            }
          >
            {uploading ? 'Uploading...' : `Upload ${files.length > 1 ? 'Files' : 'File'}`}
          </Button>
        </div>
      )}

      {/* Recently uploaded documents */}
      {uploadedDocs.length > 0 && (
        <div className="mt-8">
          <h3 className="text-lg font-medium text-gray-700 mb-3">Recently Uploaded Documents</h3>
          <ul className="divide-y divide-gray-200 border border-gray-200 rounded-lg overflow-hidden">
            {uploadedDocs.map((doc) => (
              <li key={doc.id} className="p-4 flex items-center">
                <div className="flex-shrink-0 mr-3">
                  <svg 
                    xmlns="http://www.w3.org/2000/svg" 
                    className="h-6 w-6 text-green-500"
                    fill="none" 
                    viewBox="0 0 24 24" 
                    stroke="currentColor"
                  >
                    <path 
                      strokeLinecap="round" 
                      strokeLinejoin="round" 
                      strokeWidth={1.5} 
                      d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" 
                    />
                  </svg>
                </div>
                <div className="flex-1">
                  <div className="text-sm font-medium text-gray-800">
                    {doc.title}
                  </div>
                  <div className="text-xs text-gray-500 flex items-center">
                    <span className="mr-2">Status: {doc.status}</span>
                    <span>Uploaded: {new Date(doc.createdAt).toLocaleString()}</span>
                  </div>
                </div>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

export default DocumentUploader;

// src/frontend/components/document/DocumentViewer.tsx
import React, { useState, useEffect } from 'react';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { Tabs, Tab } from '../ui/Tabs';

// Types
export interface DocumentPage {
  pageNumber: number;
  content: string;
  annotations?: Annotation[];
}

export interface Annotation {
  id: string;
  pageNumber: number;
  x: number;
  y: number;
  width: number;
  height: number;
  text: string;
  type: 'highlight' | 'note' | 'requirement' | 'competency';
  color?: string;
  metadata?: Record<string, any>;
}

export interface DocumentMetadata {
  title: string;
  author?: string;
  createdDate?: Date;
  modifiedDate?: Date;
  totalPages: number;
  fileType: string;
  fileSize: number;
  tags?: string[];
}

export interface ExtractedStructure {
  headings: {
    level: number;
    text: string;
    pageNumber: number;
  }[];
  sections: {
    title: string;
    pageRange: [number, number];
  }[];
  tables: {
    pageNumber: number;
    title?: string;
    headers?: string[];
    rowCount: number;
  }[];
}

export interface ExtractedRegulation {
  id: string;
  text: string;
  reference: string;
  pageNumber: number;
  confidence: number;
}

export interface ExtractedTrainingRequirement {
  id: string;
  text: string;
  type: string;
  pageNumber: number;
  relatedRegulations?: string[];
  confidence: number;
}

interface DocumentViewerProps {
  documentId: string;
  metadata: DocumentMetadata;
  pages: DocumentPage[];
  structure?: ExtractedStructure;
  regulations?: ExtractedRegulation[];
  trainingRequirements?: ExtractedTrainingRequirement[];
  onAnnotationCreate: (annotation: Omit<Annotation, 'id'>) => Promise<Annotation>;
  onAnnotationUpdate: (annotation: Annotation) => Promise<void>;
  onAnnotationDelete: (annotationId: string) => Promise<void>;
}

export const DocumentViewer: React.FC<DocumentViewerProps> = ({
  documentId,
  metadata,
  pages,
  structure,
  regulations,
  trainingRequirements,
  onAnnotationCreate,
  onAnnotationUpdate,
  onAnnotationDelete
}) => {
  const [currentPage, setCurrentPage] = useState(1);
  const [zoom, setZoom] = useState(100);
  const [selectedAnnotation, setSelectedAnnotation] = useState<Annotation | null>(null);
  const [isAddingAnnotation, setIsAddingAnnotation] = useState(false);
  const [newAnnotation, setNewAnnotation] = useState<Partial<Annotation> | null>(null);
  const [showExtractedData, setShowExtractedData] = useState(false);
  const [activeTab, setActiveTab] = useState<'structure' | 'regulations' | 'requirements'>('structure');

  // Handle zoom in
  const handleZoomIn = () => {
    setZoom(prev => Math.min(prev + 25, 200));
  };

  // Handle zoom out
  const handleZoomOut = () => {
    setZoom(prev => Math.max(prev - 25, 50));
  };

  // Handle page navigation
  const handlePageChange = (newPage: number) => {
    if (newPage >= 1 && newPage <= metadata.totalPages) {
      setCurrentPage(newPage);
    }
  };

  // Get current page content
  const currentPageContent = pages.find(page => page.pageNumber === currentPage);
  
  // Get annotations for current page
  const currentAnnotations = currentPageContent?.annotations || [];

  // Create a new annotation
  const handleCreateAnnotation = async (e: React.MouseEvent<HTMLDivElement>) => {
    if (!isAddingAnnotation) return;
    
    const containerRect = e.currentTarget.getBoundingClientRect();
    const x = ((e.clientX - containerRect.left) / containerRect.width) * 100;
    const y = ((e.clientY - containerRect.top) / containerRect.height) * 100;
    
    const newAnnotationData: Omit<Annotation, 'id'> = {
      pageNumber: currentPage,
      x,
      y,
      width: 10,
      height: 5,
      text: '',
      type: 'note'
    };
    
    try {
      const annotation = await onAnnotationCreate(newAnnotationData);
      setSelectedAnnotation(annotation);
      setIsAddingAnnotation(false);
    } catch (error) {
      console.error('Failed to create annotation:', error);
    }
  };

  // Update annotation
  const handleUpdateAnnotation = async (text: string) => {
    if (!selectedAnnotation) return;
    
    try {
      const updatedAnnotation = { ...selectedAnnotation, text };
      await onAnnotationUpdate(updatedAnnotation);
      setSelectedAnnotation(null);
    } catch (error) {
      console.error('Failed to update annotation:', error);
    }
  };

  // Delete annotation
  const handleDeleteAnnotation = async () => {
    if (!selectedAnnotation) return;
    
    try {
      await onAnnotationDelete(selectedAnnotation.id);
      setSelectedAnnotation(null);
    } catch (error) {
      console.error('Failed to delete annotation:', error);
    }
  };

  // Render annotations
  const renderAnnotations = () => {
    return currentAnnotations.map(annotation => (
      <div
        key={annotation.id}
        className={`absolute cursor-pointer border-2 ${
          annotation.type === 'highlight' ? 'border-yellow-400 bg-yellow-100 bg-opacity-50' :
          annotation.type === 'note' ? 'border-blue-400 bg-blue-100 bg-opacity-50' :
          annotation.type === 'requirement' ? 'border-purple-400 bg-purple-100 bg-opacity-50' :
          'border-green-400 bg-green-100 bg-opacity-50'
        }`}
        style={{
          left: `${annotation.x}%`,
          top: `${annotation.y}%`,
          width: `${annotation.width}%`,
          height: `${annotation.height}%`
        }}
        onClick={(e) => {
          e.stopPropagation();
          setSelectedAnnotation(annotation);
        }}
      />
    ));
  };

  // Structure tabs for extracted data
  const extractedDataTabs: Tab[] = [
    {
      id: 'structure',
      label: 'Document Structure',
      content: (
        <div className="overflow-y-auto max-h-[600px]">
          {structure ? (
            <div className="space-y-4">
              <div>
                <h3 className="text-base font-medium mb-2">Headings</h3>
                <ul className="space-y-1">
                  {structure.headings.map((heading, index) => (
                    <li
                      key={index}
                      className="flex items-center py-1 hover:bg-gray-50 cursor-pointer"
                      style={{ paddingLeft: `${heading.level * 0.5}rem` }}
                      onClick={() => handlePageChange(heading.pageNumber)}
                    >
                      <span className="text-blue-600 text-xs mr-2">P{heading.pageNumber}</span>
                      <span>{heading.text}</span>
                    </li>
                  ))}
                </ul>
              </div>
              
              <div>
                <h3 className="text-base font-medium mb-2">Sections</h3>
                <ul className="space-y-1">
                  {structure.sections.map((section, index) => (
                    <li
                      key={index}
                      className="flex items-center py-1 hover:bg-gray-50 cursor-pointer"
                      onClick={() => handlePageChange(section.pageRange[0])}
                    >
                      <span className="text-blue-600 text-xs mr-2">
                        P{section.pageRange[0]}-{section.pageRange[1]}
                      </span>
                      <span>{section.title}</span>
                    </li>
                  ))}
                </ul>
              </div>
              
              <div>
                <h3 className="text-base font-medium mb-2">Tables</h3>
                <ul className="space-y-1">
                  {structure.tables.map((table, index) => (
                    <li
                      key={index}
                      className="flex items-center py-1 hover:bg-gray-50 cursor-pointer"
                      onClick={() => handlePageChange(table.pageNumber)}
                    >
                      <span className="text-blue-600 text-xs mr-2">P{table.pageNumber}</span>
                      <span>
                        {table.title || `Table ${index + 1}`} ({table.rowCount} rows)
                        {table.headers && ` - Headers: ${table.headers.join(', ')}`}
                      </span>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          ) : (
            <div className="p-4 text-center text-gray-500">
              No structure data available for this document.
            </div>
          )}
        </div>
      )
    },
    {
      id: 'regulations',
      label: 'Regulations',
      content: (
        <div className="overflow-y-auto max-h-[600px]">
          {regulations && regulations.length > 0 ? (
            <ul className="divide-y">
              {regulations.map(regulation => (
                <li
                  key={regulation.id}
                  className="py-3 hover:bg-gray-50 cursor-pointer"
                  onClick={() => handlePageChange(regulation.pageNumber)}
                >
                  <div className="flex items-start">
                    <div className="flex-shrink-0 pt-1">
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                        {Math.round(regulation.confidence * 100)}%
                      </span>
                    </div>
                    <div className="ml-3">
                      <p className="text-sm font-medium">{regulation.reference}</p>
                      <p className="text-sm text-gray-500 mt-1">{regulation.text}</p>
                      <p className="text-xs text-gray-400 mt-1">Page {regulation.pageNumber}</p>
                    </div>
                  </div>
                </li>
              ))}
            </ul>
          ) : (
            <div className="p-4 text-center text-gray-500">
              No regulations extracted from this document.
            </div>
          )}
        </div>
      )
    },
    {
      id: 'requirements',
      label: 'Training Requirements',
      content: (
        <div className="overflow-y-auto max-h-[600px]">
          {trainingRequirements && trainingRequirements.length > 0 ? (
            <ul className="divide-y">
              {trainingRequirements.map(requirement => (
                <li
                  key={requirement.id}
                  className="py-3 hover:bg-gray-50 cursor-pointer"
                  onClick={() => handlePageChange(requirement.pageNumber)}
                >
                  <div className="flex items-start">
                    <div className="flex-shrink-0 pt-1">
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                        {requirement.type}
                      </span>
                    </div>
                    <div className="ml-3">
                      <p className="text-sm text-gray-500">{requirement.text}</p>
                      <div className="mt-1 flex flex-wrap gap-1">
                        {requirement.relatedRegulations?.map(ref => (
                          <span key={ref} className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800">
                            {ref}
                          </span>
                        ))}
                      </div>
                      <p className="text-xs text-gray-400 mt-1">
                        Page {requirement.pageNumber} | Confidence: {Math.round(requirement.confidence * 100)}%
                      </p>
                    </div>
                  </div>
                </li>
              ))}
            </ul>
          ) : (
            <div className="p-4 text-center text-gray-500">
              No training requirements extracted from this document.
            </div>
          )}
        </div>
      )
    }
  ];

  return (
    <div className="document-viewer">
      {/* Document info and controls */}
      <div className="flex flex-col md:flex-row justify-between mb-4">
        <div>
          <h2 className="text-xl font-bold">{metadata.title}</h2>
          <p className="text-sm text-gray-500">
            {metadata.fileType.toUpperCase()} | {(metadata.fileSize / 1024 / 1024).toFixed(2)} MB | {metadata.totalPages} pages
          </p>
        </div>
        
        <div className="flex flex-wrap gap-2 mt-2 md:mt-0">
          <Button
            variant="outline"
            size="small"
            onClick={() => setIsAddingAnnotation(!isAddingAnnotation)}
          >
            {isAddingAnnotation ? 'Cancel' : 'Add Annotation'}
          </Button>
          
          <Button
            variant="outline"
            size="small"
            onClick={() => setShowExtractedData(!showExtractedData)}
          >
            {showExtractedData ? 'Hide Extracted Data' : 'Show Extracted Data'}
          </Button>
        </div>
      </div>
      
      <div className="flex flex-col lg:flex-row gap-4">
        {/* Main document view */}
        <div className={`flex-grow ${showExtractedData ? 'lg:w-2/3' : 'w-full'}`}>
          <div className="bg-white border rounded-lg shadow overflow-hidden">
            {/* Toolbar */}
            <div className="flex items-center justify-between px-4 py-2 bg-gray-50 border-b">
              <div className="flex items-center space-x-2">
                <Button
                  variant="outline"
                  size="small"
                  onClick={() => handlePageChange(currentPage - 1)}
                  disabled={currentPage <= 1}
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7"></path>
                  </svg>
                </Button>
                
                <span className="text-sm">
                  Page {currentPage} of {metadata.totalPages}
                </span>
                
                <Button
                  variant="outline"
                  size="small"
                  onClick={() => handlePageChange(currentPage + 1)}
                  disabled={currentPage >= metadata.totalPages}
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </Button>
              </div>
              
              <div className="flex items-center space-x-2">
                <Button
                  variant="outline"
                  size="small"
                  onClick={handleZoomOut}
                  disabled={zoom <= 50}
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M20 12H4"></path>
                  </svg>
                </Button>
                
                <span className="text-sm">{zoom}%</span>
                
                <Button
                  variant="outline"
                  size="small"
                  onClick={handleZoomIn}
                  disabled={zoom >= 200}
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 4v16m8-8H4"></path>
                  </svg>
                </Button>
              </div>
            </div>
            
            {/* Document content */}
            <div
              className="relative bg-gray-100 p-4 overflow-auto"
              style={{ height: '600px' }}
              onClick={handleCreateAnnotation}
            >
              {currentPageContent ? (
                <div
                  className="mx-auto bg-white shadow-lg relative"
                  style={{
                    width: `${zoom}%`,
                    maxWidth: '1000px',
                    minHeight: '500px'
                  }}
                >
                  {/* Render the page content */}
                  <div 
                    className="p-4"
                    dangerouslySetInnerHTML={{ __html: currentPageContent.content }}
                  />
                  
                  {/* Render annotations */}
                  {renderAnnotations()}
                </div>
              ) : (
                <div className="flex items-center justify-center h-full">
                  <p className="text-gray-500">Loading page content...</p>
                </div>
              )}
            </div>
          </div>
          
          {/* Annotation editor */}
          {selectedAnnotation && (
            <Card className="mt-4">
              <div className="space-y-4">
                <div>
                  <label htmlFor="annotation-text" className="block text-sm font-medium text-gray-700 mb-1">
                    Annotation
                  </label>
                  <textarea
                    id="annotation-text"
                    className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    rows={3}
                    value={selectedAnnotation.text}
                    onChange={(e) => setSelectedAnnotation({
                      ...selectedAnnotation,
                      text: e.target.value
                    })}
                  />
                </div>
                
                <div className="flex justify-end space-x-2">
                  <Button
                    variant="outline"
                    size="small"
                    onClick={() => setSelectedAnnotation(null)}
                  >
                    Cancel
                  </Button>
                  
                  <Button
                    variant="outline"
                    size="small"
                    onClick={handleDeleteAnnotation}
                  >
                    Delete
                  </Button>
                  
                  <Button
                    variant="primary"
                    size="small"
                    onClick={() => handleUpdateAnnotation(selectedAnnotation.text)}
                  >
                    Save
                  </Button>
                </div>
              </div>
            </Card>
          )}
        </div>
        
        {/* Extracted data sidebar */}
        {showExtractedData && (
          <div className="lg:w-1/3">
            <Card>
              <h3 className="text-lg font-medium mb-4">Extracted Data</h3>
              
              <Tabs
                tabs={extractedDataTabs}
                defaultTabId="structure"
                onChange={(tabId) => setActiveTab(tabId as any)}
              />
            </Card>
          </div>
        )}
      </div>
    </div>
  );
};
// src/frontend/components/error/ErrorBoundary.tsx
import React, { Component, ErrorInfo, ReactNode } from 'react';
import { ErrorFallback } from './ErrorFallback';

interface Props {
  children: ReactNode;
  fallback?: ReactNode;
  onError?: (error: Error, errorInfo: ErrorInfo) => void;
}

interface State {
  hasError: boolean;
  error: Error | null;
  errorInfo: ErrorInfo | null;
}

export class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = {
      hasError: false,
      error: null,
      errorInfo: null
    };
  }

  static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error, errorInfo: null };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {
    this.setState({ errorInfo });
    
    if (this.props.onError) {
      this.props.onError(error, errorInfo);
    }
    
    // Log the error to an error reporting service
    console.error('Uncaught error:', error, errorInfo);
  }

  render(): ReactNode {
    if (this.state.hasError) {
      if (this.props.fallback) {
        return this.props.fallback;
      }
      
      return (
        <ErrorFallback 
          error={this.state.error!} 
          errorInfo={this.state.errorInfo!} 
          resetError={() => this.setState({ hasError: false, error: null, errorInfo: null })}
        />
      );
    }

    return this.props.children;
  }
}

// src/frontend/components/error/ErrorFallback.tsx
import React from 'react';
import { Button } from '../ui/Button';
import { Card } from '../ui/Card';

interface ErrorFallbackProps {
  error: Error;
  errorInfo?: React.ErrorInfo;
  resetError?: () => void;
}

export const ErrorFallback: React.FC<ErrorFallbackProps> = ({ 
  error, 
  errorInfo, 
  resetError 
}) => {
  return (
    <Card className="max-w-xl mx-auto my-8">
      <div className="p-6">
        <div className="flex items-center mb-6">
          <div className="rounded-full bg-red-100 p-3 mr-4">
            <svg className="h-6 w-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
            </svg>
          </div>
          <h3 className="text-xl font-semibold text-gray-900">Something went wrong</h3>
        </div>
        
        <div className="mb-6">
          <p className="text-red-600 font-medium mb-2">{error.toString()}</p>
          <p className="text-gray-600 mb-4">
            Sorry, an error occurred while rendering this component. 
            Our team has been notified of the issue.
          </p>
          
          {resetError && (
            <div className="mb-6">
              <Button 
                variant="primary" 
                onClick={resetError}
              >
                Try Again
              </Button>
            </div>
          )}
        </div>
        
        {errorInfo && (
          <div className="mt-4">
            <details className="cursor-pointer">
              <summary className="text-sm font-medium text-gray-700 mb-2">Technical Details</summary>
              <pre className="bg-gray-100 p-4 rounded text-xs overflow-auto max-h-64">
                {errorInfo.componentStack}
              </pre>
            </details>
          </div>
        )}
      </div>
    </Card>
  );
};

// src/frontend/components/error/ErrorPage.tsx
import React from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Button } from '../ui/Button';

interface ErrorPageProps {
  code?: number;
  title?: string;
  message?: string;
  showHomeButton?: boolean;
  showBackButton?: boolean;
}

export const ErrorPage: React.FC<ErrorPageProps> = ({
  code = 500,
  title = 'Server Error',
  message = 'Sorry, something went wrong on our end. Please try again later.',
  showHomeButton = true,
  showBackButton = true
}) => {
  const navigate = useNavigate();
  
  const getErrorImage = (): string => {
    switch (code) {
      case 404:
        return '/images/error-404.svg';
      case 403:
        return '/images/error-403.svg';
      case 500:
      default:
        return '/images/error-500.svg';
    }
  };

  const getErrorTitle = (): string => {
    if (title) return title;
    
    switch (code) {
      case 404:
        return 'Page Not Found';
      case 403:
        return 'Access Denied';
      case 500:
      default:
        return 'Server Error';
    }
  };

  const getErrorMessage = (): string => {
    if (message) return message;
    
    switch (code) {
      case 404:
        return "Sorry, we couldn't find the page you're looking for.";
      case 403:
        return "Sorry, you don't have permission to access this page.";
      case 500:
      default:
        return "Sorry, something went wrong on our end. Please try again later.";
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full text-center">
        <img
          className="mx-auto h-48 w-auto mb-8"
          src={getErrorImage()}
          alt={`Error ${code}`}
        />
        
        <h1 className="text-6xl font-bold text-gray-900 mb-4">{code}</h1>
        <h2 className="text-2xl font-semibold text-gray-800 mb-3">{getErrorTitle()}</h2>
        <p className="text-gray-600 mb-8">{getErrorMessage()}</p>
        
        <div className="flex flex-col sm:flex-row items-center justify-center space-y-4 sm:space-y-0 sm:space-x-4">
          {showHomeButton && (
            <Link to="/">
              <Button variant="primary">
                Back to Home
              </Button>
            </Link>
          )}
          
          {showBackButton && (
            <Button 
              variant="outline" 
              onClick={() => navigate(-1)}
            >
              Go Back
            </Button>
          )}
        </div>
      </div>
    </div>
  );
};

// src/frontend/components/error/NotFoundPage.tsx
import React from 'react';
import { ErrorPage } from './ErrorPage';

export const NotFoundPage: React.FC = () => {
  return (
    <ErrorPage
      code={404}
      title="Page Not Found"
      message="Sorry, we couldn't find the page you're looking for."
    />
  );
};

// src/frontend/components/error/ForbiddenPage.tsx
import React from 'react';
import { ErrorPage } from './ErrorPage';

export const ForbiddenPage: React.FC = () => {
  return (
    <ErrorPage
      code={403}
      title="Access Denied"
      message="Sorry, you don't have permission to access this page."
    />
  );
};

// src/frontend/components/error/NetworkErrorMessage.tsx
import React from 'react';
import { Alert } from '../ui/Alert';

interface NetworkErrorMessageProps {
  error: Error | string;
  onRetry?: () => void;
}

export const NetworkErrorMessage: React.FC<NetworkErrorMessageProps> = ({
  error,
  onRetry
}) => {
  const errorMessage = typeof error === 'string' ? error : error.message;
  
  return (
    <Alert
      type="error"
      title="Network Error"
      message={
        <div>
          <p>{errorMessage || 'Failed to connect to the server. Please check your internet connection and try again.'}</p>
          {onRetry && (
            <button
              className="text-red-800 underline font-medium mt-2"
              onClick={onRetry}
            >
              Try Again
            </button>
          )}
        </div>
      }
    />
  );
};

// src/frontend/components/error/EmptyState.tsx
import React, { ReactNode } from 'react';
import { Button } from '../ui/Button';

interface EmptyStateProps {
  title: string;
  description: string;
  icon?: ReactNode;
  actionLabel?: string;
  onAction?: () => void;
  secondaryActionLabel?: string;
  onSecondaryAction?: () => void;
}

export const EmptyState: React.FC<EmptyStateProps> = ({
  title,
  description,
  icon,
  actionLabel,
  onAction,
  secondaryActionLabel,
  onSecondaryAction
}) => {
  return (
    <div className="text-center py-12 px-4">
      {icon || (
        <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"></path>
        </svg>
      )}
      <h3 className="mt-2 text-lg font-medium text-gray-900">{title}</h3>
      <p className="mt-1 text-sm text-gray-500">{description}</p>
      
      {(actionLabel || secondaryActionLabel) && (
        <div className="mt-6 flex justify-center space-x-3">
          {actionLabel && onAction && (
            <Button variant="primary" onClick={onAction}>
              {actionLabel}
            </Button>
          )}
          
          {secondaryActionLabel && onSecondaryAction && (
            <Button variant="outline" onClick={onSecondaryAction}>
              {secondaryActionLabel}
            </Button>
          )}
        </div>
      )}
    </div>
  );
};

// src/frontend/hooks/useErrorHandler.ts
import { useState, useCallback } from 'react';

export interface ErrorState {
  hasError: boolean;
  error: Error | null;
  message: string;
}

export function useErrorHandler(initialState: ErrorState = { hasError: false, error: null, message: '' }) {
  const [errorState, setErrorState] = useState<ErrorState>(initialState);
  
  const handleError = useCallback((error: unknown) => {
    console.error('Error handled:', error);
    
    if (error instanceof Error) {
      setErrorState({
        hasError: true,
        error,
        message: error.message
      });
    } else if (typeof error === 'string') {
      setErrorState({
        hasError: true,
        error: new Error(error),
        message: error
      });
    } else {
      setErrorState({
        hasError: true,
        error: new Error('An unknown error occurred'),
        message: 'An unknown error occurred'
      });
    }
  }, []);
  
  const clearError = useCallback(() => {
    setErrorState({
      hasError: false,
      error: null,
      message: ''
    });
  }, []);
  
  return {
    errorState,
    handleError,
    clearError
  };
}

// src/frontend/components/exercises/ExerciseLibrary.tsx
import React, { useState, useEffect } from 'react';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { Input } from '../ui/Input';
import { DataTable, Column } from '../ui/DataTable';
import { Alert } from '../ui/Alert';
import { Modal } from '../ui/Modal';

// Types
export interface Exercise {
  id: string;
  title: string;
  description: string;
  type: 'knowledge_check' | 'simulation' | 'practical' | 'assessment';
  duration: number; // in minutes
  difficulty: 'beginner' | 'intermediate' | 'advanced' | 'expert';
  objectives: string[];
  assessmentCriteria: string[];
  resources: string[];
  tags: string[];
  author: string;
  createdAt: Date;
  updatedAt: Date;
  status: 'draft' | 'published' | 'archived';
  complianceStatus?: 'compliant' | 'non_compliant' | 'pending_review';
  relatedRegulations?: string[];
}

export interface ExerciseFilter {
  type?: string;
  difficulty?: string;
  status?: string;
  searchTerm?: string;
  tags?: string[];
}

interface ExerciseFormData {
  title: string;
  description: string;
  type: string;
  duration: number;
  difficulty: string;
  objectives: string[];
  assessmentCriteria: string[];
  resources: string[];
  tags: string[];
  status: string;
  relatedRegulations?: string[];
}

// Exercise Library Component
interface ExerciseLibraryProps {
  exercises: Exercise[];
  tags: string[];
  regulations: { id: string; code: string; title: string }[];
  onCreateExercise: (exercise: Omit<Exercise, 'id' | 'author' | 'createdAt' | 'updatedAt'>) => Promise<Exercise>;
  onUpdateExercise: (id: string, updates: Partial<Exercise>) => Promise<Exercise>;
  onDeleteExercise: (id: string) => Promise<void>;
  onDuplicateExercise: (id: string) => Promise<Exercise>;
  onImportExercises: (file: File) => Promise<{ success: number; failed: number }>;
  onExportExercises: (ids: string[]) => Promise<void>;
}

export const ExerciseLibrary: React.FC<ExerciseLibraryProps> = ({
  exercises,
  tags,
  regulations,
  onCreateExercise,
  onUpdateExercise,
  onDeleteExercise,
  onDuplicateExercise,
  onImportExercises,
  onExportExercises
}) => {
  const [filteredExercises, setFilteredExercises] = useState<Exercise[]>(exercises);
  const [selectedExercises, setSelectedExercises] = useState<Set<string>>(new Set());
  const [filter, setFilter] = useState<ExerciseFilter>({});
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [isImportModalOpen, setIsImportModalOpen] = useState(false);
  const [selectedExercise, setSelectedExercise] = useState<Exercise | null>(null);
  const [formData, setFormData] = useState<ExerciseFormData>({
    title: '',
    description: '',
    type: 'knowledge_check',
    duration: 30,
    difficulty: 'intermediate',
    objectives: [''],
    assessmentCriteria: [''],
    resources: [''],
    tags: [],
    status: 'draft'
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [alertMessage, setAlertMessage] = useState<{ type: 'success' | 'error'; message: string } | null>(null);
  const [importFile, setImportFile] = useState<File | null>(null);

  // Update filtered exercises when exercises or filters change
  useEffect(() => {
    let filtered = [...exercises];
    
    if (filter.type) {
      filtered = filtered.filter(ex => ex.type === filter.type);
    }
    
    if (filter.difficulty) {
      filtered = filtered.filter(ex => ex.difficulty === filter.difficulty);
    }
    
    if (filter.status) {
      filtered = filtered.filter(ex => ex.status === filter.status);
    }
    
    if (filter.searchTerm) {
      const term = filter.searchTerm.toLowerCase();
      filtered = filtered.filter(ex => 
        ex.title.toLowerCase().includes(term) || 
        ex.description.toLowerCase().includes(term) ||
        ex.tags.some(tag => tag.toLowerCase().includes(term))
      );
    }
    
    if (filter.tags && filter.tags.length > 0) {
      filtered = filtered.filter(ex => 
        filter.tags?.some(tag => ex.tags.includes(tag))
      );
    }
    
    setFilteredExercises(filtered);
  }, [exercises, filter]);

  // Reset form data
  const resetFormData = () => {
    setFormData({
      title: '',
      description: '',
      type: 'knowledge_check',
      duration: 30,
      difficulty: 'intermediate',
      objectives: [''],
      assessmentCriteria: [''],
      resources: [''],
      tags: [],
      status: 'draft'
    });
  };

  // Set form data from exercise
  const setFormDataFromExercise = (exercise: Exercise) => {
    setFormData({
      title: exercise.title,
      description: exercise.description,
      type: exercise.type,
      duration: exercise.duration,
      difficulty: exercise.difficulty,
      objectives: [...exercise.objectives],
      assessmentCriteria: [...exercise.assessmentCriteria],
      resources: [...exercise.resources],
      tags: [...exercise.tags],
      status: exercise.status,
      relatedRegulations: exercise.relatedRegulations
    });
  };

  // Handle creating new exercise
  const handleCreateExercise = async () => {
    setIsSubmitting(true);
    
    try {
      // Validate non-empty arrays
      const objectives = formData.objectives.filter(item => item.trim() !== '');
      const assessmentCriteria = formData.assessmentCriteria.filter(item => item.trim() !== '');
      const resources = formData.resources.filter(item => item.trim() !== '');
      
      if (objectives.length === 0) {
        throw new Error('Please add at least one learning objective');
      }
      
      if (assessmentCriteria.length === 0) {
        throw new Error('Please add at least one assessment criterion');
      }
      
      const newExercise = await onCreateExercise({
        title: formData.title,
        description: formData.description,
        type: formData.type as any,
        duration: formData.duration,
        difficulty: formData.difficulty as any,
        objectives,
        assessmentCriteria,
        resources,
        tags: formData.tags,
        status: formData.status as any,
        relatedRegulations: formData.relatedRegulations
      });
      
      setAlertMessage({
        type: 'success',
        message: 'Exercise created successfully'
      });
      
      setIsCreateModalOpen(false);
      resetFormData();
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to create exercise: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // Handle updating exercise
  const handleUpdateExercise = async () => {
    if (!selectedExercise) return;
    
    setIsSubmitting(true);
    
    try {
      // Validate non-empty arrays
      const objectives = formData.objectives.filter(item => item.trim() !== '');
      const assessmentCriteria = formData.assessmentCriteria.filter(item => item.trim() !== '');
      const resources = formData.resources.filter(item => item.trim() !== '');
      
      if (objectives.length === 0) {
        throw new Error('Please add at least one learning objective');
      }
      
      if (assessmentCriteria.length === 0) {
        throw new Error('Please add at least one assessment criterion');
      }
      
      await onUpdateExercise(selectedExercise.id, {
        title: formData.title,
        description: formData.description,
        type: formData.type as any,
        duration: formData.duration,
        difficulty: formData.difficulty as any,
        objectives,
        assessmentCriteria,
        resources,
        tags: formData.tags,
        status: formData.status as any,
        relatedRegulations: formData.relatedRegulations
      });
      
      setAlertMessage({
        type: 'success',
        message: 'Exercise updated successfully'
      });
      
      setIsEditModalOpen(false);
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to update exercise: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // Handle deleting exercise
  const handleDeleteExercise = async () => {
    if (!selectedExercise) return;
    
    setIsSubmitting(true);
    
    try {
      await onDeleteExercise(selectedExercise.id);
      
      setAlertMessage({
        type: 'success',
        message: 'Exercise deleted successfully'
      });
      
      setIsDeleteModalOpen(false);
      setSelectedExercise(null);
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to delete exercise: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // Handle duplicating exercise
  const handleDuplicateExercise = async (id: string) => {
    try {
      const duplicatedExercise = await onDuplicateExercise(id);
      
      setAlertMessage({
        type: 'success',
        message: 'Exercise duplicated successfully'
      });
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to duplicate exercise: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };

  // Handle importing exercises
  const handleImportExercises = async () => {
    if (!importFile) return;
    
    setIsSubmitting(true);
    
    try {
      const result = await onImportExercises(importFile);
      
      setAlertMessage({
        type: 'success',
        message: `Imported ${result.success} exercises successfully. ${result.failed > 0 ? `Failed to import ${result.failed} exercises.` : ''}`
      });
      
      setIsImportModalOpen(false);
      setImportFile(null);
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to import exercises: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // Handle exporting selected exercises
  const handleExportSelectedExercises = async () => {
    if (selectedExercises.size === 0) {
      setAlertMessage({
        type: 'error',
        message: 'Please select at least one exercise to export'
      });
      return;
    }
    
    try {
      await onExportExercises(Array.from(selectedExercises));
      
      setAlertMessage({
        type: 'success',
        message: `Exported ${selectedExercises.size} exercises successfully`
      });
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to export exercises: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };

  // Handle form input change
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  // Handle multi-field input change (objectives, criteria, resources)
  const handleArrayItemChange = (field: 'objectives' | 'assessmentCriteria' | 'resources', index: number, value: string) => {
    setFormData(prev => {
      const newArray = [...prev[field]];
      newArray[index] = value;
      return { ...prev, [field]: newArray };
    });
  };

  // Add new item to array field
  const handleAddArrayItem = (field: 'objectives' | 'assessmentCriteria' | 'resources') => {
    setFormData(prev => {
      return { ...prev, [field]: [...prev[field], ''] };
    });
  };

  // Remove item from array field
  const handleRemoveArrayItem = (field: 'objectives' | 'assessmentCriteria' | 'resources', index: number) => {
    setFormData(prev => {
      const newArray = [...prev[field]];
      newArray.splice(index, 1);
      return { ...prev, [field]: newArray };
    });
  };

  // Handle tag selection change
  const handleTagChange = (tag: string) => {
    setFormData(prev => {
      if (prev.tags.includes(tag)) {
        return { ...prev, tags: prev.tags.filter(t => t !== tag) };
      } else {
        return { ...prev, tags: [...prev.tags, tag] };
      }
    });
  };

  // Handle regulation selection change
  const handleRegulationChange = (regulationId: string) => {
    setFormData(prev => {
      const currentRegs = prev.relatedRegulations || [];
      if (currentRegs.includes(regulationId)) {
        return { ...prev, relatedRegulations: currentRegs.filter(r => r !== regulationId) };
      } else {
        return { ...prev, relatedRegulations: [...currentRegs, regulationId] };
      }
    });
  };

  // Handle row selection
  const handleRowSelect = (id: string, selected: boolean) => {
    setSelectedExercises(prev => {
      const newSelected = new Set(prev);
      if (selected) {
        newSelected.add(id);
      } else {
        newSelected.delete(id);
      }
      return newSelected;
    });
  };

  // Handle select all
  const handleSelectAll = (selected: boolean) => {
    if (selected) {
      setSelectedExercises(new Set(filteredExercises.map(ex => ex.id)));
    } else {
      setSelectedExercises(new Set());
    }
  };

  // Get status badge
  const getStatusBadge = (status: string) => {
    let bgColor = 'bg-gray-100';
    let textColor = 'text-gray-800';
    
    switch (status) {
      case 'draft':
        bgColor = 'bg-yellow-100';
        textColor = 'text-yellow-800';
        break;
      case 'published':
        bgColor = 'bg-green-100';
        textColor = 'text-green-800';
        break;
      case 'archived':
        bgColor = 'bg-gray-100';
        textColor = 'text-gray-800';
        break;
      case 'compliant':
        bgColor = 'bg-green-100';
        textColor = 'text-green-800';
        break;
      case 'non_compliant':
        bgColor = 'bg-red-100';
        textColor = 'text-red-800';
        break;
      case 'pending_review':
        bgColor = 'bg-blue-100';
        textColor = 'text-blue-800';
        break;
    }
    
    return (
      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${bgColor} ${textColor}`}>
        {status.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}
      </span>
    );
  };

  // Get difficulty badge
  const getDifficultyBadge = (difficulty: string) => {
    let bgColor = 'bg-gray-100';
    let textColor = 'text-gray-800';
    
    switch (difficulty) {
      case 'beginner':
        bgColor = 'bg-green-100';
        textColor = 'text-green-800';
        break;
      case 'intermediate':
        bgColor = 'bg-blue-100';
        textColor = 'text-blue-800';
        break;
      case 'advanced':
        bgColor = 'bg-yellow-100';
        textColor = 'text-yellow-800';
        break;
      case 'expert':
        bgColor = 'bg-red-100';
        textColor = 'text-red-800';
        break;
    }
    
    return (
      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${bgColor} ${textColor}`}>
        {difficulty.charAt(0).toUpperCase() + difficulty.slice(1)}
      </span>
    );
  };

  // Table columns
  const columns: Column<Exercise>[] = [
    {
      key: 'selection',
      header: <input 
        type="checkbox" 
        checked={selectedExercises.size === filteredExercises.length && filteredExercises.length > 0}
        onChange={(e) => handleSelectAll(e.target.checked)}
        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
      />,
      render: (exercise) => (
        <input 
          type="checkbox" 
          checked={selectedExercises.has(exercise.id)}
          onChange={(e) => handleRowSelect(exercise.id, e.target.checked)}
          onClick={(e) => e.stopPropagation()}
          className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
        />
      )
    },
    {
      key: 'title',
      header: 'Title',
      render: (exercise) => (
        <div>
          <div className="font-medium text-gray-900">{exercise.title}</div>
          <div className="text-sm text-gray-500 truncate max-w-xs">{exercise.description}</div>
        </div>
      ),
      sortable: true
    },
    {
      key: 'type',
      header: 'Type',
      render: (exercise) => (
        <span className="capitalize">{exercise.type.replace('_', ' ')}</span>
      ),
      sortable: true
    },
    {
      key: 'difficulty',
      header: 'Difficulty',
      render: (exercise) => getDifficultyBadge(exercise.difficulty),
      sortable: true
    },
    {
      key: 'duration',
      header: 'Duration',
      render: (exercise) => `${exercise.duration} min`,
      sortable: true
    },
    {
      key: 'status',
      header: 'Status',
      render: (exercise) => getStatusBadge(exercise.status),
      sortable: true
    },
    {
      key: 'tags',
      header: 'Tags',
      render: (exercise) => (
        <div className="flex flex-wrap gap-1">
          {exercise.tags.slice(0, 3).map((tag, index) => (
            <span key={index} className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800">
              {tag}
            </span>
          ))}
          {exercise.tags.length > 3 && (
            <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800">
              +{exercise.tags.length - 3}
            </span>
          )}
        </div>
      )
    },
    {
      key: 'actions',
      header: 'Actions',
      render: (exercise) => (
        <div className="flex space-x-2">
          <button
            onClick={(e) => {
              e.stopPropagation();
              setSelectedExercise(exercise);
              setFormDataFromExercise(exercise);
              setIsEditModalOpen(true);
            }}
            className="text-blue-600 hover:text-blue-900"
            title="Edit"
          >
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
            </svg>
          </button>
          <button
            onClick={(e) => {
              e.stopPropagation();
              handleDuplicateExercise(exercise.id);
            }}
            className="text-green-600 hover:text-green-900"
            title="Duplicate"
          >
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
            </svg>
          </button>
          <button
            onClick={(e) => {
              e.stopPropagation();
              setSelectedExercise(exercise);
              setIsDeleteModalOpen(true);
            }}
            className="text-red-600 hover:text-red-900"
            title="Delete"
          >
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
            </svg>
          </button>
        </div>
      )
    }
  ];

  return (
    <div className="exercise-library">
      {alertMessage && (
        <Alert
          type={alertMessage.type}
          message={alertMessage.message}
          onClose={() => setAlertMessage(null)}
        />
      )}
      
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900">Exercise Library</h1>
        <p className="text-gray-500">Manage and browse training exercises</p>
      </div>
      
      {/* Filters and Actions */}
      <Card className="mb-6">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4">
          <h2 className="text-lg font-medium">Filters</h2>
          
          <div className="flex space-x-2 mt-2 sm:mt-0">
            <Button
              variant="primary"
              onClick={() => {
                resetFormData();
                setIsCreateModalOpen(true);
              }}
            >
              Create Exercise
            </Button>
            
            <Button
              variant="outline"
              onClick={() => setIsImportModalOpen(true)}
            >
              Import
            </Button>
            
            <Button
              variant="outline"
              onClick={handleExportSelectedExercises}
              disabled={selectedExercises.size === 0}
            >
              Export Selected
            </Button>
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div>
            <Input
              label="Search"
              type="text"
              value={filter.searchTerm || ''}
              onChange={(e) => setFilter({ ...filter, searchTerm: e.target.value })}
              placeholder="Search by title, description, or tags"
            />
          </div>
          
          <div>
            <label htmlFor="type-filter" className="block text-sm font-medium text-gray-700 mb-1">
              Type
            </label>
            <select
              id="type-filter"
              className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
              value={filter.type || ''}
              onChange={(e) => setFilter({ ...filter, type: e.target.value || undefined })}
            >
              <option value="">All Types</option>
              <option value="knowledge_check">Knowledge Check</option>
              <option value="simulation">Simulation</option>
              <option value="practical">Practical</option>
              <option value="assessment">Assessment</option>
            </select>
          </div>
          
          <div>
            <label htmlFor="difficulty-filter" className="block text-sm font-medium text-gray-700 mb-1">
              Difficulty
            </label>
            <select
              id="difficulty-filter"
              className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
              value={filter.difficulty || ''}
              onChange={(e) => setFilter({ ...filter, difficulty: e.target.value || undefined })}
            >
              <option value="">All Difficulties</option>
              <option value="beginner">Beginner</option>
              <option value="intermediate">Intermediate</option>
              <option value="advanced">Advanced</option>
              <option value="expert">Expert</option>
            </select>
          </div>
          
          <div>
            <label htmlFor="status-filter" className="block text-sm font-medium text-gray-700 mb-1">
              Status
            </label>
            <select
              id="status-filter"
              className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
              value={filter.status || ''}
              onChange={(e) => setFilter({ ...filter, status: e.target.value || undefined })}
            >
              <option value="">All Statuses</option>
              <option value="draft">Draft</option>
              <option value="published">Published</option>
              <option value="archived">Archived</option>
            </select>
          </div>
        </div>
        
        {tags.length > 0 && (
          <div className="mt-4">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Tags
            </label>
            <div className="flex flex-wrap gap-2">
              {tags.map((tag, index) => (
                <button
                  key={index}
                  className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
                    filter.tags?.includes(tag) 
                      ? 'bg-blue-100 text-blue-800' 
                      : 'bg-gray-100 text-gray-800 hover:bg-gray-200'
                  }`}
                  onClick={() => {
                    const currentTags = filter.tags || [];
                    if (currentTags.includes(tag)) {
                      setFilter({ 
                        ...filter, 
                        tags: currentTags.filter(t => t !== tag)
                      });
                    } else {
                      setFilter({ 
                        ...filter, 
                        tags: [...currentTags, tag]
                      });
                    }
                  }}
                >
                  {tag}
                </button>
              ))}
            </div>
          </div>
        )}
      </Card>
      
      {/* Exercises Table */}
      <Card>
        <div className="mb-4">
          <h2 className="text-lg font-medium">Exercises</h2>
          <p className="text-sm text-gray-500">
            {filteredExercises.length} exercise{filteredExercises.length !== 1 ? 's' : ''} found
          </p>
        </div>
        
        <DataTable
          columns={columns}
          data={filteredExercises}
          keyExtractor={(exercise) => exercise.id}
          onRowClick={(exercise) => {
            setSelectedExercise(exercise);
            setFormDataFromExercise(exercise);
            setIsEditModalOpen(true);
          }}
          pagination={{
            pageSize: 10,
            totalItems: filteredExercises.length,
            currentPage: 1,
            onPageChange: () => {}
          }}
          emptyMessage="No exercises found matching your filters"
        />
      </Card>
      
      {/* Create Exercise Modal */}
      {isCreateModalOpen && (
        <Modal
          isOpen={isCreateModalOpen}
          onClose={() => setIsCreateModalOpen(false)}
          title="Create New Exercise"
          size="xl"
        >
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-1">
                Title*
              </label>
              <input
                type="text"
                id="title"
                name="title"
                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={formData.title}
                onChange={handleInputChange}
                required
              />
            </div>
            
            <div>
              <label htmlFor="type" className="block text-sm font-medium text-gray-700 mb-1">
                Type*
              </label>
              <select
                id="type"
                name="type"
                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={formData.type}
                onChange={handleInputChange}
                required
              >
                <option value="knowledge_check">Knowledge Check</option>
                <option value="simulation">Simulation</option>
                <option value="practical">Practical</option>
                <option value="assessment">Assessment</option>
              </select>
            </div>
            
            <div>
              <label htmlFor="difficulty" className="block text-sm font-medium text-gray-700 mb-1">
                Difficulty*
              </label>
              <select
                id="difficulty"
                name="difficulty"
                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={formData.difficulty}
                onChange={handleInputChange}
                required
              >
                <option value="beginner">Beginner</option>
                <option value="intermediate">Intermediate</option>
                <option value="advanced">Advanced</option>
                <option value="expert">Expert</option>
              </select>
            </div>
            
            <div>
              <label htmlFor="duration" className="block text-sm font-medium text-gray-700 mb-1">
                Duration (minutes)*
              </label>
              <input
                type="number"
                id="duration"
                name="duration"
                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={formData.duration}
                onChange={handleInputChange}
                min="1"
                required
              />
            </div>
            
            <div className="md:col-span-2">
              <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">
                Description*
              </label>
              <textarea
                id="description"
                name="description"
                rows={3}
                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={formData.description}
                onChange={handleInputChange}
                required
              />
            </div>
            
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Learning Objectives*
              </label>
              {formData.objectives.map((objective, index) => (
                <div key={index} className="flex mb-2">
                  <input
                    type="text"
                    className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                    value={objective}
                    onChange={(e) => handleArrayItemChange('objectives', index, e.target.value)}
                    placeholder={`Objective ${index + 1}`}
                  />
                  <button
                    type="button"
                    className="ml-2 text-red-600 hover:text-red-900"
                    onClick={() => handleRemoveArrayItem('objectives', index)}
                    disabled={formData.objectives.length <= 1}
                  >
                    <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                </div>
              ))}
              <button
                type="button"
                className="mt-1 text-sm text-blue-600 hover:text-blue-500"
                onClick={() => handleAddArrayItem('objectives')}
              >
                + Add Objective
              </button>
            </div>
            
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Assessment Criteria*
              </label>
              {formData.assessmentCriteria.map((criterion, index) => (
                <div key={index} className="flex mb-2">
                  <input
                    type="text"
                    className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                    value={criterion}
                    onChange={(e) => handleArrayItemChange('assessmentCriteria', index, e.target.value)}
                    placeholder={`Criterion ${index + 1}`}
                  />
                  <button
                    type="button"
                    className="ml-2 text-red-600 hover:text-red-900"
                    onClick={() => handleRemoveArrayItem('assessmentCriteria', index)}
                    disabled={formData.assessmentCriteria.length <= 1}
                  >
                    <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                </div>
              ))}
              <button
                type="button"
                className="mt-1 text-sm text-blue-600 hover:text-blue-500"
                onClick={() => handleAddArrayItem('assessmentCriteria')}
              >
                + Add Criterion
              </button>
            </div>
            
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Resources
              </label>
              {formData.resources.map((resource, index) => (
                <div key={index} className="flex mb-2">
                  <input
                    type="text"
                    className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                    value={resource}
                    onChange={(e) => handleArrayItemChange('resources', index, e.target.value)}
                    placeholder={`Resource ${index + 1}`}
                  />
                  <button
                    type="button"
                    className="ml-2 text-red-600 hover:text-red-900"
                    onClick={() => handleRemoveArrayItem('resources', index)}
                  >
                    <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                </div>
              ))}
              <button
                type="button"
                className="mt-1 text-sm text-blue-600 hover:text-blue-500"
                onClick={() => handleAddArrayItem('resources')}
              >
                + Add Resource
              </button>
            </div>
            
            <div>
              <label htmlFor="status" className="block text-sm font-medium text-gray-700 mb-1">
                Status*
              </label>
              <select
                id="status"
                name="status"
                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={formData.status}
                onChange={handleInputChange}
                required
              >
                <option value="draft">Draft</option>
                <option value="published">Published</option>
                <option value="archived">Archived</option>
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Tags
              </label>
              <div className="flex flex-wrap gap-2 p-2 border border-gray-300 rounded-md min-h-[100px] max-h-[200px] overflow-y-auto">
                {tags.map((tag, index) => (
                  <button
                    key={index}
                    type="button"
                    className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
                      formData.tags.includes(tag) 
                        ? 'bg-blue-100 text-blue-800' 
                        : 'bg-gray-100 text-gray-800 hover:bg-gray-200'
                    }`}
                    onClick={() => handleTagChange(tag)}
                  >
                    {tag}
                  </button>
                ))}
              </div>
            </div>
            
            {regulations.length > 0 && (
              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Related Regulations
                </label>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2 p-2 border border-gray-300 rounded-md min-h-[100px] max-h-[200px] overflow-y-auto">
                  {regulations.map((reg) => (
                    <div key={reg.id} className="flex items-center">
                      <input
                        type="checkbox"
                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                        id={`reg-${reg.id}`}
                        checked={formData.relatedRegulations?.includes(reg.id) || false}
                        onChange={() => handleRegulationChange(reg.id)}
                      />
                      <label htmlFor={`reg-${reg.id}`} className="ml-2 text-sm text-gray-700">
                        {reg.code}: {reg.title}
                      </label>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
          
          <div className="flex justify-end space-x-2">
            <Button
              variant="outline"
              onClick={() => setIsCreateModalOpen(false)}
            >
              Cancel
            </Button>
            <Button
              variant="primary"
              onClick={handleCreateExercise}
              isLoading={isSubmitting}
              disabled={isSubmitting}
            >
              Create Exercise
            </Button>
          </div>
        </Modal>
      )}
      
      {/* Edit Exercise Modal */}
      {isEditModalOpen && selectedExercise && (
        <Modal
          isOpen={isEditModalOpen}
          onClose={() => setIsEditModalOpen(false)}
          title="Edit Exercise"
          size="xl"
        >
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <label htmlFor="edit-title" className="block text-sm font-medium text-gray-700 mb-1">
                Title*
              </label>
              <input
                type="text"
                id="edit-title"
                name="title"
                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={formData.title}
                onChange={handleInputChange}
                required
              />
            </div>
            
            <div>
              <label htmlFor="edit-type" className="block text-sm font-medium text-gray-700 mb-1">
                Type*
              </label>
              <select
                id="edit-type"
                name="type"
                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={formData.type}
                onChange={handleInputChange}
                required
              >
                <option value="knowledge_check">Knowledge Check</option>
                <option value="simulation">Simulation</option>
                <option value="practical">Practical</option>
                <option value="assessment">Assessment</option>
              </select>
            </div>
            
            <div>
              <label htmlFor="edit-difficulty" className="block text-sm font-medium text-gray-700 mb-1">
                Difficulty*
              </label>
              <select
                id="edit-difficulty"
                name="difficulty"
                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={formData.difficulty}
                onChange={handleInputChange}
                required
              >
                <option value="beginner">Beginner</option>
                <option value="intermediate">Intermediate</option>
                <option value="advanced">Advanced</option>
                <option value="expert">Expert</option>
              </select>
            </div>
            
            <div>
              <label htmlFor="edit-duration" className="block text-sm font-medium text-gray-700 mb-1">
                Duration (minutes)*
              </label>
              <input
                type="number"
                id="edit-duration"
                name="duration"
                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={formData.duration}
                onChange={handleInputChange}
                min="1"
                required
              />
            </div>
            
            <div className="md:col-span-2">
              <label htmlFor="edit-description" className="block text-sm font-medium text-gray-700 mb-1">
                Description*
              </label>
              <textarea
                id="edit-description"
                name="description"
                rows={3}
                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={formData.description}
                onChange={handleInputChange}
                required
              />
            </div>
            
            {/* Other form fields remain the same as in Create modal */}
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Learning Objectives*
              </label>
              {formData.objectives.map((objective, index) => (
                <div key={index} className="flex mb-2">
                  <input
                    type="text"
                    className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                    value={objective}
                    onChange={(e) => handleArrayItemChange('objectives', index, e.target.value)}
                    placeholder={`Objective ${index + 1}`}
                  />
                  <button
                    type="button"
                    className="ml-2 text-red-600 hover:text-red-900"
                    onClick={() => handleRemoveArrayItem('objectives', index)}
                    disabled={formData.objectives.length <= 1}
                  >
                    <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                </div>
              ))}
              <button
                type="button"
                className="mt-1 text-sm text-blue-600 hover:text-blue-500"
                onClick={() => handleAddArrayItem('objectives')}
              >
                + Add Objective
              </button>
            </div>
            
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Assessment Criteria*
              </label>
              {formData.assessmentCriteria.map((criterion, index) => (
                <div key={index} className="flex mb-2">
                  <input
                    type="text"
                    className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                    value={criterion}
                    onChange={(e) => handleArrayItemChange('assessmentCriteria', index, e.target.value)}
                    placeholder={`Criterion ${index + 1}`}
                  />
                  <button
                    type="button"
                    className="ml-2 text-red-600 hover:text-red-900"
                    onClick={() => handleRemoveArrayItem('assessmentCriteria', index)}
                    disabled={formData.assessmentCriteria.length <= 1}
                  >
                    <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                </div>
              ))}
              <button
                type="button"
                className="mt-1 text-sm text-blue-600 hover:text-blue-500"
                onClick={() => handleAddArrayItem('assessmentCriteria')}
              >
                + Add Criterion
              </button>
            </div>
            
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Resources
              </label>
              {formData.resources.map((resource, index) => (
                <div key={index} className="flex mb-2">
                  <input
                    type="text"
                    className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                    value={resource}
                    onChange={(e) => handleArrayItemChange('resources', index, e.target.value)}
                    placeholder={`Resource ${index + 1}`}
                  />
                  <button
                    type="button"
                    className="ml-2 text-red-600 hover:text-red-900"
                    onClick={() => handleRemoveArrayItem('resources', index)}
                  >
                    <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                </div>
              ))}
              <button
                type="button"
                className="mt-1 text-sm text-blue-600 hover:text-blue-500"
                onClick={() => handleAddArrayItem('resources')}
              >
                + Add Resource
              </button>
            </div>
            
            <div>
              <label htmlFor="edit-status" className="block text-sm font-medium text-gray-700 mb-1">
                Status*
              </label>
              <select
                id="edit-status"
                name="status"
                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={formData.status}
                onChange={handleInputChange}
                required
              >
                <option value="draft">Draft</option>
                <option value="published">Published</option>
                <option value="archived">Archived</option>
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Tags
              </label>
              <div className="flex flex-wrap gap-2 p-2 border border-gray-300 rounded-md min-h-[100px] max-h-[200px] overflow-y-auto">
                {tags.map((tag, index) => (
                  <button
                    key={index}
                    type="button"
                    className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
                      formData.tags.includes(tag) 
                        ? 'bg-blue-100 text-blue-800' 
                        : 'bg-gray-100 text-gray-800 hover:bg-gray-200'
                    }`}
                    onClick={() => handleTagChange(tag)}
                  >
                    {tag}
                  </button>
                ))}
              </div>
            </div>
            
            {regulations.length > 0 && (
              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Related Regulations
                </label>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2 p-2 border border-gray-300 rounded-md min-h-[100px] max-h-[200px] overflow-y-auto">
                  {regulations.map((reg) => (
                    <div key={reg.id} className="flex items-center">
                      <input
                        type="checkbox"
                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                        id={`edit-reg-${reg.id}`}
                        checked={formData.relatedRegulations?.includes(reg.id) || false}
                        onChange={() => handleRegulationChange(reg.id)}
                      />
                      <label htmlFor={`edit-reg-${reg.id}`} className="ml-2 text-sm text-gray-700">
                        {reg.code}: {reg.title}
                      </label>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
          
          <div className="flex justify-end space-x-2">
            <Button
              variant="outline"
              onClick={() => setIsEditModalOpen(false)}
            >
              Cancel
            </Button>
            <Button
              variant="primary"
              onClick={handleUpdateExercise}
              isLoading={isSubmitting}
              disabled={isSubmitting}
            >
              Update Exercise
            </Button>
          </div>
        </Modal>
      )}
      
      {/* Delete Confirmation Modal */}
      {isDeleteModalOpen && selectedExercise && (
        <Modal
          isOpen={isDeleteModalOpen}
          onClose={() => setIsDeleteModalOpen(false)}
          title="Delete Exercise"
          size="md"
        >
          <p className="mb-4">
            Are you sure you want to delete the exercise <strong>{selectedExercise.title}</strong>? This action cannot be undone.
          </p>
          
          <div className="flex justify-end space-x-2">
            <Button
              variant="outline"
              onClick={() => setIsDeleteModalOpen(false)}
            >
              Cancel
            </Button>
            <Button
              variant="danger"
              onClick={handleDeleteExercise}
              isLoading={isSubmitting}
              disabled={isSubmitting}
            >
              Delete Exercise
            </Button>
          </div>
        </Modal>
      )}
      
      {/* Import Modal */}
      {isImportModalOpen && (
        <Modal
          isOpen={isImportModalOpen}
          onClose={() => setIsImportModalOpen(false)}
          title="Import Exercises"
          size="md"
        >
          <p className="mb-4">
            Upload a CSV or JSON file containing exercises to import. The file must include required fields: title, description, type, duration, difficulty, objectives, assessmentCriteria, and status.
          </p>
          
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              File
            </label>
            <input
              type="file"
              accept=".csv,.json"
              className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
              onChange={(e) => setImportFile(e.target.files?.[0] || null)}
            />
          </div>
          
          <div className="flex justify-end space-x-2">
            <Button
              variant="outline"
              onClick={() => setIsImportModalOpen(false)}
            >
              Cancel
            </Button>
            <Button
              variant="primary"
              onClick={handleImportExercises}
              isLoading={isSubmitting}
              disabled={isSubmitting || !importFile}
            >
              Import
            </Button>
          </div>
        </Modal>
      )}
    </div>
  );
};

// src/frontend/components/feedback/FeedbackSystem.tsx
import React, { useState, useEffect } from 'react';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { Input } from '../ui/Input';
import { Alert } from '../ui/Alert';
import { DataTable, Column } from '../ui/DataTable';

// Types
export enum FeedbackType {
  PERFORMANCE = 'performance',
  ASSESSMENT = 'assessment',
  EXERCISE = 'exercise',
  GENERAL = 'general'
}

export enum FeedbackSeverity {
  POSITIVE = 'positive',
  NEUTRAL = 'neutral',
  NEEDS_IMPROVEMENT = 'needs_improvement',
  CRITICAL = 'critical'
}

export interface FeedbackItem {
  id: string;
  traineeId: string;
  traineeName: string;
  instructorId: string;
  instructorName: string;
  type: FeedbackType;
  title: string;
  content: string;
  severity: FeedbackSeverity;
  createdAt: Date;
  updatedAt?: Date;
  readAt?: Date;
  responseId?: string;
  responseContent?: string;
  responsedAt?: Date;
  relatedItemId?: string;
  relatedItemType?: string;
  tags?: string[];
  attachments?: {
    id: string;
    name: string;
    type: string;
    url: string;
  }[];
}

// Feedback Form Component
interface FeedbackFormProps {
  traineeId?: string;
  traineeName?: string;
  instructorId: string;
  instructorName: string;
  relatedItemId?: string;
  relatedItemType?: string;
  onSubmit: (feedback: Omit<FeedbackItem, 'id' | 'createdAt' | 'updatedAt' | 'readAt'>) => Promise<void>;
  onCancel?: () => void;
}

export const FeedbackForm: React.FC<FeedbackFormProps> = ({
  traineeId,
  traineeName,
  instructorId,
  instructorName,
  relatedItemId,
  relatedItemType,
  onSubmit,
  onCancel
}) => {
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [type, setType] = useState<FeedbackType>(FeedbackType.GENERAL);
  const [severity, setSeverity] = useState<FeedbackSeverity>(FeedbackSeverity.NEUTRAL);
  const [tags, setTags] = useState<string[]>([]);
  const [tagInput, setTagInput] = useState('');
  const [attachments, setAttachments] = useState<File[]>([]);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!title.trim() || !content.trim()) {
      setError('Title and content are required.');
      return;
    }
    
    setError(null);
    setIsSubmitting(true);
    
    try {
      // In a real app, you would upload attachments here and get URLs back
      const attachmentUrls = attachments.map(file => ({
        id: `attachment-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        name: file.name,
        type: file.type,
        url: URL.createObjectURL(file) // This is just for demo purposes
      }));
      
      await onSubmit({
        traineeId: traineeId || '',
        traineeName: traineeName || '',
        instructorId,
        instructorName,
        type,
        title,
        content,
        severity,
        relatedItemId,
        relatedItemType,
        tags,
        attachments: attachmentUrls
      });
      
      // Reset form after successful submission
      setTitle('');
      setContent('');
      setType(FeedbackType.GENERAL);
      setSeverity(FeedbackSeverity.NEUTRAL);
      setTags([]);
      setTagInput('');
      setAttachments([]);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to submit feedback.');
    } finally {
      setIsSubmitting(false);
    }
  };
  
  // Handle tag input
  const handleTagAdd = () => {
    const trimmedTag = tagInput.trim();
    if (trimmedTag && !tags.includes(trimmedTag)) {
      setTags([...tags, trimmedTag]);
      setTagInput('');
    }
  };
  
  // Handle tag removal
  const handleTagRemove = (tagToRemove: string) => {
    setTags(tags.filter(tag => tag !== tagToRemove));
  };
  
  // Handle Enter key in tag input
  const handleTagKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      handleTagAdd();
    }
  };
  
  // Handle file selection
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const filesArray = Array.from(e.target.files);
      setAttachments([...attachments, ...filesArray]);
    }
  };
  
  // Handle file removal
  const handleFileRemove = (fileName: string) => {
    setAttachments(attachments.filter(file => file.name !== fileName));
  };
  
  // Get severity badge color
  const getSeverityColor = (severity: FeedbackSeverity) => {
    switch (severity) {
      case FeedbackSeverity.POSITIVE:
        return 'bg-green-100 text-green-800';
      case FeedbackSeverity.NEUTRAL:
        return 'bg-blue-100 text-blue-800';
      case FeedbackSeverity.NEEDS_IMPROVEMENT:
        return 'bg-yellow-100 text-yellow-800';
      case FeedbackSeverity.CRITICAL:
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };
  
  return (
    <form onSubmit={handleSubmit}>
      {error && <Alert type="error" message={error} onClose={() => setError(null)} className="mb-4" />}
      
      <div className="space-y-4">
        <Input
          label="Title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          required
        />
        
        <div>
          <label htmlFor="feedback-type" className="block text-sm font-medium text-gray-700 mb-1">
            Feedback Type
          </label>
          <select
            id="feedback-type"
            className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
            value={type}
            onChange={(e) => setType(e.target.value as FeedbackType)}
          >
            <option value={FeedbackType.GENERAL}>General Feedback</option>
            <option value={FeedbackType.PERFORMANCE}>Performance Feedback</option>
            <option value={FeedbackType.ASSESSMENT}>Assessment Feedback</option>
            <option value={FeedbackType.EXERCISE}>Exercise Feedback</option>
          </select>
        </div>
        
        <div>
          <label htmlFor="feedback-severity" className="block text-sm font-medium text-gray-700 mb-1">
            Feedback Severity
          </label>
          <div className="flex flex-wrap gap-2">
            {Object.values(FeedbackSeverity).map(sev => (
              <button
                key={sev}
                type="button"
                className={`px-3 py-1.5 rounded-full text-sm font-medium ${
                  severity === sev ? getSeverityColor(sev) : 'bg-gray-100 text-gray-800'
                }`}
                onClick={() => setSeverity(sev)}
              >
                {sev.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ')}
              </button>
            ))}
          </div>
        </div>
        
        <div>
          <label htmlFor="feedback-content" className="block text-sm font-medium text-gray-700 mb-1">
            Feedback Content
          </label>
          <textarea
            id="feedback-content"
            rows={6}
            className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            value={content}
            onChange={(e) => setContent(e.target.value)}
            required
          />
        </div>
        
        <div>
          <label htmlFor="feedback-tags" className="block text-sm font-medium text-gray-700 mb-1">
            Tags
          </label>
          <div className="flex gap-2 mb-2">
            <input
              id="feedback-tags"
              type="text"
              className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              value={tagInput}
              onChange={(e) => setTagInput(e.target.value)}
              onKeyDown={handleTagKeyDown}
              placeholder="Add tags..."
            />
            <Button
              type="button"
              variant="outline"
              size="small"
              onClick={handleTagAdd}
            >
              Add
            </Button>
          </div>
          {tags.length > 0 && (
            <div className="flex flex-wrap gap-2">
              {tags.map(tag => (
                <span 
                  key={tag} 
                  className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
                >
                  {tag}
                  <button
                    type="button"
                    className="ml-1.5 inline-flex items-center justify-center h-4 w-4 rounded-full text-blue-400 hover:text-blue-500 focus:outline-none focus:text-blue-500"
                    onClick={() => handleTagRemove(tag)}
                  >
                    <span className="sr-only">Remove tag</span>
                    <svg className="h-2 w-2" stroke="currentColor" fill="none" viewBox="0 0 8 8">
                      <path strokeLinecap="round" strokeWidth="1.5" d="M1 1l6 6m0-6L1 7" />
                    </svg>
                  </button>
                </span>
              ))}
            </div>
          )}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Attachments
          </label>
          <div className="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md">
            <div className="space-y-1 text-center">
              <svg className="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
              </svg>
              <div className="flex text-sm text-gray-600">
                <label htmlFor="file-upload" className="relative cursor-pointer bg-white rounded-md font-medium text-blue-600 hover:text-blue-500 focus-within:outline-none">
                  <span>Upload files</span>
                  <input 
                    id="file-upload" 
                    name="file-upload" 
                    type="file" 
                    multiple
                    className="sr-only" 
                    onChange={handleFileChange}
                  />
                </label>
                <p className="pl-1">or drag and drop</p>
              </div>
              <p className="text-xs text-gray-500">PNG, JPG, PDF, DOCX up to 10MB</p>
            </div>
          </div>
          
          {attachments.length > 0 && (
            <ul className="mt-3 divide-y divide-gray-200 border rounded-md">
              {attachments.map(file => (
                <li key={file.name} className="pl-3 pr-4 py-3 flex items-center justify-between text-sm">
                  <div className="flex items-center">
                    <svg className="flex-shrink-0 h-5 w-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M8 4a3 3 0 00-3 3v4a5 5 0 0010 0V7a1 1 0 112 0v4a7 7 0 11-14 0V7a5 5 0 0110 0v4a3 3 0 11-6 0V7a1 1 0 012 0v4a1 1 0 102 0V7a3 3 0 00-3-3z" clipRule="evenodd" />
                    </svg>
                    <span className="ml-2 flex-1 truncate">{file.name}</span>
                  </div>
                  <div className="ml-4 flex-shrink-0">
                    <button
                      type="button"
                      className="font-medium text-red-600 hover:text-red-500"
                      onClick={() => handleFileRemove(file.name)}
                    >
                      Remove
                    </button>
                  </div>
                </li>
              ))}
            </ul>
          )}
        </div>
        
        <div className="flex justify-end gap-2 pt-4">
          {onCancel && (
            <Button
              type="button"
              variant="outline"
              onClick={onCancel}
            >
              Cancel
            </Button>
          )}
          <Button
            type="submit"
            variant="primary"
            isLoading={isSubmitting}
            disabled={isSubmitting}
          >
            Submit Feedback
          </Button>
        </div>
      </div>
    </form>
  );
};

// Feedback Detail Component
interface FeedbackDetailProps {
  feedback: FeedbackItem;
  onRespond?: (responseContent: string) => Promise<void>;
  onMarkAsRead?: () => Promise<void>;
  onClose?: () => void;
}

export const FeedbackDetail: React.FC<FeedbackDetailProps> = ({
  feedback,
  onRespond,
  onMarkAsRead,
  onClose
}) => {
  const [isResponding, setIsResponding] = useState(false);
  const [responseContent, setResponseContent] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  // Mark as read on mount if not already read
  useEffect(() => {
    if (!feedback.readAt && onMarkAsRead) {
      onMarkAsRead();
    }
  }, [feedback.readAt, onMarkAsRead]);
  
  // Handle response submission
  const handleSubmitResponse = async () => {
    if (!responseContent.trim()) {
      setError('Response content is required.');
      return;
    }
    
    if (!onRespond) return;
    
    setError(null);
    setIsSubmitting(true);
    
    try {
      await onRespond(responseContent);
      setIsResponding(false);
      setResponseContent('');
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to submit response.');
    } finally {
      setIsSubmitting(false);
    }
  };
  
  // Get severity badge
  const getSeverityBadge = () => {
    let bgColor = 'bg-gray-100';
    let textColor = 'text-gray-800';
    
    switch (feedback.severity) {
      case FeedbackSeverity.POSITIVE:
        bgColor = 'bg-green-100';
        textColor = 'text-green-800';
        break;
      case FeedbackSeverity.NEUTRAL:
        bgColor = 'bg-blue-100';
        textColor = 'text-blue-800';
        break;
      case FeedbackSeverity.NEEDS_IMPROVEMENT:
        bgColor = 'bg-yellow-100';
        textColor = 'text-yellow-800';
        break;
      case FeedbackSeverity.CRITICAL:
        bgColor = 'bg-red-100';
        textColor = 'text-red-800';
        break;
    }
    
    return (
      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${bgColor} ${textColor}`}>
        {feedback.severity.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ')}
      </span>
    );
  };
  
  // Get type badge
  const getTypeBadge = () => {
    return (
      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
        {feedback.type.charAt(0).toUpperCase() + feedback.type.slice(1)} Feedback
      </span>
    );
  };
  
  return (
    <div className="feedback-detail">
      {error && <Alert type="error" message={error} onClose={() => setError(null)} className="mb-4" />}
      
      <div className="mb-4 flex justify-between items-center">
        <h2 className="text-xl font-bold">{feedback.title}</h2>
        {onClose && (
          <Button
            variant="outline"
            size="small"
            onClick={onClose}
          >
            Close
          </Button>
        )}
      </div>
      
      <div className="mb-4 flex flex-wrap gap-2">
        {getSeverityBadge()}
        {getTypeBadge()}
        {feedback.tags?.map(tag => (
          <span 
            key={tag} 
            className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
          >
            {tag}
          </span>
        ))}
      </div>
      
      <div className="flex justify-between mb-4 text-sm text-gray-500">
        <div>
          <span>From: {feedback.instructorName}</span>
        </div>
        <div>
          <span>{new Date(feedback.createdAt).toLocaleString()}</span>
        </div>
      </div>
      
      <div className="bg-gray-50 p-4 rounded-lg mb-6 whitespace-pre-wrap">
        {feedback.content}
      </div>
      
      {feedback.attachments && feedback.attachments.length > 0 && (
        <div className="mb-6">
          <h3 className="text-base font-medium mb-2">Attachments</h3>
          <ul className="divide-y divide-gray-200 border rounded-md">
            {feedback.attachments.map(file => (
              <li key={file.id} className="pl-3 pr-4 py-3 flex items-center justify-between text-sm">
                <div className="flex items-center">
                  <svg className="flex-shrink-0 h-5 w-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M8 4a3 3 0 00-3 3v4a5 5 0 0010 0V7a1 1 0 112 0v4a7 7 0 11-14 0V7a5 5 0 0110 0v4a3 3 0 11-6 0V7a1 1 0 012 0v4a1 1 0 102 0V7a3 3 0 00-3-3z" clipRule="evenodd" />
                  </svg>
                  <span className="ml-2 flex-1 truncate">{file.name}</span>
                </div>
                <div className="ml-4 flex-shrink-0">
                  <a 
                    href={file.url} 
                    target="_blank" 
                    rel="noopener noreferrer" 
                    className="font-medium text-blue-600 hover:text-blue-500"
                  >
                    Download
                  </a>
                </div>
              </li>
            ))}
          </ul>
        </div>
      )}
      
      {feedback.responseContent && (
        <div className="mb-6">
          <h3 className="text-base font-medium mb-2">Response</h3>
          <div className="bg-blue-50 p-4 rounded-lg">
            <div className="text-sm text-gray-500 mb-2">
              <span>{new Date(feedback.responsedAt!).toLocaleString()}</span>
            </div>
            <div className="whitespace-pre-wrap">
              {feedback.responseContent}
            </div>
          </div>
        </div>
      )}
      
      {onRespond && !feedback.responseContent && (
        <div>
          {isResponding ? (
            <div>
              <h3 className="text-base font-medium mb-2">Your Response</h3>
              <textarea
                rows={4}
                className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm mb-2"
                value={responseContent}
                onChange={(e) => setResponseContent(e.target.value)}
                placeholder="Enter your response..."
              />
              <div className="flex justify-end gap-2">
                <Button
                  variant="outline"
                  size="small"
                  onClick={() => setIsResponding(false)}
                >
                  Cancel
                </Button>
                <Button
                  variant="primary"
                  size="small"
                  onClick={handleSubmitResponse}
                  isLoading={isSubmitting}
                  disabled={isSubmitting}
                >
                  Submit Response
                </Button>
              </div>
            </div>
          ) : (
            <div className="flex justify-end">
              <Button
                variant="primary"
                onClick={() => setIsResponding(true)}
              >
                Respond
              </Button>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

// Feedback List Component
interface FeedbackListProps {
  feedbackItems: FeedbackItem[];
  onViewFeedback: (feedback: FeedbackItem) => void;
  onFilterChange?: (filter: { type?: FeedbackType; severity?: FeedbackSeverity; readStatus?: string }) => void;
}

export const FeedbackList: React.FC<FeedbackListProps> = ({
  feedbackItems,
  onViewFeedback,
  onFilterChange
}) => {
  const [activeFilter, setActiveFilter] = useState<{
    type?: FeedbackType;
    severity?: FeedbackSeverity;
    readStatus?: string;
  }>({});
  
  // Apply filter
  const handleFilterChange = (newFilter: { type?: FeedbackType; severity?: FeedbackSeverity; readStatus?: string }) => {
    const updatedFilter = { ...activeFilter, ...newFilter };
    setActiveFilter(updatedFilter);
    if (onFilterChange) {
      onFilterChange(updatedFilter);
    }
  };
  
  // Get severity badge
  const getSeverityBadge = (severity: FeedbackSeverity) => {
    let bgColor = 'bg-gray-100';
    let textColor = 'text-gray-800';
    
    switch (severity) {
      case FeedbackSeverity.POSITIVE:
        bgColor = 'bg-green-100';
        textColor = 'text-green-800';
        break;
      case FeedbackSeverity.NEUTRAL:
        bgColor = 'bg-blue-100';
        textColor = 'text-blue-800';
        break;
      case FeedbackSeverity.NEEDS_IMPROVEMENT:
        bgColor = 'bg-yellow-100';
        textColor = 'text-yellow-800';
        break;
      case FeedbackSeverity.CRITICAL:
        bgColor = 'bg-red-100';
        textColor = 'text-red-800';
        break;
    }
    
    return (
      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${bgColor} ${textColor}`}>
        {severity.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ')}
      </span>
    );
  };
  
  // Define table columns
  const columns: Column<FeedbackItem>[] = [
    {
      key: 'title',
      header: 'Title',
      render: (feedback) => (
        <div className="cursor-pointer hover:text-blue-600">
          <div className="font-medium">
            {feedback.title}
            {!feedback.readAt && (
              <span className="ml-2 inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                New
              </span>
            )}
          </div>
          <div className="text-xs text-gray-500 mt-1">{new Date(feedback.createdAt).toLocaleString()}</div>
        </div>
      ),
      sortable: true
    },
    {
      key: 'traineeName',
      header: 'Trainee',
      render: (feedback) => feedback.traineeName,
      sortable: true
    },
    {
      key: 'instructorName',
      header: 'Instructor',
      render: (feedback) => feedback.instructorName,
      sortable: true
    },
    {
      key: 'type',
      header: 'Type',
      render: (feedback) => (
        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
          {feedback.type.charAt(0).toUpperCase() + feedback.type.slice(1)}
        </span>
      ),
      sortable: true
    },
    {
      key: 'severity',
      header: 'Severity',
      render: (feedback) => getSeverityBadge(feedback.severity),
      sortable: true
    },
    {
      key: 'status',
      header: 'Status',
      render: (feedback) => (
        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
          feedback.responseContent 
            ? 'bg-green-100 text-green-800'
            : feedback.readAt
              ? 'bg-blue-100 text-blue-800'
              : 'bg-yellow-100 text-yellow-800'
        }`}>
          {feedback.responseContent 
            ? 'Responded'
            : feedback.readAt
              ? 'Read'
              : 'Unread'
          }
        </span>
      ),
      sortable: true
    }
  ];
  
  return (
    <div>
      <div className="mb-4 flex flex-wrap gap-2">
        <Button
          variant={activeFilter.type === undefined ? 'primary' : 'outline'}
          size="small"
          onClick={() => handleFilterChange({ type: undefined })}
        >
          All Types
        </Button>
        <Button
          variant={activeFilter.type === FeedbackType.GENERAL ? 'primary' : 'outline'}
          size="small"
          onClick={() => handleFilterChange({ type: FeedbackType.GENERAL })}
        >
          General
        </Button>
        <Button
          variant={activeFilter.type === FeedbackType.PERFORMANCE ? 'primary' : 'outline'}
          size="small"
          onClick={() => handleFilterChange({ type: FeedbackType.PERFORMANCE })}
        >
          Performance
        </Button>
        <Button
          variant={activeFilter.type === FeedbackType.ASSESSMENT ? 'primary' : 'outline'}
          size="small"
          onClick={() => handleFilterChange({ type: FeedbackType.ASSESSMENT })}
        >
          Assessment
        </Button>
        <Button
          variant={activeFilter.type === FeedbackType.EXERCISE ? 'primary' : 'outline'}
          size="small"
          onClick={() => handleFilterChange({ type: FeedbackType.EXERCISE })}
        >
          Exercise
        </Button>
        
        <div className="ml-auto"></div>
        
        <Button
          variant={activeFilter.readStatus === undefined ? 'primary' : 'outline'}
          size="small"
          onClick={() => handleFilterChange({ readStatus: undefined })}
        >
          All Status
        </Button>
        <Button
          variant={activeFilter.readStatus === 'unread' ? 'primary' : 'outline'}
          size="small"
          onClick={() => handleFilterChange({ readStatus: 'unread' })}
        >
          Unread
        </Button>
        <Button
          variant={activeFilter.readStatus === 'read' ? 'primary' : 'outline'}
          size="small"
          onClick={() => handleFilterChange({ readStatus: 'read' })}
        >
          Read
        </Button>
        <Button
          variant={activeFilter.readStatus === 'responded' ? 'primary' : 'outline'}
          size="small"
          onClick={() => handleFilterChange({ readStatus: 'responded' })}
        >
          Responded
        </Button>
      </div>
      
      <div className="mb-4 flex flex-wrap gap-2">
        <Button
          variant={activeFilter.severity === undefined ? 'primary' : 'outline'}
          size="small"
          onClick={() => handleFilterChange({ severity: undefined })}
        >
          All Severity
        </Button>
        <Button
          variant={activeFilter.severity === FeedbackSeverity.POSITIVE ? 'primary' : 'outline'}
          size="small"
          onClick={() => handleFilterChange({ severity: FeedbackSeverity.POSITIVE })}
        >
          Positive
        </Button>
        <Button
          variant={activeFilter.severity === FeedbackSeverity.NEUTRAL ? 'primary' : 'outline'}
          size="small"
          onClick={() => handleFilterChange({ severity: FeedbackSeverity.NEUTRAL })}
        >
          Neutral
        </Button>
        <Button
          variant={activeFilter.severity === FeedbackSeverity.NEEDS_IMPROVEMENT ? 'primary' : 'outline'}
          size="small"
          onClick={() => handleFilterChange({ severity: FeedbackSeverity.NEEDS_IMPROVEMENT })}
        >
          Needs Improvement
        </Button>
        <Button
          variant={activeFilter.severity === FeedbackSeverity.CRITICAL ? 'primary' : 'outline'}
          size="small"
          onClick={() => handleFilterChange({ severity: FeedbackSeverity.CRITICAL })}
        >
          Critical
        </Button>
      </div>
      
      <DataTable
        columns={columns}
        data={feedbackItems}
        keyExtractor={(item) => item.id}
        onRowClick={onViewFeedback}
        emptyMessage="No feedback items found."
        pagination={{
          pageSize: 10,
          totalItems: feedbackItems.length,
          currentPage: 1,
          onPageChange: () => {}
        }}
      />
    </div>
  );
};

// Main Feedback System Component
interface FeedbackSystemProps {
  role: 'instructor' | 'trainee';
  userId: string;
  userName: string;
  traineeId?: string;
  traineeName?: string;
  feedbackItems: FeedbackItem[];
  onCreateFeedback: (feedback: Omit<FeedbackItem, 'id' | 'createdAt' | 'updatedAt' | 'readAt'>) => Promise<void>;
  onRespondToFeedback: (feedbackId: string, responseContent: string) => Promise<void>;
  onMarkAsRead: (feedbackId: string) => Promise<void>;
  onFilterChange?: (filter: { type?: FeedbackType; severity?: FeedbackSeverity; readStatus?: string }) => void;
}

export const FeedbackSystem: React.FC<FeedbackSystemProps> = ({
  role,
  userId,
  userName,
  traineeId,
  traineeName,
  feedbackItems,
  onCreateFeedback,
  onRespondToFeedback,
  onMarkAsRead,
  onFilterChange
}) => {
  const [isCreatingFeedback, setIsCreatingFeedback] = useState(false);
  const [selectedFeedback, setSelectedFeedback] = useState<FeedbackItem | null>(null);
  const [error, setError] = useState<string | null>(null);
  
  // Handle feedback creation
  const handleCreateFeedback = async (feedbackData: Omit<FeedbackItem, 'id' | 'createdAt' | 'updatedAt' | 'readAt'>) => {
    try {
      await onCreateFeedback(feedbackData);
      setIsCreatingFeedback(false);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to create feedback.');
    }
  };
  
  // Handle feedback response
  const handleRespondToFeedback = async (responseContent: string) => {
    if (!selectedFeedback) return;
    
    try {
      await onRespondToFeedback(selectedFeedback.id, responseContent);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to respond to feedback.');
    }
  };
  
  // Handle mark as read
  const handleMarkAsRead = async () => {
    if (!selectedFeedback) return;
    
    try {
      await onMarkAsRead(selectedFeedback.id);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to mark feedback as read.');
    }
  };
  
  // Handle view feedback
  const handleViewFeedback = (feedback: FeedbackItem) => {
    setSelectedFeedback(feedback);
  };
  
  return (
    <div className="feedback-system">
      {error && <Alert type="error" message={error} onClose={() => setError(null)} className="mb-4" />}
      
      <div className="mb-6">
        <div className="flex justify-between items-center">
          <h1 className="text-2xl font-bold text-gray-900">Feedback System</h1>
          
          {role === 'instructor' && (
            <Button
              variant="primary"
              onClick={() => setIsCreatingFeedback(true)}
            >
              Create Feedback
            </Button>
          )}
        </div>
        <p className="text-gray-500">
          {role === 'instructor'
            ? 'Create and manage feedback for trainees.'
            : 'View and respond to feedback from instructors.'
          }
        </p>
      </div>
      
      {selectedFeedback ? (
        <Card>
          <FeedbackDetail
            feedback={selectedFeedback}
            onRespond={role === 'trainee' ? handleRespondToFeedback : undefined}
            onMarkAsRead={!selectedFeedback.readAt ? handleMarkAsRead : undefined}
            onClose={() => setSelectedFeedback(null)}
          />
        </Card>
      ) : isCreatingFeedback ? (
        <Card>
          <div className="mb-4">
            <h2 className="text-xl font-bold">Create Feedback</h2>
          </div>
          
          <FeedbackForm
            traineeId={traineeId}
            traineeName={traineeName}
            instructorId={userId}
            instructorName={userName}
            onSubmit={handleCreateFeedback}
            onCancel={() => setIsCreatingFeedback(false)}
          />
        </Card>
      ) : (
        <Card>
          <div className="mb-4">
            <h2 className="text-xl font-bold">Feedback List</h2>
          </div>
          
          <FeedbackList
            feedbackItems={feedbackItems}
            onViewFeedback={handleViewFeedback}
            onFilterChange={onFilterChange}
          />
        </Card>
      )}
    </div>
  );
};

// components/analytics/FleetOverview.tsx
import React from 'react';
import { FleetStatistics } from '../../services/analyticsService';

interface FleetOverviewProps {
  stats: FleetStatistics;
}

const FleetOverview: React.FC<FleetOverviewProps> = ({ stats }) => {
  // Format a number as a percentage
  const formatPercent = (value: number) => {
    return `${value.toFixed(1)}%`;
  };

  // Format a number as a currency value
  const formatCurrency = (value: number) => {
    return `$${value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
  };

  return (
    <div>
      <div className="grid grid-cols-2 gap-4">
        {/* Total Trainees */}
        <div className="p-3 bg-gray-50 rounded-lg">
          <p className="text-xs font-medium text-gray-500 mb-1">Total Trainees</p>
          <p className="text-lg font-semibold text-gray-800">{stats.totalTrainees}</p>
        </div>
        
        {/* Active Trainees */}
        <div className="p-3 bg-gray-50 rounded-lg">
          <p className="text-xs font-medium text-gray-500 mb-1">Active</p>
          <p className="text-lg font-semibold text-gray-800">
            {stats.activeTrainees} 
            <span className="text-xs font-normal text-gray-500 ml-1">
              ({((stats.activeTrainees / stats.totalTrainees) * 100).toFixed(0)}%)
            </span>
          </p>
        </div>
        
        {/* Average Completion Rate */}
        <div className="p-3 bg-gray-50 rounded-lg">
          <p className="text-xs font-medium text-gray-500 mb-1">Avg. Completion</p>
          <p className="text-lg font-semibold text-gray-800">{formatPercent(stats.averageCompletionRate)}</p>
        </div>
        
        {/* Average Rating */}
        <div className="p-3 bg-gray-50 rounded-lg">
          <p className="text-xs font-medium text-gray-500 mb-1">Avg. Rating</p>
          <p className="text-lg font-semibold text-gray-800">{stats.averageRating.toFixed(1)}/4.0</p>
        </div>
      </div>
      
      {/* Training hours and cost metrics */}
      <div className="mt-4">
        <div className="p-4 border border-gray-200 rounded-lg">
          <div className="flex items-center justify-between mb-2">
            <p className="text-sm font-medium text-gray-600">Total Training Hours</p>
            <p className="text-lg font-semibold text-gray-800">{stats.trainingHours.toLocaleString()} hrs</p>
          </div>
          
          <div className="flex items-center justify-between">
            <p className="text-sm font-medium text-gray-600">Cost Per Hour</p>
            <p className="text-lg font-semibold text-gray-800">{formatCurrency(stats.costPerHour)}</p>
          </div>
          
          <div className="mt-2 pt-2 border-t border-gray-200">
            <div className="flex items-center justify-between">
              <p className="text-sm font-medium text-gray-600">Total Cost</p>
              <p className="text-lg font-semibold text-blue-600">
                {formatCurrency(stats.trainingHours * stats.costPerHour)}
              </p>
            </div>
          </div>
        </div>
      </div>
      
      {/* Efficiency ratio indicator */}
      <div className="mt-4">
        <p className="text-xs font-medium text-gray-500 mb-1">Training Efficiency</p>
        <div className="relative pt-1">
          <div className="flex mb-2 items-center justify-between">
            <div>
              <span className="text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-blue-600 bg-blue-100">
                {calculateEfficiency(stats)}%
              </span>
            </div>
          </div>
          <div className="overflow-hidden h-2 mb-4 text-xs flex rounded bg-gray-200">
            <div 
              style={{ width: `${calculateEfficiency(stats)}%` }} 
              className="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500"
            ></div>
          </div>
          <div className="flex justify-between text-xs text-gray-500">
            <span>Low</span>
            <span>Average</span>
            <span>Optimal</span>
          </div>
        </div>
      </div>
    </div>
  );
};

// Calculate training efficiency metric based on completion rate and average rating
// This is an example calculation - adjust according to actual business logic
function calculateEfficiency(stats: FleetStatistics): number {
  // Example formula: (completion rate * average rating relative to max rating) * 100
  // Assumes max rating is 4.0
  const maxRating = 4.0;
  return Math.min(100, Math.round((stats.averageCompletionRate / 100) * (stats.averageRating / maxRating) * 100));
}

export default FleetOverview;

// src/frontend/components/flightlog/FlightLogManager.tsx
import React, { useState, useEffect } from 'react';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { Input } from '../ui/Input';
import { Form } from '../ui/Form';
import { Alert } from '../ui/Alert';
import { DataTable, Column } from '../ui/DataTable';
import { Modal } from '../ui/Modal';
import { Tabs, Tab } from '../ui/Tabs';

// Types
export enum AircraftCategory {
  AIRPLANE_SINGLE_ENGINE = 'airplane_single_engine',
  AIRPLANE_MULTI_ENGINE = 'airplane_multi_engine',
  HELICOPTER = 'helicopter',
  GLIDER = 'glider',
  SIMULATOR = 'simulator'
}

export enum FlightCondition {
  VFR = 'vfr',
  IFR = 'ifr',
  NIGHT = 'night',
  DUAL = 'dual',
  PIC = 'pic',
  SIC = 'sic',
  SOLO = 'solo',
  CROSS_COUNTRY = 'cross_country',
  INSTRUCTION_GIVEN = 'instruction_given'
}

export enum ManeuverType {
  TAKEOFF = 'takeoff',
  LANDING = 'landing',
  STALL = 'stall',
  STEEP_TURN = 'steep_turn',
  SLOW_FLIGHT = 'slow_flight',
  EMERGENCY_PROCEDURES = 'emergency_procedures',
  INSTRUMENT_APPROACH = 'instrument_approach',
  HOLDING = 'holding',
  NAVIGATION = 'navigation',
  TRAFFIC_PATTERN = 'traffic_pattern',
  OTHER = 'other'
}

export interface FlightManeuver {
  type: ManeuverType;
  count: number;
  performance?: 'satisfactory' | 'needs_improvement' | 'unsatisfactory';
  notes?: string;
}

export interface FlightLogEntry {
  id: string;
  date: Date;
  aircraftType: string;
  aircraftRegistration: string;
  aircraftCategory: AircraftCategory;
  departureAirport: string;
  arrivalAirport: string;
  route?: string;
  totalFlightTime: number; // in decimal hours
  conditions: FlightCondition[];
  maneuvers: FlightManeuver[];
  picName?: string;
  sicName?: string;
  instructorName?: string;
  notes?: string;
  createdAt: Date;
  updatedAt: Date;
  isEndorsed?: boolean;
  endorsedBy?: string;
  endorsedAt?: Date;
}

export interface HoursBreakdown {
  total: number;
  pic: number;
  sic: number;
  solo: number;
  dual: number;
  instructionGiven: number;
  night: number;
  ifr: number;
  crossCountry: number;
  byCategory: Record<AircraftCategory, number>;
}

export interface ManeuverBreakdown {
  type: ManeuverType;
  total: number;
  byPerformance: {
    satisfactory: number;
    needsImprovement: number;
    unsatisfactory: number;
  };
}

// Flight Log Entry Form
interface FlightLogEntryFormProps {
  entry?: FlightLogEntry;
  onSave: (entry: Partial<FlightLogEntry>) => Promise<void>;
  onCancel: () => void;
  aircraftTypes: string[];
  isLoading: boolean;
}

const FlightLogEntryForm: React.FC<FlightLogEntryFormProps> = ({
  entry,
  onSave,
  onCancel,
  aircraftTypes,
  isLoading
}) => {
  const isEditing = !!entry;
  
  const initialFormState: Partial<FlightLogEntry> = entry ? {
    ...entry,
    date: entry.date instanceof Date ? entry.date : new Date(entry.date)
  } : {
    date: new Date(),
    aircraftType: '',
    aircraftRegistration: '',
    aircraftCategory: AircraftCategory.AIRPLANE_SINGLE_ENGINE,
    departureAirport: '',
    arrivalAirport: '',
    totalFlightTime: 0,
    conditions: [],
    maneuvers: []
  };

  const [formData, setFormData] = useState<Partial<FlightLogEntry>>(initialFormState);
  const [newManeuver, setNewManeuver] = useState<Partial<FlightManeuver>>({
    type: ManeuverType.TAKEOFF,
    count: 1
  });
  const [errors, setErrors] = useState<Record<string, string>>({});

  // Handle input change
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    
    if (type === 'number') {
      setFormData({ ...formData, [name]: parseFloat(value) || 0 });
    } else if (type === 'date') {
      setFormData({ ...formData, [name]: new Date(value) });
    } else {
      setFormData({ ...formData, [name]: value });
    }
    
    // Clear error for this field
    if (errors[name]) {
      const newErrors = { ...errors };
      delete newErrors[name];
      setErrors(newErrors);
    }
  };

  // Handle condition toggle
  const handleConditionToggle = (condition: FlightCondition) => {
    const currentConditions = formData.conditions || [];
    
    if (currentConditions.includes(condition)) {
      setFormData({
        ...formData,
        conditions: currentConditions.filter(c => c !== condition)
      });
    } else {
      setFormData({
        ...formData,
        conditions: [...currentConditions, condition]
      });
    }
  };

  // Handle add maneuver
  const handleAddManeuver = () => {
    if (!newManeuver.type || !newManeuver.count) return;
    
    const maneuverToAdd: FlightManeuver = {
      type: newManeuver.type as ManeuverType,
      count: newManeuver.count || 1,
      performance: newManeuver.performance as 'satisfactory' | 'needs_improvement' | 'unsatisfactory',
      notes: newManeuver.notes
    };
    
    const currentManeuvers = formData.maneuvers || [];
    
    // Check if this maneuver type already exists
    const existingIndex = currentManeuvers.findIndex(m => m.type === maneuverToAdd.type);
    
    if (existingIndex >= 0) {
      // Update existing maneuver
      const updatedManeuvers = [...currentManeuvers];
      updatedManeuvers[existingIndex] = {
        ...updatedManeuvers[existingIndex],
        count: (updatedManeuvers[existingIndex].count || 0) + maneuverToAdd.count,
        performance: maneuverToAdd.performance || updatedManeuvers[existingIndex].performance,
        notes: maneuverToAdd.notes || updatedManeuvers[existingIndex].notes
      };
      
      setFormData({
        ...formData,
        maneuvers: updatedManeuvers
      });
    } else {
      // Add new maneuver
      setFormData({
        ...formData,
        maneuvers: [...currentManeuvers, maneuverToAdd]
      });
    }
    
    // Reset form
    setNewManeuver({
      type: ManeuverType.TAKEOFF,
      count: 1
    });
  };

  // Handle remove maneuver
  const handleRemoveManeuver = (type: ManeuverType) => {
    const currentManeuvers = formData.maneuvers || [];
    
    setFormData({
      ...formData,
      maneuvers: currentManeuvers.filter(m => m.type !== type)
    });
  };

  // Validate form
  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};
    
    if (!formData.date) {
      newErrors.date = 'Date is required';
    }
    
    if (!formData.aircraftType) {
      newErrors.aircraftType = 'Aircraft type is required';
    }
    
    if (!formData.aircraftRegistration) {
      newErrors.aircraftRegistration = 'Aircraft registration is required';
    }
    
    if (!formData.departureAirport) {
      newErrors.departureAirport = 'Departure airport is required';
    }
    
    if (!formData.arrivalAirport) {
      newErrors.arrivalAirport = 'Arrival airport is required';
    }
    
    if (!formData.totalFlightTime) {
      newErrors.totalFlightTime = 'Total flight time is required';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    try {
      await onSave(formData);
    } catch (error) {
      console.error('Error saving flight log entry:', error);
    }
  };

  // Format label from enum
  const formatLabel = (value: string): string => {
    return value
      .split('_')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
      .join(' ');
  };

  return (
    <Form onSubmit={handleSubmit}>
      <div className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <Input
            label="Date"
            name="date"
            type="date"
            value={formData.date ? new Date(formData.date).toISOString().split('T')[0] : ''}
            onChange={handleInputChange}
            error={errors.date}
            required
          />
          
          <div>
            <label htmlFor="aircraftType" className="block text-sm font-medium text-gray-700 mb-1">
              Aircraft Type
            </label>
            <div className="relative">
              <input
                list="aircraftTypesList"
                id="aircraftType"
                name="aircraftType"
                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={formData.aircraftType || ''}
                onChange={handleInputChange}
                required
              />
              <datalist id="aircraftTypesList">
                {aircraftTypes.map(type => (
                  <option key={type} value={type} />
                ))}
              </datalist>
            </div>
            {errors.aircraftType && (
              <p className="mt-1 text-sm text-red-600">{errors.aircraftType}</p>
            )}
          </div>
          
          <Input
            label="Aircraft Registration"
            name="aircraftRegistration"
            value={formData.aircraftRegistration || ''}
            onChange={handleInputChange}
            error={errors.aircraftRegistration}
            required
          />
        </div>
        
        <div>
          <label htmlFor="aircraftCategory" className="block text-sm font-medium text-gray-700 mb-1">
            Aircraft Category
          </label>
          <select
            id="aircraftCategory"
            name="aircraftCategory"
            className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
            value={formData.aircraftCategory || AircraftCategory.AIRPLANE_SINGLE_ENGINE}
            onChange={handleInputChange}
          >
            {Object.values(AircraftCategory).map(category => (
              <option key={category} value={category}>
                {formatLabel(category)}
              </option>
            ))}
          </select>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <Input
            label="Departure Airport"
            name="departureAirport"
            value={formData.departureAirport || ''}
            onChange={handleInputChange}
            error={errors.departureAirport}
            required
          />
          
          <Input
            label="Arrival Airport"
            name="arrivalAirport"
            value={formData.arrivalAirport || ''}
            onChange={handleInputChange}
            error={errors.arrivalAirport}
            required
          />
        </div>
        
        <Input
          label="Route"
          name="route"
          value={formData.route || ''}
          onChange={handleInputChange}
          helpText="Optional: Enter route of flight"
        />
        
        <Input
          label="Total Flight Time (hours)"
          name="totalFlightTime"
          type="number"
          step="0.1"
          min="0"
          value={formData.totalFlightTime || ''}
          onChange={handleInputChange}
          error={errors.totalFlightTime}
          required
        />
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Flight Conditions
          </label>
          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2">
            {Object.values(FlightCondition).map(condition => (
              <div key={condition} className="flex items-center">
                <input
                  type="checkbox"
                  id={`condition-${condition}`}
                  checked={(formData.conditions || []).includes(condition)}
                  onChange={() => handleConditionToggle(condition)}
                  className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                />
                <label htmlFor={`condition-${condition}`} className="ml-2 text-sm text-gray-700">
                  {formatLabel(condition)}
                </label>
              </div>
            ))}
          </div>
        </div>
        
        <div className="border-t border-gray-200 pt-4">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Maneuvers
          </label>
          
          {/* List current maneuvers */}
          {(formData.maneuvers || []).length > 0 && (
            <div className="mb-4 space-y-2">
              {(formData.maneuvers || []).map(maneuver => (
                <div key={maneuver.type} className="flex items-center justify-between bg-gray-50 p-2 rounded">
                  <div>
                    <span className="font-medium">{formatLabel(maneuver.type)}</span>
                    <span className="ml-2 text-gray-500">({maneuver.count})</span>
                    {maneuver.performance && (
                      <span className={`ml-2 text-xs px-2 py-0.5 rounded ${
                        maneuver.performance === 'satisfactory' ? 'bg-green-100 text-green-800' :
                        maneuver.performance === 'needs_improvement' ? 'bg-yellow-100 text-yellow-800' :
                        'bg-red-100 text-red-800'
                      }`}>
                        {formatLabel(maneuver.performance)}
                      </span>
                    )}
                    {maneuver.notes && (
                      <p className="text-xs text-gray-500 mt-1">{maneuver.notes}</p>
                    )}
                  </div>
                  <button
                    type="button"
                    onClick={() => handleRemoveManeuver(maneuver.type)}
                    className="text-red-500 hover:text-red-700"
                  >
                    <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                </div>
              ))}
            </div>
          )}
          
          {/* Add maneuver form */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-2 mb-2">
            <div>
              <label htmlFor="maneuverType" className="block text-xs font-medium text-gray-700 mb-1">
                Type
              </label>
              <select
                id="maneuverType"
                value={newManeuver.type || ManeuverType.TAKEOFF}
                onChange={(e) => setNewManeuver({ ...newManeuver, type: e.target.value as ManeuverType })}
                className="block w-full pl-3 pr-10 py-2 text-sm border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 rounded-md"
              >
                {Object.values(ManeuverType).map(type => (
                  <option key={type} value={type}>
                    {formatLabel(type)}
                  </option>
                ))}
              </select>
            </div>
            
            <div>
              <label htmlFor="maneuverCount" className="block text-xs font-medium text-gray-700 mb-1">
                Count
              </label>
              <input
                type="number"
                id="maneuverCount"
                min="1"
                value={newManeuver.count || 1}
                onChange={(e) => setNewManeuver({ ...newManeuver, count: parseInt(e.target.value) || 1 })}
                className="block w-full pl-3 pr-10 py-2 text-sm border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 rounded-md"
              />
            </div>
            
            <div>
              <label htmlFor="maneuverPerformance" className="block text-xs font-medium text-gray-700 mb-1">
                Performance
              </label>
              <select
                id="maneuverPerformance"
                value={newManeuver.performance || ''}
                onChange={(e) => setNewManeuver({ ...newManeuver, performance: e.target.value as 'satisfactory' | 'needs_improvement' | 'unsatisfactory' })}
                className="block w-full pl-3 pr-10 py-2 text-sm border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 rounded-md"
              >
                <option value="">Select Performance</option>
                <option value="satisfactory">Satisfactory</option>
                <option value="needs_improvement">Needs Improvement</option>
                <option value="unsatisfactory">Unsatisfactory</option>
              </select>
            </div>
            
            <div className="flex items-end">
              <Button
                type="button"
                variant="outline"
                size="small"
                onClick={handleAddManeuver}
                className="w-full"
              >
                Add Maneuver
              </Button>
            </div>
          </div>
          
          <div>
            <label htmlFor="maneuverNotes" className="block text-xs font-medium text-gray-700 mb-1">
              Maneuver Notes
            </label>
            <textarea
              id="maneuverNotes"
              value={newManeuver.notes || ''}
              onChange={(e) => setNewManeuver({ ...newManeuver, notes: e.target.value })}
              rows={2}
              className="block w-full pl-3 pr-10 py-2 text-sm border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 rounded-md"
              placeholder="Optional notes about the maneuver"
            />
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <Input
            label="PIC Name"
            name="picName"
            value={formData.picName || ''}
            onChange={handleInputChange}
            helpText="Pilot in Command"
          />
          
          <Input
            label="SIC Name"
            name="sicName"
            value={formData.sicName || ''}
            onChange={handleInputChange}
            helpText="Second in Command"
          />
          
          <Input
            label="Instructor Name"
            name="instructorName"
            value={formData.instructorName || ''}
            onChange={handleInputChange}
          />
        </div>
        
        <div>
          <label htmlFor="notes" className="block text-sm font-medium text-gray-700 mb-1">
            Notes
          </label>
          <textarea
            id="notes"
            name="notes"
            rows={3}
            className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
            value={formData.notes || ''}
            onChange={handleInputChange}
            placeholder="Additional notes about the flight"
          />
        </div>
        
        <div className="flex justify-end space-x-3">
          <Button
            type="button"
            variant="outline"
            onClick={onCancel}
          >
            Cancel
          </Button>
          
          <Button
            type="submit"
            variant="primary"
            isLoading={isLoading}
            disabled={isLoading}
          >
            {isEditing ? 'Update Flight Log' : 'Save Flight Log'}
          </Button>
        </div>
      </div>
    </Form>
  );
};

// Flight Log Entry Detail Component
interface FlightLogEntryDetailProps {
  entry: FlightLogEntry;
  onEdit: () => void;
  onClose: () => void;
  onDelete: () => void;
  onEndorse?: (instructorName: string) => Promise<void>;
  isInstructor: boolean;
}

const FlightLogEntryDetail: React.FC<FlightLogEntryDetailProps> = ({
  entry,
  onEdit,
  onClose,
  onDelete,
  onEndorse,
  isInstructor
}) => {
  const [isEndorsing, setIsEndorsing] = useState(false);
  const [instructorName, setInstructorName] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  
  // Format date
  const formatDate = (date: Date): string => {
    return new Date(date).toLocaleDateString();
  };
  
  // Format label from enum
  const formatLabel = (value: string): string => {
    return value
      .split('_')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
      .join(' ');
  };
  
  // Handle endorse
  const handleEndorse = async () => {
    if (!instructorName) return;
    
    setIsLoading(true);
    
    try {
      if (onEndorse) {
        await onEndorse(instructorName);
      }
      setIsEndorsing(false);
    } catch (error) {
      console.error('Error endorsing flight log:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flight-log-entry-detail">
      <div className="flex justify-between items-start mb-4">
        <div>
          <h2 className="text-xl font-bold">
            Flight Log: {entry.departureAirport} to {entry.arrivalAirport}
          </h2>
          <p className="text-gray-500">{formatDate(entry.date)}</p>
        </div>
        
        <div className="flex space-x-2">
          <Button
            variant="outline"
            size="small"
            onClick={onEdit}
          >
            Edit
          </Button>
          
          <Button
            variant="outline"
            size="small"
            onClick={onDelete}
          >
            Delete
          </Button>
          
          {isInstructor && !entry.isEndorsed && onEndorse && (
            <Button
              variant="primary"
              size="small"
              onClick={() => setIsEndorsing(true)}
            >
              Endorse
            </Button>
          )}
        </div>
      </div>
      
      {entry.isEndorsed && (
        <div className="mb-4 p-3 bg-green-50 border border-green-200 rounded-md">
          <div className="flex items-center">
            <svg className="h-5 w-5 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
            </svg>
            <span className="font-medium text-green-800">
              Endorsed by {entry.endorsedBy} on {entry.endorsedAt ? formatDate(entry.endorsedAt) : 'Unknown'}
            </span>
          </div>
        </div>
      )}
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        <div>
          <h3 className="text-lg font-medium mb-3">Flight Details</h3>
          
          <div className="grid grid-cols-2 gap-4">
            <div>
              <p className="text-sm font-medium text-gray-500">Aircraft Type</p>
              <p>{entry.aircraftType}</p>
            </div>
            
            <div>
              <p className="text-sm font-medium text-gray-500">Registration</p>
              <p>{entry.aircraftRegistration}</p>
            </div>
            
            <div>
              <p className="text-sm font-medium text-gray-500">Category</p>
              <p>{formatLabel(entry.aircraftCategory)}</p>
            </div>
            
            <div>
              <p className="text-sm font-medium text-gray-500">Flight Time</p>
              <p>{entry.totalFlightTime} hours</p>
            </div>
            
            <div>
              <p className="text-sm font-medium text-gray-500">Departure</p>
              <p>{entry.departureAirport}</p>
            </div>
            
            <div>
              <p className="text-sm font-medium text-gray-500">Arrival</p>
              <p>{entry.arrivalAirport}</p>
            </div>
          </div>
          
          {entry.route && (
            <div className="mt-4">
              <p className="text-sm font-medium text-gray-500">Route</p>
              <p>{entry.route}</p>
            </div>
          )}
          
          <div className="mt-4">
            <p className="text-sm font-medium text-gray-500">Conditions</p>
            <div className="flex flex-wrap gap-1 mt-1">
              {entry.conditions.map(condition => (
                <span 
                  key={condition}
                  className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
                >
                  {formatLabel(condition)}
                </span>
              ))}
            </div>
          </div>
          
          <div className="mt-4">
            <p className="text-sm font-medium text-gray-500">Crew</p>
            <div className="grid grid-cols-2 gap-4 mt-1">
              {entry.picName && (
                <div>
                  <p className="text-xs text-gray-500">PIC</p>
                  <p className="text-sm">{entry.picName}</p>
                </div>
              )}
              
              {entry.sicName && (
                <div>
                  <p className="text-xs text-gray-500">SIC</p>
                  <p className="text-sm">{entry.sicName}</p>
                </div>
              )}
              
              {entry.instructorName && (
                <div>
                  <p className="text-xs text-gray-500">Instructor</p>
                  <p className="text-sm">{entry.instructorName}</p>
                </div>
              )}
            </div>
          </div>
        </div>
        
        <div>
          <h3 className="text-lg font-medium mb-3">Maneuvers</h3>
          
          {entry.maneuvers.length > 0 ? (
            <div className="space-y-2">
              {entry.maneuvers.map(maneuver => (
                <div key={maneuver.type} className="p-3 bg-gray-50 rounded-md">
                  <div className="flex justify-between">
                    <p className="font-medium">{formatLabel(maneuver.type)}</p>
                    <p className="text-gray-500">{maneuver.count} {maneuver.count > 1 ? 'times' : 'time'}</p>
                  </div>
                  
                  {maneuver.performance && (
                    <p className="mt-1">
                      <span className={`text-xs px-2 py-0.5 rounded ${
                        maneuver.performance === 'satisfactory' ? 'bg-green-100 text-green-800' :
                        maneuver.performance === 'needs_improvement' ? 'bg-yellow-100 text-yellow-800' :
                        'bg-red-100 text-red-800'
                      }`}>
                        {formatLabel(maneuver.performance)}
                      </span>
                    </p>
                  )}
                  
                  {maneuver.notes && (
                    <p className="mt-2 text-sm text-gray-600">{maneuver.notes}</p>
                  )}
                </div>
              ))}
            </div>
          ) : (
            <p className="text-gray-500">No maneuvers recorded for this flight.</p>
          )}
          
          {entry.notes && (
            <div className="mt-4">
              <p className="text-sm font-medium text-gray-500">Notes</p>
              <p className="mt-1 text-sm">{entry.notes}</p>
            </div>
          )}
        </div>
      </div>
      
      {/* Endorse modal */}
      {isEndorsing && (
        <Modal
          isOpen={isEndorsing}
          onClose={() => setIsEndorsing(false)}
          title="Endorse Flight Log Entry"
          size="md"
        >
          <div className="space-y-4">
            <p className="text-sm text-gray-500">
              By endorsing this flight log entry, you certify that the information provided is accurate and the flight was conducted according to applicable regulations.
            </p>
            
            <Input
              label="Instructor Name"
              value={instructorName}
              onChange={(e) => setInstructorName(e.target.value)}
              required
            />
            
            <div className="flex justify-end space-x-3">
              <Button
                variant="outline"
                onClick={() => setIsEndorsing(false)}
              >
                Cancel
              </Button>
              
              <Button
                variant="primary"
                onClick={handleEndorse}
                isLoading={isLoading}
                disabled={isLoading || !instructorName}
              >
                Endorse Flight
              </Button>
            </div>
          </div>
        </Modal>
      )}
    </div>
  );
};

// Flight Log Summary Component
interface FlightLogSummaryProps {
  entries: FlightLogEntry[];
  startDate?: Date;
  endDate?: Date;
}

const FlightLogSummary: React.FC<FlightLogSummaryProps> = ({
  entries,
  startDate,
  endDate
}) => {
  // Filter entries by date range if provided
  const filteredEntries = entries.filter(entry => {
    const entryDate = new Date(entry.date);
    
    if (startDate && entryDate < startDate) {
      return false;
    }
    
    if (endDate && entryDate > endDate) {
      return false;
    }
    
    return true;
  });
  
  // Calculate hours breakdown
  const calculateHoursBreakdown = (): HoursBreakdown => {
    const breakdown: HoursBreakdown = {
      total: 0,
      pic: 0,
      sic: 0,
      solo: 0,
      dual: 0,
      instructionGiven: 0,
      night: 0,
      ifr: 0,
      crossCountry: 0,
      byCategory: {
        [AircraftCategory.AIRPLANE_SINGLE_ENGINE]: 0,
        [AircraftCategory.AIRPLANE_MULTI_ENGINE]: 0,
        [AircraftCategory.HELICOPTER]: 0,
        [AircraftCategory.GLIDER]: 0,
        [AircraftCategory.SIMULATOR]: 0
      }
    };
    
    filteredEntries.forEach(entry => {
      const flightTime = entry.totalFlightTime || 0;
      
      // Total time
      breakdown.total += flightTime;
      
      // Time by aircraft category
      breakdown.byCategory[entry.aircraftCategory] += flightTime;
      
      // Time by conditions
      if (entry.conditions.includes(FlightCondition.PIC)) {
        breakdown.pic += flightTime;
      }
      
      if (entry.conditions.includes(FlightCondition.SIC)) {
        breakdown.sic += flightTime;
      }
      
      if (entry.conditions.includes(FlightCondition.SOLO)) {
        breakdown.solo += flightTime;
      }
      
      if (entry.conditions.includes(FlightCondition.DUAL)) {
        breakdown.dual += flightTime;
      }
      
      if (entry.conditions.includes(FlightCondition.INSTRUCTION_GIVEN)) {
        breakdown.instructionGiven += flightTime;
      }
      
      if (entry.conditions.includes(FlightCondition.NIGHT)) {
        breakdown.night += flightTime;
      }
      
      if (entry.conditions.includes(FlightCondition.IFR)) {
        breakdown.ifr += flightTime;
      }
      
      if (entry.conditions.includes(FlightCondition.CROSS_COUNTRY)) {
        breakdown.crossCountry += flightTime;
      }
    });
    
    return breakdown;
  };
  
  // Calculate maneuver breakdown
  const calculateManeuverBreakdown = (): ManeuverBreakdown[] => {
    const maneuverMap: Record<string, ManeuverBreakdown> = {};
    
    // Initialize for all maneuver types
    Object.values(ManeuverType).forEach(type => {
      maneuverMap[type] = {
        type: type as ManeuverType,
        total: 0,
        byPerformance: {
          satisfactory: 0,
          needsImprovement: 0,
          unsatisfactory: 0
        }
      };
    });
    
    // Count maneuvers
    filteredEntries.forEach(entry => {
      entry.maneuvers.forEach(maneuver => {
        maneuverMap[maneuver.type].total += maneuver.count || 0;
        
        if (maneuver.performance) {
          const performanceKey = maneuver.performance === 'needs_improvement' 
            ? 'needsImprovement' 
            : maneuver.performance as 'satisfactory' | 'unsatisfactory';
          
          maneuverMap[maneuver.type].byPerformance[performanceKey] += maneuver.count || 0;
        }
      });
    });
    
    // Convert to array and sort by total
    return Object.values(maneuverMap)
      .filter(m => m.total > 0)
      .sort((a, b) => b.total - a.total);
  };
  
  const hoursBreakdown = calculateHoursBreakdown();
  const maneuverBreakdown = calculateManeuverBreakdown();
  
  // Format label from enum
  const formatLabel = (value: string): string => {
    return value
      .split('_')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
      .join(' ');
  };
  
  // Format number with 1 decimal place
  const formatNumber = (value: number): string => {
    return value.toFixed(1);
  };

  return (
    <div className="flight-log-summary">
      <div className="mb-4">
        <h3 className="text-lg font-medium">Flight Time Summary</h3>
        <p className="text-sm text-gray-500">
          Based on {filteredEntries.length} flight{filteredEntries.length !== 1 ? 's' : ''}
          {startDate && endDate && ` from ${startDate.toLocaleDateString()} to ${endDate.toLocaleDateString()}`}
        </p>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        <Card>
          <h4 className="text-base font-medium mb-3">Flight Hours</h4>
          
          <div className="space-y-2">
            <div className="flex justify-between p-2 bg-blue-50 rounded">
              <span className="font-medium">Total Flight Time</span>
              <span className="font-bold">{formatNumber(hoursBreakdown.total)} hours</span>
            </div>
            
            <div className="grid grid-cols-2 gap-2">
              <div className="flex justify-between p-2 bg-gray-50 rounded">
                <span>PIC Time</span>
                <span>{formatNumber(hoursBreakdown.pic)}</span>
              </div>
              
              <div className="flex justify-between p-2 bg-gray-50 rounded">
                <span>SIC Time</span>
                <span>{formatNumber(hoursBreakdown.sic)}</span>
              </div>
              
              <div className="flex justify-between p-2 bg-gray-50 rounded">
                <span>Solo Time</span>
                <span>{formatNumber(hoursBreakdown.solo)}</span>
              </div>
              
              <div className="flex justify-between p-2 bg-gray-50 rounded">
                <span>Dual Received</span>
                <span>{formatNumber(hoursBreakdown.dual)}</span>
              </div>
              
              <div className="flex justify-between p-2 bg-gray-50 rounded">
                <span>Instruction Given</span>
                <span>{formatNumber(hoursBreakdown.instructionGiven)}</span>
              </div>
              
              <div className="flex justify-between p-2 bg-gray-50 rounded">
                <span>Night</span>
                <span>{formatNumber(hoursBreakdown.night)}</span>
              </div>
              
              <div className="flex justify-between p-2 bg-gray-50 rounded">
                <span>IFR</span>
                <span>{formatNumber(hoursBreakdown.ifr)}</span>
              </div>
              
              <div className="flex justify-between p-2 bg-gray-50 rounded">
                <span>Cross Country</span>
                <span>{formatNumber(hoursBreakdown.crossCountry)}</span>
              </div>
            </div>
          </div>
        </Card>
        
        <Card>
          <h4 className="text-base font-medium mb-3">Aircraft Categories</h4>
          
          <div className="space-y-2">
            {Object.entries(hoursBreakdown.byCategory)
              .filter(([_, hours]) => hours > 0)
              .sort(([_, hoursA], [__, hoursB]) => hoursB - hoursA)
              .map(([category, hours]) => (
                <div key={category} className="flex justify-between p-2 bg-gray-50 rounded">
                  <span>{formatLabel(category)}</span>
                  <span>{formatNumber(hours)}</span>
                </div>
              ))
            }
            
            {Object.values(hoursBreakdown.byCategory).every(hours => hours === 0) && (
              <p className="text-gray-500">No category data available.</p>
            )}
          </div>
        </Card>
      </div>
      
      <div className="mb-6">
        <Card>
          <h4 className="text-base font-medium mb-3">Maneuvers</h4>
          
          {maneuverBreakdown.length > 0 ? (
            <div className="space-y-3">
              {maneuverBreakdown.map(maneuver => (
                <div key={maneuver.type} className="p-3 bg-gray-50 rounded-md">
                  <div className="flex justify-between items-center">
                    <span className="font-medium">{formatLabel(maneuver.type)}</span>
                    <span className="text-lg font-bold">{maneuver.total}</span>
                  </div>
                  
                  <div className="mt-2 grid grid-cols-3 gap-1 text-sm">
                    {maneuver.byPerformance.satisfactory > 0 && (
                      <div className="flex justify-between items-center px-2 py-1 bg-green-100 rounded">
                        <span>Satisfactory</span>
                        <span>{maneuver.byPerformance.satisfactory}</span>
                      </div>
                    )}
                    
                    {maneuver.byPerformance.needsImprovement > 0 && (
                      <div className="flex justify-between items-center px-2 py-1 bg-yellow-100 rounded">
                        <span>Needs Improvement</span>
                        <span>{maneuver.byPerformance.needsImprovement}</span>
                      </div>
                    )}
                    
                    {maneuver.byPerformance.unsatisfactory > 0 && (
                      <div className="flex justify-between items-center px-2 py-1 bg-red-100 rounded">
                        <span>Unsatisfactory</span>
                        <span>{maneuver.byPerformance.unsatisfactory}</span>
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <p className="text-gray-500">No maneuver data available.</p>
          )}
        </Card>
      </div>
    </div>
  );
};

// Main Flight Log Manager Component
interface FlightLogManagerProps {
  entries: FlightLogEntry[];
  aircraftTypes: string[];
  isInstructor: boolean;
  userId: string;
  onCreateEntry: (entry: Partial<FlightLogEntry>) => Promise<void>;
  onUpdateEntry: (id: string, entry: Partial<FlightLogEntry>) => Promise<void>;
  onDeleteEntry: (id: string) => Promise<void>;
  onEndorseEntry?: (id: string, instructorName: string) => Promise<void>;
  onExportLogs: (format: 'pdf' | 'csv', dateRange?: { start: Date; end: Date }) => Promise<void>;
}

export const FlightLogManager: React.FC<FlightLogManagerProps> = ({
  entries,
  aircraftTypes,
  isInstructor,
  userId,
  onCreateEntry,
  onUpdateEntry,
  onDeleteEntry,
  onEndorseEntry,
  onExportLogs
}) => {
  const [activeTab, setActiveTab] = useState<'entries' | 'summary' | 'add'>('entries');
  const [selectedEntryId, setSelectedEntryId] = useState<string | null>(null);
  const [isEditingEntry, setIsEditingEntry] = useState(false);
  const [isCreatingEntry, setIsCreatingEntry] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [alertMessage, setAlertMessage] = useState<{ type: 'success' | 'error'; message: string } | null>(null);
  const [dateRange, setDateRange] = useState<{ start: Date; end: Date }>({
    start: new Date(new Date().setMonth(new Date().getMonth() - 1)),
    end: new Date()
  });
  const [deleteConfirmationId, setDeleteConfirmationId] = useState<string | null>(null);
  
  // Get selected entry
  const selectedEntry = selectedEntryId ? entries.find(e => e.id === selectedEntryId) : null;
  
  // Handle save entry
  const handleSaveEntry = async (entryData: Partial<FlightLogEntry>) => {
    setIsLoading(true);
    
    try {
      if (isEditingEntry && selectedEntryId) {
        await onUpdateEntry(selectedEntryId, entryData);
        setAlertMessage({
          type: 'success',
          message: 'Flight log entry updated successfully.'
        });
        setIsEditingEntry(false);
      } else {
        await onCreateEntry(entryData);
        setAlertMessage({
          type: 'success',
          message: 'Flight log entry created successfully.'
        });
        setIsCreatingEntry(false);
      }
      setActiveTab('entries');
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Error saving flight log entry: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  // Handle delete entry
  const handleDeleteEntry = async (id: string) => {
    setIsLoading(true);
    
    try {
      await onDeleteEntry(id);
      setAlertMessage({
        type: 'success',
        message: 'Flight log entry deleted successfully.'
      });
      setSelectedEntryId(null);
      setDeleteConfirmationId(null);
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Error deleting flight log entry: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  // Handle endorse entry
  const handleEndorseEntry = async (instructorName: string) => {
    if (!selectedEntryId || !onEndorseEntry) return;
    
    setIsLoading(true);
    
    try {
      await onEndorseEntry(selectedEntryId, instructorName);
      setAlertMessage({
        type: 'success',
        message: 'Flight log entry endorsed successfully.'
      });
      
      // Refresh the selected entry
      const updatedEntry = entries.find(e => e.id === selectedEntryId);
      if (updatedEntry) {
        setSelectedEntryId(updatedEntry.id);
      }
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Error endorsing flight log entry: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  // Handle export logs
  const handleExportLogs = async (format: 'pdf' | 'csv') => {
    try {
      await onExportLogs(format, dateRange);
      setAlertMessage({
        type: 'success',
        message: `Flight logs exported as ${format.toUpperCase()} successfully.`
      });
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Error exporting flight logs: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };
  
  // Define table columns
  const columns: Column<FlightLogEntry>[] = [
    {
      key: 'date',
      header: 'Date',
      render: (entry) => new Date(entry.date).toLocaleDateString(),
      sortable: true
    },
    {
      key: 'route',
      header: 'Route',
      render: (entry) => (
        <div>
          <div className="font-medium">{entry.departureAirport} → {entry.arrivalAirport}</div>
          {entry.route && <div className="text-xs text-gray-500">{entry.route}</div>}
        </div>
      ),
      sortable: true
    },
    {
      key: 'aircraft',
      header: 'Aircraft',
      render: (entry) => (
        <div>
          <div>{entry.aircraftType}</div>
          <div className="text-xs text-gray-500">{entry.aircraftRegistration}</div>
        </div>
      ),
      sortable: true
    },
    {
      key: 'time',
      header: 'Time',
      render: (entry) => `${entry.totalFlightTime.toFixed(1)} hrs`,
      sortable: true
    },
    {
      key: 'conditions',
      header: 'Conditions',
      render: (entry) => (
        <div className="flex flex-wrap gap-1">
          {entry.conditions.slice(0, 3).map((condition) => (
            <span 
              key={condition}
              className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
            >
              {condition.toUpperCase()}
            </span>
          ))}
          {entry.conditions.length > 3 && (
            <span className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
              +{entry.conditions.length - 3}
            </span>
          )}
        </div>
      )
    },
    {
      key: 'endorsement',
      header: 'Status',
      render: (entry) => (
        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
          entry.isEndorsed ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
        }`}>
          {entry.isEndorsed ? 'Endorsed' : 'Pending'}
        </span>
      ),
      sortable: true
    }
  ];
  
  // Define tabs
  const tabs: Tab[] = [
    {
      id: 'entries',
      label: 'Flight Entries',
      content: (
        <div>
          <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-4 gap-2">
            <div className="flex space-x-2">
              <Button
                variant="primary"
                onClick={() => {
                  setIsCreatingEntry(true);
                  setActiveTab('add');
                }}
              >
                Add Flight
              </Button>
              
              <div className="relative">
                <Button
                  variant="outline"
                  onClick={() => {/* Toggle dropdown */}}
                >
                  Export
                </Button>
                <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-10">
                  <button
                    className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left"
                    onClick={() => handleExportLogs('pdf')}
                  >
                    Export as PDF
                  </button>
                  <button
                    className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left"
                    onClick={() => handleExportLogs('csv')}
                  >
                    Export as CSV
                  </button>
                </div>
              </div>
            </div>
            
            <div className="flex space-x-2">
              <div>
                <label htmlFor="startDate" className="block text-xs font-medium text-gray-700 mb-1">
                  Start Date
                </label>
                <input
                  type="date"
                  id="startDate"
                  className="block w-full pl-3 pr-10 py-2 text-sm border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 rounded-md"
                  value={dateRange.start.toISOString().split('T')[0]}
                  onChange={(e) => setDateRange({ ...dateRange, start: new Date(e.target.value) })}
                />
              </div>
              
              <div>
                <label htmlFor="endDate" className="block text-xs font-medium text-gray-700 mb-1">
                  End Date
                </label>
                <input
                  type="date"
                  id="endDate"
                  className="block w-full pl-3 pr-10 py-2 text-sm border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 rounded-md"
                  value={dateRange.end.toISOString().split('T')[0]}
                  onChange={(e) => setDateRange({ ...dateRange, end: new Date(e.target.value) })}
                />
              </div>
            </div>
          </div>
          
          {entries.length > 0 ? (
            <DataTable
              columns={columns}
              data={entries.filter(entry => {
                const entryDate = new Date(entry.date);
                return entryDate >= dateRange.start && entryDate <= dateRange.end;
              })}
              keyExtractor={(entry) => entry.id}
              onRowClick={(entry) => setSelectedEntryId(entry.id)}
              pagination={{
                pageSize: 10,
                totalItems: entries.length,
                currentPage: 1,
                onPageChange: () => {}
              }}
            />
          ) : (
            <div className="text-center py-8">
              <p className="text-gray-500">No flight log entries found.</p>
              <Button
                variant="primary"
                className="mt-4"
                onClick={() => {
                  setIsCreatingEntry(true);
                  setActiveTab('add');
                }}
              >
                Add Your First Flight
              </Button>
            </div>
          )}
        </div>
      )
    },
    {
      id: 'summary',
      label: 'Flight Summary',
      content: (
        <FlightLogSummary 
          entries={entries}
          startDate={dateRange.start}
          endDate={dateRange.end}
        />
      )
    },
    {
      id: 'add',
      label: isEditingEntry ? 'Edit Flight' : 'Add Flight',
      content: (
        <FlightLogEntryForm
          entry={isEditingEntry && selectedEntry ? selectedEntry : undefined}
          onSave={handleSaveEntry}
          onCancel={() => {
            setIsCreatingEntry(false);
            setIsEditingEntry(false);
            setActiveTab('entries');
          }}
          aircraftTypes={aircraftTypes}
          isLoading={isLoading}
        />
      )
    }
  ];

  return (
    <div className="flight-log-manager">
      {alertMessage && (
        <Alert
          type={alertMessage.type}
          message={alertMessage.message}
          onClose={() => setAlertMessage(null)}
        />
      )}
      
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900">Flight Logbook</h1>
        <p className="text-gray-500">Track and manage your flight hours and training progress</p>
      </div>
      
      {selectedEntry && !isEditingEntry ? (
        <Card className="mb-6">
          <FlightLogEntryDetail
            entry={selectedEntry}
            onEdit={() => {
              setIsEditingEntry(true);
              setActiveTab('add');
            }}
            onClose={() => setSelectedEntryId(null)}
            onDelete={() => setDeleteConfirmationId(selectedEntry.id)}
            onEndorse={onEndorseEntry ? handleEndorseEntry : undefined}
            isInstructor={isInstructor}
          />
        </Card>
      ) : (
        <Tabs
          tabs={tabs}
          defaultTabId="entries"
          onChange={(id) => {
            if (id === 'add' && !isCreatingEntry && !isEditingEntry) {
              setIsCreatingEntry(true);
            }
            setActiveTab(id as 'entries' | 'summary' | 'add');
          }}
        />
      )}
      
      {/* Delete confirmation modal */}
      {deleteConfirmationId && (
        <Modal
          isOpen={!!deleteConfirmationId}
          onClose={() => setDeleteConfirmationId(null)}
          title="Confirm Delete"
          size="sm"
        >
          <div className="space-y-4">
            <p>Are you sure you want to delete this flight log entry? This action cannot be undone.</p>
            
            <div className="flex justify-end space-x-3">
              <Button
                variant="outline"
                onClick={() => setDeleteConfirmationId(null)}
              >
                Cancel
              </Button>
              
              <Button
                variant="danger"
                onClick={() => handleDeleteEntry(deleteConfirmationId)}
                isLoading={isLoading}
              >
                Delete
              </Button>
            </div>
          </div>
        </Modal>
      )}
    </div>
  );
};

// src/frontend/utils/validation/formValidation.ts
import { useState, useEffect } from 'react';

// Types
export type ValidationRule<T> = {
  validate: (value: T, formValues?: Record<string, any>) => boolean;
  message: string;
};

export type FieldValidationRules<T> = {
  [key: string]: ValidationRule<T>[];
};

export type FormErrors = Record<string, string>;

export type ValidationOptions = {
  validateOnChange?: boolean;
  validateOnBlur?: boolean;
  validateOnMount?: boolean;
};

// Basic validation rules
export const required = (message = 'This field is required'): ValidationRule<any> => ({
  validate: (value) => {
    if (value === undefined || value === null) return false;
    if (typeof value === 'string') return value.trim() !== '';
    if (Array.isArray(value)) return value.length > 0;
    return true;
  },
  message,
});

export const minLength = (min: number, message = `Must be at least ${min} characters`): ValidationRule<string> => ({
  validate: (value) => {
    if (typeof value !== 'string') return false;
    return value.length >= min;
  },
  message,
});

export const maxLength = (max: number, message = `Must be at most ${max} characters`): ValidationRule<string> => ({
  validate: (value) => {
    if (typeof value !== 'string') return false;
    return value.length <= max;
  },
  message,
});

export const pattern = (regex: RegExp, message = 'Invalid format'): ValidationRule<string> => ({
  validate: (value) => {
    if (typeof value !== 'string') return false;
    return regex.test(value);
  },
  message,
});

export const email = (message = 'Invalid email address'): ValidationRule<string> => ({
  validate: (value) => {
    if (typeof value !== 'string') return false;
    // Simple email validation regex
    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    return emailRegex.test(value);
  },
  message,
});

export const numeric = (message = 'Must be a number'): ValidationRule<string | number> => ({
  validate: (value) => {
    if (typeof value === 'number') return !isNaN(value);
    if (typeof value === 'string') return !isNaN(Number(value));
    return false;
  },
  message,
});

export const min = (minValue: number, message = `Must be at least ${minValue}`): ValidationRule<number | string> => ({
  validate: (value) => {
    const numValue = typeof value === 'string' ? Number(value) : value;
    return numValue >= minValue;
  },
  message,
});

export const max = (maxValue: number, message = `Must be at most ${maxValue}`): ValidationRule<number | string> => ({
  validate: (value) => {
    const numValue = typeof value === 'string' ? Number(value) : value;
    return numValue <= maxValue;
  },
  message,
});

export const match = (
  fieldToMatch: string,
  message = 'Fields must match'
): ValidationRule<any> => ({
  validate: (value, formValues) => {
    return formValues && value === formValues[fieldToMatch];
  },
  message,
});

// Hook for form validation
export const useFormValidation = <T extends Record<string, any>>(
  initialValues: T,
  validationRules: FieldValidationRules<any>,
  options: ValidationOptions = {}
) => {
  const [values, setValues] = useState<T>(initialValues);
  const [errors, setErrors] = useState<FormErrors>({});
  const [touched, setTouched] = useState<Record<string, boolean>>({});
  const [isValid, setIsValid] = useState(false);
  const [isDirty, setIsDirty] = useState(false);

  const { validateOnChange = true, validateOnBlur = true, validateOnMount = false } = options;

  // Validate a single field
  const validateField = (name: string, value: any): string => {
    if (!validationRules[name]) return '';

    for (const rule of validationRules[name]) {
      if (!rule.validate(value, values)) {
        return rule.message;
      }
    }
    return '';
  };

  // Validate all fields
  const validateAllFields = (): FormErrors => {
    const newErrors: FormErrors = {};
    
    Object.keys(validationRules).forEach((fieldName) => {
      const error = validateField(fieldName, values[fieldName]);
      if (error) {
        newErrors[fieldName] = error;
      }
    });
    
    return newErrors;
  };

  // Check if the form is valid
  const checkFormValidity = (errors: FormErrors): boolean => {
    return Object.keys(errors).length === 0;
  };

  // Handle field change
  const handleChange = (
    name: string,
    value: any,
    shouldValidate = validateOnChange
  ) => {
    setValues((prevValues) => ({ ...prevValues, [name]: value }));
    setIsDirty(true);
    
    if (shouldValidate) {
      const error = validateField(name, value);
      setErrors((prevErrors) => ({
        ...prevErrors,
        [name]: error,
      }));
      
      // Update form validity
      const newErrors = { ...errors, [name]: error };
      if (!error) {
        delete newErrors[name];
      }
      setIsValid(checkFormValidity(newErrors));
    }
  };

  // Handle field blur
  const handleBlur = (name: string) => {
    setTouched((prevTouched) => ({ ...prevTouched, [name]: true }));
    
    if (validateOnBlur) {
      const error = validateField(name, values[name]);
      setErrors((prevErrors) => ({
        ...prevErrors,
        [name]: error,
      }));
      
      // Update form validity
      const newErrors = { ...errors, [name]: error };
      if (!error) {
        delete newErrors[name];
      }
      setIsValid(checkFormValidity(newErrors));
    }
  };

  // Validate the form
  const validateForm = (): boolean => {
    const newErrors = validateAllFields();
    setErrors(newErrors);
    const valid = checkFormValidity(newErrors);
    setIsValid(valid);
    return valid;
  };

  // Reset the form to initial values
  const resetForm = () => {
    setValues(initialValues);
    setErrors({});
    setTouched({});
    setIsDirty(false);
    if (validateOnMount) {
      validateForm();
    } else {
      setIsValid(false);
    }
  };

  // Set form values
  const setFormValues = (newValues: Partial<T>, shouldValidate = true) => {
    setValues((prevValues) => ({ ...prevValues, ...newValues }));
    setIsDirty(true);
    if (shouldValidate) {
      const newErrors: FormErrors = { ...errors };
      Object.keys(newValues).forEach((fieldName) => {
        const error = validateField(fieldName, newValues[fieldName]);
        if (error) {
          newErrors[fieldName] = error;
        } else {
          delete newErrors[fieldName];
        }
      });
      setErrors(newErrors);
      setIsValid(checkFormValidity(newErrors));
    }
  };

  // Validate on mount if enabled
  useEffect(() => {
    if (validateOnMount) {
      validateForm();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return {
    values,
    errors,
    touched,
    isValid,
    isDirty,
    handleChange,
    handleBlur,
    validateForm,
    resetForm,
    setFormValues,
  };
};

// Form validation helper functions
export const validateForm = <T extends Record<string, any>>(
  values: T,
  validationRules: FieldValidationRules<any>
): FormErrors => {
  const errors: FormErrors = {};
  
  Object.keys(validationRules).forEach((fieldName) => {
    const fieldRules = validationRules[fieldName];
    const value = values[fieldName];
    
    for (const rule of fieldRules) {
      if (!rule.validate(value, values)) {
        errors[fieldName] = rule.message;
        break;
      }
    }
  });
  
  return errors;
};

// Utility to create custom validation rules
export const createValidationRule = <T>(
  validateFn: (value: T, formValues?: Record<string, any>) => boolean,
  message: string
): ValidationRule<T> => ({
  validate: validateFn,
  message,
});

// src/frontend/utils/validation/validators.ts
// Common validators that can be used with the validation system

export const passwordStrength = (message = 'Password must contain at least 8 characters, including uppercase, lowercase, and numbers'): ValidationRule<string> => ({
  validate: (value) => {
    if (typeof value !== 'string') return false;
    // At least 8 characters, 1 uppercase, 1 lowercase, 1 number
    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{8,}$/;
    return passwordRegex.test(value);
  },
  message,
});

export const url = (message = 'Please enter a valid URL'): ValidationRule<string> => ({
  validate: (value) => {
    if (typeof value !== 'string') return false;
    try {
      new URL(value);
      return true;
    } catch {
      return false;
    }
  },
  message,
});

export const date = (message = 'Please enter a valid date'): ValidationRule<string> => ({
  validate: (value) => {
    if (typeof value !== 'string') return false;
    const dateObj = new Date(value);
    return !isNaN(dateObj.getTime());
  },
  message,
});

export const futureDate = (message = 'Date must be in the future'): ValidationRule<string> => ({
  validate: (value) => {
    if (typeof value !== 'string') return false;
    const dateObj = new Date(value);
    const now = new Date();
    return !isNaN(dateObj.getTime()) && dateObj > now;
  },
  message,
});

export const pastDate = (message = 'Date must be in the past'): ValidationRule<string> => ({
  validate: (value) => {
    if (typeof value !== 'string') return false;
    const dateObj = new Date(value);
    const now = new Date();
    return !isNaN(dateObj.getTime()) && dateObj < now;
  },
  message,
});

export const dateRange = (
  min: Date,
  max: Date,
  message = `Date must be between ${min.toLocaleDateString()} and ${max.toLocaleDateString()}`
): ValidationRule<string> => ({
  validate: (value) => {
    if (typeof value !== 'string') return false;
    const dateObj = new Date(value);
    return !isNaN(dateObj.getTime()) && dateObj >= min && dateObj <= max;
  },
  message,
});

export const fileType = (
  allowedTypes: string[],
  message = `File must be one of the following types: ${allowedTypes.join(', ')}`
): ValidationRule<File> => ({
  validate: (file) => {
    if (!(file instanceof File)) return false;
    return allowedTypes.some(type => file.type.includes(type));
  },
  message,
});

export const fileSize = (
  maxSizeInBytes: number,
  message = `File size cannot exceed ${maxSizeInBytes / (1024 * 1024)} MB`
): ValidationRule<File> => ({
  validate: (file) => {
    if (!(file instanceof File)) return false;
    return file.size <= maxSizeInBytes;
  },
  message,
});

export const arrayLength = (
  min: number,
  max: number,
  message = `Must select between ${min} and ${max} items`
): ValidationRule<any[]> => ({
  validate: (value) => {
    if (!Array.isArray(value)) return false;
    return value.length >= min && value.length <= max;
  },
  message,
});

// src/frontend/components/form/FormBuilder.tsx
import React from 'react';
import { Input } from '../../components/ui/Input';
import { Button } from '../../components/ui/Button';

interface Field {
  name: string;
  label: string;
  type: 'text' | 'email' | 'password' | 'number' | 'date' | 'textarea' | 'select' | 'checkbox' | 'radio';
  options?: { value: string; label: string }[];
  placeholder?: string;
  required?: boolean;
  className?: string;
}

interface FormBuilderProps {
  fields: Field[];
  values: Record<string, any>;
  errors: Record<string, string>;
  touched: Record<string, boolean>;
  handleChange: (name: string, value: any) => void;
  handleBlur: (name: string) => void;
  handleSubmit: (e: React.FormEvent) => void;
  submitButtonText?: string;
  cancelButtonText?: string;
  onCancel?: () => void;
  isSubmitting?: boolean;
}

export const FormBuilder: React.FC<FormBuilderProps> = ({
  fields,
  values,
  errors,
  touched,
  handleChange,
  handleBlur,
  handleSubmit,
  submitButtonText = 'Submit',
  cancelButtonText = 'Cancel',
  onCancel,
  isSubmitting = false,
}) => {
  const renderField = (field: Field) => {
    const { name, label, type, options, placeholder, required, className } = field;
    const error = touched[name] && errors[name] ? errors[name] : '';
    
    switch (type) {
      case 'text':
      case 'email':
      case 'password':
      case 'number':
      case 'date':
        return (
          <Input
            key={name}
            label={label}
            name={name}
            type={type}
            value={values[name] || ''}
            onChange={(e) => handleChange(name, e.target.value)}
            onBlur={() => handleBlur(name)}
            error={error}
            placeholder={placeholder}
            required={required}
            className={className}
          />
        );
        
      case 'textarea':
        return (
          <div key={name} className="mb-4">
            <label htmlFor={name} className="block text-sm font-medium text-gray-700">
              {label} {required && <span className="text-red-500">*</span>}
            </label>
            <textarea
              id={name}
              name={name}
              value={values[name] || ''}
              onChange={(e) => handleChange(name, e.target.value)}
              onBlur={() => handleBlur(name)}
              placeholder={placeholder}
              required={required}
              className={`mt-1 block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm ${className || ''}`}
              rows={4}
            />
            {error && (
              <p className="mt-1 text-sm text-red-600">{error}</p>
            )}
          </div>
        );
        
      case 'select':
        return (
          <div key={name} className="mb-4">
            <label htmlFor={name} className="block text-sm font-medium text-gray-700">
              {label} {required && <span className="text-red-500">*</span>}
            </label>
            <select
              id={name}
              name={name}
              value={values[name] || ''}
              onChange={(e) => handleChange(name, e.target.value)}
              onBlur={() => handleBlur(name)}
              required={required}
              className={`mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md ${className || ''}`}
            >
              <option value="">{placeholder || 'Select an option'}</option>
              {options?.map((option) => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
            {error && (
              <p className="mt-1 text-sm text-red-600">{error}</p>
            )}
          </div>
        );
        
      case 'checkbox':
        return (
          <div key={name} className="mb-4 flex items-start">
            <div className="flex items-center h-5">
              <input
                id={name}
                name={name}
                type="checkbox"
                checked={!!values[name]}
                onChange={(e) => handleChange(name, e.target.checked)}
                onBlur={() => handleBlur(name)}
                className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded"
              />
            </div>
            <div className="ml-3 text-sm">
              <label htmlFor={name} className="font-medium text-gray-700">
                {label} {required && <span className="text-red-500">*</span>}
              </label>
              {error && (
                <p className="text-red-600">{error}</p>
              )}
            </div>
          </div>
        );
        
      case 'radio':
        return (
          <div key={name} className="mb-4">
            <label className="block text-sm font-medium text-gray-700">
              {label} {required && <span className="text-red-500">*</span>}
            </label>
            <div className="mt-1 space-y-2">
              {options?.map((option) => (
                <div key={option.value} className="flex items-center">
                  <input
                    id={`${name}-${option.value}`}
                    name={name}
                    type="radio"
                    value={option.value}
                    checked={values[name] === option.value}
                    onChange={(e) => handleChange(name, e.target.value)}
                    onBlur={() => handleBlur(name)}
                    className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300"
                  />
                  <label htmlFor={`${name}-${option.value}`} className="ml-3 text-sm font-medium text-gray-700">
                    {option.label}
                  </label>
                </div>
              ))}
            </div>
            {error && (
              <p className="mt-1 text-sm text-red-600">{error}</p>
            )}
          </div>
        );
        
      default:
        return null;
    }
  };
  
  return (
    <form onSubmit={handleSubmit}>
      <div className="space-y-2">
        {fields.map(renderField)}
      </div>
      
      <div className="mt-6 flex justify-end space-x-3">
        {onCancel && (
          <Button
            type="button"
            variant="outline"
            onClick={onCancel}
          >
            {cancelButtonText}
          </Button>
        )}
        <Button
          type="submit"
          variant="primary"
          isLoading={isSubmitting}
          disabled={isSubmitting}
        >
          {submitButtonText}
        </Button>
      </div>
    </form>
  );
};

// Example usage of FormBuilder with useFormValidation
/*
import { FormBuilder } from './components/form/FormBuilder';
import { useFormValidation, required, email, minLength } from './utils/validation/formValidation';

const LoginForm = () => {
  const {
    values,
    errors,
    touched,
    isValid,
    handleChange,
    handleBlur,
    validateForm,
    resetForm,
  } = useFormValidation(
    { email: '', password: '' },
    {
      email: [required('Email is required'), email('Invalid email format')],
      password: [required('Password is required'), minLength(8, 'Password must be at least 8 characters')],
    }
  );
  
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (validateForm()) {
      // Submit form data
      console.log('Form is valid:', values);
    }
  };
  
  const fields = [
    {
      name: 'email',
      label: 'Email Address',
      type: 'email',
      placeholder: 'Enter your email',
      required: true,
    },
    {
      name: 'password',
      label: 'Password',
      type: 'password',
      placeholder: 'Enter your password',
      required: true,
    },
  ];
  
  return (
    <FormBuilder
      fields={fields}
      values={values}
      errors={errors}
      touched={touched}
      handleChange={handleChange}
      handleBlur={handleBlur}
      handleSubmit={handleSubmit}
      submitButtonText="Login"
      onCancel={() => resetForm()}
      cancelButtonText="Reset"
    />
  );
};
*/
// components/assessment/GradingForm.tsx
import React, { useState, useEffect } from 'react';
import { useForm, Controller } from 'react-hook-form';
import assessmentService, {
  AssessmentItem,
  CompetencyAssessment,
  RatingScale,
  AssessmentStatus
} from '../../services/assessmentService';
import Button from '../ui/Button';

interface GradingFormProps {
  assessmentId: string;
  onComplete?: (assessment: AssessmentItem) => void;
  onCancel?: () => void;
}

const GradingForm: React.FC<GradingFormProps> = ({
  assessmentId,
  onComplete,
  onCancel,
}) => {
  // State
  const [assessment, setAssessment] = useState<AssessmentItem | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [saving, setSaving] = useState<boolean>(false);
  const [submitting, setSubmitting] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [signature, setSignature] = useState<string>('');
  
  // Form setup
  const { control, handleSubmit, setValue, formState: { errors } } = useForm();
  
  // Load assessment data
  useEffect(() => {
    const fetchAssessment = async () => {
      try {
        setLoading(true);
        setError(null);
        
        const data = await assessmentService.getAssessment(assessmentId);
        setAssessment(data);
        
        // Pre-fill form values
        if (data.competencies) {
          data.competencies.forEach((comp) => {
            setValue(`competency.${comp.id}.rating`, comp.rating);
            setValue(`competency.${comp.id}.comments`, comp.comments || '');
          });
        }
        setValue('notes', data.notes || '');
        setValue('overallRating', data.overallRating);
      } catch (err) {
        console.error('Error loading assessment:', err);
        setError('Failed to load assessment data. Please try again.');
      } finally {
        setLoading(false);
      }
    };
    
    fetchAssessment();
  }, [assessmentId, setValue]);
  
  // Handle form submission
  const onSubmit = async (data: any) => {
    if (!assessment) return;
    
    try {
      setSaving(true);
      setError(null);
      
      // Format competencies data
      const competencies: CompetencyAssessment[] = assessment.competencies.map((comp) => ({
        id: comp.id,
        competencyId: comp.competencyId,
        competencyName: comp.competencyName,
        rating: data.competency[comp.id].rating as RatingScale,
        comments: data.competency[comp.id].comments,
      }));
      
      // Update assessment
      const updatedAssessment = await assessmentService.updateAssessment(assessmentId, {
        competencies,
        overallRating: data.overallRating,
        notes: data.notes,
        status: 'completed',
        completedAt: new Date().toISOString(),
      });
      
      setAssessment(updatedAssessment);
      
      if (onComplete) {
        onComplete(updatedAssessment);
      }
    } catch (err) {
      console.error('Error saving assessment:', err);
      setError('Failed to save assessment data. Please try again.');
    } finally {
      setSaving(false);
    }
  };
  
  // Handle submission with signature
  const handleSubmitWithSignature = async () => {
    if (!assessment || !signature) return;
    
    try {
      setSubmitting(true);
      setError(null);
      
      const submittedAssessment = await assessmentService.submitAssessment(
        assessmentId,
        signature
      );
      
      setAssessment(submittedAssessment);
      
      if (onComplete) {
        onComplete(submittedAssessment);
      }
    } catch (err) {
      console.error('Error submitting assessment:', err);
      setError('Failed to submit assessment. Please try again.');
    } finally {
      setSubmitting(false);
    }
  };
  
  // Render loading state
  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }
  
  // Render error state
  if (error) {
    return (
      <div className="p-6 bg-red-50 text-red-700 rounded-md">
        <h3 className="text-lg font-medium mb-2">Error</h3>
        <p>{error}</p>
        <div className="mt-4">
          <Button onClick={() => window.location.reload()}>Reload</Button>
        </div>
      </div>
    );
  }
  
  // Render no assessment state
  if (!assessment) {
    return (
      <div className="p-6 bg-gray-50 text-gray-700 rounded-md">
        <h3 className="text-lg font-medium mb-2">Assessment Not Found</h3>
        <p>The requested assessment could not be loaded.</p>
        <div className="mt-4">
          <Button onClick={onCancel}>Go Back</Button>
        </div>
      </div>
    );
  }
  
  // Check if assessment is already complete
  const isComplete = 
    assessment.status === 'completed' || 
    assessment.status === 'submitted' || 
    assessment.status === 'approved';
  
  return (
    <div className="bg-white rounded-lg shadow-lg">
      {/* Assessment Header */}
      <div className="p-6 border-b border-gray-200">
        <div className="flex flex-col md:flex-row md:justify-between md:items-start gap-4">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">
              {assessment.exerciseName} Assessment
            </h1>
            <p className="text-gray-600 mt-1">
              {assessment.moduleName} &gt; {assessment.lessonName}
            </p>
            <div className="mt-2 flex flex-wrap gap-2">
              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                {assessment.type}
              </span>
              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                assessment.status === 'draft' ? 'bg-gray-100 text-gray-800' :
                assessment.status === 'in_progress' ? 'bg-yellow-100 text-yellow-800' :
                assessment.status === 'completed' ? 'bg-green-100 text-green-800' :
                assessment.status === 'submitted' ? 'bg-purple-100 text-purple-800' :
                assessment.status === 'approved' ? 'bg-emerald-100 text-emerald-800' :
                'bg-red-100 text-red-800'
              }`}>
                {assessment.status.replace('_', ' ')}
              </span>
            </div>
          </div>
          
          <div className="flex flex-col sm:flex-row gap-2">
            <span className="text-sm text-gray-500">
              <strong>Trainee:</strong> {assessment.traineeName}
            </span>
            <span className="text-sm text-gray-500">
              <strong>Instructor:</strong> {assessment.instructorName}
            </span>
            <span className="text-sm text-gray-500">
              <strong>Date:</strong> {new Date(assessment.createdAt).toLocaleDateString()}
            </span>
          </div>
        </div>
      </div>

      {/* Grading Form */}
      <form onSubmit={handleSubmit(onSubmit)}>
        <div className="p-6">
          {/* Competencies */}
          <h2 className="text-lg font-semibold text-gray-900 mb-4">Competency Assessment</h2>
          
          <div className="space-y-6">
            {assessment.competencies.map((competency) => (
              <div key={competency.id} className="border border-gray-200 rounded-lg p-4">
                <h3 className="font-medium text-gray-800 mb-3">{competency.competencyName}</h3>
                
                {/* Rating buttons */}
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Rating (1-4)
                  </label>
                  <Controller
                    name={`competency.${competency.id}.rating`}
                    control={control}
                    rules={{ required: true }}
                    defaultValue={competency.rating}
                    render={({ field }) => (
                      <div className="flex space-x-2">
                        {[1, 2, 3, 4].map((rating) => (
                          <button
                            key={rating}
                            type="button"
                            onClick={() => field.onChange(rating)}
                            disabled={isComplete}
                            className={`w-14 h-14 rounded-full flex items-center justify-center focus:outline-none transition-colors ${
                              field.value === rating
                                ? getRatingColorClass(rating)
                                : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                            } ${isComplete ? 'opacity-70 cursor-not-allowed' : ''}`}
                          >
                            <span className="text-xl font-semibold">{rating}</span>
                          </button>
                        ))}
                      </div>
                    )}
                  />
                  {errors?.competency?.[competency.id]?.rating && (
                    <p className="mt-1 text-sm text-red-600">Please select a rating</p>
                  )}
                </div>
                
                {/* Comments */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Comments
                  </label>
                  <Controller
                    name={`competency.${competency.id}.comments`}
                    control={control}
                    defaultValue={competency.comments || ''}
                    render={({ field }) => (
                      <textarea
                        {...field}
                        rows={3}
                        disabled={isComplete}
                        className="w-full border-gray-300 rounded-md shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:bg-gray-50 disabled:text-gray-500"
                        placeholder="Add comments about this competency..."
                      />
                    )}
                  />
                </div>
              </div>
            ))}
          </div>
          
          {/* Overall Rating */}
          <div className="mt-8">
            <h3 className="font-medium text-gray-800 mb-3">Overall Assessment</h3>
            
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Overall Rating (1-4)
              </label>
              <Controller
                name="overallRating"
                control={control}
                rules={{ required: true }}
                defaultValue={assessment.overallRating}
                render={({ field }) => (
                  <div className="flex space-x-2">
                    {[1, 2, 3, 4].map((rating) => (
                      <button
                        key={rating}
                        type="button"
                        onClick={() => field.onChange(rating)}
                        disabled={isComplete}
                        className={`w-16 h-16 rounded-full flex items-center justify-center focus:outline-none transition-colors ${
                          field.value === rating
                            ? getRatingColorClass(rating)
                            : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                        } ${isComplete ? 'opacity-70 cursor-not-allowed' : ''}`}
                      >
                        <span className="text-2xl font-semibold">{rating}</span>
                      </button>
                    ))}
                  </div>
                )}
              />
              {errors.overallRating && (
                <p className="mt-1 text-sm text-red-600">Please select an overall rating</p>
              )}
            </div>
          </div>
          
          {/* Notes */}
          <div className="mt-6">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Assessment Notes
            </label>
            <Controller
              name="notes"
              control={control}
              defaultValue={assessment.notes || ''}
              render={({ field }) => (
                <textarea
                  {...field}
                  rows={5}
                  disabled={isComplete}
                  className="w-full border-gray-300 rounded-md shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:bg-gray-50 disabled:text-gray-500"
                  placeholder="Add general notes about the assessment..."
                />
              )}
            />
          </div>
          
          {/* Signature (for submission) */}
          {assessment.status === 'completed' && (
            <div className="mt-8 border-t border-gray-200 pt-6">
              <h3 className="font-medium text-gray-800 mb-3">Digital Signature</h3>
              <p className="text-sm text-gray-600 mb-4">
                By signing this assessment, you certify that the evaluation is accurate and complete.
              </p>
              
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Instructor Signature
                </label>
                <input
                  type="text"
                  value={signature}
                  onChange={(e) => setSignature(e.target.value)}
                  className="w-full border-gray-300 rounded-md shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  placeholder="Type your full name"
                />
              </div>
            </div>
          )}
        </div>
        
        {/* Form Actions */}
        <div className="px-6 py-4 bg-gray-50 rounded-b-lg border-t border-gray-200 flex justify-end space-x-3">
          <Button
            variant="light"
            onClick={onCancel}
            disabled={saving || submitting}
          >
            Cancel
          </Button>
          
          {assessment.status === 'draft' || assessment.status === 'in_progress' ? (
            <Button
              variant="primary"
              type="submit"
              isLoading={saving}
              disabled={isComplete}
            >
              Save Assessment
            </Button>
          ) : assessment.status === 'completed' ? (
            <Button
              variant="success"
              onClick={handleSubmitWithSignature}
              isLoading={submitting}
              disabled={!signature || isComplete}
            >
              Submit Assessment
            </Button>
          ) : null}
        </div>
      </form>
    </div>
  );
};

// Helper function to get color classes based on rating
function getRatingColorClass(rating: number): string {
  switch (rating) {
    case 1:
      return 'bg-red-500 text-white';
    case 2:
      return 'bg-yellow-500 text-white';
    case 3:
      return 'bg-blue-500 text-white';
    case 4:
      return 'bg-green-500 text-white';
    default:
      return 'bg-gray-500 text-white';
  }
}

export default GradingForm;

// src/frontend/components/help/HelpDocumentation.tsx
import React, { useState, useEffect } from 'react';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { Link } from 'react-router-dom';

// Types
export interface HelpArticle {
  id: string;
  title: string;
  content: string;
  category: string;
  tags: string[];
  lastUpdated: Date;
  relatedArticles?: string[];
}

export interface HelpCategory {
  id: string;
  name: string;
  description: string;
  icon: React.ReactNode;
}

// Help Search Component
interface HelpSearchProps {
  onSearch: (query: string) => void;
  recentSearches?: string[];
  popularArticles?: HelpArticle[];
}

export const HelpSearch: React.FC<HelpSearchProps> = ({
  onSearch,
  recentSearches = [],
  popularArticles = []
}) => {
  const [searchQuery, setSearchQuery] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      onSearch(searchQuery);
    }
  };

  return (
    <div className="help-search">
      <form onSubmit={handleSubmit} className="mb-6">
        <div className="flex items-center">
          <div className="relative flex-grow">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg className="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
              </svg>
            </div>
            <input
              type="text"
              className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              placeholder="Search for help articles..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
          <div className="ml-3">
            <Button
              type="submit"
              variant="primary"
            >
              Search
            </Button>
          </div>
        </div>
      </form>

      {recentSearches.length > 0 && (
        <div className="mb-4">
          <h3 className="text-sm font-medium text-gray-500 mb-2">Recent Searches</h3>
          <div className="flex flex-wrap gap-2">
            {recentSearches.map((search, index) => (
              <Button
                key={index}
                variant="outline"
                size="small"
                onClick={() => {
                  setSearchQuery(search);
                  onSearch(search);
                }}
              >
                {search}
              </Button>
            ))}
          </div>
        </div>
      )}

      {popularArticles.length > 0 && (
        <div>
          <h3 className="text-sm font-medium text-gray-500 mb-2">Popular Articles</h3>
          <ul className="space-y-2">
            {popularArticles.map(article => (
              <li key={article.id}>
                <Link
                  to={`/help/article/${article.id}`}
                  className="text-blue-600 hover:text-blue-800"
                >
                  {article.title}
                </Link>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

// Help Category Card Component
interface HelpCategoryCardProps {
  category: HelpCategory;
  articleCount: number;
  onClick: () => void;
}

export const HelpCategoryCard: React.FC<HelpCategoryCardProps> = ({
  category,
  articleCount,
  onClick
}) => {
  return (
    <div 
      className="bg-white overflow-hidden shadow rounded-lg border cursor-pointer hover:shadow-md transition-shadow"
      onClick={onClick}
    >
      <div className="p-5">
        <div className="flex items-center">
          <div className="flex-shrink-0 p-3 rounded-md bg-blue-100 text-blue-600">
            {category.icon}
          </div>
          <div className="ml-5 w-0 flex-1">
            <dl>
              <dt className="text-lg font-medium text-gray-900 truncate">
                {category.name}
              </dt>
              <dd>
                <div className="text-sm text-gray-500">
                  {category.description}
                </div>
                <div className="text-sm text-gray-400 mt-1">
                  {articleCount} article{articleCount !== 1 ? 's' : ''}
                </div>
              </dd>
            </dl>
          </div>
        </div>
      </div>
    </div>
  );
};

// Help Article List Component
interface HelpArticleListProps {
  articles: HelpArticle[];
  title: string;
  onArticleClick: (articleId: string) => void;
  emptyMessage?: string;
}

export const HelpArticleList: React.FC<HelpArticleListProps> = ({
  articles,
  title,
  onArticleClick,
  emptyMessage = "No articles found."
}) => {
  return (
    <div className="bg-white shadow overflow-hidden sm:rounded-md">
      <div className="px-4 py-5 border-b border-gray-200 sm:px-6">
        <h3 className="text-lg leading-6 font-medium text-gray-900">{title}</h3>
      </div>
      {articles.length > 0 ? (
        <ul className="divide-y divide-gray-200">
          {articles.map(article => (
            <li key={article.id}>
              <div 
                className="block hover:bg-gray-50 cursor-pointer transition-colors"
                onClick={() => onArticleClick(article.id)}
              >
                <div className="px-4 py-4 sm:px-6">
                  <div className="flex items-center justify-between">
                    <p className="text-sm font-medium text-blue-600 truncate">
                      {article.title}
                    </p>
                    <div className="ml-2 flex-shrink-0 flex">
                      <p className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                        {article.category}
                      </p>
                    </div>
                  </div>
                  <div className="mt-2 flex justify-between">
                    <div className="flex">
                      {article.tags.map((tag, index) => (
                        <span 
                          key={index}
                          className="mr-2 text-xs inline-flex items-center px-2.5 py-0.5 rounded-full bg-gray-100 text-gray-800"
                        >
                          {tag}
                        </span>
                      ))}
                    </div>
                    <div className="text-sm text-gray-500">
                      Updated {new Date(article.lastUpdated).toLocaleDateString()}
                    </div>
                  </div>
                </div>
              </div>
            </li>
          ))}
        </ul>
      ) : (
        <div className="px-4 py-5 text-center text-gray-500 sm:px-6">
          {emptyMessage}
        </div>
      )}
    </div>
  );
};

// Help Article Component
interface HelpArticleProps {
  article: HelpArticle;
  relatedArticles?: HelpArticle[];
  onRelatedArticleClick: (articleId: string) => void;
  onBack: () => void;
}

export const HelpArticle: React.FC<HelpArticleProps> = ({
  article,
  relatedArticles = [],
  onRelatedArticleClick,
  onBack
}) => {
  return (
    <div className="help-article">
      <div className="mb-4">
        <Button
          variant="outline"
          size="small"
          onClick={onBack}
        >
          ← Back to articles
        </Button>
      </div>

      <Card>
        <div className="mb-6">
          <h1 className="text-2xl font-bold text-gray-900">{article.title}</h1>
          <div className="mt-2 flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                {article.category}
              </span>
              {article.tags.map((tag, index) => (
                <span
                  key={index}
                  className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800"
                >
                  {tag}
                </span>
              ))}
            </div>
            <div className="text-sm text-gray-500">
              Last updated: {new Date(article.lastUpdated).toLocaleDateString()}
            </div>
          </div>
        </div>

        <div 
          className="prose max-w-none"
          dangerouslySetInnerHTML={{ __html: article.content }}
        />

        {relatedArticles.length > 0 && (
          <div className="mt-8 pt-8 border-t border-gray-200">
            <h2 className="text-lg font-medium text-gray-900">Related Articles</h2>
            <ul className="mt-4 space-y-2">
              {relatedArticles.map(relatedArticle => (
                <li 
                  key={relatedArticle.id}
                  className="text-blue-600 hover:text-blue-800 cursor-pointer"
                  onClick={() => onRelatedArticleClick(relatedArticle.id)}
                >
                  {relatedArticle.title}
                </li>
              ))}
            </ul>
          </div>
        )}
      </Card>
    </div>
  );
};

// Interactive Guided Tour Component
interface TourStep {
  id: string;
  title: string;
  description: string;
  element: string; // CSS selector for the target element
  position: 'top' | 'right' | 'bottom' | 'left';
}

interface GuidedTourProps {
  steps: TourStep[];
  isActive: boolean;
  currentStep: number;
  onNext: () => void;
  onPrev: () => void;
  onClose: () => void;
  onComplete: () => void;
}

export const GuidedTour: React.FC<GuidedTourProps> = ({
  steps,
  isActive,
  currentStep,
  onNext,
  onPrev,
  onClose,
  onComplete
}) => {
  const [tooltipStyle, setTooltipStyle] = useState({
    top: 0,
    left: 0,
  });

  useEffect(() => {
    if (isActive && steps[currentStep]) {
      const targetElement = document.querySelector(steps[currentStep].element);
      if (targetElement) {
        const rect = targetElement.getBoundingClientRect();
        const tooltipWidth = 300; // Approximate width of tooltip
        const tooltipHeight = 150; // Approximate height of tooltip
        
        // Calculate position based on specified position
        let top = 0;
        let left = 0;
        
        switch (steps[currentStep].position) {
          case 'top':
            top = rect.top - tooltipHeight - 10;
            left = rect.left + (rect.width / 2) - (tooltipWidth / 2);
            break;
          case 'right':
            top = rect.top + (rect.height / 2) - (tooltipHeight / 2);
            left = rect.right + 10;
            break;
          case 'bottom':
            top = rect.bottom + 10;
            left = rect.left + (rect.width / 2) - (tooltipWidth / 2);
            break;
          case 'left':
            top = rect.top + (rect.height / 2) - (tooltipHeight / 2);
            left = rect.left - tooltipWidth - 10;
            break;
        }
        
        // Ensure the tooltip stays within viewport
        const viewportWidth = window.innerWidth;
        const viewportHeight = window.innerHeight;
        
        if (left < 10) left = 10;
        if (left + tooltipWidth > viewportWidth - 10) left = viewportWidth - tooltipWidth - 10;
        if (top < 10) top = 10;
        if (top + tooltipHeight > viewportHeight - 10) top = viewportHeight - tooltipHeight - 10;
        
        setTooltipStyle({
          top,
          left,
        });
        
        // Highlight the target element
        targetElement.classList.add('tour-highlight');
        
        return () => {
          targetElement.classList.remove('tour-highlight');
        };
      }
    }
  }, [isActive, currentStep, steps]);

  if (!isActive || !steps[currentStep]) return null;

  const step = steps[currentStep];
  const isLastStep = currentStep === steps.length - 1;

  return (
    <div className="fixed inset-0 z-50 overflow-hidden">
      {/* Overlay */}
      <div className="fixed inset-0 bg-black bg-opacity-50"></div>
      
      {/* Tooltip */}
      <div
        className="fixed bg-white rounded-lg shadow-lg p-4 w-80 z-50"
        style={{
          top: `${tooltipStyle.top}px`,
          left: `${tooltipStyle.left}px`,
        }}
      >
        <div className="flex justify-between items-start mb-2">
          <h3 className="text-lg font-medium text-gray-900">{step.title}</h3>
          <button
            type="button"
            className="text-gray-400 hover:text-gray-500"
            onClick={onClose}
          >
            <span className="sr-only">Close</span>
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        
        <p className="text-sm text-gray-500 mb-4">{step.description}</p>
        
        <div className="flex justify-between items-center">
          <div className="text-sm text-gray-500">
            Step {currentStep + 1} of {steps.length}
          </div>
          <div className="flex space-x-2">
            {currentStep > 0 && (
              <Button
                variant="outline"
                size="small"
                onClick={onPrev}
              >
                Previous
              </Button>
            )}
            {isLastStep ? (
              <Button
                variant="primary"
                size="small"
                onClick={onComplete}
              >
                Finish
              </Button>
            ) : (
              <Button
                variant="primary"
                size="small"
                onClick={onNext}
              >
                Next
              </Button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

// Quick Help Widget Component
interface QuickHelpWidgetProps {
  categories: HelpCategory[];
  popularArticles: HelpArticle[];
  onCategoryClick: (categoryId: string) => void;
  onArticleClick: (articleId: string) => void;
  onStartTour: () => void;
  onContactSupport: () => void;
}

export const QuickHelpWidget: React.FC<QuickHelpWidgetProps> = ({
  categories,
  popularArticles,
  onCategoryClick,
  onArticleClick,
  onStartTour,
  onContactSupport
}) => {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <div className="fixed bottom-4 right-4 z-40">
      {isOpen ? (
        <div className="bg-white rounded-lg shadow-lg p-4 w-80">
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-lg font-medium text-gray-900">Quick Help</h3>
            <button
              type="button"
              className="text-gray-400 hover:text-gray-500"
              onClick={() => setIsOpen(false)}
            >
              <span className="sr-only">Close</span>
              <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
          
          <div className="space-y-4">
            <div>
              <h4 className="text-sm font-medium text-gray-700 mb-2">Help Categories</h4>
              <div className="space-y-2">
                {categories.slice(0, 3).map(category => (
                  <div
                    key={category.id}
                    className="flex items-center p-2 rounded-md hover:bg-gray-50 cursor-pointer"
                    onClick={() => {
                      onCategoryClick(category.id);
                      setIsOpen(false);
                    }}
                  >
                    <div className="flex-shrink-0 p-1 rounded-md bg-blue-100 text-blue-600">
                      {category.icon}
                    </div>
                    <div className="ml-3 text-sm font-medium text-gray-700">
                      {category.name}
                    </div>
                  </div>
                ))}
              </div>
            </div>
            
            <div>
              <h4 className="text-sm font-medium text-gray-700 mb-2">Popular Articles</h4>
              <ul className="space-y-1">
                {popularArticles.slice(0, 3).map(article => (
                  <li 
                    key={article.id}
                    className="text-sm text-blue-600 hover:text-blue-800 cursor-pointer"
                    onClick={() => {
                      onArticleClick(article.id);
                      setIsOpen(false);
                    }}
                  >
                    {article.title}
                  </li>
                ))}
              </ul>
            </div>
            
            <div className="flex flex-col space-y-2">
              <Button
                variant="outline"
                size="small"
                onClick={() => {
                  onStartTour();
                  setIsOpen(false);
                }}
              >
                Start Guided Tour
              </Button>
              
              <Button
                variant="outline"
                size="small"
                onClick={() => {
                  onContactSupport();
                  setIsOpen(false);
                }}
              >
                Contact Support
              </Button>
              
              <Link
                to="/help"
                className="text-sm text-center text-blue-600 hover:text-blue-800"
                onClick={() => setIsOpen(false)}
              >
                Visit Help Center
              </Link>
            </div>
          </div>
        </div>
      ) : (
        <button
          type="button"
          className="bg-blue-600 p-3 rounded-full text-white shadow-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          onClick={() => setIsOpen(true)}
        >
          <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        </button>
      )}
    </div>
  );
};

// Main Help Center Component
interface HelpCenterProps {
  categories: HelpCategory[];
  articles: HelpArticle[];
  popularArticles: HelpArticle[];
  recentSearches?: string[];
  onSearch: (query: string) => void;
  onStartTour: () => void;
  onContactSupport: () => void;
}

export const HelpCenter: React.FC<HelpCenterProps> = ({
  categories,
  articles,
  popularArticles,
  recentSearches = [],
  onSearch,
  onStartTour,
  onContactSupport
}) => {
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
  const [selectedArticle, setSelectedArticle] = useState<HelpArticle | null>(null);
  const [searchResults, setSearchResults] = useState<HelpArticle[] | null>(null);
  const [searchQuery, setSearchQuery] = useState('');

  // Handle search submission
  const handleSearch = (query: string) => {
    setSearchQuery(query);
    onSearch(query);
    
    // In a real app, this would call an API and update searchResults
    // For now, we'll simulate a search
    const filtered = articles.filter(
      article => 
        article.title.toLowerCase().includes(query.toLowerCase()) ||
        article.content.toLowerCase().includes(query.toLowerCase()) ||
        article.tags.some(tag => tag.toLowerCase().includes(query.toLowerCase()))
    );
    
    setSearchResults(filtered);
    setSelectedCategory(null);
    setSelectedArticle(null);
  };

  // Handle category selection
  const handleCategoryClick = (categoryId: string) => {
    setSelectedCategory(categoryId);
    setSelectedArticle(null);
    setSearchResults(null);
    setSearchQuery('');
  };

  // Handle article selection
  const handleArticleClick = (articleId: string) => {
    const article = articles.find(a => a.id === articleId);
    if (article) {
      setSelectedArticle(article);
    }
  };

  // Get related articles
  const getRelatedArticles = (article: HelpArticle) => {
    if (!article.relatedArticles) return [];
    return article.relatedArticles
      .map(id => articles.find(a => a.id === id))
      .filter(a => a) as HelpArticle[];
  };

  // Get filtered articles by category
  const getArticlesByCategory = (categoryId: string) => {
    return articles.filter(article => article.category === categoryId);
  };

  // Calculate article count by category
  const getArticleCountByCategory = (categoryId: string) => {
    return articles.filter(article => article.category === categoryId).length;
  };

  // Render content based on selected state
  const renderContent = () => {
    if (selectedArticle) {
      return (
        <HelpArticle
          article={selectedArticle}
          relatedArticles={getRelatedArticles(selectedArticle)}
          onRelatedArticleClick={handleArticleClick}
          onBack={() => setSelectedArticle(null)}
        />
      );
    }

    if (selectedCategory) {
      const categoryName = categories.find(c => c.id === selectedCategory)?.name || 'Category';
      return (
        <div>
          <div className="mb-4">
            <Button
              variant="outline"
              size="small"
              onClick={() => setSelectedCategory(null)}
            >
              ← Back to categories
            </Button>
          </div>
          
          <HelpArticleList
            articles={getArticlesByCategory(selectedCategory)}
            title={`${categoryName} Articles`}
            onArticleClick={handleArticleClick}
            emptyMessage={`No articles found in ${categoryName}.`}
          />
        </div>
      );
    }

    if (searchResults) {
      return (
        <div>
          <div className="mb-4">
            <p className="text-sm text-gray-500">
              {searchResults.length} results for "{searchQuery}"
            </p>
          </div>
          
          <HelpArticleList
            articles={searchResults}
            title="Search Results"
            onArticleClick={handleArticleClick}
            emptyMessage={`No articles found for "${searchQuery}".`}
          />
        </div>
      );
    }

    return (
      <div>
        <Card className="mb-8">
          <HelpSearch
            onSearch={handleSearch}
            recentSearches={recentSearches}
            popularArticles={popularArticles}
          />
        </Card>
        
        <h2 className="text-xl font-bold text-gray-900 mb-4">Browse by Category</h2>
        
        <div className="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-3">
          {categories.map(category => (
            <HelpCategoryCard
              key={category.id}
              category={category}
              articleCount={getArticleCountByCategory(category.id)}
              onClick={() => handleCategoryClick(category.id)}
            />
          ))}
        </div>
        
        {popularArticles.length > 0 && (
          <div className="mt-8">
            <h2 className="text-xl font-bold text-gray-900 mb-4">Popular Articles</h2>
            <HelpArticleList
              articles={popularArticles}
              title="Popular Articles"
              onArticleClick={handleArticleClick}
            />
          </div>
        )}
        
        <div className="mt-8 bg-blue-50 rounded-lg p-6">
          <h2 className="text-xl font-bold text-gray-900 mb-2">Need more help?</h2>
          <p className="text-gray-600 mb-4">
            Can't find what you're looking for? We're here to help you get the most out of our platform.
          </p>
          <div className="flex flex-wrap gap-3">
            <Button
              variant="primary"
              onClick={onStartTour}
            >
              Take a Guided Tour
            </Button>
            
            <Button
              variant="outline"
              onClick={onContactSupport}
            >
              Contact Support
            </Button>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="help-center">
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900">Help Center</h1>
        <p className="text-gray-500">
          Get help with using the Advanced Pilot Training Platform
        </p>
      </div>
      
      {renderContent()}
    </div>
  );
};

// CSS for Tour Highlight (Add to your global CSS)
/*
.tour-highlight {
  position: relative;
  z-index: 51;
  box-shadow: 0 0 0 4px rgba(66, 153, 225, 0.5);
  border-radius: 4px;
}
*/
// src/frontend/components/instructor/InstructorDashboard.tsx
import React, { useState, useEffect } from 'react';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { DataTable, Column } from '../ui/DataTable';
import { Alert } from '../ui/Alert';
import { Link } from 'react-router-dom';

// Types
export interface InstructorTrainingSession {
  id: string;
  title: string;
  description: string;
  startDate: Date;
  endDate: Date;
  status: 'scheduled' | 'in_progress' | 'completed' | 'cancelled';
  location?: string;
  trainees: {
    id: string;
    name: string;
    email: string;
    status: 'confirmed' | 'pending' | 'attended' | 'absent';
  }[];
}

export interface InstructorAssessment {
  id: string;
  title: string;
  traineeName: string;
  traineeId: string;
  date: Date;
  status: 'pending_review' | 'graded' | 'scheduled';
  score?: number;
  maxScore: number;
  sessionId?: string;
}

export interface TraineeOverview {
  id: string;
  name: string;
  email: string;
  profileImage?: string;
  progress: number;
  lastActivity?: Date;
  currentModule?: string;
  pendingAssessments: number;
  overallScore?: number;
  status: 'active' | 'inactive' | 'on_leave';
}

// Instructor Dashboard Component
interface InstructorDashboardProps {
  instructor: {
    id: string;
    name: string;
  };
  trainingSessions: InstructorTrainingSession[];
  assessments: InstructorAssessment[];
  trainees: TraineeOverview[];
  onCreateSession: () => void;
  onScheduleAssessment: () => void;
  onGradeAssessment: (assessmentId: string) => void;
  onViewSession: (sessionId: string) => void;
  onViewTrainee: (traineeId: string) => void;
  onExportTraineeReport: (traineeId: string) => Promise<void>;
}

export const InstructorDashboard: React.FC<InstructorDashboardProps> = ({
  instructor,
  trainingSessions,
  assessments,
  trainees,
  onCreateSession,
  onScheduleAssessment,
  onGradeAssessment,
  onViewSession,
  onViewTrainee,
  onExportTraineeReport
}) => {
  const [upcomingSessions, setUpcomingSessions] = useState<InstructorTrainingSession[]>([]);
  const [pendingAssessments, setPendingAssessments] = useState<InstructorAssessment[]>([]);
  const [alertMessage, setAlertMessage] = useState<{type: 'success' | 'error'; message: string} | null>(null);
  
  useEffect(() => {
    // Filter upcoming sessions
    const now = new Date();
    setUpcomingSessions(
      trainingSessions
        .filter(session => new Date(session.startDate) > now)
        .sort((a, b) => new Date(a.startDate).getTime() - new Date(b.startDate).getTime())
    );
    
    // Filter pending assessments
    setPendingAssessments(
      assessments
        .filter(assessment => assessment.status === 'pending_review')
        .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
    );
  }, [trainingSessions, assessments]);
  
  // Handle exporting trainee report
  const handleExportTraineeReport = async (traineeId: string) => {
    try {
      await onExportTraineeReport(traineeId);
      setAlertMessage({
        type: 'success',
        message: 'Trainee report exported successfully.'
      });
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to export report: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };
  
  // Get status badge
  const getStatusBadge = (status: string) => {
    let bgColor = 'bg-gray-100';
    let textColor = 'text-gray-800';
    
    switch (status) {
      case 'scheduled':
        bgColor = 'bg-blue-100';
        textColor = 'text-blue-800';
        break;
      case 'in_progress':
        bgColor = 'bg-yellow-100';
        textColor = 'text-yellow-800';
        break;
      case 'completed':
        bgColor = 'bg-green-100';
        textColor = 'text-green-800';
        break;
      case 'cancelled':
        bgColor = 'bg-red-100';
        textColor = 'text-red-800';
        break;
      case 'pending_review':
        bgColor = 'bg-yellow-100';
        textColor = 'text-yellow-800';
        break;
      case 'graded':
        bgColor = 'bg-green-100';
        textColor = 'text-green-800';
        break;
      case 'confirmed':
        bgColor = 'bg-green-100';
        textColor = 'text-green-800';
        break;
      case 'pending':
        bgColor = 'bg-yellow-100';
        textColor = 'text-yellow-800';
        break;
      case 'attended':
        bgColor = 'bg-green-100';
        textColor = 'text-green-800';
        break;
      case 'absent':
        bgColor = 'bg-red-100';
        textColor = 'text-red-800';
        break;
      case 'active':
        bgColor = 'bg-green-100';
        textColor = 'text-green-800';
        break;
      case 'inactive':
        bgColor = 'bg-gray-100';
        textColor = 'text-gray-800';
        break;
      case 'on_leave':
        bgColor = 'bg-blue-100';
        textColor = 'text-blue-800';
        break;
    }
    
    return (
      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${bgColor} ${textColor}`}>
        {status.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}
      </span>
    );
  };
  
  // Format Date Range
  const formatDateRange = (startDate: Date, endDate: Date) => {
    const start = new Date(startDate);
    const end = new Date(endDate);
    
    const isSameDay = start.toDateString() === end.toDateString();
    
    if (isSameDay) {
      return `${start.toLocaleDateString()} ${start.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} - ${end.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;
    }
    
    return `${start.toLocaleDateString()} - ${end.toLocaleDateString()}`;
  };
  
  // Define table columns for trainees
  const traineeColumns: Column<TraineeOverview>[] = [
    {
      key: 'name',
      header: 'Trainee',
      render: (trainee) => (
        <div className="flex items-center">
          {trainee.profileImage ? (
            <img 
              src={trainee.profileImage} 
              alt={trainee.name}
              className="h-8 w-8 rounded-full mr-2"
            />
          ) : (
            <div className="h-8 w-8 rounded-full bg-gray-200 mr-2 flex items-center justify-center">
              <span className="text-sm font-medium text-gray-600">
                {trainee.name.split(' ').map(n => n[0]).join('')}
              </span>
            </div>
          )}
          <div>
            <div className="font-medium">{trainee.name}</div>
            <div className="text-sm text-gray-500">{trainee.email}</div>
          </div>
        </div>
      ),
      sortable: true
    },
    {
      key: 'progress',
      header: 'Progress',
      render: (trainee) => (
        <div className="w-full max-w-xs">
          <div className="flex justify-between text-xs text-gray-500 mb-1">
            <span>{trainee.progress}%</span>
            {trainee.currentModule && <span>{trainee.currentModule}</span>}
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div 
              className="bg-blue-600 h-2 rounded-full" 
              style={{ width: `${trainee.progress}%` }}
            ></div>
          </div>
        </div>
      ),
      sortable: true
    },
    {
      key: 'status',
      header: 'Status',
      render: (trainee) => getStatusBadge(trainee.status),
      sortable: true
    },
    {
      key: 'pendingAssessments',
      header: 'Pending',
      render: (trainee) => (
        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
          trainee.pendingAssessments > 0 ? 'bg-yellow-100 text-yellow-800' : 'bg-gray-100 text-gray-800'
        }`}>
          {trainee.pendingAssessments}
        </span>
      ),
      sortable: true
    },
    {
      key: 'score',
      header: 'Score',
      render: (trainee) => (
        <span className="font-medium">
          {trainee.overallScore ? `${trainee.overallScore}%` : 'N/A'}
        </span>
      ),
      sortable: true
    },
    {
      key: 'actions',
      header: 'Actions',
      render: (trainee) => (
        <div className="flex space-x-2">
          <button
            onClick={(e) => {
              e.stopPropagation();
              onViewTrainee(trainee.id);
            }}
            className="text-blue-600 hover:text-blue-900"
            title="View Details"
          >
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
            </svg>
          </button>
          <button
            onClick={(e) => {
              e.stopPropagation();
              handleExportTraineeReport(trainee.id);
            }}
            className="text-green-600 hover:text-green-900"
            title="Export Report"
          >
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
            </svg>
          </button>
        </div>
      )
    }
  ];
  
  // Define table columns for upcoming sessions
  const sessionColumns: Column<InstructorTrainingSession>[] = [
    {
      key: 'title',
      header: 'Session',
      render: (session) => (
        <div>
          <div className="font-medium">{session.title}</div>
          <div className="text-xs text-gray-500">{formatDateRange(session.startDate, session.endDate)}</div>
        </div>
      ),
      sortable: true
    },
    {
      key: 'trainees',
      header: 'Trainees',
      render: (session) => (
        <div className="flex items-center space-x-1">
          <span className="font-medium">{session.trainees.length}</span>
          {session.trainees.length > 0 && (
            <div className="flex -space-x-2 overflow-hidden">
              {session.trainees.slice(0, 3).map((trainee, index) => (
                <div 
                  key={index}
                  className="inline-block h-6 w-6 rounded-full bg-gray-200 border border-white flex items-center justify-center text-xs"
                  title={trainee.name}
                >
                  {trainee.name.split(' ').map(n => n[0]).join('')}
                </div>
              ))}
              {session.trainees.length > 3 && (
                <div className="inline-block h-6 w-6 rounded-full bg-gray-300 border border-white flex items-center justify-center text-xs text-gray-600">
                  +{session.trainees.length - 3}
                </div>
              )}
            </div>
          )}
        </div>
      ),
      sortable: true
    },
    {
      key: 'status',
      header: 'Status',
      render: (session) => getStatusBadge(session.status),
      sortable: true
    },
    {
      key: 'location',
      header: 'Location',
      render: (session) => session.location || 'Online',
      sortable: true
    },
    {
      key: 'actions',
      header: 'Actions',
      render: (session) => (
        <div className="flex space-x-2">
          <button
            onClick={(e) => {
              e.stopPropagation();
              onViewSession(session.id);
            }}
            className="text-blue-600 hover:text-blue-900"
            title="View Session"
          >
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
            </svg>
          </button>
        </div>
      )
    }
  ];
  
  // Define table columns for pending assessments
  const assessmentColumns: Column<InstructorAssessment>[] = [
    {
      key: 'title',
      header: 'Assessment',
      render: (assessment) => (
        <div>
          <div className="font-medium">{assessment.title}</div>
          <div className="text-xs text-gray-500">{new Date(assessment.date).toLocaleDateString()}</div>
        </div>
      ),
      sortable: true
    },
    {
      key: 'traineeName',
      header: 'Trainee',
      render: (assessment) => assessment.traineeName,
      sortable: true
    },
    {
      key: 'status',
      header: 'Status',
      render: (assessment) => getStatusBadge(assessment.status),
      sortable: true
    },
    {
      key: 'score',
      header: 'Score',
      render: (assessment) => (
        <span className="font-medium">
          {assessment.score !== undefined ? `${assessment.score}/${assessment.maxScore}` : 'Not graded'}
        </span>
      ),
      sortable: true
    },
    {
      key: 'actions',
      header: 'Actions',
      render: (assessment) => (
        <div className="flex space-x-2">
          <button
            onClick={(e) => {
              e.stopPropagation();
              onGradeAssessment(assessment.id);
            }}
            className="text-blue-600 hover:text-blue-900"
            title="Grade Assessment"
          >
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
            </svg>
          </button>
        </div>
      )
    }
  ];
  
  return (
    <div className="instructor-dashboard">
      {alertMessage && (
        <Alert
          type={alertMessage.type}
          message={alertMessage.message}
          onClose={() => setAlertMessage(null)}
        />
      )}
      
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900">Instructor Dashboard</h1>
        <p className="text-gray-500">
          Welcome back, {instructor.name}. Manage your training sessions and assessments.
        </p>
      </div>
      
      {/* Quick Actions */}
      <Card className="mb-6">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4">
          <h2 className="text-lg font-medium">Quick Actions</h2>
        </div>
        
        <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
          <button
            onClick={onCreateSession}
            className="flex flex-col items-center p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
          >
            <div className="p-2 rounded-full bg-white shadow-sm mb-2">
              <svg className="h-5 w-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
              </svg>
            </div>
            <span className="text-sm font-medium text-center">Create Training Session</span>
          </button>
          
          <button
            onClick={onScheduleAssessment}
            className="flex flex-col items-center p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
          >
            <div className="p-2 rounded-full bg-white shadow-sm mb-2">
              <svg className="h-5 w-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path>
              </svg>
            </div>
            <span className="text-sm font-medium text-center">Schedule Assessment</span>
          </button>
          
          <Link
            to="/instructor/trainees"
            className="flex flex-col items-center p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
          >
            <div className="p-2 rounded-full bg-white shadow-sm mb-2">
              <svg className="h-5 w-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
              </svg>
            </div>
            <span className="text-sm font-medium text-center">View All Trainees</span>
          </Link>
        </div>
      </Card>
      
      {/* Statistics Summary */}
      <div className="grid grid-cols-1 sm:grid-cols-3 gap-6 mb-6">
        <Card>
          <div className="flex items-center">
            <div className="p-3 rounded-full bg-blue-100 text-blue-600 mr-4">
              <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
              </svg>
            </div>
            <div>
              <p className="text-sm text-gray-500">Upcoming Sessions</p>
              <p className="text-2xl font-semibold">{upcomingSessions.length}</p>
            </div>
          </div>
        </Card>
        
        <Card>
          <div className="flex items-center">
            <div className="p-3 rounded-full bg-yellow-100 text-yellow-600 mr-4">
              <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <div>
              <p className="text-sm text-gray-500">Pending Assessments</p>
              <p className="text-2xl font-semibold">{pendingAssessments.length}</p>
            </div>
          </div>
        </Card>
        
        <Card>
          <div className="flex items-center">
            <div className="p-3 rounded-full bg-green-100 text-green-600 mr-4">
              <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
              </svg>
            </div>
            <div>
              <p className="text-sm text-gray-500">Active Trainees</p>
              <p className="text-2xl font-semibold">{trainees.filter(t => t.status === 'active').length}</p>
            </div>
          </div>
        </Card>
      </div>
      
      {/* Trainees Overview */}
      <Card className="mb-6">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4">
          <h2 className="text-lg font-medium">Trainee Overview</h2>
          <Link
            to="/instructor/trainees"
            className="text-sm text-blue-600 hover:text-blue-500"
          >
            View All
          </Link>
        </div>
        
        <DataTable
          columns={traineeColumns}
          data={trainees.slice(0, 5)}
          keyExtractor={(trainee) => trainee.id}
          onRowClick={(trainee) => onViewTrainee(trainee.id)}
          emptyMessage="No trainees assigned to you."
        />
      </Card>
      
      {/* Upcoming Training Sessions */}
      <Card className="mb-6">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4">
          <h2 className="text-lg font-medium">Upcoming Training Sessions</h2>
          <Link
            to="/instructor/schedule"
            className="text-sm text-blue-600 hover:text-blue-500"
          >
            View Schedule
          </Link>
        </div>
        
        {upcomingSessions.length > 0 ? (
          <DataTable
            columns={sessionColumns}
            data={upcomingSessions.slice(0, 5)}
            keyExtractor={(session) => session.id}
            onRowClick={(session) => onViewSession(session.id)}
          />
        ) : (
          <div className="p-8 text-center text-gray-500">
            No upcoming training sessions scheduled.
          </div>
        )}
      </Card>
      
      {/* Pending Assessments */}
      <Card>
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4">
          <h2 className="text-lg font-medium">Pending Assessments</h2>
          <Link
            to="/instructor/assessments"
            className="text-sm text-blue-600 hover:text-blue-500"
          >
            View All
          </Link>
        </div>
        
        {pendingAssessments.length > 0 ? (
          <DataTable
            columns={assessmentColumns}
            data={pendingAssessments.slice(0, 5)}
            keyExtractor={(assessment) => assessment.id}
            onRowClick={(assessment) => onGradeAssessment(assessment.id)}
          />
        ) : (
          <div className="p-8 text-center text-gray-500">
            No pending assessments to review.
          </div>
        )}
      </Card>
    </div>
  );
};

// components/analytics/KPIWidget.tsx
import React from 'react';
import { KpiMetric } from '../../services/analyticsService';

interface KPIWidgetProps {
  kpi: KpiMetric;
}

const KPIWidget: React.FC<KPIWidgetProps> = ({ kpi }) => {
  // Calculate change percentage and determine if it's positive or negative
  const changePercent = kpi.previousValue 
    ? ((kpi.value - kpi.previousValue) / kpi.previousValue) * 100 
    : 0;
  
  const isPositive = kpi.trend === 'up' || changePercent > 0;
  const isNegative = kpi.trend === 'down' || changePercent < 0;
  const isNeutral = kpi.trend === 'stable' || changePercent === 0;
  
  // Determine which icon to show based on trend
  const renderTrendIcon = () => {
    if (isPositive) {
      return (
        <span className="text-green-500">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M12 7a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0V8.414l-4.293 4.293a1 1 0 01-1.414 0L8 10.414l-4.293 4.293a1 1 0 01-1.414-1.414l5-5a1 1 0 011.414 0L11 10.586 14.586 7H12z" clipRule="evenodd" />
          </svg>
        </span>
      );
    } else if (isNegative) {
      return (
        <span className="text-red-500">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M12 13a1 1 0 100 2h5a1 1 0 001-1v-5a1 1 0 10-2 0v2.586l-4.293-4.293a1 1 0 00-1.414 0L8 9.586l-4.293-4.293a1 1 0 00-1.414 1.414l5 5a1 1 0 001.414 0L11 9.414 14.586 13H12z" clipRule="evenodd" />
          </svg>
        </span>
      );
    } else {
      return (
        <span className="text-gray-500">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M5 10a1 1 0 011-1h8a1 1 0 110 2H6a1 1 0 01-1-1z" clipRule="evenodd" />
          </svg>
        </span>
      );
    }
  };

  // Format the value based on unit
  const formatValue = (value: number, unit?: string) => {
    if (unit === '%') {
      return `${value.toFixed(1)}%`;
    } else if (unit === 'hours') {
      return `${value.toFixed(0)}h`;
    } else if (unit === 'currency') {
      return `$${value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
    } else {
      return value.toLocaleString(undefined, { 
        minimumFractionDigits: value % 1 === 0 ? 0 : 1,
        maximumFractionDigits: 1
      });
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-md p-6 transition-all hover:shadow-lg">
      <div className="flex justify-between items-start">
        <h3 className="text-sm font-medium text-gray-500">{kpi.name}</h3>
        {renderTrendIcon()}
      </div>
      
      <div className="mt-2 flex items-baseline">
        <p className="text-2xl font-semibold text-gray-900">
          {formatValue(kpi.value, kpi.unit)}
        </p>
        
        {kpi.previousValue !== undefined && (
          <p className={`ml-2 text-sm font-medium ${
            isPositive ? 'text-green-600' : 
            isNegative ? 'text-red-600' : 
            'text-gray-500'
          }`}>
            {isPositive && '+'}
            {changePercent.toFixed(1)}%
          </p>
        )}
      </div>
      
      {kpi.target !== undefined && (
        <div className="mt-4">
          <div className="flex items-center justify-between text-xs text-gray-500">
            <span>Progress</span>
            <span>{Math.min(100, (kpi.value / kpi.target) * 100).toFixed(0)}%</span>
          </div>
          <div className="mt-1 relative h-2 bg-gray-200 rounded-full overflow-hidden">
            <div 
              className="absolute h-full bg-blue-500 rounded-full"
              style={{ width: `${Math.min(100, (kpi.value / kpi.target) * 100)}%` }}
            />
          </div>
        </div>
      )}
    </div>
  );
};

export default KPIWidget;

// src/frontend/components/loading/LoadingSpinner.tsx
import React from 'react';

interface LoadingSpinnerProps {
  size?: 'sm' | 'md' | 'lg';
  color?: 'primary' | 'secondary' | 'white';
  className?: string;
}

export const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({
  size = 'md',
  color = 'primary',
  className = ''
}) => {
  const sizeClasses = {
    sm: 'h-4 w-4',
    md: 'h-8 w-8',
    lg: 'h-12 w-12'
  };
  
  const colorClasses = {
    primary: 'text-blue-600',
    secondary: 'text-gray-600',
    white: 'text-white'
  };
  
  return (
    <svg
      className={`animate-spin ${sizeClasses[size]} ${colorClasses[color]} ${className}`}
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      data-testid="loading-spinner"
    >
      <circle
        className="opacity-25"
        cx="12"
        cy="12"
        r="10"
        stroke="currentColor"
        strokeWidth="4"
      ></circle>
      <path
        className="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
      ></path>
    </svg>
  );
};

// src/frontend/components/loading/LoadingOverlay.tsx
import React from 'react';
import { LoadingSpinner } from './LoadingSpinner';

interface LoadingOverlayProps {
  isLoading: boolean;
  message?: string;
  children: React.ReactNode;
  spinnerSize?: 'sm' | 'md' | 'lg';
}

export const LoadingOverlay: React.FC<LoadingOverlayProps> = ({
  isLoading,
  message = 'Loading...',
  children,
  spinnerSize = 'lg'
}) => {
  if (!isLoading) {
    return <>{children}</>;
  }
  
  return (
    <div className="relative">
      <div className="opacity-50 pointer-events-none">{children}</div>
      <div className="absolute inset-0 flex flex-col items-center justify-center bg-gray-100 bg-opacity-50">
        <LoadingSpinner size={spinnerSize} />
        {message && <p className="mt-2 text-gray-700 font-medium">{message}</p>}
      </div>
    </div>
  );
};

// src/frontend/components/loading/LoadingPage.tsx
import React from 'react';
import { LoadingSpinner } from './LoadingSpinner';

interface LoadingPageProps {
  message?: string;
  spinnerSize?: 'sm' | 'md' | 'lg';
}

export const LoadingPage: React.FC<LoadingPageProps> = ({
  message = 'Loading...',
  spinnerSize = 'lg'
}) => {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen p-4 bg-white">
      <LoadingSpinner size={spinnerSize} />
      {message && <p className="mt-4 text-lg text-gray-700 font-medium">{message}</p>}
    </div>
  );
};

// src/frontend/components/loading/SkeletonText.tsx
import React from 'react';

interface SkeletonTextProps {
  lines?: number;
  width?: string;
  className?: string;
}

export const SkeletonText: React.FC<SkeletonTextProps> = ({
  lines = 1,
  width = '100%',
  className = ''
}) => {
  return (
    <div className={className}>
      {Array.from({ length: lines }).map((_, index) => (
        <div
          key={index}
          className={`h-4 bg-gray-200 rounded animate-pulse mb-2 ${index === lines - 1 && lines > 1 ? 'w-4/5' : ''}`}
          style={{ width: typeof width === 'string' ? width : `${width}%` }}
        />
      ))}
    </div>
  );
};

// src/frontend/components/loading/SkeletonCircle.tsx
import React from 'react';

interface SkeletonCircleProps {
  size?: number;
  className?: string;
}

export const SkeletonCircle: React.FC<SkeletonCircleProps> = ({
  size = 12,
  className = ''
}) => {
  return (
    <div
      className={`rounded-full bg-gray-200 animate-pulse ${className}`}
      style={{ width: `${size}px`, height: `${size}px` }}
    />
  );
};

// src/frontend/components/loading/SkeletonCard.tsx
import React from 'react';
import { SkeletonText } from './SkeletonText';

interface SkeletonCardProps {
  hasImage?: boolean;
  imageHeight?: number;
  lines?: number;
  className?: string;
}

export const SkeletonCard: React.FC<SkeletonCardProps> = ({
  hasImage = true,
  imageHeight = 200,
  lines = 3,
  className = ''
}) => {
  return (
    <div className={`bg-white rounded shadow p-4 ${className}`}>
      {hasImage && (
        <div 
          className="bg-gray-200 rounded w-full animate-pulse mb-4"
          style={{ height: `${imageHeight}px` }}
        />
      )}
      <SkeletonText lines={lines} />
    </div>
  );
};

// src/frontend/components/loading/SkeletonTable.tsx
import React from 'react';

interface SkeletonTableProps {
  rows?: number;
  columns?: number;
  className?: string;
}

export const SkeletonTable: React.FC<SkeletonTableProps> = ({
  rows = 5,
  columns = 4,
  className = ''
}) => {
  return (
    <div className={`bg-white overflow-hidden ${className}`}>
      <div className="bg-gray-50 border-b">
        <div className="grid gap-4" style={{ gridTemplateColumns: `repeat(${columns}, minmax(0, 1fr))` }}>
          {Array.from({ length: columns }).map((_, index) => (
            <div key={`header-${index}`} className="p-4">
              <div className="h-4 bg-gray-300 rounded animate-pulse w-4/5" />
            </div>
          ))}
        </div>
      </div>
      <div>
        {Array.from({ length: rows }).map((_, rowIndex) => (
          <div 
            key={`row-${rowIndex}`}
            className="grid gap-4 border-b"
            style={{ gridTemplateColumns: `repeat(${columns}, minmax(0, 1fr))` }}
          >
            {Array.from({ length: columns }).map((_, colIndex) => (
              <div key={`cell-${rowIndex}-${colIndex}`} className="p-4">
                <div className="h-4 bg-gray-200 rounded animate-pulse w-full" />
              </div>
            ))}
          </div>
        ))}
      </div>
    </div>
  );
};

// src/frontend/components/loading/SkeletonDashboard.tsx
import React from 'react';
import { SkeletonCard } from './SkeletonCard';
import { SkeletonTable } from './SkeletonTable';
import { SkeletonText } from './SkeletonText';

export const SkeletonDashboard: React.FC = () => {
  return (
    <div className="space-y-6">
      {/* Page header */}
      <div className="mb-6">
        <div className="h-8 bg-gray-200 rounded animate-pulse w-60 mb-2" />
        <div className="h-4 bg-gray-200 rounded animate-pulse w-96" />
      </div>
      
      {/* Stat cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
        {Array.from({ length: 3 }).map((_, index) => (
          <div key={`stat-${index}`} className="bg-white rounded shadow p-4">
            <div className="flex items-start">
              <div className="flex-shrink-0 mr-4">
                <div className="h-10 w-10 bg-gray-200 rounded-full animate-pulse" />
              </div>
              <div className="flex-1">
                <div className="h-4 bg-gray-200 rounded animate-pulse w-24 mb-2" />
                <div className="h-6 bg-gray-200 rounded animate-pulse w-16" />
              </div>
            </div>
          </div>
        ))}
      </div>
      
      {/* Main content area */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2">
          <div className="bg-white rounded shadow p-4 mb-6">
            <div className="mb-4">
              <div className="h-6 bg-gray-200 rounded animate-pulse w-48" />
            </div>
            <SkeletonTable rows={4} columns={4} />
          </div>
        </div>
        
        <div>
          <div className="bg-white rounded shadow p-4">
            <div className="mb-4">
              <div className="h-6 bg-gray-200 rounded animate-pulse w-32" />
            </div>
            <div className="space-y-4">
              {Array.from({ length: 3 }).map((_, index) => (
                <div key={`activity-${index}`} className="flex items-start">
                  <div className="flex-shrink-0 mr-3">
                    <div className="h-8 w-8 bg-gray-200 rounded-full animate-pulse" />
                  </div>
                  <div className="flex-1">
                    <div className="h-4 bg-gray-200 rounded animate-pulse w-full mb-2" />
                    <div className="h-3 bg-gray-200 rounded animate-pulse w-4/5" />
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// src/frontend/components/loading/SkeletonProfile.tsx
import React from 'react';
import { SkeletonText } from './SkeletonText';
import { SkeletonCircle } from './SkeletonCircle';

export const SkeletonProfile: React.FC = () => {
  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="bg-white rounded shadow p-6">
        <div className="flex flex-col md:flex-row md:items-center">
          <div className="flex-shrink-0 mr-6 flex justify-center mb-4 md:mb-0">
            <div className="h-20 w-20 bg-gray-200 rounded-full animate-pulse" />
          </div>
          <div className="flex-1">
            <div className="h-6 bg-gray-200 rounded animate-pulse w-48 mb-2" />
            <div className="h-4 bg-gray-200 rounded animate-pulse w-32 mb-1" />
            <div className="h-4 bg-gray-200 rounded animate-pulse w-40" />
          </div>
          <div className="mt-4 md:mt-0 flex justify-center">
            <div className="h-9 bg-gray-200 rounded animate-pulse w-24" />
          </div>
        </div>
      </div>
      
      {/* Main content */}
      <div className="bg-white rounded shadow p-6">
        <div className="mb-6">
          <div className="h-6 bg-gray-200 rounded animate-pulse w-32 mb-4" />
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <div className="h-4 bg-gray-200 rounded animate-pulse w-24 mb-2" />
              <div className="h-5 bg-gray-200 rounded animate-pulse w-full" />
            </div>
            <div>
              <div className="h-4 bg-gray-200 rounded animate-pulse w-24 mb-2" />
              <div className="h-5 bg-gray-200 rounded animate-pulse w-full" />
            </div>
            <div>
              <div className="h-4 bg-gray-200 rounded animate-pulse w-24 mb-2" />
              <div className="h-5 bg-gray-200 rounded animate-pulse w-full" />
            </div>
            <div>
              <div className="h-4 bg-gray-200 rounded animate-pulse w-24 mb-2" />
              <div className="h-5 bg-gray-200 rounded animate-pulse w-full" />
            </div>
          </div>
        </div>
        
        <div>
          <div className="h-6 bg-gray-200 rounded animate-pulse w-40 mb-4" />
          <div className="flex flex-wrap gap-2">
            {Array.from({ length: 5 }).map((_, index) => (
              <div key={`badge-${index}`} className="h-6 bg-gray-200 rounded-full animate-pulse w-20" />
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

// src/frontend/components/loading/SkeletonDetailView.tsx
import React from 'react';
import { SkeletonText } from './SkeletonText';

interface SkeletonDetailViewProps {
  fields?: number;
  className?: string;
}

export const SkeletonDetailView: React.FC<SkeletonDetailViewProps> = ({
  fields = 6,
  className = ''
}) => {
  return (
    <div className={`bg-white rounded shadow p-6 ${className}`}>
      {/* Header */}
      <div className="mb-6">
        <div className="h-6 bg-gray-200 rounded animate-pulse w-1/3 mb-4" />
        <div className="h-4 bg-gray-200 rounded animate-pulse w-2/3 mb-1" />
        <div className="h-4 bg-gray-200 rounded animate-pulse w-1/2" />
      </div>
      
      {/* Details */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {Array.from({ length: fields }).map((_, index) => (
          <div key={`field-${index}`}>
            <div className="h-4 bg-gray-200 rounded animate-pulse w-24 mb-2" />
            <div className="h-5 bg-gray-200 rounded animate-pulse w-full" />
          </div>
        ))}
      </div>
      
      {/* Buttons */}
      <div className="mt-8 flex justify-end space-x-3">
        <div className="h-9 bg-gray-200 rounded animate-pulse w-20" />
        <div className="h-9 bg-gray-200 rounded animate-pulse w-20" />
      </div>
    </div>
  );
};

// src/frontend/hooks/useLoading.ts
import { useState, useCallback } from 'react';

export function useLoading(initialState: boolean = false) {
  const [isLoading, setIsLoading] = useState<boolean>(initialState);
  
  const startLoading = useCallback(() => {
    setIsLoading(true);
  }, []);
  
  const stopLoading = useCallback(() => {
    setIsLoading(false);
  }, []);
  
  const withLoading = useCallback(async <T,>(promise: Promise<T>): Promise<T> => {
    setIsLoading(true);
    try {
      const result = await promise;
      return result;
    } finally {
      setIsLoading(false);
    }
  }, []);
  
  return {
    isLoading,
    startLoading,
    stopLoading,
    withLoading
  };
}

// src/frontend/App.tsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { AppLayout } from './components/layout/AppLayout';
import { LoginForm } from './components/auth/UserAuth';
import { AuthProvider, useAuth, ProtectedRoute, Permission } from './components/auth/UserAuth';
import { NotificationProvider } from './components/notifications/NotificationSystem';
import { MainDashboard } from './components/dashboard/MainDashboard';
import { SyllabusBuilder } from './components/syllabus/SyllabusBuilder';
import { SyllabusCustomization } from './components/syllabus/SyllabusCustomization';
import { DocumentManagement } from './components/document/DocumentManagement';
import { DocumentViewer } from './components/document/DocumentViewer';
import { AssessmentInterface } from './components/assessment/AssessmentInterface';
import { SimulatorIntegration } from './components/simulator/SimulatorIntegration';
import { ComplianceEngine } from './components/compliance/ComplianceEngine';
import { AnalyticsDashboard } from './components/analytics/AnalyticsDashboard';
import { TraineePerformance } from './components/trainee/TraineePerformance';
import { InstructorDashboard } from './components/instructor/InstructorDashboard';
import { NotificationPage } from './components/notifications/NotificationSystem';
import { UserProfile } from './components/auth/UserAuth';

// Import services
import { authService } from './services/authService';
import { notificationService } from './services/notificationService';

// Main Routes Component
const AppRoutes = () => {
  const { isAuthenticated, isLoading, user } = useAuth();

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return (
      <Routes>
        <Route path="/login" element={<LoginForm onLogin={authService.login} onForgotPassword={authService.forgotPassword} isLoading={false} />} />
        <Route path="*" element={<Navigate to="/login" replace />} />
      </Routes>
    );
  }

  return (
    <AppLayout>
      <Routes>
        <Route path="/" element={<MainDashboard recentActivities={[]} notifications={[]} onNotificationRead={() => Promise.resolve()} onNotificationClear={() => Promise.resolve()} onAllNotificationsRead={() => Promise.resolve()} />} />
        
        {/* Syllabus Routes */}
        <Route path="/syllabus" element={
          <ProtectedRoute requiredPermissions={[Permission.EDIT_SYLLABUS]}>
            <Navigate to="/syllabus/builder" replace />
          </ProtectedRoute>
        } />
        <Route path="/syllabus/builder" element={
          <ProtectedRoute requiredPermissions={[Permission.EDIT_SYLLABUS]}>
            <SyllabusBuilder 
              syllabusElements={[]} 
              onSave={() => Promise.resolve()} 
              onElementEdit={() => {}} 
              onCheckCompliance={() => {}}
            />
          </ProtectedRoute>
        } />
        <Route path="/syllabus/customization" element={
          <ProtectedRoute requiredPermissions={[Permission.EDIT_SYLLABUS]}>
            <SyllabusCustomization 
              elements={[]} 
              templates={[]} 
              complianceRequirements={[]}
              exercises={[]}
              versions={[]}
              onSave={() => Promise.resolve()}
              onApplyTemplate={() => Promise.resolve([])}
              onCheckCompliance={() => Promise.resolve({
                isCompliant: true,
                requirementsMet: [],
                requirementsNotMet: [],
                requirementsPartiallyMet: [],
                details: [],
                overallStatus: 'compliant'
              })}
              onCreateVersion={() => Promise.resolve()}
              onBulkEdit={() => Promise.resolve()}
            />
          </ProtectedRoute>
        } />
        
        {/* Document Routes */}
        <Route path="/documents" element={
          <ProtectedRoute requiredPermissions={[Permission.UPLOAD_DOCUMENTS]}>
            <Navigate to="/documents/upload" replace />
          </ProtectedRoute>
        } />
        <Route path="/documents/upload" element={
          <ProtectedRoute requiredPermissions={[Permission.UPLOAD_DOCUMENTS]}>
            <DocumentManagement 
              documents={[]} 
              onUpload={() => Promise.resolve()} 
              onDelete={() => Promise.resolve()} 
              onPreview={() => {}}
              onProcess={() => Promise.resolve()}
              onCategorize={() => Promise.resolve()}
              onTagsUpdate={() => Promise.resolve()}
            />
          </ProtectedRoute>
        } />
        <Route path="/documents/viewer/:id" element={
          <ProtectedRoute requiredPermissions={[Permission.UPLOAD_DOCUMENTS]}>
            <DocumentViewer 
              documentId=""
              metadata={{
                title: '',
                totalPages: 0,
                fileType: '',
                fileSize: 0
              }}
              pages={[]}
              onAnnotationCreate={() => Promise.resolve({
                id: '',
                pageNumber: 0,
                x: 0,
                y: 0,
                width: 0,
                height: 0,
                text: '',
                type: 'note'
              })}
              onAnnotationUpdate={() => Promise.resolve()}
              onAnnotationDelete={() => Promise.resolve()}
            />
          </ProtectedRoute>
        } />
        
        {/* Assessment Routes */}
        <Route path="/assessment" element={
          <ProtectedRoute requiredPermissions={[Permission.CREATE_ASSESSMENT]}>
            <Navigate to="/assessment/create" replace />
          </ProtectedRoute>
        } />
        <Route path="/assessment/create" element={
          <ProtectedRoute requiredPermissions={[Permission.CREATE_ASSESSMENT]}>
            <AssessmentInterface 
              trainee={{
                id: '',
                name: ''
              }}
              assessmentForm={{
                id: '',
                name: '',
                description: '',
                competencies: [],
                categories: []
              }}
              onSave={() => Promise.resolve()}
              onCompare={() => {}}
              instructor={{
                id: '',
                name: ''
              }}
            />
          </ProtectedRoute>
        } />
        <Route path="/assessment/grade/:id" element={
          <ProtectedRoute requiredPermissions={[Permission.GRADE_ASSESSMENT]}>
            <AssessmentInterface 
              trainee={{
                id: '',
                name: ''
              }}
              assessmentForm={{
                id: '',
                name: '',
                description: '',
                competencies: [],
                categories: []
              }}
              onSave={() => Promise.resolve()}
              onCompare={() => {}}
              instructor={{
                id: '',
                name: ''
              }}
            />
          </ProtectedRoute>
        } />
        
        {/* Simulator Routes */}
        <Route path="/simulator" element={<Navigate to="/simulator/connect" replace />} />
        <Route path="/simulator/connect" element={
          <SimulatorIntegration
            onConnect={() => Promise.resolve()}
            onDisconnect={() => Promise.resolve()}
            onStart={() => Promise.resolve()}
            onStop={() => Promise.resolve()}
            onPause={() => Promise.resolve()}
            onResume={() => Promise.resolve()}
            onReset={() => Promise.resolve()}
            onParameterChange={() => Promise.resolve()}
            connectionStatus="disconnected"
            parameters={[]}
            events={[]}
            scenarios={[]}
            isRunning={false}
            isPaused={false}
          />
        } />
        
        {/* Compliance Routes */}
        <Route path="/compliance" element={
          <ProtectedRoute requiredPermissions={[Permission.CHECK_COMPLIANCE]}>
            <Navigate to="/compliance/requirements" replace />
          </ProtectedRoute>
        } />
        <Route path="/compliance/requirements" element={
          <ProtectedRoute requiredPermissions={[Permission.CHECK_COMPLIANCE]}>
            <ComplianceEngine
              frameworks={[]}
              trainingPrograms={[]}
              mappings={[]}
              reports={[]}
              onCheckCompliance={() => Promise.resolve({
                id: '',
                trainingProgramId: '',
                trainingProgramName: '',
                frameworkId: '',
                frameworkName: '',
                generatedDate: new Date(),
                generatedBy: '',
                overallStatus: 'unknown',
                requirementStatuses: []
              })}
              onGenerateReport={() => Promise.resolve('')}
              onAddMapping={() => Promise.resolve()}
              onUpdateMapping={() => Promise.resolve()}
              onExportReport={() => Promise.resolve()}
            />
          </ProtectedRoute>
        } />
        
        {/* Analytics Routes */}
        <Route path="/analytics" element={
          <ProtectedRoute requiredPermissions={[Permission.VIEW_ANALYTICS]}>
            <Navigate to="/analytics/dashboard" replace />
          </ProtectedRoute>
        } />
        <Route path="/analytics/dashboard" element={
          <ProtectedRoute requiredPermissions={[Permission.VIEW_ANALYTICS]}>
            <AnalyticsDashboard
              metrics={{
                overallStats: {
                  activeTrainees: 0,
                  completedTrainees: 0,
                  avgProgramScore: 0,
                  complianceRate: 0
                },
                trainees: [],
                programs: [],
                complianceMetrics: []
              }}
              onGenerateReport={() => {}}
              onTraineeSelect={() => {}}
              onProgramSelect={() => {}}
              dateRange={{
                startDate: new Date(),
                endDate: new Date()
              }}
              onDateRangeChange={() => {}}
            />
          </ProtectedRoute>
        } />
        
        {/* Trainee Routes */}
        <Route path="/trainee/performance/:id" element={
          <TraineePerformance
            trainee={{
              id: '',
              firstName: '',
              lastName: '',
              email: '',
              status: 'active',
              enrolledPrograms: []
            }}
            programs={[]}
            progress={[]}
            assessments={[]}
            competencies={[]}
            metrics={[]}
            onExportReport={() => Promise.resolve()}
          />
        } />
        
        {/* Instructor Routes */}
        <Route path="/instructor/dashboard" element={
          <InstructorDashboard
            instructor={{
              id: '',
              name: ''
            }}
            trainingSessions={[]}
            assessments={[]}
            trainees={[]}
            onCreateSession={() => {}}
            onScheduleAssessment={() => {}}
            onGradeAssessment={() => {}}
            onViewSession={() => {}}
            onViewTrainee={() => {}}
            onExportTraineeReport={() => Promise.resolve()}
          />
        } />
        
        {/* User Profile & Settings */}
        <Route path="/profile" element={
          <UserProfile
            user={{
              id: '',
              username: '',
              email: '',
              firstName: '',
              lastName: '',
              role: 'trainee',
              permissions: []
            }}
            onUpdateProfile={() => Promise.resolve()}
            onChangePassword={() => Promise.resolve()}
            onUploadProfilePhoto={() => Promise.resolve('')}
          />
        } />
        
        {/* Notifications */}
        <Route path="/notifications" element={
          <NotificationPage
            notifications={[]}
            onMarkAsRead={() => Promise.resolve()}
            onDelete={() => Promise.resolve()}
            onMarkAllAsRead={() => Promise.resolve()}
            onClearAll={() => Promise.resolve()}
            onFilter={() => {}}
            categories={[]}
          />
        } />
        
        {/* Fallback Route */}
        <Route path="*" element={<Navigate to="/" replace />} />
      </Routes>
    </AppLayout>
  );
};

// Main App Component
const App: React.FC = () => {
  return (
    <Router>
      <AuthProvider authService={authService}>
        <NotificationProvider notificationService={notificationService}>
          <AppRoutes />
        </NotificationProvider>
      </AuthProvider>
    </Router>
  );
};

export default App;

// src/frontend/components/dashboard/MainDashboard.tsx
import React, { useState, useEffect } from 'react';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { Link } from 'react-router-dom';
import { useAuth, Permission } from '../auth/UserAuth';

// Types
interface DashboardTile {
  id: string;
  title: string;
  description: string;
  icon: React.ReactNode;
  link: string;
  requiredPermission?: Permission;
  highlight?: boolean;
}

interface QuickAction {
  id: string;
  title: string;
  link: string;
  icon: React.ReactNode;
  requiredPermission?: Permission;
}

interface RecentActivity {
  id: string;
  type: 'syllabus' | 'assessment' | 'document' | 'compliance' | 'user';
  action: string;
  details: string;
  timestamp: Date;
  user: {
    id: string;
    name: string;
    photoUrl?: string;
  };
  link?: string;
}

interface NotificationItem {
  id: string;
  title: string;
  message: string;
  type: 'info' | 'warning' | 'success' | 'error';
  timestamp: Date;
  isRead: boolean;
  link?: string;
}

interface TraineeProgress {
  traineeName: string;
  traineeId: string;
  programName: string;
  programId: string;
  progress: number;
  lastActivity: Date;
  status: 'on_track' | 'behind' | 'ahead' | 'completed';
}

interface UpcomingTraining {
  id: string;
  title: string;
  description: string;
  startDate: Date;
  endDate: Date;
  trainees: number;
  instructors: string[];
  location?: string;
}

// Dashboard Component
interface MainDashboardProps {
  recentActivities: RecentActivity[];
  notifications: NotificationItem[];
  traineeProgress?: TraineeProgress[];
  upcomingTraining?: UpcomingTraining[];
  onNotificationRead: (id: string) => Promise<void>;
  onNotificationClear: (id: string) => Promise<void>;
  onAllNotificationsRead: () => Promise<void>;
}

export const MainDashboard: React.FC<MainDashboardProps> = ({
  recentActivities,
  notifications,
  traineeProgress,
  upcomingTraining,
  onNotificationRead,
  onNotificationClear,
  onAllNotificationsRead
}) => {
  const { user } = useAuth();
  const [unreadNotifications, setUnreadNotifications] = useState<NotificationItem[]>([]);
  
  useEffect(() => {
    setUnreadNotifications(notifications.filter(notification => !notification.isRead));
  }, [notifications]);
  
  // Dashboard tiles based on user role
  const dashboardTiles: DashboardTile[] = [
    {
      id: 'syllabus',
      title: 'Syllabus Builder',
      description: 'Create and manage training syllabi with drag-and-drop modules and regulatory compliance checking.',
      icon: (
        <svg className="h-8 w-8 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
        </svg>
      ),
      link: '/syllabus',
      requiredPermission: Permission.EDIT_SYLLABUS
    },
    {
      id: 'documents',
      title: 'Document Management',
      description: 'Upload and process training materials, regulations, and references for content extraction.',
      icon: (
        <svg className="h-8 w-8 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
        </svg>
      ),
      link: '/documents',
      requiredPermission: Permission.UPLOAD_DOCUMENTS
    },
    {
      id: 'assessment',
      title: 'Assessment & Grading',
      description: 'Create, administer, and grade training assessments with performance tracking.',
      icon: (
        <svg className="h-8 w-8 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
      ),
      link: '/assessment',
      requiredPermission: Permission.CREATE_ASSESSMENT
    },
    {
      id: 'compliance',
      title: 'Compliance Engine',
      description: 'Verify training content against regulatory frameworks and generate compliance reports.',
      icon: (
        <svg className="h-8 w-8 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
        </svg>
      ),
      link: '/compliance',
      requiredPermission: Permission.CHECK_COMPLIANCE
    },
    {
      id: 'simulator',
      title: 'Simulator Integration',
      description: 'Connect to flight simulators, configure scenarios, and track performance metrics.',
      icon: (
        <svg className="h-8 w-8 text-yellow-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5.636 18.364a9 9 0 010-12.728m12.728 0a9 9 0 010 12.728m-9.9-2.829a5 5 0 010-7.07m7.072 0a5 5 0 010 7.07M13 12a1 1 0 11-2 0 1 1 0 012 0z"></path>
        </svg>
      ),
      link: '/simulator'
    },
    {
      id: 'analytics',
      title: 'Analytics & Reports',
      description: 'View comprehensive analytics on training effectiveness and generate custom reports.',
      icon: (
        <svg className="h-8 w-8 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
        </svg>
      ),
      link: '/analytics',
      requiredPermission: Permission.VIEW_ANALYTICS
    }
  ];
  
  // Quick actions based on user role
  const quickActions: QuickAction[] = [
    {
      id: 'create-syllabus',
      title: 'Create New Syllabus',
      link: '/syllabus/new',
      icon: (
        <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
        </svg>
      ),
      requiredPermission: Permission.EDIT_SYLLABUS
    },
    {
      id: 'upload-document',
      title: 'Upload Document',
      link: '/documents/upload',
      icon: (
        <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0l-4 4m4-4v12"></path>
        </svg>
      ),
      requiredPermission: Permission.UPLOAD_DOCUMENTS
    },
    {
      id: 'create-assessment',
      title: 'Create Assessment',
      link: '/assessment/new',
      icon: (
        <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path>
        </svg>
      ),
      requiredPermission: Permission.CREATE_ASSESSMENT
    },
    {
      id: 'check-compliance',
      title: 'Check Compliance',
      link: '/compliance/check',
      icon: (
        <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
        </svg>
      ),
      requiredPermission: Permission.CHECK_COMPLIANCE
    },
    {
      id: 'generate-report',
      title: 'Generate Report',
      link: '/analytics/reports',
      icon: (
        <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 12l3-3 3 3 4-4M8 21l4-4 4 4M3 4h18M4 4h16v12a1 1 0 01-1 1H5a1 1 0 01-1-1V4z"></path>
        </svg>
      ),
      requiredPermission: Permission.EXPORT_REPORTS
    }
  ];
  
  // Filter tiles and actions based on user permissions
  const filteredTiles = dashboardTiles.filter(tile => 
    !tile.requiredPermission || user?.permissions.includes(tile.requiredPermission)
  );
  
  const filteredActions = quickActions.filter(action => 
    !action.requiredPermission || user?.permissions.includes(action.requiredPermission)
  );
  
  // Format time ago
  const formatTimeAgo = (date: Date) => {
    const now = new Date();
    const diffInSeconds = Math.floor((now.getTime() - new Date(date).getTime()) / 1000);
    
    if (diffInSeconds < 60) {
      return `${diffInSeconds} seconds ago`;
    }
    
    const diffInMinutes = Math.floor(diffInSeconds / 60);
    if (diffInMinutes < 60) {
      return `${diffInMinutes} minute${diffInMinutes > 1 ? 's' : ''} ago`;
    }
    
    const diffInHours = Math.floor(diffInMinutes / 60);
    if (diffInHours < 24) {
      return `${diffInHours} hour${diffInHours > 1 ? 's' : ''} ago`;
    }
    
    const diffInDays = Math.floor(diffInHours / 24);
    if (diffInDays < 30) {
      return `${diffInDays} day${diffInDays > 1 ? 's' : ''} ago`;
    }
    
    const diffInMonths = Math.floor(diffInDays / 30);
    return `${diffInMonths} month${diffInMonths > 1 ? 's' : ''} ago`;
  };
  
  // Get icon for activity type
  const getActivityIcon = (type: string) => {
    switch (type) {
      case 'syllabus':
        return (
          <div className="p-2 rounded-full bg-blue-100">
            <svg className="h-5 w-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
            </svg>
          </div>
        );
      case 'assessment':
        return (
          <div className="p-2 rounded-full bg-green-100">
            <svg className="h-5 w-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
        );
      case 'document':
        return (
          <div className="p-2 rounded-full bg-purple-100">
            <svg className="h-5 w-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
            </svg>
          </div>
        );
      case 'compliance':
        return (
          <div className="p-2 rounded-full bg-red-100">
            <svg className="h-5 w-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
            </svg>
          </div>
        );
      case 'user':
        return (
          <div className="p-2 rounded-full bg-yellow-100">
            <svg className="h-5 w-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
            </svg>
          </div>
        );
      default:
        return (
          <div className="p-2 rounded-full bg-gray-100">
            <svg className="h-5 w-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
        );
    }
  };
  
  // Get icon for notification type
  const getNotificationIcon = (type: string) => {
    switch (type) {
      case 'info':
        return (
          <div className="p-2 rounded-full bg-blue-100">
            <svg className="h-5 w-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
        );
      case 'warning':
        return (
          <div className="p-2 rounded-full bg-yellow-100">
            <svg className="h-5 w-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
            </svg>
          </div>
        );
      case 'success':
        return (
          <div className="p-2 rounded-full bg-green-100">
            <svg className="h-5 w-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
        );
      case 'error':
        return (
          <div className="p-2 rounded-full bg-red-100">
            <svg className="h-5 w-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
        );
      default:
        return (
          <div className="p-2 rounded-full bg-gray-100">
            <svg className="h-5 w-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"></path>
            </svg>
          </div>
        );
    }
  };
  
  // Get status badge for trainee progress
  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'on_track':
        return (
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
            On Track
          </span>
        );
      case 'behind':
        return (
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
            Behind
          </span>
        );
      case 'ahead':
        return (
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
            Ahead
          </span>
        );
      case 'completed':
        return (
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
            Completed
          </span>
        );
      default:
        return (
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
            Unknown
          </span>
        );
    }
  };
  
  return (
    <div className="main-dashboard">
      {/* Welcome Section */}
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900">
          Welcome back, {user?.firstName}
        </h1>
        <p className="text-gray-500">
          Here's what's happening with your training programs.
        </p>
      </div>
      
      {/* Quick Actions */}
      <Card className="mb-6">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4">
          <h2 className="text-lg font-medium">Quick Actions</h2>
        </div>
        
        <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-3">
          {filteredActions.map(action => (
            <Link 
              key={action.id} 
              to={action.link} 
              className="flex flex-col items-center p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
            >
              <div className="p-2 rounded-full bg-white shadow-sm mb-2">
                {action.icon}
              </div>
              <span className="text-sm font-medium text-center">{action.title}</span>
            </Link>
          ))}
        </div>
      </Card>
      
      {/* Main Dashboard Grid */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
        {/* Recent Activity */}
        <div className="md:col-span-2">
          <Card>
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-lg font-medium">Recent Activity</h2>
            </div>
            
            {recentActivities.length > 0 ? (
              <div className="space-y-4">
                {recentActivities.slice(0, 5).map(activity => (
                  <div key={activity.id} className="flex items-start">
                    <div className="flex-shrink-0 mr-3">
                      {getActivityIcon(activity.type)}
                    </div>
                    <div className="flex-grow min-w-0">
                      <div className="flex justify-between">
                        <p className="text-sm font-medium text-gray-900 truncate">
                          {activity.action}
                        </p>
                        <p className="text-xs text-gray-500">
                          {formatTimeAgo(activity.timestamp)}
                        </p>
                      </div>
                      <p className="text-sm text-gray-500">{activity.details}</p>
                      <p className="text-xs text-gray-400 mt-1">
                        by {activity.user.name}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="py-8 text-center text-gray-500">
                No recent activity to display.
              </div>
            )}
            
            {recentActivities.length > 5 && (
              <div className="mt-4 text-center">
                <Link to="/activity" className="text-sm text-blue-600 hover:text-blue-500">
                  View all activity
                </Link>
              </div>
            )}
          </Card>
        </div>
        
        {/* Notifications */}
        <div>
          <Card>
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-lg font-medium">
                Notifications
                {unreadNotifications.length > 0 && (
                  <span className="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                    {unreadNotifications.length}
                  </span>
                )}
              </h2>
              
              {notifications.length > 0 && (
                <Button
                  variant="outline"
                  size="small"
                  onClick={onAllNotificationsRead}
                >
                  Mark All Read
                </Button>
              )}
            </div>
            
            {notifications.length > 0 ? (
              <div className="space-y-4">
                {notifications.map(notification => (
                  <div 
                    key={notification.id} 
                    className={`flex items-start p-3 rounded-lg ${!notification.isRead ? 'bg-blue-50' : ''}`}
                  >
                    <div className="flex-shrink-0 mr-3">
                      {getNotificationIcon(notification.type)}
                    </div>
                    <div className="flex-grow">
                      <div className="flex justify-between">
                        <p className="text-sm font-medium text-gray-900">
                          {notification.title}
                        </p>
                        <div className="flex">
                          {!notification.isRead && (
                            <button
                              onClick={() => onNotificationRead(notification.id)}
                              className="text-blue-600 hover:text-blue-500 mr-1"
                              title="Mark as read"
                            >
                              <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
                              </svg>
                            </button>
                          )}
                          <button
                            onClick={() => onNotificationClear(notification.id)}
                            className="text-gray-400 hover:text-gray-500"
                            title="Clear notification"
                          >
                            <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                          </button>
                        </div>
                      </div>
                      <p className="text-sm text-gray-500 mt-1">{notification.message}</p>
                      <p className="text-xs text-gray-400 mt-1">
                        {formatTimeAgo(notification.timestamp)}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="py-8 text-center text-gray-500">
                No new notifications.
              </div>
            )}
          </Card>
        </div>
      </div>
      
      {/* Main Features Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-6">
        {filteredTiles.map(tile => (
          <Link
            key={tile.id}
            to={tile.link}
            className={`group block rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow ${
              tile.highlight ? 'border-2 border-blue-500' : 'border border-gray-200'
            }`}
          >
            <div className="p-6">
              <div className="flex items-center mb-4">
                <div className="flex-shrink-0">
                  {tile.icon}
                </div>
                <h3 className="ml-3 text-lg font-medium text-gray-900 group-hover:text-blue-600 transition-colors">
                  {tile.title}
                </h3>
              </div>
              <p className="text-gray-500">{tile.description}</p>
            </div>
          </Link>
        ))}
      </div>
      
      {/* Trainee Dashboard Specific Sections */}
      {user?.role === 'trainee' && traineeProgress && (
        <div className="mb-6">
          <Card>
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-lg font-medium">Your Training Progress</h2>
              <Link to="/training/progress" className="text-sm text-blue-600 hover:text-blue-500">
                View Details
              </Link>
            </div>
            
            <div className="space-y-4">
              {traineeProgress.map((program, index) => (
                <div key={index} className="p-4 bg-gray-50 rounded-lg">
                  <div className="flex justify-between items-center mb-2">
                    <div>
                      <h3 className="font-medium">{program.programName}</h3>
                      <p className="text-sm text-gray-500">
                        Last activity: {formatTimeAgo(program.lastActivity)}
                      </p>
                    </div>
                    {getStatusBadge(program.status)}
                  </div>
                  
                  <div className="w-full bg-gray-200 rounded-full h-2.5 mb-2">
                    <div
                      className={`h-2.5 rounded-full ${
                        program.status === 'behind' ? 'bg-red-600' :
                        program.status === 'ahead' ? 'bg-blue-600' :
                        program.status === 'completed' ? 'bg-purple-600' :
                        'bg-green-600'
                      }`}
                      style={{ width: `${program.progress}%` }}
                    ></div>
                  </div>
                  
                  <div className="flex justify-between text-xs text-gray-500">
                    <span>0%</span>
                    <span>{program.progress}% complete</span>
                    <span>100%</span>
                  </div>
                </div>
              ))}
            </div>
          </Card>
        </div>
      )}
      
      {/* Instructor Dashboard Specific Sections */}
      {user?.role === 'instructor' && upcomingTraining && (
        <div className="mb-6">
          <Card>
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-lg font-medium">Upcoming Training Sessions</h2>
              <Link to="/instructor/schedule" className="text-sm text-blue-600 hover:text-blue-500">
                View Schedule
              </Link>
            </div>
            
            <div className="space-y-4">
              {upcomingTraining.map(training => (
                <div key={training.id} className="p-4 bg-gray-50 rounded-lg">
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="font-medium">{training.title}</h3>
                      <p className="text-sm text-gray-500">{training.description}</p>
                      <div className="mt-2 flex flex-wrap gap-2">
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                          {new Date(training.startDate).toLocaleDateString()} - {new Date(training.endDate).toLocaleDateString()}
                        </span>
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                          {training.trainees} Trainees
                        </span>
                        {training.location && (
                          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                            {training.location}
                          </span>
                        )}
                      </div>
                    </div>
                    <Link
                      to={`/instructor/training/${training.id}`}
                      className="px-3 py-1 bg-white border border-gray-300 rounded-md text-sm text-gray-700 hover:bg-gray-50"
                    >
                      Details
                    </Link>
                  </div>
                </div>
              ))}
            </div>
          </Card>
        </div>
      )}
    </div>
  );
};

// app/layout.tsx
'use client';

import React, { ReactNode, useState } from 'react';
import { 
  AppBar, 
  Box, 
  CssBaseline, 
  Divider, 
  Drawer, 
  IconButton, 
  List, 
  ListItem, 
  ListItemButton, 
  ListItemIcon, 
  ListItemText, 
  Toolbar, 
  Typography, 
  Avatar, 
  Badge, 
  Menu, 
  MenuItem, 
  Tooltip 
} from '@mui/material';
import {
  Menu as MenuIcon,
  Dashboard,
  Description,
  School,
  Analytics,
  Assessment,
  Group,
  EmojiEvents,
  Settings,
  Notifications,
  AccountCircle,
  Logout,
  Help,
  ChevronLeft,
  FlightTakeoff,
} from '@mui/icons-material';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { ThemeProvider, createTheme } from '@mui/material/styles';
import './globals.css';

const drawerWidth = 260;

interface RootLayoutProps {
  children: ReactNode;
}

const navItems = [
  { text: 'Dashboard', icon: <Dashboard />, path: '/dashboard' },
  { text: 'Document Intelligence', icon: <Description />, path: '/document-intelligence' },
  { text: 'Syllabus Builder', icon: <School />, path: '/syllabus-builder' },
  { text: 'Analytics', icon: <Analytics />, path: '/analytics' },
  { text: 'Debriefing', icon: <Assessment />, path: '/debriefing' },
  { text: 'Community', icon: <Group />, path: '/community' },
  { text: 'Gamification', icon: <EmojiEvents />, path: '/gamification' },
];

// Create a custom theme
const theme = createTheme({
  palette: {
    primary: {
      main: '#1e40af', // Blue-800
    },
    secondary: {
      main: '#6366f1', // Indigo-500
    },
    error: {
      main: '#ef4444', // Red-500
    },
    warning: {
      main: '#f59e0b', // Amber-500
    },
    info: {
      main: '#3b82f6', // Blue-500
    },
    success: {
      main: '#22c55e', // Green-500
    },
  },
  typography: {
    fontFamily: 'Inter, system-ui, Avenir, Helvetica, Arial, sans-serif',
    h1: {
      fontWeight: 700,
    },
    h2: {
      fontWeight: 700,
    },
    h3: {
      fontWeight: 600,
    },
    h4: {
      fontWeight: 600,
    },
    h5: {
      fontWeight: 600,
    },
    h6: {
      fontWeight: 600,
    },
  },
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          borderRadius: 8,
          textTransform: 'none',
          fontWeight: 500,
        },
      },
    },
    MuiPaper: {
      styleOverrides: {
        rounded: {
          borderRadius: 12,
        },
      },
    },
    MuiCard: {
      styleOverrides: {
        root: {
          borderRadius: 12,
        },
      },
    },
    MuiChip: {
      styleOverrides: {
        root: {
          fontWeight: 500,
        },
      },
    },
    MuiDivider: {
      styleOverrides: {
        root: {
          borderColor: 'rgba(0, 0, 0, 0.08)',
        },
      },
    },
  },
});

export default function RootLayout({ children }: RootLayoutProps) {
  const [drawerOpen, setDrawerOpen] = useState(false);
  const [accountMenuAnchorEl, setAccountMenuAnchorEl] = useState<null | HTMLElement>(null);
  const [notificationsMenuAnchorEl, setNotificationsMenuAnchorEl] = useState<null | HTMLElement>(null);

  const pathname = usePathname();

  const handleDrawerToggle = () => {
    setDrawerOpen(!drawerOpen);
  };

  const handleAccountMenuOpen = (event: React.MouseEvent<HTMLElement>) => {
    setAccountMenuAnchorEl(event.currentTarget);
  };

  const handleAccountMenuClose = () => {
    setAccountMenuAnchorEl(null);
  };

  const handleNotificationsMenuOpen = (event: React.MouseEvent<HTMLElement>) => {
    setNotificationsMenuAnchorEl(event.currentTarget);
  };

  const handleNotificationsMenuClose = () => {
    setNotificationsMenuAnchorEl(null);
  };

  const drawer = (
    <Box sx={{ display: 'flex', flexDirection: 'column', height: '100%' }}>
      <Box sx={{ p: 2, display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          <FlightTakeoff sx={{ mr: 1, color: 'primary.main' }} />
          <Typography variant="h6" color="primary" className="font-bold">
            Pilot Training
          </Typography>
        </Box>
        <IconButton onClick={handleDrawerToggle}>
          <ChevronLeft />
        </IconButton>
      </Box>
      <Divider />
      <List sx={{ flexGrow: 1 }}>
        {navItems.map((item) => (
          <ListItem key={item.text} disablePadding>
            <ListItemButton 
              component={Link} 
              href={item.path}
              selected={pathname === item.path}
              sx={{ 
                borderRadius: 2, 
                mx: 1, 
                my: 0.5,
                '&.Mui-selected': {
                  bgcolor: 'primary.main',
                  color: 'white',
                  '&:hover': {
                    bgcolor: 'primary.dark',
                  },
                  '& .MuiListItemIcon-root': {
                    color: 'white',
                  },
                },
              }}
            >
              <ListItemIcon sx={{ minWidth: 40 }}>
                {item.icon}
              </ListItemIcon>
              <ListItemText primary={item.text} />
            </ListItemButton>
          </ListItem>
        ))}
      </List>
      <Divider />
      <List>
        <ListItem disablePadding>
          <ListItemButton 
            component={Link} 
            href="/settings"
            selected={pathname === '/settings'}
            sx={{ 
              borderRadius: 2, 
              mx: 1, 
              my: 0.5,
              '&.Mui-selected': {
                bgcolor: 'primary.main',
                color: 'white',
                '&:hover': {
                  bgcolor: 'primary.dark',
                },
                '& .MuiListItemIcon-root': {
                  color: 'white',
                },
              },
            }}
          >
            <ListItemIcon sx={{ minWidth: 40 }}>
              <Settings />
            </ListItemIcon>
            <ListItemText primary="Settings" />
          </ListItemButton>
        </ListItem>
        <ListItem disablePadding>
          <ListItemButton 
            component={Link} 
            href="/help"
            selected={pathname === '/help'}
            sx={{ 
              borderRadius: 2, 
              mx: 1, 
              my: 0.5,
              '&.Mui-selected': {
                bgcolor: 'primary.main',
                color: 'white',
                '&:hover': {
                  bgcolor: 'primary.dark',
                },
                '& .MuiListItemIcon-root': {
                  color: 'white',
                },
              },
            }}
          >
            <ListItemIcon sx={{ minWidth: 40 }}>
              <Help />
            </ListItemIcon>
            <ListItemText primary="Help & Support" />
          </ListItemButton>
        </ListItem>
      </List>
      <Box sx={{ p: 2, display: 'flex', alignItems: 'center', backgroundColor: 'rgba(0,0,0,0.02)' }}>
        <Avatar sx={{ mr: 2 }}>JD</Avatar>
        <Box>
          <Typography variant="subtitle2">John Doe</Typography>
          <Typography variant="body2" color="text.secondary">
            Instructor
          </Typography>
        </Box>
      </Box>
    </Box>
  );

  const notifications = [
    {
      id: 'notif-1',
      title: 'New assessment completed',
      message: 'Sarah Johnson has completed Boeing 737 Type Rating assessment',
      time: '10 minutes ago',
      read: false,
    },
    {
      id: 'notif-2',
      title: 'Syllabus updated',
      message: 'A320 Type Rating syllabus has been updated with new modules',
      time: '1 hour ago',
      read: false,
    },
    {
      id: 'notif-3',
      title: 'New forum post',
      message: 'Robert Chen posted a question about crosswind landing techniques',
      time: '3 hours ago',
      read: true,
    },
  ];

  return (
    <html lang="en">
      <body className="bg-gray-50">
        <ThemeProvider theme={theme}>
          <Box sx={{ display: 'flex' }}>
            <CssBaseline />
            
            {/* App Bar */}
            <AppBar 
              position="fixed" 
              sx={{ 
                zIndex: (theme) => theme.zIndex.drawer + 1,
                boxShadow: 'rgba(0, 0, 0, 0.05) 0px 1px 2px 0px',
              }}
            >
              <Toolbar>
                <IconButton
                  color="inherit"
                  aria-label="open drawer"
                  edge="start"
                  onClick={handleDrawerToggle}
                  sx={{ mr: 2 }}
                >
                  <MenuIcon />
                </IconButton>
                <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
                  Advanced Pilot Training Platform
                </Typography>
                
                <Box sx={{ display: 'flex' }}>
                  <Tooltip title="Notifications">
                    <IconButton 
                      color="inherit"
                      onClick={handleNotificationsMenuOpen}
                    >
                      <Badge badgeContent={2} color="error">
                        <Notifications />
                      </Badge>
                    </IconButton>
                  </Tooltip>
                  
                  <Tooltip title="Account">
                    <IconButton
                      color="inherit"
                      onClick={handleAccountMenuOpen}
                      sx={{ ml: 1 }}
                    >
                      <AccountCircle />
                    </IconButton>
                  </Tooltip>
                </Box>
              </Toolbar>
            </AppBar>
            
            {/* Navigation Drawer */}
            <Drawer
              variant="temporary"
              open={drawerOpen}
              onClose={handleDrawerToggle}
              ModalProps={{
                keepMounted: true, // Better open performance on mobile
              }}
              sx={{
                display: { xs: 'block' },
                '& .MuiDrawer-paper': { 
                  boxSizing: 'border-box', 
                  width: drawerWidth,
                  borderRight: 'none',
                  boxShadow: 'rgba(0, 0, 0, 0.05) 0px 1px 2px 0px, rgba(0, 0, 0, 0.05) 0px 0px 0px 1px',
                },
              }}
            >
              {drawer}
            </Drawer>
            
            {/* Main Content */}
            <Box
              component="main"
              sx={{
                flexGrow: 1,
                minHeight: '100vh',
                pt: { xs: 8 }, // Padding top to account for AppBar height
                width: '100%'
              }}
            >
              {children}
            </Box>
            
            {/* Account Menu */}
            <Menu
              anchorEl={accountMenuAnchorEl}
              open={Boolean(accountMenuAnchorEl)}
              onClose={handleAccountMenuClose}
              PaperProps={{
                elevation: 2,
                sx: { minWidth: 200 }
              }}
            >
              <MenuItem onClick={handleAccountMenuClose}>
                <ListItemIcon>
                  <AccountCircle fontSize="small" />
                </ListItemIcon>
                <ListItemText>Profile</ListItemText>
              </MenuItem>
              <MenuItem onClick={handleAccountMenuClose}>
                <ListItemIcon>
                  <Settings fontSize="small" />
                </ListItemIcon>
                <ListItemText>Settings</ListItemText>
              </MenuItem>
              <Divider />
              <MenuItem onClick={handleAccountMenuClose}>
                <ListItemIcon>
                  <Logout fontSize="small" />
                </ListItemIcon>
                <ListItemText>Logout</ListItemText>
              </MenuItem>
            </Menu>
            
            {/* Notifications Menu */}
            <Menu
              anchorEl={notificationsMenuAnchorEl}
              open={Boolean(notificationsMenuAnchorEl)}
              onClose={handleNotificationsMenuClose}
              PaperProps={{
                elevation: 2,
                sx: { minWidth: 320, maxWidth: 360 }
              }}
            >
              <Box sx={{ p: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Typography variant="subtitle1" fontWeight="medium">Notifications</Typography>
                <Typography variant="caption" color="primary">Mark all as read</Typography>
              </Box>
              <Divider />
              
              {notifications.map((notification) => (
                <MenuItem 
                  key={notification.id} 
                  onClick={handleNotificationsMenuClose}
                  sx={{ 
                    py: 1.5, 
                    px: 2,
                    backgroundColor: notification.read ? 'transparent' : 'rgba(25, 118, 210, 0.08)',
                  }}
                >
                  <Box>
                    <Typography variant="subtitle2" className="font-medium">
                      {notification.title}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      {notification.message}
                    </Typography>
                    <Typography variant="caption" color="text.secondary">
                      {notification.time}
                    </Typography>
                  </Box>
                </MenuItem>
              ))}
              
              <Divider />
              <Box sx={{ p: 1.5, textAlign: 'center' }}>
                <Typography 
                  variant="body2" 
                  color="primary"
                  sx={{ cursor: 'pointer' }}
                  onClick={handleNotificationsMenuClose}
                >
                  View all notifications
                </Typography>
              </Box>
            </Menu>
          </Box>
        </ThemeProvider>
      </body>
    </html>
  );
}

// app/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Import Inter font */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap');

/* Base styles */
:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 248, 250, 252;
  --background-end-rgb: 248, 250, 252;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}

/* Utility classes */
.line-clamp-1 {
  display: -webkit-box;
  -webkit-line-clamp: 1;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.line-clamp-3 {
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

/* Dashboard page */
// app/dashboard/page.tsx
'use client';

import React from 'react';
import { 
  Container, 
  Box, 
  Typography, 
  Grid, 
  Paper, 
  Card, 
  CardContent, 
  Button, 
  Divider, 
  Avatar, 
  LinearProgress,
  List,
  ListItem,
  ListItemAvatar,
  ListItemText,
  IconButton
} from '@mui/material';
import {
  FlightTakeoff,
  School,
  Assessment,
  Group,
  Description,
  AutoAwesome,
  Star,
  ChevronRight,
  NotificationsActive,
  CheckCircle,
  AccessTime,
  DirectionsRun,
  Visibility
} from '@mui/icons-material';

export default function DashboardPage() {
  return (
    <Container maxWidth="xl">
      <Box className="py-6">
        <Typography variant="h4" className="mb-6">Dashboard</Typography>
        
        <Grid container spacing={4}>
          {/* Quick Actions */}
          <Grid item xs={12} md={8}>
            <Paper elevation={1} className="p-6">
              <Typography variant="h6" className="mb-4">Quick Actions</Typography>
              <Grid container spacing={3}>
                <Grid item xs={6} sm={3}>
                  <Card 
                    elevation={0} 
                    className="text-center p-3 border border-gray-200 hover:border-blue-300 hover:bg-blue-50 transition-colors cursor-pointer"
                  >
                    <Box className="flex justify-center">
                      <Avatar sx={{ bgcolor: 'primary.main', width: 56, height: 56 }}>
                        <Description />
                      </Avatar>
                    </Box>
                    <Typography variant="subtitle2" className="mt-2">
                      Upload Documents
                    </Typography>
                  </Card>
                </Grid>
                
                <Grid item xs={6} sm={3}>
                  <Card 
                    elevation={0} 
                    className="text-center p-3 border border-gray-200 hover:border-blue-300 hover:bg-blue-50 transition-colors cursor-pointer"
                  >
                    <Box className="flex justify-center">
                      <Avatar sx={{ bgcolor: 'primary.main', width: 56, height: 56 }}>
                        <School />
                      </Avatar>
                    </Box>
                    <Typography variant="subtitle2" className="mt-2">
                      Create Syllabus
                    </Typography>
                  </Card>
                </Grid>
                
                <Grid item xs={6} sm={3}>
                  <Card 
                    elevation={0} 
                    className="text-center p-3 border border-gray-200 hover:border-blue-300 hover:bg-blue-50 transition-colors cursor-pointer"
                  >
                    <Box className="flex justify-center">
                      <Avatar sx={{ bgcolor: 'primary.main', width: 56, height: 56 }}>
                        <Assessment />
                      </Avatar>
                    </Box>
                    <Typography variant="subtitle2" className="mt-2">
                      Review Session
                    </Typography>
                  </Card>
                </Grid>
                
                <Grid item xs={6} sm={3}>
                  <Card 
                    elevation={0} 
                    className="text-center p-3 border border-gray-200 hover:border-blue-300 hover:bg-blue-50 transition-colors cursor-pointer"
                  >
                    <Box className="flex justify-center">
                      <Avatar sx={{ bgcolor: 'primary.main', width: 56, height: 56 }}>
                        <Group />
                      </Avatar>
                    </Box>
                    <Typography variant="subtitle2" className="mt-2">
                      Browse Community
                    </Typography>
                  </Card>
                </Grid>
              </Grid>
            </Paper>
            
            {/* Recent Activities */}
            <Paper elevation={1} className="p-6 mt-6">
              <Typography variant="h6" className="mb-4">Recent Activities</Typography>
              
              <List>
                <ListItem 
                  secondaryAction={
                    <Typography variant="caption" color="textSecondary">
                      10 minutes ago
                    </Typography>
                  }
                >
                  <ListItemAvatar>
                    <Avatar sx={{ bgcolor: 'success.light' }}>
                      <CheckCircle />
                    </Avatar>
                  </ListItemAvatar>
                  <ListItemText
                    primary="Boeing 737 Type Rating: Session 5 completed"
                    secondary="Engine failure after takeoff scenario - Excellent rating"
                  />
                </ListItem>
                
                <Divider variant="inset" component="li" />
                
                <ListItem 
                  secondaryAction={
                    <Typography variant="caption" color="textSecondary">
                      2 hours ago
                    </Typography>
                  }
                >
                  <ListItemAvatar>
                    <Avatar sx={{ bgcolor: 'primary.light' }}>
                      <School />
                    </Avatar>
                  </ListItemAvatar>
                  <ListItemText
                    primary="Created A320 Type Rating Syllabus"
                    secondary="Generated from Airbus documentation with 12 modules"
                  />
                </ListItem>
                
                <Divider variant="inset" component="li" />
                
                <ListItem 
                  secondaryAction={
                    <Typography variant="caption" color="textSecondary">
                      Yesterday, 4:30 PM
                    </Typography>
                  }
                >
                  <ListItemAvatar>
                    <Avatar sx={{ bgcolor: 'info.light' }}>
                      <Description />
                    </Avatar>
                  </ListItemAvatar>
                  <ListItemText
                    primary="Uploaded EASA FCL Training Requirements"
                    secondary="6 documents processed with 94% compliance mapping"
                  />
                </ListItem>
                
                <Divider variant="inset" component="li" />
                
                <ListItem 
                  secondaryAction={
                    <Typography variant="caption" color="textSecondary">
                      Yesterday, 2:15 PM
                    </Typography>
                  }
                >
                  <ListItemAvatar>
                    <Avatar sx={{ bgcolor: 'warning.light' }}>
                      <Assessment />
                    </Avatar>
                  </ListItemAvatar>
                  <ListItemText
                    primary="Reviewed B777 Approach Procedure Training Session"
                    secondary="Added 5 annotations and completed student assessment"
                  />
                </ListItem>
              </List>
              
              <Box className="flex justify-center mt-3">
                <Button endIcon={<ChevronRight />}>
                  View All Activities
                </Button>
              </Box>
            </Paper>
          </Grid>
          
          {/* Training Progress and Notifications */}
          <Grid item xs={12} md={4}>
            <Paper elevation={1} className="p-6">
              <Box className="flex justify-between items-center mb-4">
                <Typography variant="h6">My Training Progress</Typography>
                <Button size="small">View Details</Button>
              </Box>
              
              <Box className="mb-6">
                <Box className="flex justify-between mb-1">
                  <Typography variant="body2">B737 Type Rating</Typography>
                  <Typography variant="body2" color="primary">75%</Typography>
                </Box>
                <LinearProgress variant="determinate" value={75} className="mb-3" />
                
                <Box className="flex justify-between mb-1">
                  <Typography variant="body2">IFR Recurrent Training</Typography>
                  <Typography variant="body2" color="primary">40%</Typography>
                </Box>
                <LinearProgress variant="determinate" value={40} className="mb-3" />
                
                <Box className="flex justify-between mb-1">
                  <Typography variant="body2">CRM Certification</Typography>
                  <Typography variant="body2" color="primary">90%</Typography>
                </Box>
                <LinearProgress variant="determinate" value={90} />
              </Box>
              
              <Divider className="my-4" />
              
              <Box className="mb-4">
                <Box className="flex items-center mb-2">
                  <AccessTime color="primary" className="mr-2" fontSize="small" />
                  <Typography variant="subtitle2">Upcoming Sessions</Typography>
                </Box>
                
                <Card variant="outlined" className="mb-3">
                  <CardContent className="p-3">
                    <Box className="flex items-center mb-1">
                      <Avatar sx={{ width: 24, height: 24, bgcolor: 'primary.main', fontSize: '0.8rem', mr: 1 }}>
                        S5
                      </Avatar>
                      <Typography variant="subtitle2">B737 Type Rating: Session 6</Typography>
                    </Box>
                    <Typography variant="body2" color="textSecondary" className="mb-1">
                      Approach and Landing Procedures
                    </Typography>
                    <Box className="flex items-center">
                      <Typography variant="caption" className="text-gray-500">
                        Tomorrow, 9:00 AM - 11:30 AM
                      </Typography>
                      <Divider orientation="vertical" flexItem sx={{ mx: 1 }} />
                      <Typography variant="caption" className="text-gray-500">
                        Sim #3
                      </Typography>
                    </Box>
                  </CardContent>
                </Card>
                
                <Card variant="outlined">
                  <CardContent className="p-3">
                    <Box className="flex items-center mb-1">
                      <Avatar sx={{ width: 24, height: 24, bgcolor: 'primary.main', fontSize: '0.8rem', mr: 1 }}>
                        C2
                      </Avatar>
                      <Typography variant="subtitle2">CRM Certification: Module 2</Typography>
                    </Box>
                    <Typography variant="body2" color="textSecondary" className="mb-1">
                      Decision Making & Workload Management
                    </Typography>
                    <Box className="flex items-center">
                      <Typography variant="caption" className="text-gray-500">
                        Friday, 2:00 PM - 4:00 PM
                      </Typography>
                      <Divider orientation="vertical" flexItem sx={{ mx: 1 }} />
                      <Typography variant="caption" className="text-gray-500">
                        Room 8B
                      </Typography>
                    </Box>
                  </CardContent>
                </Card>
              </Box>
              
              <Divider className="my-4" />
              
              <Box>
                <Box className="flex items-center mb-3">
                  <NotificationsActive color="error" className="mr-2" fontSize="small" />
                  <Typography variant="subtitle2">Important Notifications</Typography>
                </Box>
                
                <Card variant="outlined" className="bg-red-50 border-red-200 mb-3">
                  <CardContent className="p-3">
                    <Typography variant="subtitle2" className="text-red-700">
                      Annual Medical Certification
                    </Typography>
                    <Typography variant="body2" className="text-red-600">
                      Your medical certificate expires in 14 days. Schedule renewal as soon as possible.
                    </Typography>
                  </CardContent>
                </Card>
                
                <Card variant="outlined" className="bg-amber-50 border-amber-200">
                  <CardContent className="p-3">
                    <Typography variant="subtitle2" className="text-amber-700">
                      New EASA Regulation Updates
                    </Typography>
                    <Typography variant="body2" className="text-amber-600">
                      EASA has released important updates to FCL.725.A. Review changes before next session.
                    </Typography>
                  </CardContent>
                </Card>
              </Box>
            </Paper>
            
            <Paper elevation={1} className="p-6 mt-6">
              <Box className="flex items-center mb-4">
                <DirectionsRun color="primary" className="mr-2" />
                <Typography variant="h6">Daily Challenges</Typography>
              </Box>
              
              <Card variant="outlined" className="mb-3">
                <CardContent className="p-3">
                  <Box className="flex justify-between items-start">
                    <Box>
                      <Typography variant="subtitle2">Perfect Approaches</Typography>
                      <Typography variant="body2" color="textSecondary" className="mb-2">
                        Complete 3 stabilized approaches with excellent rating
                      </Typography>
                      <Box className="flex items-center">
                        <LinearProgress 
                          variant="determinate" 
                          value={66} 
                          sx={{ width: 100, mr: 2 }} 
                        />
                        <Typography variant="caption">2/3 completed</Typography>
                      </Box>
                    </Box>
                    <Avatar sx={{ bgcolor: 'amber.500' }}>
                      <Star />
                    </Avatar>
                  </Box>
                </CardContent>
              </Card>
              
              <Card variant="outlined">
                <CardContent className="p-3">
                  <Box className="flex justify-between items-start">
                    <Box>
                      <Typography variant="subtitle2">CRM Communication Master</Typography>
                      <Typography variant="body2" color="textSecondary" className="mb-2">
                        Practice closed-loop communication techniques
                      </Typography>
                      <Typography variant="caption" color="primary">
                        +350 XP reward
                      </Typography>
                    </Box>
                    <Avatar sx={{ bgcolor: 'primary.main' }}>
                      <AutoAwesome />
                    </Avatar>
                  </Box>
                </CardContent>
              </Card>
              
              <Button 
                fullWidth 
                color="primary" 
                variant="contained" 
                className="mt-4"
                endIcon={<Visibility />}
              >
                View All Challenges
              </Button>
            </Paper>
          </Grid>
        </Grid>
      </Box>
    </Container>
  );
}

// src/frontend/services/mockAuth.ts
import { User, UserRole, Permission } from '../components/auth/UserAuth';

// Mock users for development
const mockUsers: User[] = [
  {
    id: 'user-1',
    username: 'admin',
    email: 'admin@example.com',
    firstName: 'Admin',
    lastName: 'User',
    role: UserRole.ADMIN,
    permissions: [
      Permission.VIEW_DASHBOARD,
      Permission.EDIT_SYLLABUS,
      Permission.APPROVE_SYLLABUS,
      Permission.CREATE_ASSESSMENT,
      Permission.GRADE_ASSESSMENT,
      Permission.MANAGE_USERS,
      Permission.VIEW_ANALYTICS,
      Permission.EXPORT_REPORTS,
      Permission.CHECK_COMPLIANCE,
      Permission.UPLOAD_DOCUMENTS
    ],
    lastLogin: new Date(),
    photoUrl: '',
    organization: 'Training Academy',
    department: 'Administration'
  },
  {
    id: 'user-2',
    username: 'instructor',
    email: 'instructor@example.com',
    firstName: 'John',
    lastName: 'Instructor',
    role: UserRole.INSTRUCTOR,
    permissions: [
      Permission.VIEW_DASHBOARD,
      Permission.EDIT_SYLLABUS,
      Permission.CREATE_ASSESSMENT,
      Permission.GRADE_ASSESSMENT,
      Permission.VIEW_ANALYTICS
    ],
    lastLogin: new Date(),
    photoUrl: '',
    organization: 'Training Academy',
    department: 'Flight Instruction'
  },
  {
    id: 'user-3',
    username: 'trainee',
    email: 'trainee@example.com',
    firstName: 'Sarah',
    lastName: 'Trainee',
    role: UserRole.TRAINEE,
    permissions: [
      Permission.VIEW_DASHBOARD
    ],
    lastLogin: new Date(),
    photoUrl: '',
    organization: 'Training Academy',
    department: 'Student Pilots'
  },
  {
    id: 'user-4',
    username: 'compliance',
    email: 'compliance@example.com',
    firstName: 'Robert',
    lastName: 'Officer',
    role: UserRole.COMPLIANCE_OFFICER,
    permissions: [
      Permission.VIEW_DASHBOARD,
      Permission.CHECK_COMPLIANCE,
      Permission.VIEW_ANALYTICS,
      Permission.EXPORT_REPORTS
    ],
    lastLogin: new Date(),
    photoUrl: '',
    organization: 'Training Academy',
    department: 'Compliance'
  },
  {
    id: 'user-5',
    username: 'content',
    email: 'content@example.com',
    firstName: 'Maria',
    lastName: 'Manager',
    role: UserRole.CONTENT_MANAGER,
    permissions: [
      Permission.VIEW_DASHBOARD,
      Permission.EDIT_SYLLABUS,
      Permission.UPLOAD_DOCUMENTS
    ],
    lastLogin: new Date(),
    photoUrl: '',
    organization: 'Training Academy',
    department: 'Content Development'
  }
];

// Mock Auth Service
export const mockAuthService = {
  // Login function
  login: async (username: string, password: string): Promise<User> => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Find user
    const user = mockUsers.find(user => user.username === username);
    
    if (!user) {
      throw new Error('Invalid username or password.');
    }
    
    // In a real app, you would check the password here
    // For the mock, we'll just pretend all passwords are 'password'
    if (password !== 'password') {
      throw new Error('Invalid username or password.');
    }
    
    // Update last login
    user.lastLogin = new Date();
    
    // Store in localStorage for persistence (only in development)
    localStorage.setItem('currentUser', JSON.stringify(user));
    
    return user;
  },
  
  // Logout function
  logout: async (): Promise<void> => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 300));
    
    // Remove from localStorage
    localStorage.removeItem('currentUser');
  },
  
  // Get current user
  getCurrentUser: async (): Promise<User | null> => {
    // Check localStorage
    const userJson = localStorage.getItem('currentUser');
    
    if (!userJson) {
      return null;
    }
    
    try {
      const user = JSON.parse(userJson) as User;
      
      // Convert date strings back to Date objects
      if (user.lastLogin) {
        user.lastLogin = new Date(user.lastLogin);
      }
      
      return user;
    } catch (error) {
      console.error('Error parsing user from localStorage:', error);
      return null;
    }
  },
  
  // Update profile
  updateProfile: async (userId: string, updates: Partial<User>): Promise<User> => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 700));
    
    // Find user
    const userIndex = mockUsers.findIndex(user => user.id === userId);
    
    if (userIndex === -1) {
      throw new Error('User not found.');
    }
    
    // Update user
    const updatedUser = {
      ...mockUsers[userIndex],
      ...updates
    };
    
    mockUsers[userIndex] = updatedUser;
    
    // Update in localStorage if it's the current user
    const currentUserJson = localStorage.getItem('currentUser');
    if (currentUserJson) {
      const currentUser = JSON.parse(currentUserJson) as User;
      
      if (currentUser.id === userId) {
        localStorage.setItem('currentUser', JSON.stringify(updatedUser));
      }
    }
    
    return updatedUser;
  },
  
  // Change password (mock implementation)
  changePassword: async (userId: string, currentPassword: string, newPassword: string): Promise<void> => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 800));
    
    // In a real app, you would verify the current password and update the password
    // For the mock, we'll just check if the current password is 'password'
    if (currentPassword !== 'password') {
      throw new Error('Current password is incorrect.');
    }
    
    // Password updated successfully (in a real app)
    console.log(`Password updated for user ${userId}`);
  },
  
  // Forgot password
  forgotPassword: async (email: string): Promise<void> => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 600));
    
    // Find user by email
    const user = mockUsers.find(user => user.email === email);
    
    if (!user) {
      // We don't want to reveal whether an email exists in the system
      // So we'll just return success regardless
      return;
    }
    
    // In a real app, you would send a password reset email
    console.log(`Password reset link sent to ${email}`);
  },
  
  // Upload profile photo (mock implementation)
  uploadProfilePhoto: async (userId: string, file: File): Promise<string> => {
    // Simulate API delay and upload
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // In a real app, you would upload the file to a server or cloud storage
    // For the mock, we'll just return a fake URL
    const photoUrl = `https://example.com/photos/${userId}/profile.jpg`;
    
    // Update user
    const userIndex = mockUsers.findIndex(user => user.id === userId);
    
    if (userIndex !== -1) {
      mockUsers[userIndex].photoUrl = photoUrl;
      
      // Update in localStorage if it's the current user
      const currentUserJson = localStorage.getItem('currentUser');
      if (currentUserJson) {
        const currentUser = JSON.parse(currentUserJson) as User;
        
        if (currentUser.id === userId) {
          currentUser.photoUrl = photoUrl;
          localStorage.setItem('currentUser', JSON.stringify(currentUser));
        }
      }
    }
    
    return photoUrl;
  }
};

// src/frontend/services/mockNotifications.ts
import { Notification, NotificationType } from '../components/notifications/NotificationSystem';

// Example notifications for development
const createMockNotifications = (): Notification[] => {
  const now = new Date();
  
  return [
    {
      id: 'notification-1',
      title: 'New Assessment Assigned',
      message: 'You have been assigned a new flight assessment for tomorrow at 10:00 AM.',
      type: NotificationType.INFO,
      createdAt: new Date(now.getTime() - 30 * 60 * 1000), // 30 minutes ago
      link: '/assessment/123',
      category: 'Assessment',
      source: 'System',
      isExpanded: false
    },
    {
      id: 'notification-2',
      title: 'Document Processing Complete',
      message: 'Your flight manual document has been processed successfully. View it in the documents section.',
      type: NotificationType.SUCCESS,
      createdAt: new Date(now.getTime() - 2 * 60 * 60 * 1000), // 2 hours ago
      readAt: new Date(now.getTime() - 1 * 60 * 60 * 1000), // 1 hour ago
      link: '/documents/456',
      category: 'Documents',
      source: 'System',
      isExpanded: false
    },
    {
      id: 'notification-3',
      title: 'Compliance Issue Detected',
      message: 'A compliance issue has been detected in the Advanced Navigation training module. Please review and address this issue as soon as possible.',
      type: NotificationType.WARNING,
      createdAt: new Date(now.getTime() - 1 * 24 * 60 * 60 * 1000), // 1 day ago
      link: '/compliance/789',
      category: 'Compliance',
      source: 'Compliance Engine',
      isExpanded: false
    },
    {
      id: 'notification-4',
      title: 'System Maintenance',
      message: 'The system will be down for maintenance on Saturday, March 20, 2025 from 2:00 AM to 4:00 AM UTC. Please plan accordingly.',
      type: NotificationType.INFO,
      createdAt: new Date(now.getTime() - 2 * 24 * 60 * 60 * 1000), // 2 days ago
      readAt: new Date(now.getTime() - 1.5 * 24 * 60 * 60 * 1000), // 1.5 days ago
      category: 'System',
      source: 'Admin',
      isExpanded: false
    },
    {
      id: 'notification-5',
      title: 'Simulator Connection Failed',
      message: 'The connection to the flight simulator failed. Please check your network connection and try again.',
      type: NotificationType.ERROR,
      createdAt: new Date(now.getTime() - 3 * 24 * 60 * 60 * 1000), // 3 days ago
      link: '/simulator',
      category: 'Simulator',
      source: 'System',
      isExpanded: false
    }
  ];
};

// Mock notifications array with initial data
let mockNotificationsList = createMockNotifications();

// Mock notification callbacks
type NotificationCallback = (notification: Notification) => void;
const notificationCallbacks: NotificationCallback[] = [];

// Mock new notifications every minute (for development)
setInterval(() => {
  if (notificationCallbacks.length > 0) {
    const types = [NotificationType.INFO, NotificationType.SUCCESS, NotificationType.WARNING, NotificationType.ERROR];
    const randomType = types[Math.floor(Math.random() * types.length)];
    
    const newNotification: Notification = {
      id: `notification-${Date.now()}`,
      title: `New ${randomType} Notification`,
      message: `This is a random ${randomType} notification generated for development purposes.`,
      type: randomType,
      createdAt: new Date(),
      category: 'System',
      source: 'Development',
      isExpanded: false
    };
    
    mockNotificationsList.unshift(newNotification);
    
    // Call all callbacks
    notificationCallbacks.forEach(callback => callback(newNotification));
  }
}, 60000); // Every minute

// Mock Notification Service
export const mockNotificationService = {
  // Get notifications
  getNotifications: async (): Promise<Notification[]> => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 500));
    
    return mockNotificationsList;
  },
  
  // Mark as read
  markAsRead: async (id: string): Promise<void> => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 300));
    
    // Update notification
    mockNotificationsList = mockNotificationsList.map(notification => {
      if (notification.id === id && !notification.readAt) {
        return {
          ...notification,
          readAt: new Date()
        };
      }
      return notification;
    });
  },
  
  // Mark all as read
  markAllAsRead: async (): Promise<void> => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Update all unread notifications
    mockNotificationsList = mockNotificationsList.map(notification => {
      if (!notification.readAt) {
        return {
          ...notification,
          readAt: new Date()
        };
      }
      return notification;
    });
  },
  
  // Delete notification
  deleteNotification: async (id: string): Promise<void> => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 300));
    
    // Remove notification
    mockNotificationsList = mockNotificationsList.filter(notification => notification.id !== id);
  },
  
  // Clear all notifications
  clearAll: async (): Promise<void> => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Clear all notifications
    mockNotificationsList = [];
  },
  
  // Subscribe to new notifications
  subscribeToNotifications: (callback: NotificationCallback): (() => void) => {
    notificationCallbacks.push(callback);
    
    // Return unsubscribe function
    return () => {
      const index = notificationCallbacks.indexOf(callback);
      if (index !== -1) {
        notificationCallbacks.splice(index, 1);
      }
    };
  }
};

// src/frontend/services/mockData.ts
// This file contains mock data generators for various components

// Generate random date within a range
export const randomDate = (start: Date, end: Date): Date => {
  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
};

// Generate random integer within a range
export const randomInt = (min: number, max: number): number => {
  return Math.floor(Math.random() * (max - min + 1)) + min;
};

// Generate random element from array
export const randomElement = <T>(array: T[]): T => {
  return array[Math.floor(Math.random() * array.length)];
};

// Generate mock data for dashboards
export const generateMockDashboardData = () => {
  const now = new Date();
  const oneYearAgo = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());
  
  // Generate mock trainees
  const trainees = Array.from({ length: 25 }, (_, i) => ({
    id: `trainee-${i + 1}`,
    name: `Trainee ${i + 1}`,
    email: `trainee${i + 1}@example.com`,
    progress: randomInt(0, 100),
    lastActivity: randomDate(oneYearAgo, now),
    currentModule: `Module ${randomInt(1, 10)}`,
    pendingAssessments: randomInt(0, 5),
    overallScore: randomInt(60, 98),
    status: randomElement(['active', 'inactive', 'on_leave'])
  }));
  
  // Generate mock training sessions
  const trainingSessions = Array.from({ length: 10 }, (_, i) => {
    const startDate = randomDate(now, new Date(now.getFullYear(), now.getMonth() + 3, now.getDate()));
    const endDate = new Date(startDate);
    endDate.setHours(endDate.getHours() + randomInt(1, 8));
    
    return {
      id: `session-${i + 1}`,
      title: `Training Session ${i + 1}`,
      description: `Description for training session ${i + 1}`,
      startDate,
      endDate,
      status: randomElement(['scheduled', 'in_progress', 'completed', 'cancelled']),
      location: randomElement(['Simulator Room A', 'Classroom 101', 'Hangar B', 'Online']),
      trainees: Array.from({ length: randomInt(3, 12) }, (_, j) => ({
        id: `trainee-${j + 1}`,
        name: `Trainee ${j + 1}`,
        email: `trainee${j + 1}@example.com`,
        status: randomElement(['confirmed', 'pending', 'attended', 'absent'])
      }))
    };
  });
  
  // Generate mock assessments
  const assessments = Array.from({ length: 15 }, (_, i) => ({
    id: `assessment-${i + 1}`,
    title: `Assessment ${i + 1}`,
    traineeName: `Trainee ${randomInt(1, 25)}`,
    traineeId: `trainee-${randomInt(1, 25)}`,
    date: randomDate(oneYearAgo, now),
    status: randomElement(['pending_review', 'graded', 'scheduled']),
    score: randomInt(0, 100),
    maxScore: 100,
    sessionId: randomElement([`session-${randomInt(1, 10)}`, undefined])
  }));
  
  return {
    trainees,
    trainingSessions,
    assessments
  };
};

// Generate mock data for analytics
export const generateMockAnalyticsData = () => {
  // Mock overall stats
  const overallStats = {
    activeTrainees: randomInt(50, 150),
    completedTrainees: randomInt(20, 80),
    avgProgramScore: randomInt(70, 90),
    complianceRate: randomInt(85, 99)
  };
  
  // Generate trainee metrics
  const trainees = Array.from({ length: 30 }, (_, i) => ({
    id: `trainee-${i + 1}`,
    name: `Trainee ${i + 1}`,
    overallScore: randomInt(60, 98),
    completedModules: randomInt(0, 10),
    totalModules: 10,
    lastAssessmentDate: randomDate(new Date(2024, 0, 1), new Date()),
    riskLevel: randomElement(['low', 'medium', 'high']),
    trend: randomElement(['improving', 'stable', 'declining']),
    programCompletion: randomInt(0, 100),
    competencyScores: []
  }));
  
  // Generate program metrics
  const programs = Array.from({ length: 8 }, (_, i) => ({
    id: `program-${i + 1}`,
    name: `Training Program ${i + 1}`,
    traineesCount: randomInt(5, 30),
    avgCompletion: randomInt(0, 100),
    avgScore: randomInt(60, 95),
    moduleCompletionRates: [],
    complianceStatus: randomElement(['compliant', 'nonCompliant', 'partiallyCompliant']),
    startDate: randomDate(new Date(2023, 0, 1), new Date(2024, 0, 1)),
    endDate: randomDate(new Date(2024, 3, 1), new Date(2025, 0, 1)),
    instructors: []
  }));
  
  // Generate compliance metrics
  const complianceMetrics = Array.from({ length: 12 }, (_, i) => ({
    requirementId: `req-${i + 1}`,
    requirementName: `Requirement ${i + 1}`,
    description: `Description for requirement ${i + 1}`,
    status: randomElement(['met', 'notMet', 'partiallyMet']),
    coverage: randomInt(0, 100),
    importance: randomElement(['critical', 'high', 'medium', 'low']),
    regulationReference: `REG-${randomInt(100, 999)}`
  }));
  
  return {
    overallStats,
    trainees,
    programs,
    complianceMetrics
  };
};

// next.config.js
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  images: {
    domains: ['localhost', 'api.pilot-training-platform.com'],
  },
  // Enable PWA features
  pwa: {
    dest: 'public',
    register: true,
    skipWaiting: true,
    disable: process.env.NODE_ENV === 'development',
  },
  // Configure webpack for 3D/AR visualizations
  webpack: (config) => {
    config.module.rules.push({
      test: /\.(glb|gltf)$/,
      use: {
        loader: 'file-loader',
        options: {
          publicPath: '/_next/static/media/',
          outputPath: 'static/media/',
          name: '[hash].[ext]',
        },
      },
    });
    return config;
  },
  // API rewrites for development
  async rewrites() {
    return [
      {
        source: '/api/:path*',
        destination: `${process.env.NEXT_PUBLIC_API_URL}/:path*`,
      },
    ];
  },
};

module.exports = nextConfig;

// src/frontend/components/notifications/NotificationSystem.tsx
import React, { useState, useEffect, createContext, useContext } from 'react';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { Alert } from '../ui/Alert';
import { DataTable, Column } from '../ui/DataTable';

// Types
export enum NotificationType {
  INFO = 'info',
  SUCCESS = 'success',
  WARNING = 'warning',
  ERROR = 'error'
}

export interface Notification {
  id: string;
  title: string;
  message: string;
  type: NotificationType;
  createdAt: Date;
  readAt?: Date;
  link?: string;
  category?: string;
  source?: string;
  isExpanded?: boolean;
}

// Notification Card Component
interface NotificationCardProps {
  notification: Notification;
  onRead: (id: string) => Promise<void>;
  onDelete: (id: string) => Promise<void>;
  onExpand: (id: string) => void;
}

export const NotificationCard: React.FC<NotificationCardProps> = ({
  notification,
  onRead,
  onDelete,
  onExpand
}) => {
  // Determine icon based on notification type
  const getIcon = () => {
    switch (notification.type) {
      case NotificationType.INFO:
        return (
          <svg className="h-5 w-5 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        );
      case NotificationType.SUCCESS:
        return (
          <svg className="h-5 w-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        );
      case NotificationType.WARNING:
        return (
          <svg className="h-5 w-5 text-yellow-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
          </svg>
        );
      case NotificationType.ERROR:
        return (
          <svg className="h-5 w-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        );
      default:
        return (
          <svg className="h-5 w-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"></path>
          </svg>
        );
    }
  };

  // Get background color based on type and read status
  const getBackgroundColor = () => {
    if (notification.readAt) {
      return 'bg-white';
    }
    
    switch (notification.type) {
      case NotificationType.INFO:
        return 'bg-blue-50';
      case NotificationType.SUCCESS:
        return 'bg-green-50';
      case NotificationType.WARNING:
        return 'bg-yellow-50';
      case NotificationType.ERROR:
        return 'bg-red-50';
      default:
        return 'bg-gray-50';
    }
  };

  // Format time
  const formatTime = (date: Date) => {
    const now = new Date();
    const notificationDate = new Date(date);
    const diffInSeconds = Math.floor((now.getTime() - notificationDate.getTime()) / 1000);
    
    if (diffInSeconds < 60) {
      return `${diffInSeconds} seconds ago`;
    }
    
    const diffInMinutes = Math.floor(diffInSeconds / 60);
    if (diffInMinutes < 60) {
      return `${diffInMinutes} minute${diffInMinutes !== 1 ? 's' : ''} ago`;
    }
    
    const diffInHours = Math.floor(diffInMinutes / 60);
    if (diffInHours < 24) {
      return `${diffInHours} hour${diffInHours !== 1 ? 's' : ''} ago`;
    }
    
    const diffInDays = Math.floor(diffInHours / 24);
    if (diffInDays < 7) {
      return `${diffInDays} day${diffInDays !== 1 ? 's' : ''} ago`;
    }
    
    return notificationDate.toLocaleDateString();
  };

  return (
    <div className={`border rounded-lg p-4 mb-4 ${getBackgroundColor()}`}>
      <div className="flex items-start">
        <div className="flex-shrink-0 mr-3">
          {getIcon()}
        </div>
        <div className="flex-grow">
          <div className="flex justify-between">
            <h3 className="text-sm font-medium">{notification.title}</h3>
            <div className="flex space-x-2">
              {!notification.readAt && (
                <button
                  className="text-blue-500 hover:text-blue-700"
                  onClick={(e) => {
                    e.stopPropagation();
                    onRead(notification.id);
                  }}
                  title="Mark as read"
                >
                  <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                </button>
              )}
              <button
                className="text-gray-400 hover:text-gray-600"
                onClick={(e) => {
                  e.stopPropagation();
                  onDelete(notification.id);
                }}
                title="Delete"
              >
                <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
          </div>
          <div 
            className={`mt-1 text-sm ${notification.isExpanded ? '' : 'line-clamp-2'}`}
            onClick={() => onExpand(notification.id)}
          >
            {notification.message}
          </div>
          <div className="mt-2 flex justify-between items-center">
            <div className="text-xs text-gray-500 flex space-x-2">
              <span>{formatTime(notification.createdAt)}</span>
              {notification.category && (
                <span>• {notification.category}</span>
              )}
              {notification.source && (
                <span>• {notification.source}</span>
              )}
            </div>
            {notification.link && (
              <a href={notification.link} className="text-sm text-blue-500 hover:text-blue-700">
                View
              </a>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

// Notification List Component
interface NotificationListProps {
  notifications: Notification[];
  onMarkAsRead: (id: string) => Promise<void>;
  onDelete: (id: string) => Promise<void>;
  onMarkAllAsRead: () => Promise<void>;
  onClearAll: () => Promise<void>;
  onExpand: (id: string) => void;
}

export const NotificationList: React.FC<NotificationListProps> = ({
  notifications,
  onMarkAsRead,
  onDelete,
  onMarkAllAsRead,
  onClearAll,
  onExpand
}) => {
  const unreadCount = notifications.filter(n => !n.readAt).length;
  
  return (
    <div>
      <div className="flex justify-between items-center mb-4">
        <div>
          <h2 className="text-lg font-medium">Notifications</h2>
          {unreadCount > 0 && (
            <p className="text-sm text-gray-500">{unreadCount} unread notification{unreadCount !== 1 ? 's' : ''}</p>
          )}
        </div>
        <div className="flex space-x-2">
          {unreadCount > 0 && (
            <Button
              variant="outline"
              size="small"
              onClick={onMarkAllAsRead}
            >
              Mark All as Read
            </Button>
          )}
          {notifications.length > 0 && (
            <Button
              variant="outline"
              size="small"
              onClick={onClearAll}
            >
              Clear All
            </Button>
          )}
        </div>
      </div>
      
      {notifications.length > 0 ? (
        <div>
          {notifications.map(notification => (
            <NotificationCard
              key={notification.id}
              notification={notification}
              onRead={onMarkAsRead}
              onDelete={onDelete}
              onExpand={onExpand}
            />
          ))}
        </div>
      ) : (
        <div className="text-center py-8 text-gray-500">
          <svg className="mx-auto h-12 w-12" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"></path>
          </svg>
          <p className="mt-2">No notifications to display</p>
        </div>
      )}
    </div>
  );
};

// Notification Page Component
interface NotificationPageProps {
  notifications: Notification[];
  onMarkAsRead: (id: string) => Promise<void>;
  onDelete: (id: string) => Promise<void>;
  onMarkAllAsRead: () => Promise<void>;
  onClearAll: () => Promise<void>;
  onFilter: (filter: { type?: NotificationType; readStatus?: 'read' | 'unread'; category?: string }) => void;
  categories: string[];
}

export const NotificationPage: React.FC<NotificationPageProps> = ({
  notifications,
  onMarkAsRead,
  onDelete,
  onMarkAllAsRead,
  onClearAll,
  onFilter,
  categories
}) => {
  const [activeFilter, setActiveFilter] = useState<{
    type?: NotificationType;
    readStatus?: 'read' | 'unread';
    category?: string;
  }>({});
  const [alertMessage, setAlertMessage] = useState<{ type: 'success' | 'error'; message: string } | null>(null);
  const [expandedNotifications, setExpandedNotifications] = useState<Set<string>>(new Set());

  // Handle expand notification content
  const handleExpand = (id: string) => {
    setExpandedNotifications(prev => {
      const newSet = new Set(prev);
      if (newSet.has(id)) {
        newSet.delete(id);
      } else {
        newSet.add(id);
      }
      return newSet;
    });
  };

  // Apply filters
  const applyFilter = (newFilter: { type?: NotificationType; readStatus?: 'read' | 'unread'; category?: string }) => {
    setActiveFilter(newFilter);
    onFilter(newFilter);
  };

  // Handle mark as read
  const handleMarkAsRead = async (id: string) => {
    try {
      await onMarkAsRead(id);
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to mark notification as read: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };

  // Handle delete
  const handleDelete = async (id: string) => {
    try {
      await onDelete(id);
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to delete notification: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };

  // Handle mark all as read
  const handleMarkAllAsRead = async () => {
    try {
      await onMarkAllAsRead();
      setAlertMessage({
        type: 'success',
        message: 'All notifications marked as read'
      });
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to mark all notifications as read: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };

  // Handle clear all
  const handleClearAll = async () => {
    try {
      await onClearAll();
      setAlertMessage({
        type: 'success',
        message: 'All notifications cleared'
      });
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to clear all notifications: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };

  // Enhanced notifications with expanded state
  const enhancedNotifications = notifications.map(notification => ({
    ...notification,
    isExpanded: expandedNotifications.has(notification.id)
  }));

  return (
    <div className="notification-page">
      {alertMessage && (
        <Alert
          type={alertMessage.type}
          message={alertMessage.message}
          onClose={() => setAlertMessage(null)}
        />
      )}
      
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900">Notifications</h1>
        <p className="text-gray-500">View and manage your notifications</p>
      </div>
      
      <Card className="mb-6">
        <div className="flex flex-wrap gap-2 mb-4">
          <Button
            variant={activeFilter.type === undefined ? 'primary' : 'outline'}
            size="small"
            onClick={() => applyFilter({ ...activeFilter, type: undefined })}
          >
            All
          </Button>
          <Button
            variant={activeFilter.type === NotificationType.INFO ? 'primary' : 'outline'}
            size="small"
            onClick={() => applyFilter({ ...activeFilter, type: NotificationType.INFO })}
          >
            Info
          </Button>
          <Button
            variant={activeFilter.type === NotificationType.SUCCESS ? 'primary' : 'outline'}
            size="small"
            onClick={() => applyFilter({ ...activeFilter, type: NotificationType.SUCCESS })}
          >
            Success
          </Button>
          <Button
            variant={activeFilter.type === NotificationType.WARNING ? 'primary' : 'outline'}
            size="small"
            onClick={() => applyFilter({ ...activeFilter, type: NotificationType.WARNING })}
          >
            Warning
          </Button>
          <Button
            variant={activeFilter.type === NotificationType.ERROR ? 'primary' : 'outline'}
            size="small"
            onClick={() => applyFilter({ ...activeFilter, type: NotificationType.ERROR })}
          >
            Error
          </Button>
          
          <div className="ml-auto"></div>
          
          <Button
            variant={activeFilter.readStatus === undefined ? 'primary' : 'outline'}
            size="small"
            onClick={() => applyFilter({ ...activeFilter, readStatus: undefined })}
          >
            All
          </Button>
          <Button
            variant={activeFilter.readStatus === 'unread' ? 'primary' : 'outline'}
            size="small"
            onClick={() => applyFilter({ ...activeFilter, readStatus: 'unread' })}
          >
            Unread
          </Button>
          <Button
            variant={activeFilter.readStatus === 'read' ? 'primary' : 'outline'}
            size="small"
            onClick={() => applyFilter({ ...activeFilter, readStatus: 'read' })}
          >
            Read
          </Button>
        </div>
        
        {categories.length > 0 && (
          <div className="mb-4">
            <label htmlFor="category-filter" className="block text-sm font-medium text-gray-700 mb-1">
              Filter by Category
            </label>
            <select
              id="category-filter"
              className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
              value={activeFilter.category || ''}
              onChange={(e) => applyFilter({ ...activeFilter, category: e.target.value || undefined })}
            >
              <option value="">All Categories</option>
              {categories.map(category => (
                <option key={category} value={category}>
                  {category}
                </option>
              ))}
            </select>
          </div>
        )}
        
        <NotificationList
          notifications={enhancedNotifications}
          onMarkAsRead={handleMarkAsRead}
          onDelete={handleDelete}
          onMarkAllAsRead={handleMarkAllAsRead}
          onClearAll={handleClearAll}
          onExpand={handleExpand}
        />
      </Card>
    </div>
  );
};

// Toast Notification Component
interface ToastNotificationProps {
  notification: Notification;
  onDismiss: () => void;
  autoHideDuration?: number;
}

export const ToastNotification: React.FC<ToastNotificationProps> = ({
  notification,
  onDismiss,
  autoHideDuration = 5000
}) => {
  // Auto-dismiss notification after duration
  useEffect(() => {
    const timer = setTimeout(() => {
      onDismiss();
    }, autoHideDuration);
    
    return () => clearTimeout(timer);
  }, [onDismiss, autoHideDuration]);

  // Get background color based on type
  const getBackgroundColor = () => {
    switch (notification.type) {
      case NotificationType.INFO:
        return 'bg-blue-50 border-blue-500';
      case NotificationType.SUCCESS:
        return 'bg-green-50 border-green-500';
      case NotificationType.WARNING:
        return 'bg-yellow-50 border-yellow-500';
      case NotificationType.ERROR:
        return 'bg-red-50 border-red-500';
      default:
        return 'bg-gray-50 border-gray-500';
    }
  };

  // Get icon based on notification type
  const getIcon = () => {
    switch (notification.type) {
      case NotificationType.INFO:
        return (
          <svg className="h-5 w-5 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        );
      case NotificationType.SUCCESS:
        return (
          <svg className="h-5 w-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        );
      case NotificationType.WARNING:
        return (
          <svg className="h-5 w-5 text-yellow-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
          </svg>
        );
      case NotificationType.ERROR:
        return (
          <svg className="h-5 w-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        );
      default:
        return (
          <svg className="h-5 w-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"></path>
          </svg>
        );
    }
  };

  return (
    <div className={`max-w-md w-full shadow-lg rounded-lg pointer-events-auto border-l-4 ${getBackgroundColor()}`}>
      <div className="p-4">
        <div className="flex items-start">
          <div className="flex-shrink-0">
            {getIcon()}
          </div>
          <div className="ml-3 w-0 flex-1">
            <p className="text-sm font-medium text-gray-900">{notification.title}</p>
            <p className="mt-1 text-sm text-gray-500">{notification.message}</p>
            {notification.link && (
              <div className="mt-2">
                <a href={notification.link} className="text-sm text-blue-500 hover:text-blue-700">
                  View details
                </a>
              </div>
            )}
          </div>
          <div className="ml-4 flex-shrink-0 flex">
            <button
              className="bg-transparent rounded-md inline-flex text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              onClick={onDismiss}
            >
              <span className="sr-only">Close</span>
              <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// Toast Container Component
interface ToastContainerProps {
  toasts: Notification[];
  onDismiss: (id: string) => void;
}

export const ToastContainer: React.FC<ToastContainerProps> = ({
  toasts,
  onDismiss
}) => {
  if (toasts.length === 0) return null;
  
  return (
    <div className="fixed inset-0 flex items-end justify-center px-4 py-6 pointer-events-none sm:p-6 sm:items-start sm:justify-end z-50">
      <div className="flex flex-col space-y-2">
        {toasts.map(toast => (
          <ToastNotification
            key={toast.id}
            notification={toast}
            onDismiss={() => onDismiss(toast.id)}
          />
        ))}
      </div>
    </div>
  );
};

// Notification Settings Component
interface NotificationPreference {
  id: string;
  category: string;
  description: string;
  email: boolean;
  inApp: boolean;
  push: boolean;
}

interface NotificationSettingsProps {
  preferences: NotificationPreference[];
  onUpdatePreference: (id: string, updates: Partial<NotificationPreference>) => Promise<void>;
  onUpdateAll: (updates: { email?: boolean; inApp?: boolean; push?: boolean }) => Promise<void>;
}

export const NotificationSettings: React.FC<NotificationSettingsProps> = ({
  preferences,
  onUpdatePreference,
  onUpdateAll
}) => {
  const [alertMessage, setAlertMessage] = useState<{ type: 'success' | 'error'; message: string } | null>(null);

  // Calculate "all" toggle states
  const allEmail = preferences.every(p => p.email);
  const allInApp = preferences.every(p => p.inApp);
  const allPush = preferences.every(p => p.push);

  // Handle toggle for specific preference
  const handleToggle = async (id: string, field: 'email' | 'inApp' | 'push', value: boolean) => {
    try {
      await onUpdatePreference(id, { [field]: value });
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to update preference: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };

  // Handle toggle all
  const handleToggleAll = async (field: 'email' | 'inApp' | 'push', value: boolean) => {
    try {
      await onUpdateAll({ [field]: value });
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to update all preferences: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };

  return (
    <div className="notification-settings">
      {alertMessage && (
        <Alert
          type={alertMessage.type}
          message={alertMessage.message}
          onClose={() => setAlertMessage(null)}
        />
      )}
      
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900">Notification Preferences</h1>
        <p className="text-gray-500">Manage how you receive notifications</p>
      </div>
      
      <Card>
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Category
              </th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Email
                <div className="mt-1">
                  <input
                    type="checkbox"
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    checked={allEmail}
                    onChange={(e) => handleToggleAll('email', e.target.checked)}
                  />
                </div>
              </th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                In-App
                <div className="mt-1">
                  <input
                    type="checkbox"
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    checked={allInApp}
                    onChange={(e) => handleToggleAll('inApp', e.target.checked)}
                  />
                </div>
              </th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Push
                <div className="mt-1">
                  <input
                    type="checkbox"
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    checked={allPush}
                    onChange={(e) => handleToggleAll('push', e.target.checked)}
                  />
                </div>
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {preferences.map((pref) => (
              <tr key={pref.id}>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="font-medium text-gray-900">{pref.category}</div>
                  <div className="text-sm text-gray-500">{pref.description}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <input
                    type="checkbox"
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    checked={pref.email}
                    onChange={(e) => handleToggle(pref.id, 'email', e.target.checked)}
                  />
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <input
                    type="checkbox"
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    checked={pref.inApp}
                    onChange={(e) => handleToggle(pref.id, 'inApp', e.target.checked)}
                  />
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <input
                    type="checkbox"
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    checked={pref.push}
                    onChange={(e) => handleToggle(pref.id, 'push', e.target.checked)}
                  />
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </Card>
    </div>
  );
};

// Notification Service Context & Provider
interface NotificationContextType {
  notifications: Notification[];
  unreadCount: number;
  toasts: Notification[];
  markAsRead: (id: string) => Promise<void>;
  deleteNotification: (id: string) => Promise<void>;
  markAllAsRead: () => Promise<void>;
  clearAll: () => Promise<void>;
  showToast: (notification: Omit<Notification, 'id' | 'createdAt' | 'readAt'>) => void;
  dismissToast: (id: string) => void;
}

const NotificationContext = createContext<NotificationContextType | undefined>(undefined);

export const useNotifications = () => {
  const context = useContext(NotificationContext);
  if (!context) {
    throw new Error('useNotifications must be used within a NotificationProvider');
  }
  return context;
};

interface NotificationProviderProps {
  children: React.ReactNode;
  notificationService: {
    getNotifications: () => Promise<Notification[]>;
    markAsRead: (id: string) => Promise<void>;
    markAllAsRead: () => Promise<void>;
    deleteNotification: (id: string) => Promise<void>;
    clearAll: () => Promise<void>;
    subscribeToNotifications: (callback: (notification: Notification) => void) => () => void;
  };
}

export const NotificationProvider: React.FC<NotificationProviderProps> = ({
  children,
  notificationService
}) => {
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [toasts, setToasts] = useState<Notification[]>([]);
  
  // Load notifications on mount
  useEffect(() => {
    const loadNotifications = async () => {
      try {
        const notifs = await notificationService.getNotifications();
        setNotifications(notifs);
      } catch (error) {
        console.error('Failed to load notifications:', error);
      }
    };
    
    loadNotifications();
    
    // Subscribe to new notifications
    const unsubscribe = notificationService.subscribeToNotifications((notification) => {
      setNotifications(prev => [notification, ...prev]);
      showToast({
        title: notification.title,
        message: notification.message,
        type: notification.type,
        link: notification.link,
        category: notification.category,
        source: notification.source
      });
    });
    
    return unsubscribe;
  }, [notificationService]);
  
  // Calculate unread count
  const unreadCount = notifications.filter(n => !n.readAt).length;
  
  // Mark notification as read
  const markAsRead = async (id: string) => {
    await notificationService.markAsRead(id);
    setNotifications(prev => 
      prev.map(n => 
        n.id === id ? { ...n, readAt: new Date() } : n
      )
    );
  };
  
  // Delete notification
  const deleteNotification = async (id: string) => {
    await notificationService.deleteNotification(id);
    setNotifications(prev => 
      prev.filter(n => n.id !== id)
    );
  };
  
  // Mark all notifications as read
  const markAllAsRead = async () => {
    await notificationService.markAllAsRead();
    setNotifications(prev => 
      prev.map(n => ({ ...n, readAt: n.readAt || new Date() }))
    );
  };
  
  // Clear all notifications
  const clearAll = async () => {
    await notificationService.clearAll();
    setNotifications([]);
  };
  
  // Show toast notification
  const showToast = (notification: Omit<Notification, 'id' | 'createdAt' | 'readAt'>) => {
    const toast: Notification = {
      id: `toast-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      createdAt: new Date(),
      ...notification
    };
    
    setToasts(prev => [toast, ...prev]);
  };
  
  // Dismiss toast
  const dismissToast = (id: string) => {
    setToasts(prev => prev.filter(t => t.id !== id));
  };
  
  const value = {
    notifications,
    unreadCount,
    toasts,
    markAsRead,
    deleteNotification,
    markAllAsRead,
    clearAll,
    showToast,
    dismissToast
  };
  
  return (
    <NotificationContext.Provider value={value}>
      {children}
      <ToastContainer toasts={toasts} onDismiss={dismissToast} />
    </NotificationContext.Provider>
  );
};

{
  "name": "advanced-pilot-training-platform-frontend",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:e2e": "cypress run",
    "test:e2e:open": "cypress open",
    "storybook": "storybook dev -p 6006",
    "build-storybook": "storybook build"
  },
  "dependencies": {
    "@emotion/react": "^11.11.1",
    "@emotion/styled": "^11.11.0",
    "@hookform/resolvers": "^3.3.1",
    "@mui/material": "^5.14.10",
    "@reduxjs/toolkit": "^1.9.6",
    "@tanstack/react-query": "^4.35.3",
    "axios": "^1.5.0",
    "d3": "^7.8.5",
    "date-fns": "^2.30.0",
    "dnd-kit": "^6.1.0",
    "idb": "^7.1.1",
    "lodash": "^4.17.21",
    "next": "13.5.2",
    "next-pwa": "^5.6.0",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-hook-form": "^7.46.2",
    "react-redux": "^8.1.2",
    "recharts": "^2.8.0",
    "socket.io-client": "^4.7.2",
    "three": "^0.156.1",
    "yup": "^1.2.0"
  },
  "devDependencies": {
    "@storybook/addon-essentials": "^7.4.3",
    "@storybook/addon-interactions": "^7.4.3",
    "@storybook/addon-links": "^7.4.3",
    "@storybook/blocks": "^7.4.3",
    "@storybook/nextjs": "^7.4.3",
    "@storybook/react": "^7.4.3",
    "@storybook/testing-library": "^0.2.1",
    "@testing-library/jest-dom": "^6.1.3",
    "@testing-library/react": "^14.0.0",
    "@types/d3": "^7.4.0",
    "@types/jest": "^29.5.5",
    "@types/lodash": "^4.14.199",
    "@types/node": "20.6.3",
    "@types/react": "18.2.22",
    "@types/react-dom": "18.2.7",
    "@types/three": "^0.156.0",
    "autoprefixer": "^10.4.15",
    "cypress": "^13.2.0",
    "eslint": "8.49.0",
    "eslint-config-next": "13.5.2",
    "eslint-plugin-storybook": "^0.6.14",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "postcss": "^8.4.30",
    "storybook": "^7.4.3",
    "tailwindcss": "^3.3.3",
    "typescript": "5.2.2"
  }
}

// src/frontend/components/document/PDFViewer.tsx
import React, { useState, useEffect, useRef } from 'react';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';

// Types
interface PDFViewerProps {
  documentUrl: string;
  documentName?: string;
  initialPage?: number;
  onClose?: () => void;
  onAnnotate?: (page: number, annotation: PDFAnnotation) => Promise<void>;
  onPageChange?: (page: number) => void;
  annotations?: PDFAnnotation[];
  enableAnnotations?: boolean;
}

export interface PDFAnnotation {
  id: string;
  page: number;
  rect: {
    x: number;
    y: number;
    width: number;
    height: number;
  };
  content: string;
  color: string;
  author?: string;
  createdAt: Date;
  type: 'highlight' | 'note' | 'underline' | 'strikethrough' | 'link';
}

// PDF Viewer Component
export const PDFViewer: React.FC<PDFViewerProps> = ({
  documentUrl,
  documentName = 'Document',
  initialPage = 1,
  onClose,
  onAnnotate,
  onPageChange,
  annotations = [],
  enableAnnotations = false
}) => {
  const [currentPage, setCurrentPage] = useState(initialPage);
  const [totalPages, setTotalPages] = useState(0);
  const [scale, setScale] = useState(1.0);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [pageRendered, setPageRendered] = useState(false);
  const [selectedText, setSelectedText] = useState<{
    text: string;
    rect: { x: number; y: number; width: number; height: number };
  } | null>(null);
  const [showAnnotationPopup, setShowAnnotationPopup] = useState(false);
  const [annotationContent, setAnnotationContent] = useState('');
  const [annotationColor, setAnnotationColor] = useState('#FFEB3B'); // yellow default
  const [annotationType, setAnnotationType] = useState<'highlight' | 'note' | 'underline' | 'strikethrough' | 'link'>(
    'highlight'
  );
  
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const containerRef = useRef<HTMLDivElement>(null);
  const pdfDocumentRef = useRef<any>(null);
  const pdfPageRef = useRef<any>(null);
  
  // Initialize PDF.js on component mount
  useEffect(() => {
    // Here we would typically load PDF.js library
    // For the purpose of this example, we'll simulate PDF loading
    setIsLoading(true);
    
    // Simulate loading the PDF document
    const loadPDF = async () => {
      try {
        // In a real implementation, this would be:
        // const loadingTask = pdfjs.getDocument(documentUrl);
        // const pdf = await loadingTask.promise;
        
        // Simulate PDF loading with a timeout
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Simulate PDF document with 10 pages
        pdfDocumentRef.current = {
          numPages: 10,
          getPage: async (pageNum: number) => {
            // Simulate page loading
            await new Promise(resolve => setTimeout(resolve, 300));
            return {
              getViewport: ({ scale }: { scale: number }) => ({
                width: 595.28 * scale,
                height: 841.89 * scale, // A4 size
                transform: [scale, 0, 0, scale, 0, 0],
              }),
              render: ({ canvasContext, viewport }: any) => {
                // Simulate rendering by drawing a rectangle
                canvasContext.fillStyle = '#FFFFFF';
                canvasContext.fillRect(0, 0, viewport.width, viewport.height);
                
                // Draw page border
                canvasContext.strokeStyle = '#000000';
                canvasContext.lineWidth = 1;
                canvasContext.strokeRect(5, 5, viewport.width - 10, viewport.height - 10);
                
                // Draw page number
                canvasContext.fillStyle = '#000000';
                canvasContext.font = '20px Arial';
                canvasContext.fillText(`Page ${pageNum} of 10`, viewport.width / 2 - 50, viewport.height / 2);
                
                // Simulate rendering time
                return {
                  promise: new Promise(resolve => setTimeout(resolve, 100))
                };
              }
            };
          }
        };
        
        setTotalPages(pdfDocumentRef.current.numPages);
        setIsLoading(false);
        renderPage(currentPage);
      } catch (err) {
        setError(`Failed to load PDF: ${err instanceof Error ? err.message : 'Unknown error'}`);
        setIsLoading(false);
      }
    };
    
    loadPDF();
    
    // Cleanup function
    return () => {
      pdfDocumentRef.current = null;
      pdfPageRef.current = null;
    };
  }, [documentUrl]);
  
  // Render page when current page or scale changes
  useEffect(() => {
    if (!isLoading && pdfDocumentRef.current) {
      renderPage(currentPage);
    }
  }, [currentPage, scale]);
  
  // Function to render a page
  const renderPage = async (pageNumber: number) => {
    if (!pdfDocumentRef.current) return;
    
    try {
      setPageRendered(false);
      pdfPageRef.current = await pdfDocumentRef.current.getPage(pageNumber);
      
      const canvas = canvasRef.current;
      if (!canvas) return;
      
      const context = canvas.getContext('2d');
      if (!context) return;
      
      const viewport = pdfPageRef.current.getViewport({ scale });
      
      canvas.width = viewport.width;
      canvas.height = viewport.height;
      
      const renderTask = pdfPageRef.current.render({
        canvasContext: context,
        viewport,
      });
      
      await renderTask.promise;
      
      // Render any annotations for this page
      renderAnnotations(pageNumber, context, viewport);
      
      setPageRendered(true);
      
      if (onPageChange) {
        onPageChange(pageNumber);
      }
    } catch (err) {
      setError(`Failed to render page: ${err instanceof Error ? err.message : 'Unknown error'}`);
    }
  };
  
  // Function to render annotations on canvas
  const renderAnnotations = (page: number, context: CanvasRenderingContext2D, viewport: any) => {
    const pageAnnotations = annotations.filter(a => a.page === page);
    
    pageAnnotations.forEach(annotation => {
      const { rect, type, color } = annotation;
      
      // Scale annotation rectangle to match current viewport
      const scaledRect = {
        x: rect.x * viewport.width,
        y: rect.y * viewport.height,
        width: rect.width * viewport.width,
        height: rect.height * viewport.height,
      };
      
      context.save();
      
      if (type === 'highlight') {
        context.fillStyle = `${color}80`; // Add transparency
        context.fillRect(scaledRect.x, scaledRect.y, scaledRect.width, scaledRect.height);
      } else if (type === 'underline') {
        context.strokeStyle = color;
        context.lineWidth = 2;
        context.beginPath();
        context.moveTo(scaledRect.x, scaledRect.y + scaledRect.height);
        context.lineTo(scaledRect.x + scaledRect.width, scaledRect.y + scaledRect.height);
        context.stroke();
      } else if (type === 'strikethrough') {
        context.strokeStyle = color;
        context.lineWidth = 2;
        context.beginPath();
        context.moveTo(scaledRect.x, scaledRect.y + scaledRect.height / 2);
        context.lineTo(scaledRect.x + scaledRect.width, scaledRect.y + scaledRect.height / 2);
        context.stroke();
      } else if (type === 'note') {
        // Draw note icon
        context.fillStyle = color;
        context.fillRect(scaledRect.x, scaledRect.y, 20, 20);
        context.fillStyle = '#FFFFFF';
        context.font = '15px Arial';
        context.fillText('N', scaledRect.x + 5, scaledRect.y + 15);
      }
      
      context.restore();
    });
  };
  
  // Handler for text selection to create annotation
  const handleTextSelection = () => {
    if (!enableAnnotations) return;
    
    const selection = window.getSelection();
    if (!selection || selection.isCollapsed || !canvasRef.current) return;
    
    const range = selection.getRangeAt(0);
    const rect = range.getBoundingClientRect();
    const canvasRect = canvasRef.current.getBoundingClientRect();
    
    // Calculate relative position
    const relativeRect = {
      x: (rect.x - canvasRect.x) / canvasRect.width,
      y: (rect.y - canvasRect.y) / canvasRect.height,
      width: rect.width / canvasRect.width,
      height: rect.height / canvasRect.height,
    };
    
    setSelectedText({
      text: selection.toString(),
      rect: relativeRect,
    });
    
    setShowAnnotationPopup(true);
  };
  
  // Handler for creating annotation
  const handleCreateAnnotation = async () => {
    if (!selectedText || !onAnnotate) return;
    
    const annotation: PDFAnnotation = {
      id: `annotation-${Date.now()}`,
      page: currentPage,
      rect: selectedText.rect,
      content: annotationContent || selectedText.text,
      color: annotationColor,
      type: annotationType,
      createdAt: new Date(),
    };
    
    try {
      await onAnnotate(currentPage, annotation);
      setShowAnnotationPopup(false);
      setSelectedText(null);
      setAnnotationContent('');
      
      // Re-render the page to show the new annotation
      renderPage(currentPage);
    } catch (err) {
      setError(`Failed to create annotation: ${err instanceof Error ? err.message : 'Unknown error'}`);
    }
  };
  
  // Navigate to the next page
  const goToNextPage = () => {
    if (currentPage < totalPages) {
      setCurrentPage(currentPage + 1);
    }
  };
  
  // Navigate to the previous page
  const goToPrevPage = () => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1);
    }
  };
  
  // Zoom in
  const zoomIn = () => {
    setScale(scale => Math.min(scale + 0.25, 3.0));
  };
  
  // Zoom out
  const zoomOut = () => {
    setScale(scale => Math.max(scale - 0.25, 0.5));
  };
  
  // Reset zoom
  const resetZoom = () => {
    setScale(1.0);
  };
  
  return (
    <div className="pdf-viewer relative">
      <Card className="mb-4">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4">
          <h2 className="text-lg font-semibold text-gray-800">{documentName}</h2>
          
          <div className="flex items-center space-x-2 mt-2 sm:mt-0">
            <Button
              variant="outline"
              size="small"
              onClick={zoomOut}
              disabled={scale <= 0.5}
            >
              <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M20 12H4"></path>
              </svg>
            </Button>
            
            <span className="text-sm">{Math.round(scale * 100)}%</span>
            
            <Button
              variant="outline"
              size="small"
              onClick={zoomIn}
              disabled={scale >= 3.0}
            >
              <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 4v16m8-8H4"></path>
              </svg>
            </Button>
            
            <Button
              variant="outline"
              size="small"
              onClick={resetZoom}
              disabled={scale === 1.0}
            >
              <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5v-4m0 4h-4m4 0l-5-5"></path>
              </svg>
            </Button>
          </div>
        </div>
        
        <div className="flex justify-between items-center px-4 py-2 bg-gray-100 rounded-md mb-4">
          <Button
            variant="outline"
            size="small"
            onClick={goToPrevPage}
            disabled={currentPage <= 1 || isLoading}
          >
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7"></path>
            </svg>
          </Button>
          
          <div className="flex items-center space-x-2">
            <span className="text-sm">Page</span>
            <input
              type="number"
              className="w-12 text-center border rounded px-1 py-0"
              value={currentPage}
              min={1}
              max={totalPages}
              onChange={(e) => {
                const page = parseInt(e.target.value);
                if (page >= 1 && page <= totalPages) {
                  setCurrentPage(page);
                }
              }}
            />
            <span className="text-sm">of {totalPages}</span>
          </div>
          
          <Button
            variant="outline"
            size="small"
            onClick={goToNextPage}
            disabled={currentPage >= totalPages || isLoading}
          >
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </Button>
        </div>
        
        {error && (
          <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
            <strong className="font-bold">Error:</strong>
            <span className="block sm:inline"> {error}</span>
          </div>
        )}
        
        <div
          ref={containerRef}
          className="overflow-auto bg-gray-200 rounded-md"
          style={{ height: '600px', display: 'flex', justifyContent: 'center' }}
        >
          {isLoading ? (
            <div className="flex items-center justify-center h-full">
              <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
              <span className="ml-2 text-gray-700">Loading document...</span>
            </div>
          ) : (
            <div className="p-4">
              <canvas
                ref={canvasRef}
                className="shadow-lg cursor-text"
                onMouseUp={handleTextSelection}
              ></canvas>
            </div>
          )}
        </div>
        
        {enableAnnotations && (
          <div className="mt-4 px-4 py-2 bg-gray-100 rounded-md flex items-center justify-between">
            <div className="text-sm font-medium">Annotations</div>
            <div className="flex space-x-2">
              <Button
                variant="outline"
                size="small"
                onClick={() => {
                  // This would typically show a list of annotations
                  alert('Annotation list would be shown here');
                }}
              >
                <svg className="h-5 w-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                </svg>
                Show All
              </Button>
            </div>
          </div>
        )}
      </Card>
      
      {/* Annotation popup */}
      {showAnnotationPopup && selectedText && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-xl w-full max-w-md p-6">
            <h3 className="text-lg font-medium mb-4">Create Annotation</h3>
            
            <div className="mb-4">
              <p className="text-sm text-gray-700 mb-2">Selected text:</p>
              <div className="p-2 bg-gray-100 rounded text-sm">
                {selectedText.text}
              </div>
            </div>
            
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Annotation Type
              </label>
              <select
                className="block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                value={annotationType}
                onChange={(e) => setAnnotationType(e.target.value as any)}
              >
                <option value="highlight">Highlight</option>
                <option value="underline">Underline</option>
                <option value="strikethrough">Strikethrough</option>
                <option value="note">Note</option>
              </select>
            </div>
            
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Color
              </label>
              <div className="flex space-x-2">
                {['#FFEB3B', '#4CAF50', '#2196F3', '#FF5722', '#9C27B0'].map(color => (
                  <button
                    key={color}
                    type="button"
                    className={`w-8 h-8 rounded-full border-2 ${
                      color === annotationColor ? 'border-gray-900' : 'border-gray-300'
                    }`}
                    style={{ backgroundColor: color }}
                    onClick={() => setAnnotationColor(color)}
                  ></button>
                ))}
              </div>
            </div>
            
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Note (optional)
              </label>
              <textarea
                className="block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                rows={3}
                value={annotationContent}
                onChange={(e) => setAnnotationContent(e.target.value)}
                placeholder="Add a note to this annotation..."
              ></textarea>
            </div>
            
            <div className="flex justify-end space-x-2">
              <Button
                variant="outline"
                onClick={() => {
                  setShowAnnotationPopup(false);
                  setSelectedText(null);
                }}
              >
                Cancel
              </Button>
              <Button
                variant="primary"
                onClick={handleCreateAnnotation}
              >
                Save
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

// src/frontend/components/program/ProgramProgressTracker.tsx
import React, { useState, useEffect } from 'react';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';

// Types
export interface TrainingModule {
  id: string;
  name: string;
  description: string;
  status: 'not_started' | 'in_progress' | 'completed' | 'locked';
  progress: number;
  startDate?: Date;
  completionDate?: Date;
  dependencies: string[];
  isOptional: boolean;
  estimatedDuration: number; // in minutes
  lessons: TrainingLesson[];
}

export interface TrainingLesson {
  id: string;
  name: string;
  description: string;
  status: 'not_started' | 'in_progress' | 'completed' | 'locked';
  progress: number;
  startDate?: Date;
  completionDate?: Date;
  estimatedDuration: number; // in minutes
  exercises: TrainingExercise[];
}

export interface TrainingExercise {
  id: string;
  name: string;
  type: 'reading' | 'quiz' | 'simulation' | 'assessment';
  status: 'not_started' | 'in_progress' | 'completed' | 'locked';
  score?: number;
  attempts: number;
  maxAttempts?: number;
  completionDate?: Date;
  duration?: number; // actual time spent in minutes
}

export interface ProgramProgress {
  programId: string;
  programName: string;
  programDescription: string;
  overallProgress: number;
  startDate: Date;
  estimatedCompletionDate?: Date;
  actualCompletionDate?: Date;
  status: 'not_started' | 'in_progress' | 'completed';
  modules: TrainingModule[];
}

// Component
interface ProgramProgressTrackerProps {
  progress: ProgramProgress;
  onModuleSelect: (moduleId: string) => void;
  onLessonSelect: (moduleId: string, lessonId: string) => void;
  onExerciseSelect: (moduleId: string, lessonId: string, exerciseId: string) => void;
}

export const ProgramProgressTracker: React.FC<ProgramProgressTrackerProps> = ({
  progress,
  onModuleSelect,
  onLessonSelect,
  onExerciseSelect
}) => {
  const [expandedModules, setExpandedModules] = useState<Set<string>>(new Set());
  const [expandedLessons, setExpandedLessons] = useState<Set<string>>(new Set());
  
  // Toggle module expansion
  const toggleModule = (moduleId: string) => {
    const newExpandedModules = new Set(expandedModules);
    if (newExpandedModules.has(moduleId)) {
      newExpandedModules.delete(moduleId);
    } else {
      newExpandedModules.add(moduleId);
    }
    setExpandedModules(newExpandedModules);
  };
  
  // Toggle lesson expansion
  const toggleLesson = (lessonId: string) => {
    const newExpandedLessons = new Set(expandedLessons);
    if (newExpandedLessons.has(lessonId)) {
      newExpandedLessons.delete(lessonId);
    } else {
      newExpandedLessons.add(lessonId);
    }
    setExpandedLessons(newExpandedLessons);
  };
  
  // Format duration in hours and minutes
  const formatDuration = (minutes: number) => {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    
    if (hours === 0) {
      return `${mins} min`;
    }
    
    return `${hours}h ${mins}m`;
  };
  
  // Get status indicator
  const getStatusIndicator = (status: string) => {
    switch (status) {
      case 'completed':
        return (
          <div className="h-5 w-5 rounded-full bg-green-500 flex items-center justify-center">
            <svg className="h-3 w-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
            </svg>
          </div>
        );
      case 'in_progress':
        return <div className="h-5 w-5 rounded-full bg-blue-500"></div>;
      case 'not_started':
        return <div className="h-5 w-5 rounded-full bg-gray-300"></div>;
      case 'locked':
        return (
          <div className="h-5 w-5 rounded-full bg-gray-300 flex items-center justify-center">
            <svg className="h-3 w-3 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
            </svg>
          </div>
        );
      default:
        return <div className="h-5 w-5 rounded-full bg-gray-300"></div>;
    }
  };
  
  // Get status badge
  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'completed':
        return (
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
            Completed
          </span>
        );
      case 'in_progress':
        return (
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
            In Progress
          </span>
        );
      case 'not_started':
        return (
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
            Not Started
          </span>
        );
      case 'locked':
        return (
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
            Locked
          </span>
        );
      default:
        return (
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
            Unknown
          </span>
        );
    }
  };
  
  // Get exercise type badge
  const getExerciseTypeBadge = (type: string) => {
    switch (type) {
      case 'reading':
        return (
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
            Reading
          </span>
        );
      case 'quiz':
        return (
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
            Quiz
          </span>
        );
      case 'simulation':
        return (
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
            Simulation
          </span>
        );
      case 'assessment':
        return (
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
            Assessment
          </span>
        );
      default:
        return (
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
            {type.charAt(0).toUpperCase() + type.slice(1)}
          </span>
        );
    }
  };
  
  return (
    <div className="program-progress-tracker">
      <Card className="mb-6">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
          <div>
            <h1 className="text-xl font-bold text-gray-900">{progress.programName}</h1>
            <p className="text-sm text-gray-500">{progress.programDescription}</p>
          </div>
          <div className="mt-4 sm:mt-0 flex items-center">
            {getStatusBadge(progress.status)}
            <div className="ml-4">
              <div className="text-sm text-gray-500">Overall Progress</div>
              <div className="text-lg font-medium">{progress.overallProgress}%</div>
            </div>
          </div>
        </div>
        
        <div className="mt-6">
          <div className="w-full bg-gray-200 rounded-full h-2.5">
            <div
              className={`h-2.5 rounded-full ${
                progress.status === 'completed' ? 'bg-green-600' : 'bg-blue-600'
              }`}
              style={{ width: `${progress.overallProgress}%` }}
            ></div>
          </div>
          
          <div className="flex justify-between text-xs text-gray-500 mt-1">
            <div>Start: {new Date(progress.startDate).toLocaleDateString()}</div>
            {progress.estimatedCompletionDate && (
              <div>Estimated completion: {new Date(progress.estimatedCompletionDate).toLocaleDateString()}</div>
            )}
            {progress.actualCompletionDate && (
              <div>Completed: {new Date(progress.actualCompletionDate).toLocaleDateString()}</div>
            )}
          </div>
        </div>
      </Card>
      
      <div className="mb-6">
        <h2 className="text-lg font-medium mb-4">Program Modules</h2>
        
        <div className="space-y-4">
          {progress.modules.map((module) => (
            <div key={module.id} className="border rounded-lg overflow-hidden">
              <div
                className={`flex items-center justify-between p-4 cursor-pointer ${
                  module.status === 'locked' ? 'bg-gray-100' : 'bg-white hover:bg-gray-50'
                }`}
                onClick={() => {
                  if (module.status !== 'locked') {
                    toggleModule(module.id);
                    onModuleSelect(module.id);
                  }
                }}
              >
                <div className="flex items-center">
                  <div className="mr-3">
                    {getStatusIndicator(module.status)}
                  </div>
                  <div>
                    <div className="font-medium">{module.name}</div>
                    <div className="text-sm text-gray-500">{module.description}</div>
                  </div>
                </div>
                
                <div className="flex items-center">
                  <div className="mr-4 text-right">
                    <div className="text-sm font-medium">
                      {module.status !== 'not_started' ? `${module.progress}%` : ''}
                    </div>
                    <div className="text-xs text-gray-500">
                      {formatDuration(module.estimatedDuration)}
                    </div>
                  </div>
                  
                  {module.status !== 'locked' && (
                    <svg
                      className={`h-5 w-5 text-gray-500 transform transition-transform ${
                        expandedModules.has(module.id) ? 'rotate-90' : ''
                      }`}
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path>
                    </svg>
                  )}
                </div>
              </div>
              
              {expandedModules.has(module.id) && (
                <div className="border-t">
                  <div className="p-4 bg-gray-50">
                    <div className="text-sm font-medium mb-2">Lessons</div>
                    
                    <div className="space-y-2">
                      {module.lessons.map((lesson) => (
                        <div key={lesson.id}>
                          <div
                            className={`flex items-center justify-between p-3 rounded-md cursor-pointer ${
                              lesson.status === 'locked' ? 'bg-gray-100' : 'bg-white hover:bg-gray-100'
                            }`}
                            onClick={() => {
                              if (lesson.status !== 'locked') {
                                toggleLesson(lesson.id);
                                onLessonSelect(module.id, lesson.id);
                              }
                            }}
                          >
                            <div className="flex items-center">
                              <div className="mr-3">
                                {getStatusIndicator(lesson.status)}
                              </div>
                              <div>
                                <div className="font-medium">{lesson.name}</div>
                                <div className="text-xs text-gray-500">{formatDuration(lesson.estimatedDuration)}</div>
                              </div>
                            </div>
                            
                            <div className="flex items-center">
                              <div className="mr-2 text-sm font-medium">
                                {lesson.status !== 'not_started' ? `${lesson.progress}%` : ''}
                              </div>
                              
                              {lesson.status !== 'locked' && (
                                <svg
                                  className={`h-5 w-5 text-gray-500 transform transition-transform ${
                                    expandedLessons.has(lesson.id) ? 'rotate-90' : ''
                                  }`}
                                  fill="none"
                                  stroke="currentColor"
                                  viewBox="0 0 24 24"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path>
                                </svg>
                              )}
                            </div>
                          </div>
                          
                          {expandedLessons.has(lesson.id) && (
                            <div className="mt-2 ml-8 space-y-2">
                              {lesson.exercises.map((exercise) => (
                                <div
                                  key={exercise.id}
                                  className={`flex items-center justify-between p-3 rounded-md cursor-pointer ${
                                    exercise.status === 'locked' ? 'bg-gray-100' : 'bg-white hover:bg-gray-100'
                                  }`}
                                  onClick={() => {
                                    if (exercise.status !== 'locked') {
                                      onExerciseSelect(module.id, lesson.id, exercise.id);
                                    }
                                  }}
                                >
                                  <div className="flex items-center">
                                    <div className="mr-3">
                                      {getStatusIndicator(exercise.status)}
                                    </div>
                                    <div>
                                      <div className="font-medium">{exercise.name}</div>
                                      <div className="flex items-center mt-1">
                                        {getExerciseTypeBadge(exercise.type)}
                                        {exercise.duration && (
                                          <span className="ml-2 text-xs text-gray-500">
                                            {formatDuration(exercise.duration)}
                                          </span>
                                        )}
                                      </div>
                                    </div>
                                  </div>
                                  
                                  <div>
                                    {exercise.score !== undefined && (
                                      <div className="text-sm font-medium">
                                        Score: {exercise.score}%
                                      </div>
                                    )}
                                    {exercise.attempts > 0 && (
                                      <div className="text-xs text-gray-500">
                                        Attempts: {exercise.attempts}{exercise.maxAttempts ? `/${exercise.maxAttempts}` : ''}
                                      </div>
                                    )}
                                  </div>
                                </div>
                              ))}
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

// src/frontend/components/common/ProgressTrackingWidget.tsx
import React from 'react';
import { Card } from '../ui/Card';
import { Link } from 'react-router-dom';

// Types
export interface ModuleProgress {
  id: string;
  name: string;
  progress: number;
  status: 'not_started' | 'in_progress' | 'completed';
  estimatedTimeRemaining?: number; // in minutes
  dueDate?: Date;
}

export interface ProgramProgress {
  id: string;
  name: string;
  progress: number;
  modules: ModuleProgress[];
  startDate: Date;
  endDate?: Date;
  status: 'not_started' | 'in_progress' | 'completed' | 'overdue';
  overallScore?: number;
}

// Progress Bar Component
interface ProgressBarProps {
  progress: number;
  status: 'not_started' | 'in_progress' | 'completed' | 'overdue';
  showPercentage?: boolean;
  height?: 'sm' | 'md' | 'lg';
}

export const ProgressBar: React.FC<ProgressBarProps> = ({
  progress,
  status,
  showPercentage = true,
  height = 'md'
}) => {
  const heightClass = {
    sm: 'h-1.5',
    md: 'h-2.5',
    lg: 'h-4'
  }[height];
  
  const getColorClass = () => {
    switch (status) {
      case 'completed':
        return 'bg-green-600';
      case 'in_progress':
        return 'bg-blue-600';
      case 'overdue':
        return 'bg-red-600';
      case 'not_started':
      default:
        return 'bg-gray-600';
    }
  };
  
  return (
    <div>
      {showPercentage && (
        <div className="flex justify-between text-xs text-gray-500 mb-1">
          <span>Progress</span>
          <span>{progress}%</span>
        </div>
      )}
      <div className={`w-full bg-gray-200 rounded-full ${heightClass}`}>
        <div 
          className={`${heightClass} rounded-full ${getColorClass()}`} 
          style={{ width: `${progress}%` }}
        ></div>
      </div>
    </div>
  );
};

// Status Badge Component
interface StatusBadgeProps {
  status: 'not_started' | 'in_progress' | 'completed' | 'overdue';
}

export const StatusBadge: React.FC<StatusBadgeProps> = ({ status }) => {
  const getStatusConfig = () => {
    switch (status) {
      case 'completed':
        return {
          bgColor: 'bg-green-100',
          textColor: 'text-green-800',
          label: 'Completed'
        };
      case 'in_progress':
        return {
          bgColor: 'bg-blue-100',
          textColor: 'text-blue-800',
          label: 'In Progress'
        };
      case 'overdue':
        return {
          bgColor: 'bg-red-100',
          textColor: 'text-red-800',
          label: 'Overdue'
        };
      case 'not_started':
      default:
        return {
          bgColor: 'bg-gray-100',
          textColor: 'text-gray-800',
          label: 'Not Started'
        };
    }
  };
  
  const { bgColor, textColor, label } = getStatusConfig();
  
  return (
    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${bgColor} ${textColor}`}>
      {label}
    </span>
  );
};

// Time Formatter
const formatTime = (minutes: number): string => {
  if (minutes < 60) {
    return `${minutes}m`;
  }
  
  const hours = Math.floor(minutes / 60);
  const remainingMinutes = minutes % 60;
  
  if (remainingMinutes === 0) {
    return `${hours}h`;
  }
  
  return `${hours}h ${remainingMinutes}m`;
};

// Module Progress Item Component
interface ModuleProgressItemProps {
  module: ModuleProgress;
  onSelect?: (moduleId: string) => void;
}

export const ModuleProgressItem: React.FC<ModuleProgressItemProps> = ({
  module,
  onSelect
}) => {
  const handleClick = () => {
    if (onSelect) {
      onSelect(module.id);
    }
  };
  
  return (
    <div 
      className={`border rounded-md p-3 mb-2 ${onSelect ? 'cursor-pointer hover:bg-gray-50' : ''}`}
      onClick={handleClick}
    >
      <div className="flex justify-between items-center mb-2">
        <h4 className="text-sm font-medium">{module.name}</h4>
        <StatusBadge status={module.status} />
      </div>
      
      <ProgressBar
        progress={module.progress}
        status={module.status}
        height="sm"
      />
      
      <div className="mt-2 flex justify-between text-xs text-gray-500">
        {module.estimatedTimeRemaining !== undefined && (
          <span>Est. time: {formatTime(module.estimatedTimeRemaining)}</span>
        )}
        {module.dueDate && (
          <span>Due: {new Date(module.dueDate).toLocaleDateString()}</span>
        )}
      </div>
    </div>
  );
};

// Compact Progress Widget Component
interface CompactProgressWidgetProps {
  program: ProgramProgress;
  onSelectModule?: (moduleId: string) => void;
  showScore?: boolean;
}

export const CompactProgressWidget: React.FC<CompactProgressWidgetProps> = ({
  program,
  onSelectModule,
  showScore = true
}) => {
  return (
    <Card className="compact-progress-widget">
      <div className="flex justify-between items-center mb-3">
        <h3 className="text-base font-medium">{program.name}</h3>
        <StatusBadge status={program.status} />
      </div>
      
      <ProgressBar
        progress={program.progress}
        status={program.status}
      />
      
      <div className="mt-3 text-xs text-gray-500 flex justify-between">
        <span>Started: {new Date(program.startDate).toLocaleDateString()}</span>
        {program.endDate && (
          <span>Expected completion: {new Date(program.endDate).toLocaleDateString()}</span>
        )}
      </div>
      
      {showScore && program.overallScore !== undefined && (
        <div className="mt-2 text-sm">
          <span className="font-medium">Overall Score:</span> {program.overallScore}%
        </div>
      )}
      
      {program.modules.length > 0 && (
        <div className="mt-3">
          <div className="text-sm font-medium mb-2">Next Module:</div>
          <ModuleProgressItem
            module={program.modules.find(m => m.status === 'in_progress') || program.modules[0]}
            onSelect={onSelectModule}
          />
        </div>
      )}
    </Card>
  );
};

// Detailed Progress Widget Component
interface DetailedProgressWidgetProps {
  program: ProgramProgress;
  onSelectModule?: (moduleId: string) => void;
  showAllModules?: boolean;
  showViewAllLink?: boolean;
  viewAllUrl?: string;
}

export const DetailedProgressWidget: React.FC<DetailedProgressWidgetProps> = ({
  program,
  onSelectModule,
  showAllModules = false,
  showViewAllLink = true,
  viewAllUrl = `/programs/${program.id}`
}) => {
  // Determine which modules to show
  const displayModules = showAllModules 
    ? program.modules 
    : program.modules.filter(m => m.status !== 'completed').slice(0, 3);
  
  const hasMoreModules = !showAllModules && program.modules.length > displayModules.length;
  
  return (
    <Card className="detailed-progress-widget">
      <div className="flex justify-between items-center mb-3">
        <h3 className="text-lg font-medium">{program.name}</h3>
        <StatusBadge status={program.status} />
      </div>
      
      <div className="mb-4">
        <ProgressBar
          progress={program.progress}
          status={program.status}
          height="lg"
        />
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
        <div>
          <p className="text-sm text-gray-500">Start Date</p>
          <p className="font-medium">{new Date(program.startDate).toLocaleDateString()}</p>
        </div>
        
        {program.endDate && (
          <div>
            <p className="text-sm text-gray-500">Expected Completion</p>
            <p className="font-medium">{new Date(program.endDate).toLocaleDateString()}</p>
          </div>
        )}
        
        <div>
          <p className="text-sm text-gray-500">Modules</p>
          <p className="font-medium">
            {program.modules.filter(m => m.status === 'completed').length} of {program.modules.length} completed
          </p>
        </div>
        
        {program.overallScore !== undefined && (
          <div>
            <p className="text-sm text-gray-500">Overall Score</p>
            <p className="font-medium">{program.overallScore}%</p>
          </div>
        )}
      </div>
      
      <div className="border-t pt-4">
        <div className="flex justify-between items-center mb-3">
          <h4 className="text-base font-medium">
            {showAllModules ? 'All Modules' : 'Current Modules'}
          </h4>
        </div>
        
        <div className="space-y-3">
          {displayModules.map(module => (
            <ModuleProgressItem
              key={module.id}
              module={module}
              onSelect={onSelectModule}
            />
          ))}
          
          {hasMoreModules && showViewAllLink && (
            <div className="text-center mt-2">
              <Link to={viewAllUrl} className="text-sm text-blue-600 hover:text-blue-800">
                View all modules ({program.modules.length})
              </Link>
            </div>
          )}
        </div>
      </div>
    </Card>
  );
};

// Progress Overview Component (for multiple programs)
interface ProgressOverviewProps {
  programs: ProgramProgress[];
  onSelectProgram?: (programId: string) => void;
  onSelectModule?: (programId: string, moduleId: string) => void;
  maxDisplay?: number;
  showViewAllLink?: boolean;
  viewAllUrl?: string;
}

export const ProgressOverview: React.FC<ProgressOverviewProps> = ({
  programs,
  onSelectProgram,
  onSelectModule,
  maxDisplay = 3,
  showViewAllLink = true,
  viewAllUrl = '/programs'
}) => {
  // Sort programs - in progress first, then not started, then completed
  const sortedPrograms = [...programs].sort((a, b) => {
    const statusOrder = {
      'in_progress': 0,
      'overdue': 1,
      'not_started': 2,
      'completed': 3
    };
    
    return statusOrder[a.status] - statusOrder[b.status];
  });
  
  const displayPrograms = sortedPrograms.slice(0, maxDisplay);
  const hasMorePrograms = programs.length > maxDisplay;
  
  const handleModuleSelect = (programId: string, moduleId: string) => {
    if (onSelectModule) {
      onSelectModule(programId, moduleId);
    }
  };
  
  return (
    <Card className="progress-overview">
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-lg font-medium">Training Progress</h3>
        
        {hasMorePrograms && showViewAllLink && (
          <Link to={viewAllUrl} className="text-sm text-blue-600 hover:text-blue-800">
            View all programs ({programs.length})
          </Link>
        )}
      </div>
      
      {displayPrograms.length > 0 ? (
        <div className="space-y-6">
          {displayPrograms.map(program => (
            <div key={program.id} className="border-b pb-6 last:border-b-0 last:pb-0">
              <div 
                className={`mb-2 ${onSelectProgram ? 'cursor-pointer hover:text-blue-600' : ''}`}
                onClick={() => onSelectProgram && onSelectProgram(program.id)}
              >
                <div className="flex justify-between items-center">
                  <h4 className="text-base font-medium">{program.name}</h4>
                  <StatusBadge status={program.status} />
                </div>
                
                <div className="mt-2">
                  <ProgressBar
                    progress={program.progress}
                    status={program.status}
                  />
                </div>
              </div>
              
              {program.modules.length > 0 && (
                <div className="mt-3">
                  <div className="text-sm font-medium mb-2">Current Module:</div>
                  <ModuleProgressItem
                    module={program.modules.find(m => m.status === 'in_progress') || program.modules[0]}
                    onSelect={(moduleId) => handleModuleSelect(program.id, moduleId)}
                  />
                </div>
              )}
            </div>
          ))}
        </div>
      ) : (
        <div className="text-center py-6 text-gray-500">
          <p>No training programs available.</p>
        </div>
      )}
    </Card>
  );
};

# Frontend Project Structure for Advanced Pilot Training Platform

/advanced-pilot-training-platform
  /frontend
    /components
      /ui                    # Base UI components
        Button.tsx
        Input.tsx
        Select.tsx
        Modal.tsx
        Notification.tsx
      /forms                 # Form components
        FormBuilder.tsx
        ValidationSchema.ts
      /data-visualization    # Charts and data display
        Chart.tsx
        DataTable.tsx
        PerformanceGraph.tsx
        SimulatorTelemetry.tsx
      /syllabus              # Syllabus builder components
        SyllabusBuilder.tsx
        ModuleCard.tsx
        LessonEditor.tsx
        ComplianceIndicator.tsx
      /documents             # Document management
        DocumentUploader.tsx
        DocumentViewer.tsx
        ProcessingStatus.tsx
      /assessment            # Assessment interface
        GradingForm.tsx
        CompetencyMatrix.tsx
        PerformanceTrend.tsx
        BiometricDisplay.tsx
      /analytics             # Analytics dashboard
        DashboardLayout.tsx
        KPIWidget.tsx
        TraineePerformance.tsx
        FleetOverview.tsx
      /collaboration         # Collaboration tools
        Workspace.tsx
        ChatInterface.tsx
        VideoConference.tsx
        TaskManager.tsx
      /visualizations        # 3D/AR visualizations
        ThreeDViewer.tsx
        AROverlay.tsx
        KnowledgeMap.tsx
    /pages                   # Next.js pages
      index.tsx
      login.tsx
      dashboard.tsx
      syllabus/index.tsx
      syllabus/[id].tsx
      documents/index.tsx
      documents/[id].tsx
      assessment/index.tsx
      assessment/[id].tsx
      analytics/index.tsx
      profile/[id].tsx
      settings.tsx
      collaboration/workspace/[id].tsx
    /hooks                   # Custom React hooks
      useAuth.ts
      useDocuments.ts
      useSyllabus.ts
      useAssessment.ts
      useAnalytics.ts
      useRealtime.ts
      useOffline.ts
    /services                # API integrations
      api.ts                 # Base API configuration
      authService.ts
      documentService.ts
      syllabusService.ts
      assessmentService.ts
      schedulerService.ts
      analyticsService.ts
      collaborationService.ts
    /store                   # State management
      index.ts
      authSlice.ts
      documentSlice.ts
      syllabusSlice.ts
      assessmentSlice.ts
      uiSlice.ts
    /styles                  # Styling
      globals.css
      theme.ts
      tailwind.config.js
    /utils                   # Utility functions
      formatters.ts
      validators.ts
      errorHandlers.ts
      dataTransformers.ts
    /assets                  # Static assets
      /images
      /icons
      /3d-models
    /public                  # Public assets
    next.config.js           # Next.js configuration
    package.json             # Dependencies and scripts
    tsconfig.json            # TypeScript configuration
    .eslintrc.js             # ESLint configuration
    jest.config.js           # Jest configuration
    cypress.config.js        # Cypress configuration

/advanced-pilot-training-platform
  /frontend
    /app
      /dashboard
      /document-intelligence
      /syllabus-builder
      /analytics
      /compliance
      /debriefing
      /admin
      /community
      /auth
      layout.tsx
      page.tsx
    /components
      /ui
        /buttons
        /forms
        /modals
        /charts
        /tables
        /notifications
      /document-intelligence
      /syllabus-builder
      /analytics
      /compliance
      /debriefing
      /admin
      /community
      /auth
    /lib
      /api
      /hooks
      /utils
      /context
    /types
    /public
    /tests
    next.config.js
    package.json
    tailwind.config.js
    tsconfig.json

// src/frontend/components/reports/ReportGenerator.tsx
import React, { useState } from 'react';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { Alert } from '../ui/Alert';
import { Input } from '../ui/Input';
import { DataTable, Column } from '../ui/DataTable';

// Types
export enum ReportType {
  TRAINEE_PERFORMANCE = 'trainee_performance',
  PROGRAM_EFFECTIVENESS = 'program_effectiveness',
  COMPLIANCE_STATUS = 'compliance_status',
  INSTRUCTOR_ACTIVITY = 'instructor_activity',
  SIMULATOR_USAGE = 'simulator_usage',
  CUSTOM = 'custom'
}

export enum ReportFormat {
  PDF = 'pdf',
  EXCEL = 'excel',
  CSV = 'csv',
  HTML = 'html'
}

export interface ReportTemplate {
  id: string;
  name: string;
  description: string;
  type: ReportType;
  createdBy: string;
  createdAt: Date;
  lastModified?: Date;
  isSystem: boolean;
  sections: ReportSection[];
  filters: ReportFilter[];
}

export interface ReportSection {
  id: string;
  title: string;
  type: 'table' | 'chart' | 'text' | 'metrics';
  content: any;
  sortOrder: number;
}

export interface ReportFilter {
  id: string;
  name: string;
  field: string;
  operator: 'equals' | 'contains' | 'greater_than' | 'less_than' | 'between' | 'in';
  defaultValue?: any;
  options?: string[];
  required: boolean;
}

export interface ReportHistory {
  id: string;
  name: string;
  type: ReportType;
  generatedBy: string;
  generatedAt: Date;
  format: ReportFormat;
  filters: Record<string, any>;
  size: number;
  downloadUrl: string;
}

// Report Generator Component
interface ReportGeneratorProps {
  templates: ReportTemplate[];
  reportHistory: ReportHistory[];
  availablePrograms: { id: string; name: string }[];
  availableTrainees: { id: string; name: string }[];
  availableInstructors: { id: string; name: string }[];
  onGenerateReport: (templateId: string, filters: Record<string, any>, format: ReportFormat) => Promise<string>;
  onDownloadReport: (reportId: string) => Promise<void>;
  onDeleteReport: (reportId: string) => Promise<void>;
  onSaveTemplate: (template: Partial<ReportTemplate>) => Promise<string>;
}

export const ReportGenerator: React.FC<ReportGeneratorProps> = ({
  templates,
  reportHistory,
  availablePrograms,
  availableTrainees,
  availableInstructors,
  onGenerateReport,
  onDownloadReport,
  onDeleteReport,
  onSaveTemplate
}) => {
  const [selectedTemplateId, setSelectedTemplateId] = useState<string>('');
  const [selectedTemplate, setSelectedTemplate] = useState<ReportTemplate | null>(null);
  const [reportFilters, setReportFilters] = useState<Record<string, any>>({});
  const [reportFormat, setReportFormat] = useState<ReportFormat>(ReportFormat.PDF);
  const [reportName, setReportName] = useState<string>('');
  const [isGenerating, setIsGenerating] = useState<boolean>(false);
  const [alertMessage, setAlertMessage] = useState<{type: 'success' | 'error'; message: string} | null>(null);

  // Handle template selection
  const handleTemplateChange = (templateId: string) => {
    setSelectedTemplateId(templateId);
    const template = templates.find(t => t.id === templateId) || null;
    setSelectedTemplate(template);
    
    // Initialize filters with default values
    if (template) {
      const initialFilters: Record<string, any> = {};
      template.filters.forEach(filter => {
        if (filter.defaultValue !== undefined) {
          initialFilters[filter.field] = filter.defaultValue;
        }
      });
      setReportFilters(initialFilters);
      
      // Set default report name
      setReportName(`${template.name} - ${new Date().toLocaleDateString()}`);
    } else {
      setReportFilters({});
      setReportName('');
    }
  };

  // Handle filter change
  const handleFilterChange = (field: string, value: any) => {
    setReportFilters(prev => ({
      ...prev,
      [field]: value
    }));
  };

  // Check if all required filters are set
  const areRequiredFiltersSet = () => {
    if (!selectedTemplate) return false;
    
    return selectedTemplate.filters
      .filter(filter => filter.required)
      .every(filter => {
        const value = reportFilters[filter.field];
        return value !== undefined && value !== null && value !== '';
      });
  };

  // Handle report generation
  const handleGenerateReport = async () => {
    if (!selectedTemplate || !areRequiredFiltersSet()) {
      setAlertMessage({
        type: 'error',
        message: 'Please fill all required filters before generating the report.'
      });
      return;
    }
    
    setIsGenerating(true);
    
    try {
      const reportId = await onGenerateReport(selectedTemplate.id, reportFilters, reportFormat);
      
      setAlertMessage({
        type: 'success',
        message: 'Report generated successfully. You can download it from the history tab.'
      });
      
      // Reset form
      setSelectedTemplateId('');
      setSelectedTemplate(null);
      setReportFilters({});
      setReportName('');
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to generate report: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    } finally {
      setIsGenerating(false);
    }
  };

  // Format file size for display
  const formatFileSize = (bytes: number): string => {
    if (bytes === 0) return '0 Bytes';
    
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  // Get template type display name
  const getTemplateTypeName = (type: ReportType): string => {
    switch (type) {
      case ReportType.TRAINEE_PERFORMANCE:
        return 'Trainee Performance';
      case ReportType.PROGRAM_EFFECTIVENESS:
        return 'Program Effectiveness';
      case ReportType.COMPLIANCE_STATUS:
        return 'Compliance Status';
      case ReportType.INSTRUCTOR_ACTIVITY:
        return 'Instructor Activity';
      case ReportType.SIMULATOR_USAGE:
        return 'Simulator Usage';
      case ReportType.CUSTOM:
        return 'Custom Report';
      default:
        return type;
    }
  };

  // Report history table columns
  const historyColumns: Column<ReportHistory>[] = [
    {
      key: 'name',
      header: 'Report Name',
      render: (report) => report.name,
      sortable: true
    },
    {
      key: 'type',
      header: 'Type',
      render: (report) => getTemplateTypeName(report.type),
      sortable: true
    },
    {
      key: 'generatedAt',
      header: 'Generated',
      render: (report) => new Date(report.generatedAt).toLocaleString(),
      sortable: true
    },
    {
      key: 'generatedBy',
      header: 'Generated By',
      render: (report) => report.generatedBy,
      sortable: true
    },
    {
      key: 'format',
      header: 'Format',
      render: (report) => report.format.toUpperCase(),
      sortable: true
    },
    {
      key: 'size',
      header: 'Size',
      render: (report) => formatFileSize(report.size),
      sortable: true
    },
    {
      key: 'actions',
      header: 'Actions',
      render: (report) => (
        <div className="flex space-x-2">
          <button
            onClick={(e) => {
              e.stopPropagation();
              onDownloadReport(report.id);
            }}
            className="text-blue-600 hover:text-blue-900"
            title="Download"
          >
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
            </svg>
          </button>
          <button
            onClick={(e) => {
              e.stopPropagation();
              onDeleteReport(report.id);
            }}
            className="text-red-600 hover:text-red-900"
            title="Delete"
          >
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
            </svg>
          </button>
        </div>
      )
    }
  ];

  // Render filter input based on filter type
  const renderFilterInput = (filter: ReportFilter) => {
    const value = reportFilters[filter.field] || '';
    
    switch (filter.field) {
      case 'programId':
        return (
          <select
            className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
            value={value}
            onChange={(e) => handleFilterChange(filter.field, e.target.value)}
          >
            <option value="">Select Program</option>
            {availablePrograms.map(program => (
              <option key={program.id} value={program.id}>
                {program.name}
              </option>
            ))}
          </select>
        );
      case 'traineeId':
        return (
          <select
            className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
            value={value}
            onChange={(e) => handleFilterChange(filter.field, e.target.value)}
          >
            <option value="">Select Trainee</option>
            {availableTrainees.map(trainee => (
              <option key={trainee.id} value={trainee.id}>
                {trainee.name}
              </option>
            ))}
          </select>
        );
      case 'instructorId':
        return (
          <select
            className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
            value={value}
            onChange={(e) => handleFilterChange(filter.field, e.target.value)}
          >
            <option value="">Select Instructor</option>
            {availableInstructors.map(instructor => (
              <option key={instructor.id} value={instructor.id}>
                {instructor.name}
              </option>
            ))}
          </select>
        );
      case 'dateRange':
        return (
          <div className="flex space-x-2">
            <input
              type="date"
              className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
              value={value.start || ''}
              onChange={(e) => handleFilterChange(filter.field, { ...value, start: e.target.value })}
            />
            <input
              type="date"
              className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
              value={value.end || ''}
              onChange={(e) => handleFilterChange(filter.field, { ...value, end: e.target.value })}
            />
          </div>
        );
      case 'status':
        return (
          <select
            className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
            value={value}
            onChange={(e) => handleFilterChange(filter.field, e.target.value)}
          >
            <option value="">Select Status</option>
            <option value="active">Active</option>
            <option value="completed">Completed</option>
            <option value="in_progress">In Progress</option>
            <option value="on_hold">On Hold</option>
          </select>
        );
      default:
        if (filter.options && filter.options.length > 0) {
          return (
            <select
              className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
              value={value}
              onChange={(e) => handleFilterChange(filter.field, e.target.value)}
            >
              <option value="">Select {filter.name}</option>
              {filter.options.map(option => (
                <option key={option} value={option}>
                  {option}
                </option>
              ))}
            </select>
          );
        }
        
        return (
          <input
            type="text"
            className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
            value={value}
            onChange={(e) => handleFilterChange(filter.field, e.target.value)}
            placeholder={`Enter ${filter.name}`}
          />
        );
    }
  };

  return (
    <div className="report-generator">
      {alertMessage && (
        <Alert
          type={alertMessage.type}
          message={alertMessage.message}
          onClose={() => setAlertMessage(null)}
        />
      )}
      
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900">Report Generator</h1>
        <p className="text-gray-500">Generate custom reports from training data</p>
      </div>
      
      <div className="mb-6">
        <Card>
          <div className="mb-4">
            <h2 className="text-lg font-medium">Generate New Report</h2>
          </div>
          
          <div className="mb-4">
            <label htmlFor="report-template" className="block text-sm font-medium text-gray-700 mb-1">
              Report Template
            </label>
            <select
              id="report-template"
              className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
              value={selectedTemplateId}
              onChange={(e) => handleTemplateChange(e.target.value)}
            >
              <option value="">Select a template</option>
              {templates.map(template => (
                <option key={template.id} value={template.id}>
                  {template.name} ({getTemplateTypeName(template.type)})
                </option>
              ))}
            </select>
          </div>
          
          {selectedTemplate && (
            <>
              <div className="mb-4">
                <Input
                  label="Report Name"
                  value={reportName}
                  onChange={(e) => setReportName(e.target.value)}
                  required
                />
              </div>
              
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Report Format
                </label>
                <div className="flex flex-wrap gap-2">
                  {Object.values(ReportFormat).map(format => (
                    <button
                      key={format}
                      type="button"
                      className={`px-3 py-2 text-sm font-medium rounded ${
                        reportFormat === format
                          ? 'bg-blue-600 text-white'
                          : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                      }`}
                      onClick={() => setReportFormat(format)}
                    >
                      {format.toUpperCase()}
                    </button>
                  ))}
                </div>
              </div>
              
              {selectedTemplate.filters.length > 0 && (
                <div className="mb-4">
                  <h3 className="text-base font-medium mb-2">Filters</h3>
                  <div className="space-y-4">
                    {selectedTemplate.filters.map(filter => (
                      <div key={filter.id}>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          {filter.name}{filter.required ? ' *' : ''}
                        </label>
                        {renderFilterInput(filter)}
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              <div className="mb-4">
                <h3 className="text-base font-medium mb-2">Report Sections</h3>
                <div className="space-y-2">
                  {selectedTemplate.sections
                    .sort((a, b) => a.sortOrder - b.sortOrder)
                    .map(section => (
                      <div key={section.id} className="p-3 border rounded-md">
                        <h4 className="font-medium">{section.title}</h4>
                        <p className="text-sm text-gray-500 capitalize">{section.type}</p>
                      </div>
                    ))}
                </div>
              </div>
              
              <div className="flex justify-end">
                <Button
                  variant="primary"
                  onClick={handleGenerateReport}
                  isLoading={isGenerating}
                  disabled={isGenerating || !areRequiredFiltersSet() || !reportName}
                >
                  Generate Report
                </Button>
              </div>
            </>
          )}
        </Card>
      </div>
      
      <div>
        <Card>
          <div className="mb-4">
            <h2 className="text-lg font-medium">Report History</h2>
          </div>
          
          {reportHistory.length > 0 ? (
            <DataTable
              columns={historyColumns}
              data={reportHistory}
              keyExtractor={(report) => report.id}
              onRowClick={(report) => onDownloadReport(report.id)}
              pagination={{
                pageSize: 10,
                totalItems: reportHistory.length,
                currentPage: 1,
                onPageChange: () => {}
              }}
            />
          ) : (
            <div className="p-8 text-center text-gray-500">
              <p>No reports have been generated yet.</p>
            </div>
          )}
        </Card>
      </div>
    </div>
  );
};

// src/frontend/components/search/SearchComponent.tsx
import React, { useState, useEffect, useRef, useCallback } from 'react';
import { Button } from '../ui/Button';
import { Card } from '../ui/Card';
import { debounce } from 'lodash';

// Types
export interface SearchFilter {
  field: string;
  operator: 'equals' | 'contains' | 'startsWith' | 'endsWith' | 'greaterThan' | 'lessThan' | 'between' | 'in';
  value: string | number | boolean | string[] | number[] | [number, number];
  label?: string;
}

export interface SearchField {
  id: string;
  label: string;
  type: 'text' | 'number' | 'date' | 'boolean' | 'select' | 'multiselect';
  operators: ('equals' | 'contains' | 'startsWith' | 'endsWith' | 'greaterThan' | 'lessThan' | 'between' | 'in')[];
  options?: { value: string; label: string }[]; // For select/multiselect types
}

export interface SearchConfig {
  entityType: string;
  fields: SearchField[];
}

export interface SearchResult<T> {
  results: T[];
  totalCount: number;
  page: number;
  pageSize: number;
  totalPages: number;
}

// Components
interface SearchBarProps {
  placeholder?: string;
  value: string;
  onChange: (value: string) => void;
  onSearch: () => void;
  onClear: () => void;
  onAdvancedSearch?: () => void;
}

export const SearchBar: React.FC<SearchBarProps> = ({
  placeholder = 'Search...',
  value,
  onChange,
  onSearch,
  onClear,
  onAdvancedSearch
}) => {
  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      onSearch();
    } else if (e.key === 'Escape') {
      onClear();
    }
  };

  return (
    <div className="relative flex w-full items-center">
      <div className="relative flex-grow">
        <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
          <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </div>
        <input
          type="text"
          value={value}
          onChange={(e) => onChange(e.target.value)}
          onKeyDown={handleKeyDown}
          className="block w-full pl-10 pr-20 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          placeholder={placeholder}
        />
        {value && (
          <button
            type="button"
            onClick={onClear}
            className="absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400 hover:text-gray-600"
          >
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        )}
      </div>
      
      <div className="ml-2 flex space-x-2">
        <Button
          variant="primary"
          onClick={onSearch}
        >
          Search
        </Button>
        
        {onAdvancedSearch && (
          <Button
            variant="outline"
            onClick={onAdvancedSearch}
          >
            Advanced
          </Button>
        )}
      </div>
    </div>
  );
};

interface FilterItemProps {
  filter: SearchFilter;
  fields: SearchField[];
  onUpdate: (filter: SearchFilter) => void;
  onRemove: () => void;
}

const FilterItem: React.FC<FilterItemProps> = ({
  filter,
  fields,
  onUpdate,
  onRemove
}) => {
  // Find the selected field
  const selectedField = fields.find(f => f.id === filter.field);
  
  // Handle field change
  const handleFieldChange = (fieldId: string) => {
    const field = fields.find(f => f.id === fieldId);
    if (field) {
      // Reset operator and value when field changes
      onUpdate({
        field: fieldId,
        operator: field.operators[0],
        value: field.type === 'select' && field.options ? field.options[0].value : ''
      });
    }
  };
  
  // Handle operator change
  const handleOperatorChange = (operator: string) => {
    onUpdate({
      ...filter,
      operator: operator as SearchFilter['operator'],
      // Reset value if switching to or from 'between' or 'in'
      value: operator === 'between' ? [0, 0] : 
             operator === 'in' ? [] : 
             typeof filter.value === 'object' ? '' : filter.value
    });
  };
  
  // Handle value change for text, number, date
  const handleValueChange = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    onUpdate({
      ...filter,
      value: event.target.value
    });
  };
  
  // Handle value change for range (between)
  const handleRangeValueChange = (index: number, value: number) => {
    if (Array.isArray(filter.value) && filter.value.length === 2) {
      const newValue = [...filter.value] as [number, number];
      newValue[index] = value;
      onUpdate({
        ...filter,
        value: newValue
      });
    }
  };
  
  // Handle select multiple values (in)
  const handleMultiSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    const options = event.target.options;
    const values = [];
    for (let i = 0; i < options.length; i++) {
      if (options[i].selected) {
        values.push(options[i].value);
      }
    }
    onUpdate({
      ...filter,
      value: values
    });
  };
  
  // Render value input based on field type and operator
  const renderValueInput = () => {
    if (!selectedField) return null;
    
    if (filter.operator === 'between' && (selectedField.type === 'number' || selectedField.type === 'date')) {
      const values = Array.isArray(filter.value) ? filter.value : [0, 0];
      return (
        <div className="flex space-x-2 items-center">
          <input
            type={selectedField.type}
            value={values[0]}
            onChange={(e) => handleRangeValueChange(0, Number(e.target.value))}
            className="w-24 block pl-3 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
          <span>and</span>
          <input
            type={selectedField.type}
            value={values[1]}
            onChange={(e) => handleRangeValueChange(1, Number(e.target.value))}
            className="w-24 block pl-3 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
      );
    }
    
    if (filter.operator === 'in' && selectedField.type === 'select' && selectedField.options) {
      return (
        <select
          multiple
          value={Array.isArray(filter.value) ? filter.value as string[] : []}
          onChange={handleMultiSelectChange}
          className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
        >
          {selectedField.options.map(option => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
      );
    }
    
    if (selectedField.type === 'select' && selectedField.options) {
      return (
        <select
          value={filter.value as string}
          onChange={handleValueChange}
          className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
        >
          {selectedField.options.map(option => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
      );
    }
    
    if (selectedField.type === 'boolean') {
      return (
        <select
          value={filter.value.toString()}
          onChange={handleValueChange}
          className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
        >
          <option value="true">Yes</option>
          <option value="false">No</option>
        </select>
      );
    }
    
    return (
      <input
        type={selectedField.type}
        value={filter.value as string}
        onChange={handleValueChange}
        className="block w-full pl-3 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
      />
    );
  };
  
  return (
    <div className="flex flex-wrap items-center gap-2 p-3 border border-gray-200 rounded-md bg-gray-50">
      <div className="flex-grow-0">
        <select
          value={filter.field}
          onChange={(e) => handleFieldChange(e.target.value)}
          className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
        >
          {fields.map(field => (
            <option key={field.id} value={field.id}>
              {field.label}
            </option>
          ))}
        </select>
      </div>
      
      {selectedField && (
        <div className="flex-grow-0">
          <select
            value={filter.operator}
            onChange={(e) => handleOperatorChange(e.target.value)}
            className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
          >
            {selectedField.operators.map(op => (
              <option key={op} value={op}>
                {op === 'equals' ? 'equals' :
                 op === 'contains' ? 'contains' :
                 op === 'startsWith' ? 'starts with' :
                 op === 'endsWith' ? 'ends with' :
                 op === 'greaterThan' ? 'greater than' :
                 op === 'lessThan' ? 'less than' :
                 op === 'between' ? 'between' :
                 op === 'in' ? 'is one of' : op}
              </option>
            ))}
          </select>
        </div>
      )}
      
      <div className="flex-grow">{renderValueInput()}</div>
      
      <div className="flex-shrink-0">
        <button
          type="button"
          onClick={onRemove}
          className="p-2 text-gray-400 hover:text-gray-600"
        >
          <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    </div>
  );
};

interface AdvancedSearchProps {
  config: SearchConfig;
  filters: SearchFilter[];
  onUpdateFilters: (filters: SearchFilter[]) => void;
  onSearch: () => void;
  onClose: () => void;
}

export const AdvancedSearch: React.FC<AdvancedSearchProps> = ({
  config,
  filters,
  onUpdateFilters,
  onSearch,
  onClose
}) => {
  // Add a new filter
  const handleAddFilter = () => {
    // Get the first available field
    const firstField = config.fields[0];
    const newFilter: SearchFilter = {
      field: firstField.id,
      operator: firstField.operators[0],
      value: firstField.type === 'select' && firstField.options ? firstField.options[0].value : ''
    };
    
    onUpdateFilters([...filters, newFilter]);
  };
  
  // Update a specific filter
  const handleUpdateFilter = (index: number, updatedFilter: SearchFilter) => {
    const newFilters = [...filters];
    newFilters[index] = updatedFilter;
    onUpdateFilters(newFilters);
  };
  
  // Remove a filter
  const handleRemoveFilter = (index: number) => {
    const newFilters = filters.filter((_, i) => i !== index);
    onUpdateFilters(newFilters);
  };
  
  // Reset all filters
  const handleResetFilters = () => {
    onUpdateFilters([]);
  };
  
  return (
    <Card>
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-lg font-medium">Advanced Search</h2>
        <Button
          variant="outline"
          size="small"
          onClick={onClose}
        >
          Close
        </Button>
      </div>
      
      <div className="space-y-3 mb-4">
        {filters.map((filter, index) => (
          <FilterItem
            key={index}
            filter={filter}
            fields={config.fields}
            onUpdate={(updatedFilter) => handleUpdateFilter(index, updatedFilter)}
            onRemove={() => handleRemoveFilter(index)}
          />
        ))}
        
        {filters.length === 0 && (
          <div className="text-center py-4 text-gray-500">
            No filters added. Click "Add Filter" to start building your search query.
          </div>
        )}
      </div>
      
      <div className="flex flex-wrap gap-2">
        <Button
          variant="outline"
          onClick={handleAddFilter}
        >
          Add Filter
        </Button>
        
        {filters.length > 0 && (
          <Button
            variant="outline"
            onClick={handleResetFilters}
          >
            Reset Filters
          </Button>
        )}
        
        <div className="ml-auto">
          <Button
            variant="primary"
            onClick={onSearch}
            disabled={filters.length === 0}
          >
            Search
          </Button>
        </div>
      </div>
    </Card>
  );
};

// Main Search Component
interface SearchComponentProps<T> {
  config: SearchConfig;
  placeholder?: string;
  initialFilters?: SearchFilter[];
  onSearch: (query: string, filters: SearchFilter[], page: number, pageSize: number) => Promise<SearchResult<T>>;
  renderResult: (item: T) => React.ReactNode;
  keyExtractor: (item: T) => string;
  onSelectItem?: (item: T) => void;
}

export function SearchComponent<T>({
  config,
  placeholder,
  initialFilters = [],
  onSearch,
  renderResult,
  keyExtractor,
  onSelectItem
}: SearchComponentProps<T>) {
  const [query, setQuery] = useState('');
  const [filters, setFilters] = useState<SearchFilter[]>(initialFilters);
  const [showAdvanced, setShowAdvanced] = useState(false);
  const [searchResults, setSearchResults] = useState<SearchResult<T> | null>(null);
  const [isSearching, setIsSearching] = useState(false);
  const [page, setPage] = useState(1);
  const [pageSize] = useState(10);
  
  // Debounced search function
  const debouncedSearch = useCallback(
    debounce(async (searchQuery: string, searchFilters: SearchFilter[], currentPage: number, size: number) => {
      setIsSearching(true);
      try {
        const results = await onSearch(searchQuery, searchFilters, currentPage, size);
        setSearchResults(results);
      } catch (error) {
        console.error('Search error:', error);
      } finally {
        setIsSearching(false);
      }
    }, 300),
    [onSearch]
  );
  
  // Handle search
  const handleSearch = useCallback(() => {
    debouncedSearch(query, filters, page, pageSize);
  }, [query, filters, page, pageSize, debouncedSearch]);
  
  // Clear search
  const handleClear = () => {
    setQuery('');
    setSearchResults(null);
  };
  
  // Handle pagination
  const handlePageChange = (newPage: number) => {
    setPage(newPage);
  };
  
  // Search when filters, query, or page changes
  useEffect(() => {
    if (query || filters.length > 0) {
      handleSearch();
    } else if (searchResults) {
      setSearchResults(null);
    }
  }, [query, filters, page, handleSearch, searchResults]);
  
  return (
    <div className="space-y-4">
      <SearchBar
        placeholder={placeholder}
        value={query}
        onChange={setQuery}
        onSearch={handleSearch}
        onClear={handleClear}
        onAdvancedSearch={() => setShowAdvanced(!showAdvanced)}
      />
      
      {showAdvanced && (
        <AdvancedSearch
          config={config}
          filters={filters}
          onUpdateFilters={setFilters}
          onSearch={handleSearch}
          onClose={() => setShowAdvanced(false)}
        />
      )}
      
      {isSearching && (
        <div className="flex justify-center py-4">
          <svg className="animate-spin h-5 w-5 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        </div>
      )}
      
      {searchResults && !isSearching && (
        <Card>
          <div className="mb-4">
            <h3 className="text-lg font-medium">
              Results ({searchResults.totalCount})
            </h3>
          </div>
          
          {searchResults.results.length > 0 ? (
            <div className="space-y-4">
              <div className="divide-y">
                {searchResults.results.map(item => (
                  <div 
                    key={keyExtractor(item)} 
                    className={`py-4 ${onSelectItem ? 'cursor-pointer hover:bg-gray-50' : ''}`}
                    onClick={() => onSelectItem && onSelectItem(item)}
                  >
                    {renderResult(item)}
                  </div>
                ))}
              </div>
              
              {/* Pagination */}
              {searchResults.totalPages > 1 && (
                <div className="flex items-center justify-between">
                  <div className="text-sm text-gray-700">
                    Showing <span className="font-medium">{(searchResults.page - 1) * searchResults.pageSize + 1}</span> to{' '}
                    <span className="font-medium">
                      {Math.min(searchResults.page * searchResults.pageSize, searchResults.totalCount)}
                    </span>{' '}
                    of <span className="font-medium">{searchResults.totalCount}</span> results
                  </div>
                  
                  <div className="flex space-x-2">
                    <Button
                      variant="outline"
                      size="small"
                      onClick={() => handlePageChange(page - 1)}
                      disabled={page === 1}
                    >
                      Previous
                    </Button>
                    
                    <Button
                      variant="outline"
                      size="small"
                      onClick={() => handlePageChange(page + 1)}
                      disabled={page === searchResults.totalPages}
                    >
                      Next
                    </Button>
                  </div>
                </div>
              )}
            </div>
          ) : (
            <div className="text-center py-8 text-gray-500">
              No results found.
            </div>
          )}
        </Card>
      )}
    </div>
  );
}

// Example usage:
/*
import { SearchComponent, SearchFilter, SearchConfig } from './SearchComponent';

// Define your search configuration
const searchConfig: SearchConfig = {
  entityType: 'trainee',
  fields: [
    {
      id: 'name',
      label: 'Name',
      type: 'text',
      operators: ['contains', 'equals', 'startsWith']
    },
    {
      id: 'email',
      label: 'Email',
      type: 'text',
      operators: ['contains', 'equals', 'endsWith']
    },
    {
      id: 'status',
      label: 'Status',
      type: 'select',
      operators: ['equals', 'in'],
      options: [
        { value: 'active', label: 'Active' },
        { value: 'inactive', label: 'Inactive' },
        { value: 'on_leave', label: 'On Leave' }
      ]
    },
    {
      id: 'progress',
      label: 'Progress',
      type: 'number',
      operators: ['equals', 'greaterThan', 'lessThan', 'between']
    },
    {
      id: 'enrollmentDate',
      label: 'Enrollment Date',
      type: 'date',
      operators: ['equals', 'greaterThan', 'lessThan', 'between']
    }
  ]
};

// Your component
function TraineeSearch() {
  const handleSearch = async (
    query: string, 
    filters: SearchFilter[], 
    page: number, 
    pageSize: number
  ) => {
    // Call your API here
    // Return a SearchResult object
    return {
      results: [],
      totalCount: 0,
      page,
      pageSize,
      totalPages: 0
    };
  };

  return (
    <SearchComponent
      config={searchConfig}
      placeholder="Search trainees..."
      onSearch={handleSearch}
      renderResult={(trainee) => (
        <div>
          <div className="font-medium">{trainee.name}</div>
          <div className="text-sm text-gray-500">{trainee.email}</div>
        </div>
      )}
      keyExtractor={(trainee) => trainee.id}
      onSelectItem={(trainee) => {
        // Handle trainee selection
      }}
    />
  );
}
*/
// src/frontend/components/settings/SettingsPage.tsx
import React, { useState } from 'react';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { Alert } from '../ui/Alert';
import { Input } from '../ui/Input';
import { Tabs, Tab } from '../ui/Tabs';
import { useAuth } from '../auth/UserAuth';

// Types
export interface GeneralSettings {
  dateFormat: string;
  timeFormat: string;
  language: string;
  timeZone: string;
  defaultDashboard: 'overview' | 'analytics' | 'compliance' | 'syllabus';
}

export interface NotificationSettings {
  emailNotifications: boolean;
  inAppNotifications: boolean;
  pushNotifications: boolean;
  emailDigestFrequency: 'immediately' | 'daily' | 'weekly' | 'never';
  notifyOnAssessmentCreated: boolean;
  notifyOnAssessmentGraded: boolean;
  notifyOnDocumentUploaded: boolean;
  notifyOnSyllabusChanges: boolean;
  notifyOnComplianceIssues: boolean;
}

export interface PrivacySettings {
  shareProgressWithInstructors: boolean;
  shareProgressWithOtherTrainees: boolean;
  allowAnalyticsCollection: boolean;
  allowAutomaticErrorReporting: boolean;
}

export interface SecuritySettings {
  twoFactorAuthentication: boolean;
  sessionTimeout: number; // minutes
  passwordExpiryDays: number;
  loginAttempts: number;
  ipRestriction: boolean;
  restrictedIpAddresses: string[];
}

export interface DisplaySettings {
  theme: 'light' | 'dark' | 'system';
  fontSize: 'small' | 'medium' | 'large';
  colorScheme: 'default' | 'high-contrast' | 'custom';
  customColors?: Record<string, string>;
  compactMode: boolean;
  showTips: boolean;
}

export interface IntegrationSettings {
  connectedApps: {
    id: string;
    name: string;
    connected: boolean;
    lastSync?: Date;
    permissions: string[];
  }[];
}

export interface SettingsData {
  general: GeneralSettings;
  notifications: NotificationSettings;
  privacy: PrivacySettings;
  security: SecuritySettings;
  display: DisplaySettings;
  integrations: IntegrationSettings;
}

interface SettingsPageProps {
  settings: SettingsData;
  onUpdateSettings: (section: keyof SettingsData, updates: any) => Promise<void>;
  onEnableTwoFactor: () => Promise<void>;
  onDisableTwoFactor: () => Promise<void>;
  onConnectApp: (appId: string) => Promise<void>;
  onDisconnectApp: (appId: string) => Promise<void>;
  availableTimeZones: { id: string; name: string }[];
  availableLanguages: { id: string; name: string }[];
}

export const SettingsPage: React.FC<SettingsPageProps> = ({
  settings,
  onUpdateSettings,
  onEnableTwoFactor,
  onDisableTwoFactor,
  onConnectApp,
  onDisconnectApp,
  availableTimeZones,
  availableLanguages
}) => {
  const { user } = useAuth();
  const [activeTab, setActiveTab] = useState<keyof SettingsData>('general');
  const [alertMessage, setAlertMessage] = useState<{ type: 'success' | 'error'; message: string } | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  
  // Form state
  const [generalForm, setGeneralForm] = useState(settings.general);
  const [notificationForm, setNotificationForm] = useState(settings.notifications);
  const [privacyForm, setPrivacyForm] = useState(settings.privacy);
  const [securityForm, setSecurityForm] = useState(settings.security);
  const [displayForm, setDisplayForm] = useState(settings.display);
  const [showCustomColors, setShowCustomColors] = useState(displayForm.colorScheme === 'custom');
  
  // Handle save settings
  const handleSaveSettings = async (section: keyof SettingsData) => {
    setIsLoading(true);
    try {
      let formData;
      switch (section) {
        case 'general':
          formData = generalForm;
          break;
        case 'notifications':
          formData = notificationForm;
          break;
        case 'privacy':
          formData = privacyForm;
          break;
        case 'security':
          formData = securityForm;
          break;
        case 'display':
          formData = displayForm;
          break;
        default:
          formData = {};
      }
      
      await onUpdateSettings(section, formData);
      setAlertMessage({
        type: 'success',
        message: 'Settings updated successfully.'
      });
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to update settings: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  // Handle enable/disable two-factor authentication
  const handleTwoFactorToggle = async () => {
    setIsLoading(true);
    try {
      if (securityForm.twoFactorAuthentication) {
        await onDisableTwoFactor();
        setSecurityForm({ ...securityForm, twoFactorAuthentication: false });
      } else {
        await onEnableTwoFactor();
        setSecurityForm({ ...securityForm, twoFactorAuthentication: true });
      }
      setAlertMessage({
        type: 'success',
        message: `Two-factor authentication ${securityForm.twoFactorAuthentication ? 'disabled' : 'enabled'} successfully.`
      });
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to ${securityForm.twoFactorAuthentication ? 'disable' : 'enable'} two-factor authentication: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  // Handle connect/disconnect app
  const handleAppConnectionToggle = async (appId: string, connected: boolean) => {
    setIsLoading(true);
    try {
      if (connected) {
        await onDisconnectApp(appId);
      } else {
        await onConnectApp(appId);
      }
      
      // Update local state
      const updatedApps = settings.integrations.connectedApps.map(app => 
        app.id === appId ? { ...app, connected: !connected } : app
      );
      
      setAlertMessage({
        type: 'success',
        message: `Application ${connected ? 'disconnected' : 'connected'} successfully.`
      });
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to ${connected ? 'disconnect' : 'connect'} application: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  // Handle theme change
  const handleThemeChange = (theme: 'light' | 'dark' | 'system') => {
    setDisplayForm(prev => ({ ...prev, theme }));
    // In a real implementation, this would also apply the theme immediately
  };
  
  // Handle color scheme change
  const handleColorSchemeChange = (colorScheme: 'default' | 'high-contrast' | 'custom') => {
    setDisplayForm(prev => ({ ...prev, colorScheme }));
    setShowCustomColors(colorScheme === 'custom');
  };
  
  const tabs: Tab[] = [
    {
      id: 'general',
      label: 'General',
      content: (
        <div>
          <h3 className="text-lg font-medium mb-4">General Settings</h3>
          
          <div className="grid grid-cols-1 gap-6 sm:grid-cols-2">
            <div>
              <label htmlFor="language" className="block text-sm font-medium text-gray-700 mb-1">
                Language
              </label>
              <select
                id="language"
                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={generalForm.language}
                onChange={(e) => setGeneralForm({ ...generalForm, language: e.target.value })}
              >
                {availableLanguages.map(language => (
                  <option key={language.id} value={language.id}>
                    {language.name}
                  </option>
                ))}
              </select>
            </div>
            
            <div>
              <label htmlFor="timeZone" className="block text-sm font-medium text-gray-700 mb-1">
                Time Zone
              </label>
              <select
                id="timeZone"
                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={generalForm.timeZone}
                onChange={(e) => setGeneralForm({ ...generalForm, timeZone: e.target.value })}
              >
                {availableTimeZones.map(timeZone => (
                  <option key={timeZone.id} value={timeZone.id}>
                    {timeZone.name}
                  </option>
                ))}
              </select>
            </div>
            
            <div>
              <label htmlFor="dateFormat" className="block text-sm font-medium text-gray-700 mb-1">
                Date Format
              </label>
              <select
                id="dateFormat"
                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={generalForm.dateFormat}
                onChange={(e) => setGeneralForm({ ...generalForm, dateFormat: e.target.value })}
              >
                <option value="MM/DD/YYYY">MM/DD/YYYY</option>
                <option value="DD/MM/YYYY">DD/MM/YYYY</option>
                <option value="YYYY-MM-DD">YYYY-MM-DD</option>
              </select>
            </div>
            
            <div>
              <label htmlFor="timeFormat" className="block text-sm font-medium text-gray-700 mb-1">
                Time Format
              </label>
              <select
                id="timeFormat"
                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={generalForm.timeFormat}
                onChange={(e) => setGeneralForm({ ...generalForm, timeFormat: e.target.value })}
              >
                <option value="12h">12-hour (1:30 PM)</option>
                <option value="24h">24-hour (13:30)</option>
              </select>
            </div>
            
            <div className="sm:col-span-2">
              <label htmlFor="defaultDashboard" className="block text-sm font-medium text-gray-700 mb-1">
                Default Dashboard
              </label>
              <select
                id="defaultDashboard"
                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={generalForm.defaultDashboard}
                onChange={(e) => setGeneralForm({ ...generalForm, defaultDashboard: e.target.value as any })}
              >
                <option value="overview">Overview</option>
                <option value="analytics">Analytics</option>
                <option value="compliance">Compliance</option>
                <option value="syllabus">Syllabus</option>
              </select>
            </div>
          </div>
          
          <div className="mt-6 flex justify-end">
            <Button
              variant="primary"
              onClick={() => handleSaveSettings('general')}
              isLoading={isLoading}
              disabled={isLoading}
            >
              Save Changes
            </Button>
          </div>
        </div>
      )
    },
    {
      id: 'notifications',
      label: 'Notifications',
      content: (
        <div>
          <h3 className="text-lg font-medium mb-4">Notification Settings</h3>
          
          <div className="mb-6">
            <h4 className="text-base font-medium mb-2">Notification Channels</h4>
            <div className="space-y-3">
              <div className="flex items-center">
                <input
                  id="emailNotifications"
                  type="checkbox"
                  className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                  checked={notificationForm.emailNotifications}
                  onChange={(e) => setNotificationForm({ ...notificationForm, emailNotifications: e.target.checked })}
                />
                <label htmlFor="emailNotifications" className="ml-2 block text-sm text-gray-900">
                  Email Notifications
                </label>
              </div>
              
              <div className="flex items-center">
                <input
                  id="inAppNotifications"
                  type="checkbox"
                  className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                  checked={notificationForm.inAppNotifications}
                  onChange={(e) => setNotificationForm({ ...notificationForm, inAppNotifications: e.target.checked })}
                />
                <label htmlFor="inAppNotifications" className="ml-2 block text-sm text-gray-900">
                  In-App Notifications
                </label>
              </div>
              
              <div className="flex items-center">
                <input
                  id="pushNotifications"
                  type="checkbox"
                  className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                  checked={notificationForm.pushNotifications}
                  onChange={(e) => setNotificationForm({ ...notificationForm, pushNotifications: e.target.checked })}
                />
                <label htmlFor="pushNotifications" className="ml-2 block text-sm text-gray-900">
                  Push Notifications
                </label>
              </div>
            </div>
          </div>
          
          <div className="mb-6">
            <h4 className="text-base font-medium mb-2">Email Digest Frequency</h4>
            <select
              id="emailDigestFrequency"
              className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
              value={notificationForm.emailDigestFrequency}
              onChange={(e) => setNotificationForm({ ...notificationForm, emailDigestFrequency: e.target.value as any })}
              disabled={!notificationForm.emailNotifications}
            >
              <option value="immediately">Immediately</option>
              <option value="daily">Daily Digest</option>
              <option value="weekly">Weekly Digest</option>
              <option value="never">Never</option>
            </select>
          </div>
          
          <div className="mb-6">
            <h4 className="text-base font-medium mb-2">Notification Events</h4>
            <div className="space-y-3">
              <div className="flex items-center">
                <input
                  id="notifyOnAssessmentCreated"
                  type="checkbox"
                  className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                  checked={notificationForm.notifyOnAssessmentCreated}
                  onChange={(e) => setNotificationForm({ ...notificationForm, notifyOnAssessmentCreated: e.target.checked })}
                />
                <label htmlFor="notifyOnAssessmentCreated" className="ml-2 block text-sm text-gray-900">
                  New Assessment Created
                </label>
              </div>
              
              <div className="flex items-center">
                <input
                  id="notifyOnAssessmentGraded"
                  type="checkbox"
                  className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                  checked={notificationForm.notifyOnAssessmentGraded}
                  onChange={(e) => setNotificationForm({ ...notificationForm, notifyOnAssessmentGraded: e.target.checked })}
                />
                <label htmlFor="notifyOnAssessmentGraded" className="ml-2 block text-sm text-gray-900">
                  Assessment Graded
                </label>
              </div>
              
              <div className="flex items-center">
                <input
                  id="notifyOnDocumentUploaded"
                  type="checkbox"
                  className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                  checked={notificationForm.notifyOnDocumentUploaded}
                  onChange={(e) => setNotificationForm({ ...notificationForm, notifyOnDocumentUploaded: e.target.checked })}
                />
                <label htmlFor="notifyOnDocumentUploaded" className="ml-2 block text-sm text-gray-900">
                  New Document Uploaded
                </label>
              </div>
              
              <div className="flex items-center">
                <input
                  id="notifyOnSyllabusChanges"
                  type="checkbox"
                  className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                  checked={notificationForm.notifyOnSyllabusChanges}
                  onChange={(e) => setNotificationForm({ ...notificationForm, notifyOnSyllabusChanges: e.target.checked })}
                />
                <label htmlFor="notifyOnSyllabusChanges" className="ml-2 block text-sm text-gray-900">
                  Syllabus Changes
                </label>
              </div>
              
              <div className="flex items-center">
                <input
                  id="notifyOnComplianceIssues"
                  type="checkbox"
                  className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                  checked={notificationForm.notifyOnComplianceIssues}
                  onChange={(e) => setNotificationForm({ ...notificationForm, notifyOnComplianceIssues: e.target.checked })}
                />
                <label htmlFor="notifyOnComplianceIssues" className="ml-2 block text-sm text-gray-900">
                  Compliance Issues
                </label>
              </div>
            </div>
          </div>
          
          <div className="mt-6 flex justify-end">
            <Button
              variant="primary"
              onClick={() => handleSaveSettings('notifications')}
              isLoading={isLoading}
              disabled={isLoading}
            >
              Save Changes
            </Button>
          </div>
        </div>
      )
    },
    {
      id: 'privacy',
      label: 'Privacy',
      content: (
        <div>
          <h3 className="text-lg font-medium mb-4">Privacy Settings</h3>
          
          <div className="space-y-6">
            <div>
              <h4 className="text-base font-medium mb-2">Data Sharing</h4>
              <div className="space-y-3">
                <div className="flex items-center">
                  <input
                    id="shareProgressWithInstructors"
                    type="checkbox"
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    checked={privacyForm.shareProgressWithInstructors}
                    onChange={(e) => setPrivacyForm({ ...privacyForm, shareProgressWithInstructors: e.target.checked })}
                  />
                  <label htmlFor="shareProgressWithInstructors" className="ml-2 block text-sm text-gray-900">
                    Share my progress with instructors
                  </label>
                </div>
                
                <div className="flex items-center">
                  <input
                    id="shareProgressWithOtherTrainees"
                    type="checkbox"
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    checked={privacyForm.shareProgressWithOtherTrainees}
                    onChange={(e) => setPrivacyForm({ ...privacyForm, shareProgressWithOtherTrainees: e.target.checked })}
                  />
                  <label htmlFor="shareProgressWithOtherTrainees" className="ml-2 block text-sm text-gray-900">
                    Share my progress with other trainees
                  </label>
                </div>
              </div>
            </div>
            
            <div>
              <h4 className="text-base font-medium mb-2">Analytics & Reporting</h4>
              <div className="space-y-3">
                <div className="flex items-center">
                  <input
                    id="allowAnalyticsCollection"
                    type="checkbox"
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    checked={privacyForm.allowAnalyticsCollection}
                    onChange={(e) => setPrivacyForm({ ...privacyForm, allowAnalyticsCollection: e.target.checked })}
                  />
                  <label htmlFor="allowAnalyticsCollection" className="ml-2 block text-sm text-gray-900">
                    Allow anonymous usage data collection
                  </label>
                </div>
                
                <div className="flex items-center">
                  <input
                    id="allowAutomaticErrorReporting"
                    type="checkbox"
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    checked={privacyForm.allowAutomaticErrorReporting}
                    onChange={(e) => setPrivacyForm({ ...privacyForm, allowAutomaticErrorReporting: e.target.checked })}
                  />
                  <label htmlFor="allowAutomaticErrorReporting" className="ml-2 block text-sm text-gray-900">
                    Allow automatic error reporting
                  </label>
                </div>
              </div>
            </div>
            
            <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4">
              <div className="flex">
                <div className="flex-shrink-0">
                  <svg className="h-5 w-5 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
                  </svg>
                </div>
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-yellow-800">Privacy Notice</h3>
                  <div className="mt-2 text-sm text-yellow-700">
                    <p>
                      Your privacy settings affect how your data is used within the platform. 
                      For more information on our data handling practices, please refer to our 
                      <a href="/privacy-policy" className="font-medium underline hover:text-yellow-600"> Privacy Policy</a>.
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div className="mt-6 flex justify-end">
            <Button
              variant="primary"
              onClick={() => handleSaveSettings('privacy')}
              isLoading={isLoading}
              disabled={isLoading}
            >
              Save Changes
            </Button>
          </div>
        </div>
      )
    },
    {
      id: 'security',
      label: 'Security',
      content: (
        <div>
          <h3 className="text-lg font-medium mb-4">Security Settings</h3>
          
          <div className="space-y-6">
            <div>
              <h4 className="text-base font-medium mb-2">Authentication</h4>
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <div>
                    <p className="text-sm font-medium text-gray-900">Two-Factor Authentication</p>
                    <p className="text-xs text-gray-500">Add an extra layer of security to your account</p>
                  </div>
                  <div className="flex items-center">
                    <Button
                      variant={securityForm.twoFactorAuthentication ? 'danger' : 'primary'}
                      size="small"
                      onClick={handleTwoFactorToggle}
                      isLoading={isLoading}
                      disabled={isLoading}
                    >
                      {securityForm.twoFactorAuthentication ? 'Disable' : 'Enable'}
                    </Button>
                  </div>
                </div>
                
                <div>
                  <label htmlFor="sessionTimeout" className="block text-sm font-medium text-gray-700 mb-1">
                    Session Timeout (minutes)
                  </label>
                  <input
                    type="number"
                    id="sessionTimeout"
                    min="5"
                    max="1440"
                    className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                    value={securityForm.sessionTimeout}
                    onChange={(e) => setSecurityForm({ ...securityForm, sessionTimeout: parseInt(e.target.value) })}
                  />
                </div>
                
                <div>
                  <label htmlFor="passwordExpiryDays" className="block text-sm font-medium text-gray-700 mb-1">
                    Password Expiry (days)
                  </label>
                  <input
                    type="number"
                    id="passwordExpiryDays"
                    min="0"
                    max="365"
                    className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                    value={securityForm.passwordExpiryDays}
                    onChange={(e) => setSecurityForm({ ...securityForm, passwordExpiryDays: parseInt(e.target.value) })}
                  />
                  <p className="text-xs text-gray-500 mt-1">Set to 0 for no expiry</p>
                </div>
                
                <div>
                  <label htmlFor="loginAttempts" className="block text-sm font-medium text-gray-700 mb-1">
                    Max Failed Login Attempts
                  </label>
                  <input
                    type="number"
                    id="loginAttempts"
                    min="1"
                    max="10"
                    className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                    value={securityForm.loginAttempts}
                    onChange={(e) => setSecurityForm({ ...securityForm, loginAttempts: parseInt(e.target.value) })}
                  />
                </div>
              </div>
            </div>
            
            <div>
              <div className="flex items-center justify-between mb-2">
                <h4 className="text-base font-medium">IP Restriction</h4>
                <div className="flex h-5 items-center">
                  <input
                    id="ipRestriction"
                    type="checkbox"
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    checked={securityForm.ipRestriction}
                    onChange={(e) => setSecurityForm({ ...securityForm, ipRestriction: e.target.checked })}
                  />
                </div>
              </div>
              
              {securityForm.ipRestriction && (
                <div>
                  <label htmlFor="restrictedIps" className="block text-sm font-medium text-gray-700 mb-1">
                    Allowed IP Addresses (one per line)
                  </label>
                  <textarea
                    id="restrictedIps"
                    rows={3}
                    className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                    value={securityForm.restrictedIpAddresses.join('\n')}
                    onChange={(e) => setSecurityForm({ 
                      ...securityForm, 
                      restrictedIpAddresses: e.target.value.split('\n').filter(ip => ip.trim() !== '') 
                    })}
                    placeholder="192.168.1.1"
                  />
                  <p className="text-xs text-gray-500 mt-1">Enter IP addresses or CIDR notation (e.g., 192.168.1.0/24)</p>
                </div>
              )}
            </div>
            
            <div className="bg-blue-50 border-l-4 border-blue-400 p-4">
              <div className="flex">
                <div className="flex-shrink-0">
                  <svg className="h-5 w-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-blue-800">Security Tip</h3>
                  <div className="mt-2 text-sm text-blue-700">
                    <p>
                      Enabling two-factor authentication significantly increases the security of your account.
                      We recommend enabling this feature for all administrator accounts.
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div className="mt-6 flex justify-end">
            <Button
              variant="primary"
              onClick={() => handleSaveSettings('security')}
              isLoading={isLoading}
              disabled={isLoading}
            >
              Save Changes
            </Button>
          </div>
        </div>
      )
    },
    {
      id: 'display',
      label: 'Display',
      content: (
        <div>
          <h3 className="text-lg font-medium mb-4">Display Settings</h3>
          
          <div className="space-y-6">
            <div>
              <h4 className="text-base font-medium mb-2">Theme</h4>
              <div className="grid grid-cols-3 gap-3">
                <div
                  className={`border rounded-lg p-4 flex flex-col items-center cursor-pointer ${
                    displayForm.theme === 'light' ? 'border-blue-500 bg-blue-50' : 'border-gray-200 hover:bg-gray-50'
                  }`}
                  onClick={() => handleThemeChange('light')}
                >
                  <div className="w-16 h-16 bg-white border border-gray-200 rounded-lg mb-2"></div>
                  <span className="text-sm font-medium">Light</span>
                </div>
                
                <div
                  className={`border rounded-lg p-4 flex flex-col items-center cursor-pointer ${
                    displayForm.theme === 'dark' ? 'border-blue-500 bg-blue-50' : 'border-gray-200 hover:bg-gray-50'
                  }`}
                  onClick={() => handleThemeChange('dark')}
                >
                  <div className="w-16 h-16 bg-gray-800 border border-gray-700 rounded-lg mb-2"></div>
                  <span className="text-sm font-medium">Dark</span>
                </div>
                
                <div
                  className={`border rounded-lg p-4 flex flex-col items-center cursor-pointer ${
                    displayForm.theme === 'system' ? 'border-blue-500 bg-blue-50' : 'border-gray-200 hover:bg-gray-50'
                  }`}
                  onClick={() => handleThemeChange('system')}
                >
                  <div className="w-16 h-16 bg-gradient-to-br from-white to-gray-800 border border-gray-200 rounded-lg mb-2"></div>
                  <span className="text-sm font-medium">System</span>
                </div>
              </div>
            </div>
            
            <div>
              <h4 className="text-base font-medium mb-2">Font Size</h4>
              <div className="grid grid-cols-3 gap-3">
                <div
                  className={`border rounded-lg p-4 flex flex-col items-center cursor-pointer ${
                    displayForm.fontSize === 'small' ? 'border-blue-500 bg-blue-50' : 'border-gray-200 hover:bg-gray-50'
                  }`}
                  onClick={() => setDisplayForm({ ...displayForm, fontSize: 'small' })}
                >
                  <span className="text-sm mb-2">Aa</span>
                  <span className="text-xs font-medium">Small</span>
                </div>
                
                <div
                  className={`border rounded-lg p-4 flex flex-col items-center cursor-pointer ${
                    displayForm.fontSize === 'medium' ? 'border-blue-500 bg-blue-50' : 'border-gray-200 hover:bg-gray-50'
                  }`}
                  onClick={() => setDisplayForm({ ...displayForm, fontSize: 'medium' })}
                >
                  <span className="text-base mb-2">Aa</span>
                  <span className="text-xs font-medium">Medium</span>
                </div>
                
                <div
                  className={`border rounded-lg p-4 flex flex-col items-center cursor-pointer ${
                    displayForm.fontSize === 'large' ? 'border-blue-500 bg-blue-50' : 'border-gray-200 hover:bg-gray-50'
                  }`}
                  onClick={() => setDisplayForm({ ...displayForm, fontSize: 'large' })}
                >
                  <span className="text-lg mb-2">Aa</span>
                  <span className="text-xs font-medium">Large</span>
                </div>
              </div>
            </div>
            
            <div>
              <h4 className="text-base font-medium mb-2">Color Scheme</h4>
              <div className="grid grid-cols-3 gap-3">
                <div
                  className={`border rounded-lg p-4 flex flex-col items-center cursor-pointer ${
                    displayForm.colorScheme === 'default' ? 'border-blue-500 bg-blue-50' : 'border-gray-200 hover:bg-gray-50'
                  }`}
                  onClick={() => handleColorSchemeChange('default')}
                >
                  <div className="w-16 h-8 rounded-lg overflow-hidden mb-2 flex">
                    <div className="w-1/3 h-full bg-blue-500"></div>
                    <div className="w-1/3 h-full bg-green-500"></div>
                    <div className="w-1/3 h-full bg-purple-500"></div>
                  </div>
                  <span className="text-xs font-medium">Default</span>
                </div>
                
                <div
                  className={`border rounded-lg p-4 flex flex-col items-center cursor-pointer ${
                    displayForm.colorScheme === 'high-contrast' ? 'border-blue-500 bg-blue-50' : 'border-gray-200 hover:bg-gray-50'
                  }`}
                  onClick={() => handleColorSchemeChange('high-contrast')}
                >
                  <div className="w-16 h-8 rounded-lg overflow-hidden mb-2 flex">
                    <div className="w-1/2 h-full bg-black"></div>
                    <div className="w-1/2 h-full bg-white border"></div>
                  </div>
                  <span className="text-xs font-medium">High Contrast</span>
                </div>
                
                <div
                  className={`border rounded-lg p-4 flex flex-col items-center cursor-pointer ${
                    displayForm.colorScheme === 'custom' ? 'border-blue-500 bg-blue-50' : 'border-gray-200 hover:bg-gray-50'
                  }`}
                  onClick={() => handleColorSchemeChange('custom')}
                >
                  <div className="w-16 h-8 rounded-lg overflow-hidden mb-2 border border-gray-200 bg-white flex items-center justify-center">
                    <svg className="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01"></path>
                    </svg>
                  </div>
                  <span className="text-xs font-medium">Custom</span>
                </div>
              </div>
            </div>
            
            {showCustomColors && (
              <div className="bg-gray-50 p-4 rounded-lg">
                <h4 className="text-sm font-medium mb-3">Custom Colors</h4>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label htmlFor="primaryColor" className="block text-xs font-medium text-gray-700 mb-1">
                      Primary Color
                    </label>
                    <input
                      type="color"
                      id="primaryColor"
                      className="block w-full h-8 border border-gray-300 rounded-md"
                      value={displayForm.customColors?.primary || '#3b82f6'}
                      onChange={(e) => setDisplayForm({
                        ...displayForm,
                        customColors: {
                          ...displayForm.customColors,
                          primary: e.target.value
                        }
                      })}
                    />
                  </div>
                  
                  <div>
                    <label htmlFor="secondaryColor" className="block text-xs font-medium text-gray-700 mb-1">
                      Secondary Color
                    </label>
                    <input
                      type="color"
                      id="secondaryColor"
                      className="block w-full h-8 border border-gray-300 rounded-md"
                      value={displayForm.customColors?.secondary || '#10b981'}
                      onChange={(e) => setDisplayForm({
                        ...displayForm,
                        customColors: {
                          ...displayForm.customColors,
                          secondary: e.target.value
                        }
                      })}
                    />
                  </div>
                  
                  <div>
                    <label htmlFor="accentColor" className="block text-xs font-medium text-gray-700 mb-1">
                      Accent Color
                    </label>
                    <input
                      type="color"
                      id="accentColor"
                      className="block w-full h-8 border border-gray-300 rounded-md"
                      value={displayForm.customColors?.accent || '#8b5cf6'}
                      onChange={(e) => setDisplayForm({
                        ...displayForm,
                        customColors: {
                          ...displayForm.customColors,
                          accent: e.target.value
                        }
                      })}
                    />
                  </div>
                  
                  <div>
                    <label htmlFor="backgroundColor" className="block text-xs font-medium text-gray-700 mb-1">
                      Background Color
                    </label>
                    <input
                      type="color"
                      id="backgroundColor"
                      className="block w-full h-8 border border-gray-300 rounded-md"
                      value={displayForm.customColors?.background || '#ffffff'}
                      onChange={(e) => setDisplayForm({
                        ...displayForm,
                        customColors: {
                          ...displayForm.customColors,
                          background: e.target.value
                        }
                      })}
                    />
                  </div>
                </div>
              </div>
            )}
            
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-900">Compact Mode</p>
                  <p className="text-xs text-gray-500">Reduce padding and spacing for denser layouts</p>
                </div>
                <div className="flex h-5 items-center">
                  <input
                    id="compactMode"
                    type="checkbox"
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    checked={displayForm.compactMode}
                    onChange={(e) => setDisplayForm({ ...displayForm, compactMode: e.target.checked })}
                  />
                </div>
              </div>
              
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-900">Show Tips</p>
                  <p className="text-xs text-gray-500">Display helpful tips and hints throughout the interface</p>
                </div>
                <div className="flex h-5 items-center">
                  <input
                    id="showTips"
                    type="checkbox"
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    checked={displayForm.showTips}
                    onChange={(e) => setDisplayForm({ ...displayForm, showTips: e.target.checked })}
                  />
                </div>
              </div>
            </div>
          </div>
          
          <div className="mt-6 flex justify-end">
            <Button
              variant="primary"
              onClick={() => handleSaveSettings('display')}
              isLoading={isLoading}
              disabled={isLoading}
            >
              Save Changes
            </Button>
          </div>
        </div>
      )
    },
    {
      id: 'integrations',
      label: 'Integrations',
      content: (
        <div>
          <h3 className="text-lg font-medium mb-4">Integrations & Connected Apps</h3>
          
          <div className="space-y-6">
            {settings.integrations.connectedApps.map(app => (
              <div key={app.id} className="border rounded-lg p-4">
                <div className="flex justify-between items-center">
                  <div>
                    <h4 className="text-lg font-medium">{app.name}</h4>
                    {app.connected && app.lastSync && (
                      <p className="text-sm text-gray-500">
                        Last synced: {new Date(app.lastSync).toLocaleString()}
                      </p>
                    )}
                  </div>
                  
                  <Button
                    variant={app.connected ? 'danger' : 'primary'}
                    size="small"
                    onClick={() => handleAppConnectionToggle(app.id, app.connected)}
                    isLoading={isLoading}
                    disabled={isLoading}
                  >
                    {app.connected ? 'Disconnect' : 'Connect'}
                  </Button>
                </div>
                
                {app.connected && (
                  <div className="mt-4">
                    <p className="text-sm font-medium mb-1">Permissions:</p>
                    <div className="flex flex-wrap gap-2">
                      {app.permissions.map((permission, index) => (
                        <span key={index} className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                          {permission}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            ))}
            
            {settings.integrations.connectedApps.length === 0 && (
              <div className="text-center py-8 border rounded-lg">
                <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z"></path>
                </svg>
                <h3 className="mt-2 text-sm font-medium text-gray-900">No connected apps</h3>
                <p className="mt-1 text-sm text-gray-500">
                  No applications are currently connected to your account.
                </p>
              </div>
            )}
            
            <div className="bg-blue-50 p-4 rounded-lg">
              <div className="flex">
                <div className="flex-shrink-0">
                  <svg className="h-5 w-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-blue-800">About Connected Apps</h3>
                  <div className="mt-2 text-sm text-blue-700">
                    <p>
                      Connected apps can access certain information from your account based on the permissions you grant.
                      You can disconnect an app at any time to revoke its access to your data.
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )
    }
  ];

  return (
    <div className="settings-page">
      {alertMessage && (
        <Alert
          type={alertMessage.type}
          message={alertMessage.message}
          onClose={() => setAlertMessage(null)}
        />
      )}
      
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900">Settings</h1>
        <p className="text-gray-500">Customize your experience and manage your account</p>
      </div>
      
      <Card>
        <Tabs
          tabs={tabs}
          defaultTabId="general"
          onChange={(tabId) => setActiveTab(tabId as keyof SettingsData)}
        />
      </Card>
    </div>
  );
};

// components/visualizations/SimulatorTelemetry.tsx
import React, { useRef, useEffect, useState } from 'react';
import * as THREE from 'three';
import analyticsService from '../../services/analyticsService';

interface SimulatorTelemetryProps {
  sessionId: string;
  metrics?: string[];
  startTime?: string;
  endTime?: string;
  resolution?: 'high' | 'medium' | 'low';
  width?: number;
  height?: number;
}

const SimulatorTelemetry: React.FC<SimulatorTelemetryProps> = ({
  sessionId,
  metrics = ['altitude', 'speed', 'heading', 'roll', 'pitch', 'yaw'],
  startTime,
  endTime,
  resolution = 'medium',
  width = 800,
  height = 600
}) => {
  const containerRef = useRef<HTMLDivElement>(null);
  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);
  const sceneRef = useRef<THREE.Scene | null>(null);
  const cameraRef = useRef<THREE.PerspectiveCamera | null>(null);
  const aircraftRef = useRef<THREE.Group | null>(null);
  const pathRef = useRef<THREE.Line | null>(null);
  
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [data, setData] = useState<{
    timestamp: string;
    values: Record<string, number>;
  }[]>([]);
  const [playing, setPlaying] = useState(false);
  const [currentIndex, setCurrentIndex] = useState(0);
  const animationRef = useRef<number | null>(null);
  
  // Load telemetry data
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        const telemetryData = await analyticsService.getSimulatorTelemetry(
          sessionId,
          metrics,
          startTime,
          endTime,
          resolution
        );
        
        setData(telemetryData);
      } catch (err) {
        console.error('Error loading telemetry data:', err);
        setError('Failed to load simulator telemetry data');
      } finally {
        setLoading(false);
      }
    };
    
    fetchData();
  }, [sessionId, metrics, startTime, endTime, resolution]);
  
  // Initialize Three.js scene
  useEffect(() => {
    if (!containerRef.current) return;
    
    // Create scene
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0xf0f0f0);
    sceneRef.current = scene;
    
    // Create camera
    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);
    camera.position.set(0, 5, 10);
    camera.lookAt(0, 0, 0);
    cameraRef.current = camera;
    
    // Create renderer
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(width, height);
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.shadowMap.enabled = true;
    containerRef.current.appendChild(renderer.domElement);
    rendererRef.current = renderer;
    
    // Add lights
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
    scene.add(ambientLight);
    
    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
    directionalLight.position.set(10, 20, 15);
    directionalLight.castShadow = true;
    scene.add(directionalLight);
    
    // Add grid
    const gridHelper = new THREE.GridHelper(100, 100, 0x888888, 0xcccccc);
    scene.add(gridHelper);
    
    // Create aircraft model (simple shape for now)
    const aircraft = createAircraftModel();
    scene.add(aircraft);
    aircraftRef.current = aircraft;
    
    // Create flight path line
    const pathGeometry = new THREE.BufferGeometry();
    const pathMaterial = new THREE.LineBasicMaterial({ color: 0x0088ff, linewidth: 2 });
    const pathLine = new THREE.Line(pathGeometry, pathMaterial);
    scene.add(pathLine);
    pathRef.current = pathLine;
    
    // Animation loop
    const animate = () => {
      if (rendererRef.current && sceneRef.current && cameraRef.current) {
        rendererRef.current.render(sceneRef.current, cameraRef.current);
      }
      requestAnimationFrame(animate);
    };
    
    animate();
    
    // Cleanup
    return () => {
      if (rendererRef.current && containerRef.current) {
        containerRef.current.removeChild(rendererRef.current.domElement);
        rendererRef.current.dispose();
      }
      
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    };
  }, [width, height]);
  
  // Update flight path when data changes
  useEffect(() => {
    if (!data.length || !pathRef.current) return;
    
    // Extract position data for the path
    const positions: number[] = [];
    
    data.forEach((point) => {
      // Convert telemetry data to 3D coordinates
      // This mapping depends on your specific telemetry format
      const x = point.values.x || 0;
      const y = point.values.altitude || point.values.y || 0;
      const z = point.values.z || 0;
      
      positions.push(x, y, z);
    });
    
    // Update path geometry
    const geometry = new THREE.BufferGeometry();
    geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));
    pathRef.current.geometry.dispose();
    pathRef.current.geometry = geometry;
  }, [data]);
  
  // Playback animation
  useEffect(() => {
    if (!playing || !data.length || !aircraftRef.current) return;
    
    const updateAircraftPosition = () => {
      if (currentIndex >= data.length) {
        setPlaying(false);
        setCurrentIndex(0);
        return;
      }
      
      const telemetry = data[currentIndex];
      
      // Update aircraft position and rotation
      if (aircraftRef.current) {
        // Convert telemetry to position and rotation
        // This mapping depends on your specific telemetry format
        const x = telemetry.values.x || 0;
        const y = telemetry.values.altitude || telemetry.values.y || 0;
        const z = telemetry.values.z || 0;
        
        const roll = (telemetry.values.roll || 0) * (Math.PI / 180);
        const pitch = (telemetry.values.pitch || 0) * (Math.PI / 180);
        const yaw = (telemetry.values.heading || telemetry.values.yaw || 0) * (Math.PI / 180);
        
        // Set position
        aircraftRef.current.position.set(x, y, z);
        
        // Set rotation (order matters)
        aircraftRef.current.rotation.set(0, 0, 0); // Reset
        aircraftRef.current.rotateZ(roll);
        aircraftRef.current.rotateX(pitch);
        aircraftRef.current.rotateY(yaw);
      }
      
      // Move to next telemetry point
      setCurrentIndex(prevIndex => prevIndex + 1);
      
      // Schedule next frame
      animationRef.current = requestAnimationFrame(updateAircraftPosition);
    };
    
    animationRef.current = requestAnimationFrame(updateAircraftPosition);
    
    // Cleanup
    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    };
  }, [playing, currentIndex, data]);
  
  // Handle play/pause
  const togglePlayback = () => {
    setPlaying(!playing);
  };
  
  // Handle reset
  const resetPlayback = () => {
    setPlaying(false);
    setCurrentIndex(0);
    
    // Reset aircraft position
    if (aircraftRef.current && data.length > 0) {
      aircraftRef.current.position.set(0, 0, 0);
      aircraftRef.current.rotation.set(0, 0, 0);
    }
  };
  
  // Create a simple aircraft model
  const createAircraftModel = () => {
    const aircraft = new THREE.Group();
    
    // Fuselage
    const fuselageGeometry = new THREE.CylinderGeometry(0.5, 0.5, 4, 8);
    const fuselageMaterial = new THREE.MeshPhongMaterial({ color: 0x909090 });
    const fuselage = new THREE.Mesh(fuselageGeometry, fuselageMaterial);
    fuselage.rotation.x = Math.PI / 2;
    aircraft.add(fuselage);
    
    // Wings
    const wingGeometry = new THREE.BoxGeometry(7, 0.1, 1);
    const wingMaterial = new THREE.MeshPhongMaterial({ color: 0x505050 });
    const wing = new THREE.Mesh(wingGeometry, wingMaterial);
    wing.position.y = 0;
    aircraft.add(wing);
    
    // Tail
    const tailGeometry = new THREE.BoxGeometry(2, 0.1, 0.8);
    const tailMaterial = new THREE.MeshPhongMaterial({ color: 0x505050 });
    const tail = new THREE.Mesh(tailGeometry, tailMaterial);
    tail.position.z = -2;
    tail.position.y = 0.4;
    aircraft.add(tail);
    
    // Vertical stabilizer
    const vstabGeometry = new THREE.BoxGeometry(0.1, 1, 1);
    const vstabMaterial = new THREE.MeshPhongMaterial({ color: 0x505050 });
    const vstab = new THREE.Mesh(vstabGeometry, vstabMaterial);
    vstab.position.z = -2;
    vstab.position.y = 0.8;
    aircraft.add(vstab);
    
    return aircraft;
  };
  
  // Show loading state
  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }
  
  // Show error state
  if (error) {
    return (
      <div className="p-6 bg-red-50 text-red-700 rounded-md">
        <h3 className="text-lg font-medium mb-2">Error</h3>
        <p>{error}</p>
      </div>
    );
  }
  
  // Show no data state
  if (data.length === 0) {
    return (
      <div className="p-6 bg-gray-50 text-gray-700 rounded-md">
        <h3 className="text-lg font-medium mb-2">No Data Available</h3>
        <p>No telemetry data available for this session.</p>
      </div>
    );
  }
  
  // Calculate current telemetry values for display
  const currentTelemetry = data[currentIndex] || data[0];
  
  return (
    <div className="bg-white rounded-lg shadow-lg overflow-hidden">
      <div className="p-4 border-b border-gray-200">
        <h2 className="text-lg font-medium text-gray-900">Flight Telemetry Visualization</h2>
        <p className="text-sm text-gray-500">Session ID: {sessionId}</p>
      </div>
      
      {/* 3D Visualization */}
      <div className="relative" style={{ width, height }}>
        <div ref={containerRef} className="w-full h-full"></div>
        
        {/* Telemetry info overlay */}
        <div className="absolute top-4 left-4 bg-white bg-opacity-75 rounded-md p-3 shadow-md text-sm">
          <div className="grid grid-cols-2 gap-x-4 gap-y-2">
            <div className="font-medium">Altitude:</div>
            <div>{(currentTelemetry.values.altitude || 0).toFixed(0)} ft</div>
            
            <div className="font-medium">Speed:</div>
            <div>{(currentTelemetry.values.speed || 0).toFixed(0)} kts</div>
            
            <div className="font-medium">Heading:</div>
            <div>{(currentTelemetry.values.heading || 0).toFixed(0)}°</div>
            
            <div className="font-medium">Roll:</div>
            <div>{(currentTelemetry.values.roll || 0).toFixed(1)}°</div>
            
            <div className="font-medium">Pitch:</div>
            <div>{(currentTelemetry.values.pitch || 0).toFixed(1)}°</div>
            
            <div className="font-medium">Time:</div>
            <div>{new Date(currentTelemetry.timestamp).toLocaleTimeString()}</div>
          </div>
        </div>
      </div>
      
      {/* Controls */}
      <div className="p-4 border-t border-gray-200 bg-gray-50 flex items-center justify-between">
        <div className="flex space-x-2">
          <button
            onClick={togglePlayback}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
          >
            {playing ? 'Pause' : 'Play'}
          </button>
          <button
            onClick={resetPlayback}
            className="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
          >
            Reset
          </button>
        </div>
        
        {/* Playback progress */}
        <div className="flex-1 mx-4">
          <input
            type="range"
            min={0}
            max={data.length - 1}
            value={currentIndex}
            onChange={(e) => {
              setCurrentIndex(parseInt(e.target.value));
              if (playing) setPlaying(false);
            }}
            className="w-full"
          />
        </div>
        
        <div className="text-sm text-gray-600">
          {currentIndex + 1} / {data.length}
        </div>
      </div>
    </div>
  );
};

export default SimulatorTelemetry;

// src/frontend/components/syllabus/SyllabusBuilder.tsx
import React, { useState, useCallback } from 'react';
import { DndProvider, useDrag, useDrop } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { Alert } from '../ui/Alert';

// Type definitions
export interface TrainingElement {
  id: string;
  type: 'module' | 'lesson' | 'exercise';
  title: string;
  description?: string;
  children?: TrainingElement[];
  parentId?: string;
  order: number;
  complianceStatus?: 'compliant' | 'nonCompliant' | 'warning' | 'unknown';
  complianceInfo?: string;
}

interface DragItem {
  id: string;
  type: string;
  parentId: string | undefined;
  order: number;
}

// Drag and Drop Components
const ItemTypes = {
  SYLLABUS_ELEMENT: 'syllabusElement'
};

interface ElementItemProps {
  item: TrainingElement;
  depth: number;
  onEdit: (id: string) => void;
  onDelete: (id: string) => void;
  onMove: (id: string, destinationParentId: string | undefined, newOrder: number) => void;
  isExpanded: boolean;
  onToggleExpand: () => void;
  isLastChild: boolean;
}

const ElementItem: React.FC<ElementItemProps> = ({
  item,
  depth,
  onEdit,
  onDelete,
  onMove,
  isExpanded,
  onToggleExpand,
  isLastChild
}) => {
  const [{ isDragging }, drag] = useDrag(() => ({
    type: ItemTypes.SYLLABUS_ELEMENT,
    item: { id: item.id, type: item.type, parentId: item.parentId, order: item.order } as DragItem,
    collect: (monitor) => ({
      isDragging: !!monitor.isDragging()
    })
  }));

  const [{ isOver, canDrop }, drop] = useDrop(() => ({
    accept: ItemTypes.SYLLABUS_ELEMENT,
    canDrop: (dragItem: DragItem) => {
      // Prevent dropping on itself or its children
      if (dragItem.id === item.id) return false;
      
      // Prevent dropping a parent on its child
      let currentParent = item.parentId;
      while (currentParent) {
        if (currentParent === dragItem.id) return false;
        // Would need to lookup parent's parent here in a real implementation
        currentParent = undefined; 
      }
      
      return true;
    },
    drop: (dragItem: DragItem) => {
      // If this is a module or lesson, drop as child
      if (item.type === 'module' || item.type === 'lesson') {
        const childCount = item.children?.length || 0;
        onMove(dragItem.id, item.id, childCount);
      } else {
        // Otherwise drop after this item in the same parent
        onMove(dragItem.id, item.parentId, item.order + 1);
      }
    },
    collect: (monitor) => ({
      isOver: !!monitor.isOver(),
      canDrop: !!monitor.canDrop()
    })
  }));

  // Determine element icon
  const getElementIcon = () => {
    switch (item.type) {
      case 'module':
        return (
          <svg className="w-5 h-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
          </svg>
        );
      case 'lesson':
        return (
          <svg className="w-5 h-5 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
        );
      case 'exercise':
        return (
          <svg className="w-5 h-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
          </svg>
        );
      default:
        return null;
    }
  };

  // Determine compliance status indicator
  const getComplianceIndicator = () => {
    switch (item.complianceStatus) {
      case 'compliant':
        return <span className="w-3 h-3 rounded-full bg-green-500" title="Compliant"></span>;
      case 'nonCompliant':
        return <span className="w-3 h-3 rounded-full bg-red-500" title={item.complianceInfo}></span>;
      case 'warning':
        return <span className="w-3 h-3 rounded-full bg-yellow-500" title={item.complianceInfo}></span>;
      case 'unknown':
      default:
        return <span className="w-3 h-3 rounded-full bg-gray-300" title="Compliance status unknown"></span>;
    }
  };

  const ref = useCallback((node) => {
    drag(drop(node));
  }, [drag, drop]);

  const hasChildren = item.children && item.children.length > 0;
  const opacity = isDragging ? 0.4 : 1;
  const backgroundColor = isOver && canDrop ? 'bg-blue-50' : '';

  return (
    <div ref={ref} style={{ opacity, marginLeft: `${depth * 20}px` }} className={`mb-1 ${backgroundColor}`}>
      <div className="flex items-center p-2 border rounded hover:bg-gray-50">
        <div className="flex-shrink-0 mr-2">
          {getElementIcon()}
        </div>
        
        {hasChildren && (
          <button 
            onClick={onToggleExpand}
            className="mr-2 text-gray-500 hover:text-gray-700 focus:outline-none"
          >
            {isExpanded ? (
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            ) : (
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path>
              </svg>
            )}
          </button>
        )}
        
        <div className="flex-grow">
          <div className="font-medium">{item.title}</div>
          {item.description && <div className="text-sm text-gray-500">{item.description}</div>}
        </div>
        
        <div className="flex-shrink-0 flex items-center">
          {getComplianceIndicator()}
          
          <button 
            onClick={() => onEdit(item.id)}
            className="ml-2 text-gray-500 hover:text-blue-500 focus:outline-none"
            aria-label="Edit"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
            </svg>
          </button>
          
          <button 
            onClick={() => onDelete(item.id)}
            className="ml-2 text-gray-500 hover:text-red-500 focus:outline-none"
            aria-label="Delete"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
            </svg>
          </button>
        </div>
      </div>
    </div>
  );
};

// Recursive component to render the syllabus tree
interface SyllabusTreeProps {
  elements: TrainingElement[];
  parentId?: string;
  depth?: number;
  onEdit: (id: string) => void;
  onDelete: (id: string) => void;
  onMove: (id: string, destinationParentId: string | undefined, newOrder: number) => void;
  expandedItems: Set<string>;
  toggleExpand: (id: string) => void;
}

const SyllabusTree: React.FC<SyllabusTreeProps> = ({
  elements,
  parentId,
  depth = 0,
  onEdit,
  onDelete,
  onMove,
  expandedItems,
  toggleExpand
}) => {
  // Filter elements by parentId and sort by order
  const childElements = elements
    .filter(el => el.parentId === parentId)
    .sort((a, b) => a.order - b.order);
  
  return (
    <>
      {childElements.map((element, index) => (
        <React.Fragment key={element.id}>
          <ElementItem
            item={element}
            depth={depth}
            onEdit={onEdit}
            onDelete={onDelete}
            onMove={onMove}
            isExpanded={expandedItems.has(element.id)}
            onToggleExpand={() => toggleExpand(element.id)}
            isLastChild={index === childElements.length - 1}
          />
          
          {expandedItems.has(element.id) && (
            <SyllabusTree
              elements={elements}
              parentId={element.id}
              depth={depth + 1}
              onEdit={onEdit}
              onDelete={onDelete}
              onMove={onMove}
              expandedItems={expandedItems}
              toggleExpand={toggleExpand}
            />
          )}
        </React.Fragment>
      ))}
    </>
  );
};

// Syllabus Builder component
interface SyllabusBuilderProps {
  syllabusElements: TrainingElement[];
  onSave: (elements: TrainingElement[]) => void;
  onElementEdit: (elementId: string) => void;
  onCheckCompliance: () => void;
  complianceStatus?: {
    overallStatus: 'compliant' | 'nonCompliant' | 'warning' | 'unknown';
    message?: string;
  };
  templates?: { id: string; name: string }[];
  onApplyTemplate?: (templateId: string) => void;
}

export const SyllabusBuilder: React.FC<SyllabusBuilderProps> = ({
  syllabusElements,
  onSave,
  onElementEdit,
  onCheckCompliance,
  complianceStatus,
  templates,
  onApplyTemplate
}) => {
  const [elements, setElements] = useState<TrainingElement[]>(syllabusElements);
  const [expandedItems, setExpandedItems] = useState<Set<string>>(new Set());
  const [showTemplateSelector, setShowTemplateSelector] = useState(false);
  const [selectedTemplateId, setSelectedTemplateId] = useState<string>('');

  // Toggle expanded/collapsed state of an item
  const toggleExpand = (id: string) => {
    const newExpandedItems = new Set(expandedItems);
    if (newExpandedItems.has(id)) {
      newExpandedItems.delete(id);
    } else {
      newExpandedItems.add(id);
    }
    setExpandedItems(newExpandedItems);
  };

  // Handle element deletion
  const handleElementDelete = (id: string) => {
    // Ask for confirmation before deleting
    if (window.confirm('Are you sure you want to delete this element and all its children?')) {
      // Find all children recursively
      const childIds = new Set<string>();
      
      const findChildren = (parentId: string) => {
        elements.forEach(el => {
          if (el.parentId === parentId) {
            childIds.add(el.id);
            findChildren(el.id);
          }
        });
      };
      
      findChildren(id);
      
      // Filter out the element and all its children
      const filteredElements = elements.filter(el => el.id !== id && !childIds.has(el.id));
      
      setElements(filteredElements);
    }
  };

  // Handle element movement via drag and drop
  const handleElementMove = (id: string, destinationParentId: string | undefined, newOrder: number) => {
    // Get the element being moved
    const elementToMove = elements.find(el => el.id === id);
    if (!elementToMove) return;
    
    // Find all children recursively to prevent dropping onto a child
    const childIds = new Set<string>();
    
    const findChildren = (parentId: string) => {
      elements.forEach(el => {
        if (el.parentId === parentId) {
          childIds.add(el.id);
          findChildren(el.id);
        }
      });
    };
    
    findChildren(id);
    
    // If trying to drop onto a child, abort
    if (destinationParentId && childIds.has(destinationParentId)) return;
    
    // Create updated elements array
    const updatedElements = elements.map(el => {
      // This is the element being moved
      if (el.id === id) {
        return { ...el, parentId: destinationParentId, order: newOrder };
      }
      
      // Update order of elements in the source parent
      if (el.parentId === elementToMove.parentId && el.order > elementToMove.order) {
        return { ...el, order: el.order - 1 };
      }
      
      // Update order of elements in the destination parent
      if (el.parentId === destinationParentId && el.order >= newOrder) {
        return { ...el, order: el.order + 1 };
      }
      
      return el;
    });
    
    setElements(updatedElements);
  };

  // Handle save operation
  const handleSave = () => {
    onSave(elements);
  };

  // Handle template application
  const handleApplyTemplate = () => {
    if (selectedTemplateId && onApplyTemplate) {
      onApplyTemplate(selectedTemplateId);
      setShowTemplateSelector(false);
    }
  };

  // Add a new element (module, lesson, or exercise)
  const addNewElement = (type: 'module' | 'lesson' | 'exercise', parentId?: string) => {
    // Get the highest order value for the parent
    const highestOrder = elements
      .filter(el => el.parentId === parentId)
      .reduce((max, el) => Math.max(max, el.order), -1) + 1;
    
    // Create a new unique ID
    const newId = `new-${type}-${Date.now()}`;
    
    const newElement: TrainingElement = {
      id: newId,
      type,
      title: `New ${type}`,
      description: `Description for new ${type}`,
      parentId,
      order: highestOrder,
      complianceStatus: 'unknown'
    };
    
    setElements([...elements, newElement]);
    
    // Open the editor for the new element
    onElementEdit(newId);
  };

  return (
    <DndProvider backend={HTML5Backend}>
      <div className="syllabus-builder">
        {/* Compliance Status */}
        {complianceStatus && (
          <div className="mb-4">
            <Alert
              type={
                complianceStatus.overallStatus === 'compliant' ? 'success' :
                complianceStatus.overallStatus === 'nonCompliant' ? 'error' :
                complianceStatus.overallStatus === 'warning' ? 'warning' : 'info'
              }
              title="Compliance Status"
              message={complianceStatus.message || 'Compliance status is being analyzed.'}
            />
          </div>
        )}

        {/* Action Buttons */}
        <div className="flex flex-wrap gap-2 mb-4">
          <Button 
            variant="primary"
            onClick={handleSave}
          >
            Save Syllabus
          </Button>
          
          <Button 
            variant="secondary"
            onClick={onCheckCompliance}
          >
            Check Compliance
          </Button>
          
          {templates && templates.length > 0 && (
            <Button 
              variant="outline"
              onClick={() => setShowTemplateSelector(!showTemplateSelector)}
            >
              Apply Template
            </Button>
          )}
          
          <Button 
            variant="outline"
            leftIcon={
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
              </svg>
            }
            onClick={() => addNewElement('module')}
          >
            Add Module
          </Button>
        </div>
        
        {/* Template Selector */}
        {showTemplateSelector && templates && (
          <Card className="mb-4">
            <div className="flex flex-col sm:flex-row sm:items-center">
              <div className="mb-2 sm:mb-0 sm:mr-4 flex-grow">
                <label htmlFor="template-select" className="block text-sm font-medium text-gray-700 mb-1">
                  Select Template
                </label>
                <select
                  id="template-select"
                  className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                  value={selectedTemplateId}
                  onChange={(e) => setSelectedTemplateId(e.target.value)}
                >
                  <option value="">Select a template...</option>
                  {templates.map(template => (
                    <option key={template.id} value={template.id}>
                      {template.name}
                    </option>
                  ))}
                </select>
              </div>
              <div className="flex space-x-2">
                <Button 
                  variant="primary"
                  size="small"
                  onClick={handleApplyTemplate}
                  disabled={!selectedTemplateId}
                >
                  Apply
                </Button>
                <Button 
                  variant="outline"
                  size="small"
                  onClick={() => setShowTemplateSelector(false)}
                >
                  Cancel
                </Button>
              </div>
            </div>
          </Card>
        )}
        
        {/* Syllabus Tree View */}
        <Card className="syllabus-tree">
          <div className="mb-4 border-b pb-2">
            <h3 className="text-lg font-medium">Syllabus Structure</h3>
          </div>
          
          {elements.length === 0 ? (
            <div className="text-center p-6">
              <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 13h6m-3-3v6m-9 1V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2z"></path>
              </svg>
              <h3 className="mt-2 text-sm font-medium text-gray-900">No elements</h3>
              <p className="mt-1 text-sm text-gray-500">Get started by creating a new module.</p>
              <div className="mt-6">
                <Button 
                  variant="primary"
                  onClick={() => addNewElement('module')}
                >
                  Add Module
                </Button>
              </div>
            </div>
          ) : (
            <div className="syllabus-elements">
              <SyllabusTree
                elements={elements}
                onEdit={onElementEdit}
                onDelete={handleElementDelete}
                onMove={handleElementMove}
                expandedItems={expandedItems}
                toggleExpand={toggleExpand}
              />
            </div>
          )}
        </Card>
        
        {/* Context menu for adding children */}
        {elements.length > 0 && (
          <div className="mt-4">
            <p className="text-sm text-gray-500 mb-2">Add elements to the syllabus:</p>
            <div className="flex flex-wrap gap-2">
              <Button 
                variant="outline"
                size="small"
                onClick={() => addNewElement('module')}
              >
                Add Module
              </Button>
              <Button 
                variant="outline"
                size="small"
                onClick={() => {
                  const moduleIds = elements
                    .filter(el => el.type === 'module')
                    .map(el => el.id);
                    
                  if (moduleIds.length === 0) {
                    alert('Please create a module first before adding a lesson.');
                    return;
                  }
                  
                  // If only one module, use that as parent
                  if (moduleIds.length === 1) {
                    addNewElement('lesson', moduleIds[0]);
                  } else {
                    // In a real app, you'd show a modal to select the parent module
                    const parentId = prompt('Enter parent module ID:');
                    if (parentId && moduleIds.includes(parentId)) {
                      addNewElement('lesson', parentId);
                    }
                  }
                }}
              >
                Add Lesson
              </Button>
              <Button 
                variant="outline"
                size="small"
                onClick={() => {
                  const lessonIds = elements
                    .filter(el => el.type === 'lesson')
                    .map(el => el.id);
                    
                  if (lessonIds.length === 0) {
                    alert('Please create a lesson first before adding an exercise.');
                    return;
                  }
                  
                  // If only one lesson, use that as parent
                  if (lessonIds.length === 1) {
                    addNewElement('exercise', lessonIds[0]);
                  } else {
                    // In a real app, you'd show a modal to select the parent lesson
                    const parentId = prompt('Enter parent lesson ID:');
                    if (parentId && lessonIds.includes(parentId)) {
                      addNewElement('exercise', parentId);
                    }
                  }
                }}
              >
                Add Exercise
              </Button>
            </div>
          </div>
        )}
      </div>
    </DndProvider>
  );
};

// src/frontend/components/syllabus/ElementEditor.tsx
import React, { useState, useEffect } from 'react';
import { Modal } from '../ui/Modal';
import { Input } from '../ui/Input';
import { Button } from '../ui/Button';
import { Form } from '../ui/Form';
import { TrainingElement } from './SyllabusBuilder';

interface ElementEditorProps {
  element: TrainingElement | null;
  isOpen: boolean;
  onClose: () => void;
  onSave: (updatedElement: TrainingElement) => void;
  validateElement?: (element: TrainingElement) => Promise<{ isValid: boolean; errors?: string[] }>;
}

export const ElementEditor: React.FC<ElementEditorProps> = ({
  element,
  isOpen,
  onClose,
  onSave,
  validateElement
}) => {
  const [formData, setFormData] = useState<Partial<TrainingElement>>({});
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isValidating, setIsValidating] = useState(false);
  const [validationErrors, setValidationErrors] = useState<string[]>([]);

  useEffect(() => {
    if (element) {
      setFormData({ ...element });
      setErrors({});
      setValidationErrors([]);
    }
  }, [element]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    
    // Clear error for this field
    if (errors[name]) {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[name];
        return newErrors;
      });
    }
  };

  const validateForm = () => {
    const newErrors: Record<string, string> = {};
    
    if (!formData.title?.trim()) {
      newErrors.title = 'Title is required';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    // Check if we have a validation function
    if (validateElement && formData.id) {
      setIsValidating(true);
      try {
        const validationResult = await validateElement(formData as TrainingElement);
        
        if (!validationResult.isValid) {
          setValidationErrors(validationResult.errors || ['Validation failed']);
          setIsValidating(false);
          return;
        }
      } catch (error) {
        setValidationErrors(['An error occurred during validation']);
        setIsValidating(false);
        return;
      }
    }
    
    // Submit the form
    onSave(formData as TrainingElement);
    onClose();
  };

  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title={`${element ? 'Edit' : 'Add'} ${formData.type || 'Element'}`}
      size="lg"
      footer={
        <>
          <Button variant="outline" onClick={onClose}>
            Cancel
          </Button>
          <Button 
            variant="primary" 
            onClick={handleSubmit}
            isLoading={isValidating}
            disabled={isValidating}
          >
            Save
          </Button>
        </>
      }
    >
      <Form onSubmit={handleSubmit} className="space-y-4">
        {validationErrors.length > 0 && (
          <div className="mb-4 p-3 bg-red-100 border border-red-200 rounded">
            <h4 className="text-sm font-medium text-red-800 mb-1">Validation Errors:</h4>
            <ul className="list-disc pl-5 text-sm text-red-700">
              {validationErrors.map((error, index) => (
                <li key={index}>{error}</li>
              ))}
            </ul>
          </div>
        )}
      
        <Input
          label="Title"
          name="title"
          value={formData.title || ''}
          onChange={handleInputChange}
          error={errors.title}
          required
        />
        
        <div className="mb-4">
          <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">
            Description
          </label>
          <textarea
            id="description"
            name="description"
            rows={3}
            className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            value={formData.description || ''}
            onChange={handleInputChange}
          ></textarea>
        </div>
        
        {/* Additional fields would be added here based on element type */}
        {formData.type === 'exercise' && (
          <div className="mb-4">
            <label htmlFor="objectives" className="block text-sm font-medium text-gray-700 mb-1">
              Learning Objectives
            </label>
            <textarea
              id="objectives"
              name="objectives"
              rows={3}
              className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              value={(formData as any).objectives || ''}
              onChange={handleInputChange}
            ></textarea>
          </div>
        )}
        
        {formData.type === 'exercise' && (
          <div className="mb-4">
            <label htmlFor="assessmentCriteria" className="block text-sm font-medium text-gray-700 mb-1">
              Assessment Criteria
            </label>
            <textarea
              id="assessmentCriteria"
              name="assessmentCriteria"
              rows={3}
              className="block w-full rounded-md shadow-sm border-gray-300 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              value={(formData as any).assessmentCriteria || ''}
              onChange={handleInputChange}
            ></textarea>
          </div>
        )}
      </Form>
    </Modal>
  );
};
// components/syllabus-builder/SyllabusTemplateSelector.tsx
import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  Grid, 
  Card, 
  CardContent, 
  CardActions, 
  Button, 
  Skeleton,
  Chip,
  CircularProgress
} from '@mui/material';
import { 
  School, 
  FlightTakeoff, 
  Settings, 
  Info, 
  Check, 
  Star, 
  StarBorder,
  CorporateFare
} from '@mui/icons-material';
import { syllabusApi } from '@/lib/api/apiClient';

interface Template {
  id: string;
  title: string;
  description: string;
  type: 'JOC/MCC' | 'Type Rating' | 'Recurrent' | 'Custom' | 'Commercial' | 'Flight Instructor';
  authority: 'EASA' | 'FAA' | 'ICAO' | 'DGCA' | 'Custom';
  tags: string[];
  moduleCount: number;
  estimatedDuration: string;
  popularity: number;
  thumbnail?: string;
  isFavorite: boolean;
}

interface SyllabusTemplateSelectorProps {
  onSelectTemplate: (templateId: string) => void;
}

export const SyllabusTemplateSelector: React.FC<SyllabusTemplateSelectorProps> = ({ 
  onSelectTemplate 
}) => {
  const [templates, setTemplates] = useState<Template[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedTemplate, setSelectedTemplate] = useState<string | null>(null);
  
  useEffect(() => {
    fetchTemplates();
  }, []);
  
  const fetchTemplates = async () => {
    setLoading(true);
    setError(null);
    
    try {
      const result = await syllabusApi.getTemplates();
      setTemplates(result);
    } catch (err: any) {
      setError(err.message || 'Failed to fetch templates');
    } finally {
      setLoading(false);
    }
  };
  
  const handleSelectTemplate = (templateId: string) => {
    setSelectedTemplate(templateId);
    onSelectTemplate(templateId);
  };
  
  const getTemplateIcon = (type: string) => {
    switch (type) {
      case 'JOC/MCC':
        return <CorporateFare />;
      case 'Type Rating':
        return <FlightTakeoff />;
      case 'Recurrent':
        return <Settings />;
      case 'Flight Instructor':
        return <School />;
      default:
        return <Info />;
    }
  };
  
  const toggleFavorite = async (templateId: string, isFavorite: boolean) => {
    // Update UI optimistically
    setTemplates(templates.map(t => 
      t.id === templateId ? { ...t, isFavorite: !isFavorite } : t
    ));
    
    // In a real app, you'd call an API here to update the favorite status
    // try {
    //   await syllabusApi.updateFavoriteStatus(templateId, !isFavorite);
    // } catch (error) {
    //   // Revert on error
    //   setTemplates(templates.map(t => 
    //     t.id === templateId ? { ...t, isFavorite: isFavorite } : t
    //   ));
    // }
  };
  
  if (loading) {
    return (
      <Grid container spacing={3}>
        {[1, 2, 3, 4, 5, 6].map((i) => (
          <Grid item xs={12} sm={6} md={4} key={i}>
            <Card>
              <CardContent>
                <Skeleton variant="rectangular" height={40} className="mb-2" />
                <Skeleton variant="rectangular" height={100} />
                <Box className="mt-2">
                  <Skeleton variant="text" />
                  <Skeleton variant="text" width="60%" />
                </Box>
              </CardContent>
              <CardActions>
                <Skeleton variant="rectangular" height={36} width="100%" />
              </CardActions>
            </Card>
          </Grid>
        ))}
      </Grid>
    );
  }
  
  if (error) {
    return (
      <Box className="p-6 text-center text-red-600">
        <Typography variant="body1">{error}</Typography>
        <Button 
          variant="outlined" 
          color="primary" 
          onClick={fetchTemplates}
          className="mt-4"
        >
          Retry
        </Button>
      </Box>
    );
  }
  
  return (
    <Grid container spacing={3}>
      {templates.map((template) => (
        <Grid item xs={12} sm={6} md={4} key={template.id}>
          <Card 
            className={`h-full ${selectedTemplate === template.id ? 'ring-2 ring-blue-500' : ''}`}
            elevation={selectedTemplate === template.id ? 3 : 1}
          >
            <Box className="p-4 flex items-center justify-between bg-gray-50">
              <Box className="flex items-center">
                <Box className="mr-2 text-blue-500">
                  {getTemplateIcon(template.type)}
                </Box>
                <Typography variant="h6" className="truncate" title={template.title}>
                  {template.title}
                </Typography>
              </Box>
              <Button
                onClick={() => toggleFavorite(template.id, template.isFavorite)}
                className="min-w-0 p-1"
              >
                {template.isFavorite ? (
                  <Star className="text-amber-500" />
                ) : (
                  <StarBorder />
                )}
              </Button>
            </Box>
            
            <CardContent>
              <Box className="flex flex-wrap gap-1 mb-3">
                <Chip 
                  label={template.type} 
                  size="small" 
                  color="primary" 
                  variant="outlined" 
                />
                <Chip 
                  label={template.authority} 
                  size="small" 
                  color="secondary" 
                  variant="outlined" 
                />
                {template.tags.slice(0, 2).map((tag, index) => (
                  <Chip key={index} label={tag} size="small" />
                ))}
                {template.tags.length > 2 && (
                  <Chip 
                    label={`+${template.tags.length - 2}`} 
                    size="small" 
                    variant="outlined" 
                  />
                )}
              </Box>
              
              <Typography variant="body2" color="textSecondary" className="mb-3">
                {template.description}
              </Typography>
              
              <Box className="flex flex-wrap items-center text-sm text-gray-500 mb-2">
                <Box className="flex items-center mr-4">
                  <Info fontSize="small" className="mr-1" />
                  <Typography variant="body2">
                    {template.moduleCount} modules
                  </Typography>
                </Box>
                <Box className="flex items-center">
                  <Settings fontSize="small" className="mr-1" />
                  <Typography variant="body2">
                    {template.estimatedDuration}
                  </Typography>
                </Box>
              </Box>
            </CardContent>
            
            <CardActions className="bg-gray-50">
              <Button 
                variant={selectedTemplate === template.id ? "contained" : "outlined"}
                color="primary"
                fullWidth
                onClick={() => handleSelectTemplate(template.id)}
                startIcon={selectedTemplate === template.id ? <Check /> : undefined}
              >
                {selectedTemplate === template.id ? "Selected" : "Select Template"}
              </Button>
            </CardActions>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
};

// components/syllabus-builder/ModuleList.tsx
import React, { useState } from 'react';
import {
  Box,
  Typography,
  Paper,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  ListItemSecondaryAction,
  IconButton,
  Collapse,
  Chip,
  Tooltip,
  Menu,
  MenuItem,
  Divider,
} from '@mui/material';
import {
  ExpandMore,
  ExpandLess,
  DragIndicator,
  MoreVert,
  Add,
  Edit,
  Delete,
  FileCopy,
  Warning,
  Info,
} from '@mui/icons-material';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';

interface Exercise {
  id: string;
  title: string;
  type: string;
  duration: number;
  status: 'draft' | 'approved' | 'modified';
  compliance: {
    status: 'compliant' | 'warning' | 'non-compliant';
    message?: string;
  };
}

interface Module {
  id: string;
  title: string;
  description: string;
  exercises: Exercise[];
  expanded?: boolean;
}

interface ModuleListProps {
  modules: Module[];
  onModulesChange: (modules: Module[]) => void;
  onEditExercise: (moduleId: string, exerciseId: string) => void;
}

export const ModuleList: React.FC<ModuleListProps> = ({
  modules,
  onModulesChange,
  onEditExercise,
}) => {
  const [expandedModules, setExpandedModules] = useState<Record<string, boolean>>(
    modules.reduce((acc, module) => {
      acc[module.id] = module.expanded || false;
      return acc;
    }, {} as Record<string, boolean>)
  );
  
  const [menuAnchorEl, setMenuAnchorEl] = useState<null | HTMLElement>(null);
  const [activeModule, setActiveModule] = useState<string | null>(null);
  const [activeExercise, setActiveExercise] = useState<string | null>(null);

  const toggleModule = (moduleId: string) => {
    setExpandedModules({
      ...expandedModules,
      [moduleId]: !expandedModules[moduleId],
    });
  };

  const handleModuleMenuClick = (event: React.MouseEvent<HTMLElement>, moduleId: string) => {
    event.stopPropagation();
    setMenuAnchorEl(event.currentTarget);
    setActiveModule(moduleId);
    setActiveExercise(null);
  };

  const handleExerciseMenuClick = (
    event: React.MouseEvent<HTMLElement>,
    moduleId: string,
    exerciseId: string
  ) => {
    event.stopPropagation();
    setMenuAnchorEl(event.currentTarget);
    setActiveModule(moduleId);
    setActiveExercise(exerciseId);
  };

  const handleMenuClose = () => {
    setMenuAnchorEl(null);
    setActiveModule(null);
    setActiveExercise(null);
  };

  const handleDragEnd = (result: any) => {
    if (!result.destination) {
      return;
    }

    const { source, destination, type } = result;

    // Handle module reordering
    if (type === 'module') {
      const reorderedModules = [...modules];
      const [removed] = reorderedModules.splice(source.index, 1);
      reorderedModules.splice(destination.index, 0, removed);
      onModulesChange(reorderedModules);
      return;
    }

    // Handle exercise reordering within the same module
    if (source.droppableId === destination.droppableId) {
      const moduleId = source.droppableId;
      const moduleIndex = modules.findIndex((m) => m.id === moduleId);
      
      if (moduleIndex === -1) return;
      
      const moduleExercises = [...modules[moduleIndex].exercises];
      const [removed] = moduleExercises.splice(source.index, 1);
      moduleExercises.splice(destination.index, 0, removed);
      
      const updatedModules = [...modules];
      updatedModules[moduleIndex] = {
        ...updatedModules[moduleIndex],
        exercises: moduleExercises,
      };
      
      onModulesChange(updatedModules);
      return;
    }

    // Handle exercise moving between modules
    const sourceModuleId = source.droppableId;
    const destModuleId = destination.droppableId;
    const sourceModuleIndex = modules.findIndex((m) => m.id === sourceModuleId);
    const destModuleIndex = modules.findIndex((m) => m.id === destModuleId);
    
    if (sourceModuleIndex === -1 || destModuleIndex === -1) return;
    
    const sourceExercises = [...modules[sourceModuleIndex].exercises];
    const destExercises = [...modules[destModuleIndex].exercises];
    
    const [removed] = sourceExercises.splice(source.index, 1);
    destExercises.splice(destination.index, 0, removed);
    
    const updatedModules = [...modules];
    updatedModules[sourceModuleIndex] = {
      ...updatedModules[sourceModuleIndex],
      exercises: sourceExercises,
    };
    updatedModules[destModuleIndex] = {
      ...updatedModules[destModuleIndex],
      exercises: destExercises,
    };
    
    onModulesChange(updatedModules);
  };

  const getComplianceIcon = (status: string) => {
    switch (status) {
      case 'compliant':
        return null;
      case 'warning':
        return (
          <Tooltip title="Compliance warning">
            <Warning className="text-amber-500" />
          </Tooltip>
        );
      case 'non-compliant':
        return (
          <Tooltip title="Non-compliant">
            <Warning className="text-red-500" />
          </Tooltip>
        );
      default:
        return null;
    }
  };

  return (
    <Box>
      <DragDropContext onDragEnd={handleDragEnd}>
        <Droppable droppableId="modules" type="module">
          {(provided) => (
            <List {...provided.droppableProps} ref={provided.innerRef} className="p-0">
              {modules.map((module, moduleIndex) => (
                <Draggable key={module.id} draggableId={module.id} index={moduleIndex}>
                  {(provided) => (
                    <Paper
                      ref={provided.innerRef}
                      {...provided.draggableProps}
                      className="mb-4"
                      elevation={1}
                    >
                      <ListItem
                        button
                        onClick={() => toggleModule(module.id)}
                        className="bg-gray-50"
                      >
                        <div {...provided.dragHandleProps} className="mr-2">
                          <DragIndicator className="text-gray-400" />
                        </div>
                        <ListItemText
                          primary={
                            <Typography variant="subtitle1" className="font-medium">
                              {module.title}
                            </Typography>
                          }
                          secondary={
                            <Box className="flex items-center flex-wrap gap-2 mt-1">
                              <Typography variant="body2" color="textSecondary" noWrap>
                                {module.exercises.length} exercises
                              </Typography>
                              <Typography variant="body2" color="textSecondary" noWrap>
                                {module.exercises.reduce((total, ex) => total + ex.duration, 0)} minutes
                              </Typography>
                            </Box>
                          }
                        />
                        <ListItemSecondaryAction>
                          <IconButton
                            edge="end"
                            onClick={(e) => handleModuleMenuClick(e, module.id)}
                            size="small"
                          >
                            <MoreVert />
                          </IconButton>
                          {expandedModules[module.id] ? <ExpandLess /> : <ExpandMore />}
                        </ListItemSecondaryAction>
                      </ListItem>

                      <Collapse in={expandedModules[module.id]} timeout="auto" unmountOnExit>
                        <Droppable droppableId={module.id} type="exercise">
                          {(provided) => (
                            <List
                              dense
                              className="pl-10 py-0"
                              ref={provided.innerRef}
                              {...provided.droppableProps}
                            >
                              {module.exercises.map((exercise, exerciseIndex) => (
                                <Draggable key={exercise.id} draggableId={exercise.id} index={exerciseIndex}>
                                  {(provided) => (
                                    <ListItem
                                      ref={provided.innerRef}
                                      {...provided.draggableProps}
                                      {...provided.dragHandleProps}
                                      className="border-b last:border-b-0"
                                    >
                                      <ListItemIcon className="min-w-0">
                                        <DragIndicator className="text-gray-300" />
                                      </ListItemIcon>
                                      <ListItemText
                                        primary={
                                          <Box className="flex items-center">
                                            <Typography variant="body1">
                                              {exercise.title}
                                            </Typography>
                                            {exercise.status === 'modified' && (
                                              <Chip
                                                label="Modified"
                                                size="small"
                                                color="warning"
                                                className="ml-2"
                                              />
                                            )}
                                            {exercise.status === 'draft' && (
                                              <Chip
                                                label="Draft"
                                                size="small"
                                                color="default"
                                                className="ml-2"
                                              />
                                            )}
                                          </Box>
                                        }
                                        secondary={
                                          <Box className="flex items-center mt-1">
                                            <Chip
                                              label={exercise.type}
                                              size="small"
                                              variant="outlined"
                                              className="mr-2"
                                            />
                                            <Typography variant="body2" color="textSecondary">
                                              {exercise.duration} min
                                            </Typography>
                                          </Box>
                                        }
                                      />
                                      <ListItemSecondaryAction>
                                        {getComplianceIcon(exercise.compliance.status)}
                                        <IconButton
                                          edge="end"
                                          onClick={(e) =>
                                            handleExerciseMenuClick(e, module.id, exercise.id)
                                          }
                                          size="small"
                                        >
                                          <MoreVert />
                                        </IconButton>
                                      </ListItemSecondaryAction>
                                    </ListItem>
                                  )}
                                </Draggable>
                              ))}
                              {provided.placeholder}
                              <ListItem button className="text-blue-500 hover:bg-blue-50">
                                <ListItemIcon>
                                  <Add />
                                </ListItemIcon>
                                <ListItemText primary="Add Exercise" />
                              </ListItem>
                            </List>
                          )}
                        </Droppable>
                      </Collapse>
                    </Paper>
                  )}
                </Draggable>
              ))}
              {provided.placeholder}
            </List>
          )}
        </Droppable>
      </DragDropContext>

      <Menu
        anchorEl={menuAnchorEl}
        open={Boolean(menuAnchorEl)}
        onClose={handleMenuClose}
      >
        {activeModule && !activeExercise && (
          <>
            <MenuItem onClick={handleMenuClose}>
              <Edit fontSize="small" className="mr-2" /> Edit Module
            </MenuItem>
            <MenuItem onClick={handleMenuClose}>
              <Add fontSize="small" className="mr-2" /> Add Exercise
            </MenuItem>
            <MenuItem onClick={handleMenuClose}>
              <FileCopy fontSize="small" className="mr-2" /> Duplicate
            </MenuItem>
            <Divider />
            <MenuItem onClick={handleMenuClose} className="text-red-600">
              <Delete fontSize="small" className="mr-2" /> Delete Module
            </MenuItem>
          </>
        )}

        {activeModule && activeExercise && (
          <>
            <MenuItem 
              onClick={() => {
                onEditExercise(activeModule, activeExercise!);
                handleMenuClose();
              }}
            >
              <Edit fontSize="small" className="mr-2" /> Edit Exercise
            </MenuItem>
            <MenuItem onClick={handleMenuClose}>
              <FileCopy fontSize="small" className="mr-2" /> Duplicate
            </MenuItem>
            <MenuItem onClick={handleMenuClose}>
              <Info fontSize="small" className="mr-2" /> View Compliance
            </MenuItem>
            <Divider />
            <MenuItem onClick={handleMenuClose} className="text-red-600">
              <Delete fontSize="small" className="mr-2" /> Delete Exercise
            </MenuItem>
          </>
        )}
      </Menu>
    </Box>
  );
};

// components/syllabus-builder/ComplianceIndicator.tsx
import React from 'react';
import {
  Box,
  Paper,
  Typography,
  LinearProgress,
  Divider,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Tooltip,
  IconButton,
} from '@mui/material';
import {
  CheckCircle,
  Warning,
  Error,
  InfoOutlined,
  ArrowForward,
} from '@mui/icons-material';

interface ComplianceItem {
  id: string;
  title: string;
  source: string;
  status: 'compliant' | 'warning' | 'non-compliant';
  message?: string;
  relatedElements?: {
    id: string;
    title: string;
    type: 'module' | 'exercise';
  }[];
}

interface ComplianceIndicatorProps {
  compliance: {
    overallStatus: 'compliant' | 'warning' | 'non-compliant';
    score: number; // 0-100
    items: ComplianceItem[];
  };
  onViewElement?: (elementType: 'module' | 'exercise', id: string) => void;
}

export const ComplianceIndicator: React.FC<ComplianceIndicatorProps> = ({
  compliance,
  onViewElement,
}) => {
  const { overallStatus, score, items } = compliance;

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'compliant':
        return 'text-green-500';
      case 'warning':
        return 'text-amber-500';
      case 'non-compliant':
        return 'text-red-500';
      default:
        return 'text-gray-500';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'compliant':
        return <CheckCircle className="text-green-500" />;
      case 'warning':
        return <Warning className="text-amber-500" />;
      case 'non-compliant':
        return <Error className="text-red-500" />;
      default:
        return <InfoOutlined className="text-gray-500" />;
    }
  };

  const getStatusBgColor = (status: string) => {
    switch (status) {
      case 'compliant':
        return 'bg-green-50';
      case 'warning':
        return 'bg-amber-50';
      case 'non-compliant':
        return 'bg-red-50';
      default:
        return 'bg-gray-50';
    }
  };

  return (
    <Paper elevation={1}>
      <Box className={`p-4 ${getStatusBgColor(overallStatus)}`}>
        <Box className="flex items-center mb-2">
          {getStatusIcon(overallStatus)}
          <Typography variant="h6" className="ml-2">
            Compliance Status
          </Typography>
        </Box>

        <Box className="mb-2">
          <Box className="flex justify-between mb-1">
            <Typography variant="body2" color="textSecondary">
              Overall compliance
            </Typography>
            <Typography
              variant="body2"
              className={getStatusColor(overallStatus)}
              fontWeight="medium"
            >
              {score}%
            </Typography>
          </Box>
          <LinearProgress
            variant="determinate"
            value={score}
            color={
              overallStatus === 'compliant'
                ? 'success'
                : overallStatus === 'warning'
                ? 'warning'
                : 'error'
            }
          />
        </Box>
      </Box>

      <Divider />

      <List dense>
        {items.map((item) => (
          <ListItem key={item.id} className={getStatusBgColor(item.status)}>
            <ListItemIcon>{getStatusIcon(item.status)}</ListItemIcon>
            <ListItemText
              primary={
                <Box className="flex items-center">
                  <Typography variant="body2" fontWeight="medium">
                    {item.title}
                  </Typography>
                  <Tooltip title={`Source: ${item.source}`}>
                    <InfoOutlined
                      fontSize="small"
                      className="ml-1 text-gray-500"
                      style={{ fontSize: '16px' }}
                    />
                  </Tooltip>
                </Box>
              }
              secondary={
                item.message && (
                  <Typography variant="body2" color="textSecondary">
                    {item.message}
                  </Typography>
                )
              }
            />
            {item.relatedElements && item.relatedElements.length > 0 && (
              <Tooltip title="View related element">
                <IconButton
                  size="small"
                  onClick={() =>
                    onViewElement?.(
                      item.relatedElements![0].type,
                      item.relatedElements![0].id
                    )
                  }
                >
                  <ArrowForward fontSize="small" />
                </IconButton>
              </Tooltip>
            )}
          </ListItem>
        ))}
      </List>
    </Paper>
  );
};

// components/syllabus-builder/SyllabusVersionHistory.tsx
import React from 'react';
import {
  Box,
  Typography,
  Paper,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Chip,
  Button,
  Collapse,
  Tooltip,
  IconButton,
} from '@mui/material';
import {
  History,
  Person,
  CompareArrows,
  Restore,
  ExpandMore,
  ExpandLess,
} from '@mui/icons-material';

interface VersionChange {
  type: 'added' | 'modified' | 'removed';
  element: {
    type: 'module' | 'exercise' | 'setting';
    id: string;
    title: string;
  };
  details?: string;
}

interface Version {
  id: string;
  number: string;
  timestamp: string;
  author: {
    id: string;
    name: string;
    avatar?: string;
  };
  message: string;
  changes: VersionChange[];
}

interface SyllabusVersionHistoryProps {
  versions: Version[];
  onCompareVersions: (versionA: string, versionB: string) => void;
  onRestoreVersion: (versionId: string) => void;
}

export const SyllabusVersionHistory: React.FC<SyllabusVersionHistoryProps> = ({
  versions,
  onCompareVersions,
  onRestoreVersion,
}) => {
  const [expandedVersions, setExpandedVersions] = React.useState<Record<string, boolean>>({});

  const toggleVersion = (versionId: string) => {
    setExpandedVersions({
      ...expandedVersions,
      [versionId]: !expandedVersions[versionId],
    });
  };

  const formatDate = (timestamp: string) => {
    const date = new Date(timestamp);
    return date.toLocaleDateString(undefined, {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  return (
    <Paper elevation={1}>
      <Box className="p-4 bg-gray-50 border-b flex items-center">
        <History className="mr-2" />
        <Typography variant="h6">Version History</Typography>
      </Box>

      <List className="py-0">
        {versions.map((version, index) => (
          <React.Fragment key={version.id}>
            <ListItem button onClick={() => toggleVersion(version.id)}>
              <ListItemIcon>
                <Box className="flex flex-col items-center">
                  <Box
                    className="w-6 h-6 rounded-full bg-blue-500 text-white flex items-center justify-center text-xs font-medium"
                  >
                    {index === 0 ? 'C' : index + 1}
                  </Box>
                  {index < versions.length - 1 && (
                    <Box className="w-0.5 h-full bg-gray-200 my-1" />
                  )}
                </Box>
              </ListItemIcon>
              <ListItemText
                primary={
                  <Box className="flex items-center">
                    <Typography variant="body1" fontWeight="medium">
                      {index === 0 ? 'Current Version' : `Version ${version.number}`}
                    </Typography>
                    {index === 0 && (
                      <Chip
                        label="Latest"
                        size="small"
                        color="primary"
                        className="ml-2"
                      />
                    )}
                  </Box>
                }
                secondary={
                  <Box className="mt-1">
                    <Box className="flex items-center">
                      <Person fontSize="small" className="mr-1 text-gray-500" />
                      <Typography variant="body2" color="textSecondary">
                        {version.author.name} • {formatDate(version.timestamp)}
                      </Typography>
                    </Box>
                    <Typography
                      variant="body2"
                      color="textSecondary"
                      className="mt-1"
                    >
                      {version.message}
                    </Typography>
                  </Box>
                }
              />
              <Box className="flex items-center">
                {index > 0 && (
                  <Tooltip title="Restore this version">
                    <IconButton
                      size="small"
                      onClick={(e) => {
                        e.stopPropagation();
                        onRestoreVersion(version.id);
                      }}
                    >
                      <Restore />
                    </IconButton>
                  </Tooltip>
                )}
                {index > 0 && (
                  <Tooltip title="Compare with current">
                    <IconButton
                      size="small"
                      onClick={(e) => {
                        e.stopPropagation();
                        onCompareVersions(versions[0].id, version.id);
                      }}
                    >
                      <CompareArrows />
                    </IconButton>
                  </Tooltip>
                )}
                {expandedVersions[version.id] ? <ExpandLess /> : <ExpandMore />}
              </Box>
            </ListItem>

            <Collapse in={expandedVersions[version.id]} timeout="auto" unmountOnExit>
              <Box className="pl-16 pr-4 py-2 bg-gray-50">
                <Typography variant="subtitle2" className="mb-2">
                  Changes
                </Typography>
                <List dense className="pl-2">
                  {version.changes.map((change, changeIndex) => (
                    <ListItem key={changeIndex} className="py-1">
                      <ListItemText
                        primary={
                          <Box className="flex items-center">
                            <Chip
                              label={change.type}
                              size="small"
                              color={
                                change.type === 'added'
                                  ? 'success'
                                  : change.type === 'modified'
                                  ? 'warning'
                                  : 'error'
                              }
                              className="mr-2"
                            />
                            <Typography variant="body2">
                              {change.element.type === 'module'
                                ? 'Module: '
                                : change.element.type === 'exercise'
                                ? 'Exercise: '
                                : 'Setting: '}
                              {change.element.title}
                            </Typography>
                          </Box>
                        }
                        secondary={
                          change.details && (
                            <Typography
                              variant="body2"
                              color="textSecondary"
                              className="mt-1 pl-2 border-l-2 border-gray-300"
                            >
                              {change.details}
                            </Typography>
                          )
                        }
                      />
                    </ListItem>
                  ))}
                </List>
              </Box>
            </Collapse>
          </React.Fragment>
        ))}
      </List>
    </Paper>
  );
};

// app/syllabus-builder/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import {
  Box,
  Container,
  Typography,
  Stepper,
  Step,
  StepLabel,
  Button,
  Paper,
  Divider,
  Grid,
  TextField,
  CircularProgress,
  Alert,
  Tabs,
  Tab,
} from '@mui/material';
import { 
  NavigateNext, 
  NavigateBefore, 
  Save, 
  VerifiedUser, 
  History,
  Visibility
} from '@mui/icons-material';
import { syllabusApi } from '@/lib/api/apiClient';
import { SyllabusTemplateSelector } from '@/components/syllabus-builder/SyllabusTemplateSelector';
import { ModuleList } from '@/components/syllabus-builder/ModuleList';
import { ComplianceIndicator } from '@/components/syllabus-builder/ComplianceIndicator';
import { SyllabusVersionHistory } from '@/components/syllabus-builder/SyllabusVersionHistory';

// Mock data for modules
const mockModules = [
  {
    id: 'module-1',
    title: 'Ground School Introduction',
    description: 'Basic introduction to aircraft systems and procedures',
    expanded: true,
    exercises: [
      {
        id: 'ex-1-1',
        title: 'Aircraft General Knowledge',
        type: 'Theory',
        duration: 120,
        status: 'approved',
        compliance: {
          status: 'compliant',
        },
      },
      {
        id: 'ex-1-2',
        title: 'Flight Planning',
        type: 'Theory',
        duration: 90,
        status: 'modified',
        compliance: {
          status: 'warning',
          message: 'Content modified from regulatory requirement',
        },
      },
    ],
  },
  {
    id: 'module-2',
    title: 'Basic Flight Training',
    description: 'Introduction to basic flight maneuvers',
    exercises: [
      {
        id: 'ex-2-1',
        title: 'Pre-flight Procedures',
        type: 'Simulator',
        duration: 60,
        status: 'approved',
        compliance: {
          status: 'compliant',
        },
      },
      {
        id: 'ex-2-2',
        title: 'Basic Aircraft Control',
        type: 'Simulator',
        duration: 120,
        status: 'draft',
        compliance: {
          status: 'non-compliant',
          message: 'Missing required elements for EASA compliance',
        },
      },
    ],
  },
];

// Mock compliance data
const mockCompliance = {
  overallStatus: 'warning' as const,
  score: 85,
  items: [
    {
      id: 'comp-1',
      title: 'EASA FCL.725.A Type Rating Training',
      source: 'EASA Part-FCL',
      status: 'compliant' as const,
    },
    {
      id: 'comp-2',
      title: 'EASA AMC1 FCL.725.A(b) Flight Training',
      source: 'EASA Part-FCL',
      status: 'warning' as const,
      message: 'Flight planning module content has been modified from standard',
      relatedElements: [
        {
          id: 'ex-1-2',
          title: 'Flight Planning',
          type: 'exercise' as const,
        },
      ],
    },
    {
      id: 'comp-3',
      title: 'EASA AMC1 FCL.725.A(c) Skill Test',
      source: 'EASA Part-FCL',
      status: 'non-compliant' as const,
      message: 'Basic Aircraft Control exercise missing required elements',
      relatedElements: [
        {
          id: 'ex-2-2',
          title: 'Basic Aircraft Control',
          type: 'exercise' as const,
        },
      ],
    },
  ],
};

// Mock version history
const mockVersions = [
  {
    id: 'v-current',
    number: '1.2',
    timestamp: new Date().toISOString(),
    author: {
      id: 'user-1',
      name: 'Jane Smith',
    },
    message: 'Updated Flight Planning module content',
    changes: [
      {
        type: 'modified' as const,
        element: {
          type: 'exercise' as const,
          id: 'ex-1-2',
          title: 'Flight Planning',
        },
        details: 'Added content specific to airline operations',
      },
    ],
  },
  {
    id: 'v-1',
    number: '1.1',
    timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
    author: {
      id: 'user-1',
      name: 'Jane Smith',
    },
    message: 'Added Basic Flight Training module',
    changes: [
      {
        type: 'added' as const,
        element: {
          type: 'module' as const,
          id: 'module-2',
          title: 'Basic Flight Training',
        },
      },
      {
        type: 'added' as const,
        element: {
          type: 'exercise' as const,
          id: 'ex-2-1',
          title: 'Pre-flight Procedures',
        },
      },
      {
        type: 'added' as const,
        element: {
          type: 'exercise' as const,
          id: 'ex-2-2',
          title: 'Basic Aircraft Control',
        },
      },
    ],
  },
  {
    id: 'v-0',
    number: '1.0',
    timestamp: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
    author: {
      id: 'user-2',
      name: 'John Doe',
    },
    message: 'Initial syllabus creation',
    changes: [
      {
        type: 'added' as const,
        element: {
          type: 'module' as const,
          id: 'module-1',
          title: 'Ground School Introduction',
        },
      },
      {
        type: 'added' as const,
        element: {
          type: 'exercise' as const,
          id: 'ex-1-1',
          title: 'Aircraft General Knowledge',
        },
      },
      {
        type: 'added' as const,
        element: {
          type: 'exercise' as const,
          id: 'ex-1-2',
          title: 'Flight Planning',
        },
      },
    ],
  },
];

const steps = ['Select Template', 'Basic Information', 'Customize Content', 'Review & Publish'];

export default function SyllabusBuilderPage() {
  const [activeStep, setActiveStep] = useState(0);
  const [selectedTemplate, setSelectedTemplate] = useState<string | null>(null);
  const [syllabusTitle, setSyllabusTitle] = useState('');
  const [syllabusDescription, setSyllabusDescription] = useState('');
  const [modules, setModules] = useState(mockModules);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState(0);

  const handleNext = () => {
    setActiveStep((prevStep) => prevStep + 1);
  };

  const handleBack = () => {
    setActiveStep((prevStep) => prevStep - 1);
  };

  const handleTemplateSelect = (templateId: string) => {
    setSelectedTemplate(templateId);
  };

  const handleModulesChange = (updatedModules: any[]) => {
    setModules(updatedModules);
  };

  const handleEditExercise = (moduleId: string, exerciseId: string) => {
    // Handle exercise editing - would open modal or navigate to exercise editor
    console.log(`Edit exercise ${exerciseId} in module ${moduleId}`);
  };

  const handleViewElement = (elementType: 'module' | 'exercise', elementId: string) => {
    // Scroll to element or navigate to it
    console.log(`Navigate to ${elementType} ${elementId}`);
  };

  const handleCompareVersions = (versionA: string, versionB: string) => {
    console.log(`Compare versions ${versionA} and ${versionB}`);
  };

  const handleRestoreVersion = (versionId: string) => {
    console.log(`Restore version ${versionId}`);
  };

  const handleSaveSyllabus = async () => {
    setIsSubmitting(true);
    setError(null);
    
    try {
      // Call API to save syllabus
      // const result = await syllabusApi.updateSyllabus('syllabus-id', {
      //   title: syllabusTitle,
      //   description: syllabusDescription,
      //   modules,
      // });
      
      // Mock API call
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Success
      console.log('Syllabus saved successfully');
    } catch (err: any) {
      setError(err.message || 'Failed to save syllabus');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleSubmit = async () => {
    setIsSubmitting(true);
    setError(null);
    
    try {
      // Call API to publish syllabus
      // const result = await syllabusApi.publishSyllabus('syllabus-id');
      
      // Mock API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Navigate to syllabus view or dashboard
      console.log('Syllabus published successfully');
    } catch (err: any) {
      setError(err.message || 'Failed to publish syllabus');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue);
  };

  return (
    <Container maxWidth="xl">
      <Box className="py-6">
        <Typography variant="h4" className="mb-6">Syllabus Builder</Typography>
        
        <Stepper activeStep={activeStep} className="mb-8">
          {steps.map((label) => (
            <Step key={label}>
              <StepLabel>{label}</StepLabel>
            </Step>
          ))}
        </Stepper>
        
        {activeStep === 0 && (
          <Box>
            <Typography variant="h5" className="mb-4">Select a Template</Typography>
            <Typography variant="body1" className="mb-6">
              Choose a starting point for your training syllabus. You'll be able to customize it in the next steps.
            </Typography>
            
            <SyllabusTemplateSelector onSelectTemplate={handleTemplateSelect} />
            
            <Box className="mt-6 flex justify-end">
              <Button
                variant="contained"
                color="primary"
                onClick={handleNext}
                endIcon={<NavigateNext />}
                disabled={!selectedTemplate}
              >
                Continue
              </Button>
            </Box>
          </Box>
        )}
        
        {activeStep === 1 && (
          <Box>
            <Typography variant="h5" className="mb-4">Basic Information</Typography>
            <Typography variant="body1" className="mb-6">
              Enter the basic details for your training syllabus.
            </Typography>
            
            <Paper elevation={1} className="p-6 mb-6">
              <Grid container spacing={4}>
                <Grid item xs={12}>
                  <TextField
                    label="Syllabus Title"
                    variant="outlined"
                    fullWidth
                    value={syllabusTitle}
                    onChange={(e) => setSyllabusTitle(e.target.value)}
                    required
                  />
                </Grid>
                <Grid item xs={12}>
                  <TextField
                    label="Description"
                    variant="outlined"
                    fullWidth
                    multiline
                    rows={4}
                    value={syllabusDescription}
                    onChange={(e) => setSyllabusDescription(e.target.value)}
                  />
                </Grid>
                <Grid item xs={12} md={6}>
                  <TextField
                    label="Aircraft Type"
                    variant="outlined"
                    fullWidth
                    defaultValue="Boeing 737-800"
                  />
                </Grid>
                <Grid item xs={12} md={6}>
                  <TextField
                    label="Regulatory Framework"
                    variant="outlined"
                    fullWidth
                    defaultValue="EASA Part-FCL"
                  />
                </Grid>
                <Grid item xs={12} md={6}>
                  <TextField
                    label="Training Organization"
                    variant="outlined"
                    fullWidth
                    defaultValue="Example Training Academy"
                  />
                </Grid>
                <Grid item xs={12} md={6}>
                  <TextField
                    label="Estimated Duration"
                    variant="outlined"
                    fullWidth
                    defaultValue="4 weeks"
                  />
                </Grid>
              </Grid>
            </Paper>
            
            <Box className="flex justify-between">
              <Button
                variant="outlined"
                onClick={handleBack}
                startIcon={<NavigateBefore />}
              >
                Back
              </Button>
              <Button
                variant="contained"
                color="primary"
                onClick={handleNext}
                endIcon={<NavigateNext />}
                disabled={!syllabusTitle}
              >
                Continue
              </Button>
            </Box>
          </Box>
        )}
        
        {activeStep === 2 && (
          <Box>
            <Typography variant="h5" className="mb-4">Customize Content</Typography>
            <Typography variant="body1" className="mb-6">
              Drag and drop to reorganize modules and exercises. Click on items to edit their details.
            </Typography>
            
            <Grid container spacing={4}>
              <Grid item xs={12} md={8}>
                <Paper elevation={1} className="p-4 mb-4">
                  <Box className="flex justify-between items-center mb-4">
                    <Typography variant="h6">Training Modules</Typography>
                    <Button 
                      variant="outlined" 
                      startIcon={<Save />}
                      onClick={handleSaveSyllabus}
                      disabled={isSubmitting}
                    >
                      {isSubmitting ? <CircularProgress size={24} /> : 'Save'}
                    </Button>
                  </Box>
                  <ModuleList 
                    modules={modules} 
                    onModulesChange={handleModulesChange}
                    onEditExercise={handleEditExercise}
                  />
                </Paper>
              </Grid>
              
              <Grid item xs={12} md={4}>
                <Paper elevation={1} className="p-4 mb-4">
                  <Box className="flex items-center mb-4">
                    <VerifiedUser className="mr-2 text-blue-500" />
                    <Typography variant="h6">Compliance Status</Typography>
                  </Box>
                  <ComplianceIndicator 
                    compliance={mockCompliance}
                    onViewElement={handleViewElement}
                  />
                </Paper>
                
                <Paper elevation={1} className="p-4">
                  <Box className="flex items-center mb-4">
                    <History className="mr-2 text-blue-500" />
                    <Typography variant="h6">Version History</Typography>
                  </Box>
                  <SyllabusVersionHistory 
                    versions={mockVersions}
                    onCompareVersions={handleCompareVersions}
                    onRestoreVersion={handleRestoreVersion}
                  />
                </Paper>
              </Grid>
            </Grid>
            
            {error && (
              <Alert severity="error" className="my-4">
                {error}
              </Alert>
            )}
            
            <Box className="flex justify-between mt-6">
              <Button
                variant="outlined"
                onClick={handleBack}
                startIcon={<NavigateBefore />}
              >
                Back
              </Button>
              <Button
                variant="contained"
                color="primary"
                onClick={handleNext}
                endIcon={<NavigateNext />}
              >
                Continue to Review
              </Button>
            </Box>
          </Box>
        )}
        
        {activeStep === 3 && (
          <Box>
            <Typography variant="h5" className="mb-4">Review & Publish</Typography>
            <Typography variant="body1" className="mb-6">
              Review your syllabus before publishing it. Once published, it will be available for use in training.
            </Typography>
            
            <Paper elevation={1} className="mb-6">
              <Tabs 
                value={activeTab} 
                onChange={handleTabChange}
                variant="scrollable"
                scrollButtons="auto"
              >
                <Tab label="Summary" />
                <Tab label="Modules & Exercises" />
                <Tab label="Compliance" />
                <Tab label="Preview" />
              </Tabs>
              
              <Box className="p-6">
                {activeTab === 0 && (
                  <Box>
                    <Typography variant="h6" className="mb-4">Syllabus Summary</Typography>
                    
                    <Grid container spacing={3}>
                      <Grid item xs={12} md={6}>
                        <Box className="mb-4">
                          <Typography variant="subtitle1" fontWeight="medium">Title</Typography>
                          <Typography variant="body1">{syllabusTitle}</Typography>
                        </Box>
                        
                        <Box className="mb-4">
                          <Typography variant="subtitle1" fontWeight="medium">Description</Typography>
                          <Typography variant="body1">{syllabusDescription}</Typography>
                        </Box>
                        
                        <Box className="mb-4">
                          <Typography variant="subtitle1" fontWeight="medium">Regulatory Framework</Typography>
                          <Typography variant="body1">EASA Part-FCL</Typography>
                        </Box>
                      </Grid>
                      
                      <Grid item xs={12} md={6}>
                        <Box className="mb-4">
                          <Typography variant="subtitle1" fontWeight="medium">Content Statistics</Typography>
                          <Box className="mt-2">
                            <Typography variant="body1">Modules: {modules.length}</Typography>
                            <Typography variant="body1">
                              Exercises: {modules.reduce((total, module) => total + module.exercises.length, 0)}
                            </Typography>
                            <Typography variant="body1">
                              Total Duration: {modules.reduce((total, module) => 
                                total + module.exercises.reduce((sum, ex) => sum + ex.duration, 0), 0)} minutes
                            </Typography>
                          </Box>
                        </Box>
                        
                        <Box className="mb-4">
                          <Typography variant="subtitle1" fontWeight="medium">Compliance Score</Typography>
                          <Box className="flex items-center mt-1">
                            <Box 
                              className="h-2 bg-gray-200 rounded-full flex-1 mr-2"
                            >
                              <Box 
                                className="h-2 bg-amber-500 rounded-full"
                                style={{ width: `${mockCompliance.score}%` }}
                              />
                            </Box>
                            <Typography variant="body1" fontWeight="medium">
                              {mockCompliance.score}%
                            </Typography>
                          </Box>
                        </Box>
                      </Grid>
                    </Grid>
                  </Box>
                )}
                
                {activeTab === 1 && (
                  <Box>
                    <Typography variant="h6" className="mb-4">Modules & Exercises</Typography>
                    <ModuleList 
                      modules={modules} 
                      onModulesChange={handleModulesChange}
                      onEditExercise={handleEditExercise}
                    />
                  </Box>
                )}
                
                {activeTab === 2 && (
                  <Box>
                    <Typography variant="h6" className="mb-4">Compliance Details</Typography>
                    <ComplianceIndicator 
                      compliance={mockCompliance}
                      onViewElement={handleViewElement}
                    />
                  </Box>
                )}
                
                {activeTab === 3 && (
                  <Box>
                    <Typography variant="h6" className="mb-4">Syllabus Preview</Typography>
                    <Box className="flex justify-center">
                      <Button
                        variant="outlined"
                        startIcon={<Visibility />}
                        size="large"
                      >
                        Open Full Preview
                      </Button>
                    </Box>
                  </Box>
                )}
              </Box>
            </Paper>
            
            {error && (
              <Alert severity="error" className="my-4">
                {error}
              </Alert>
            )}
            
            <Box className="flex justify-between">
              <Button
                variant="outlined"
                onClick={handleBack}
                startIcon={<NavigateBefore />}
              >
                Back
              </Button>
              <Box>
                <Button
                  variant="outlined"
                  className="mr-3"
                  onClick={handleSaveSyllabus}
                  disabled={isSubmitting}
                >
                  Save as Draft
                </Button>
                <Button
                  variant="contained"
                  color="primary"
                  onClick={handleSubmit}
                  disabled={isSubmitting}
                >
                  {isSubmitting ? (
                    <CircularProgress size={24} />
                  ) : (
                    'Publish Syllabus'
                  )}
                </Button>
              </Box>
            </Box>
          </Box>
        )}
      </Box>
    </Container>
  );
}

// src/frontend/components/syllabus/SyllabusCustomization.tsx
import React, { useState, useEffect, useCallback } from 'react';
import { DndProvider } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { Tabs, Tab } from '../ui/Tabs';
import { Modal } from '../ui/Modal';
import { Alert } from '../ui/Alert';
import { SyllabusBuilder, TrainingElement } from './SyllabusBuilder';
import { ElementEditor } from './SyllabusBuilder';

// Types
export interface Template {
  id: string;
  name: string;
  description: string;
  elements: TrainingElement[];
  lastModified: Date;
  author: string;
  regulatoryFramework?: string;
}

export interface ComplianceRequirement {
  id: string;
  name: string;
  description: string;
  regulationReference: string;
  priority: 'critical' | 'high' | 'medium' | 'low';
}

export interface ComplianceValidationResult {
  isCompliant: boolean;
  requirementsMet: string[];
  requirementsNotMet: string[];
  requirementsPartiallyMet: string[];
  details: {
    requirementId: string;
    requirementName: string;
    status: 'met' | 'notMet' | 'partiallyMet';
    details: string;
  }[];
  overallStatus: 'compliant' | 'nonCompliant' | 'warning' | 'unknown';
}

export interface Exercise {
  id: string;
  title: string;
  description: string;
  type: string;
  duration: number;
  objectives: string[];
  assessmentCriteria: string[];
  resources: string[];
  tags: string[];
}

interface SyllabusVersion {
  id: string;
  name: string;
  createdAt: Date;
  author: string;
  elements: TrainingElement[];
}

// Components
interface VersionComparisonProps {
  currentVersion: SyllabusVersion;
  previousVersion: SyllabusVersion;
  onClose: () => void;
}

const VersionComparison: React.FC<VersionComparisonProps> = ({
  currentVersion,
  previousVersion,
  onClose
}) => {
  // Flatten elements for easier comparison
  const flattenElements = (elements: TrainingElement[]): Record<string, TrainingElement> => {
    const result: Record<string, TrainingElement> = {};
    
    const traverse = (element: TrainingElement) => {
      result[element.id] = element;
      if (element.children) {
        element.children.forEach(traverse);
      }
    };
    
    elements.forEach(traverse);
    return result;
  };
  
  const currentElements = flattenElements(currentVersion.elements);
  const previousElements = flattenElements(previousVersion.elements);
  
  // Find added, removed, and modified elements
  const addedElements: TrainingElement[] = [];
  const removedElements: TrainingElement[] = [];
  const modifiedElements: { previous: TrainingElement; current: TrainingElement }[] = [];
  
  // Check for added and modified elements
  Object.values(currentElements).forEach(element => {
    if (!previousElements[element.id]) {
      addedElements.push(element);
    } else if (
      element.title !== previousElements[element.id].title ||
      element.description !== previousElements[element.id].description ||
      element.order !== previousElements[element.id].order ||
      element.parentId !== previousElements[element.id].parentId
    ) {
      modifiedElements.push({
        previous: previousElements[element.id],
        current: element
      });
    }
  });
  
  // Check for removed elements
  Object.values(previousElements).forEach(element => {
    if (!currentElements[element.id]) {
      removedElements.push(element);
    }
  });

  return (
    <Modal
      isOpen={true}
      onClose={onClose}
      title="Version Comparison"
      size="xl"
    >
      <div className="mb-4">
        <div className="flex justify-between mb-2">
          <div>
            <h3 className="text-sm font-medium text-gray-500">Current Version</h3>
            <p>{currentVersion.name}</p>
            <p className="text-xs text-gray-500">
              Created by {currentVersion.author} on {new Date(currentVersion.createdAt).toLocaleString()}
            </p>
          </div>
          
          <div className="text-right">
            <h3 className="text-sm font-medium text-gray-500">Previous Version</h3>
            <p>{previousVersion.name}</p>
            <p className="text-xs text-gray-500">
              Created by {previousVersion.author} on {new Date(previousVersion.createdAt).toLocaleString()}
            </p>
          </div>
        </div>
      </div>
      
      <div className="space-y-6">
        {/* Added Elements */}
        {addedElements.length > 0 && (
          <div>
            <h3 className="text-lg font-medium text-green-700 mb-2">Added Elements ({addedElements.length})</h3>
            <div className="border rounded-md overflow-hidden">
              <div className="bg-green-50 px-4 py-2">
                <p className="text-sm text-green-700">These elements have been added in the current version</p>
              </div>
              <div className="divide-y">
                {addedElements.map(element => (
                  <div key={element.id} className="px-4 py-3">
                    <div className="flex items-start">
                      <div className="flex-shrink-0 mt-1">
                        <svg className="h-5 w-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                      </div>
                      <div className="ml-3">
                        <p className="text-sm font-medium text-gray-900">{element.title}</p>
                        <p className="text-sm text-gray-500">{element.description}</p>
                        <p className="text-xs text-gray-400 mt-1">Type: {element.type}</p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
        
        {/* Modified Elements */}
        {modifiedElements.length > 0 && (
          <div>
            <h3 className="text-lg font-medium text-blue-700 mb-2">Modified Elements ({modifiedElements.length})</h3>
            <div className="border rounded-md overflow-hidden">
              <div className="bg-blue-50 px-4 py-2">
                <p className="text-sm text-blue-700">These elements have been modified in the current version</p>
              </div>
              <div className="divide-y">
                {modifiedElements.map(({ previous, current }) => (
                  <div key={current.id} className="px-4 py-3">
                    <div className="flex items-start">
                      <div className="flex-shrink-0 mt-1">
                        <svg className="h-5 w-5 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                        </svg>
                      </div>
                      <div className="ml-3 w-full">
                        {previous.title !== current.title && (
                          <div className="mb-2">
                            <p className="text-xs text-gray-500">Title</p>
                            <div className="flex justify-between">
                              <p className="text-sm line-through text-red-700">{previous.title}</p>
                              <p className="text-sm text-green-700">{current.title}</p>
                            </div>
                          </div>
                        )}
                        
                        {previous.description !== current.description && (
                          <div className="mb-2">
                            <p className="text-xs text-gray-500">Description</p>
                            <div className="flex justify-between">
                              <p className="text-sm line-through text-red-700">{previous.description}</p>
                              <p className="text-sm text-green-700">{current.description}</p>
                            </div>
                          </div>
                        )}
                        
                        {previous.order !== current.order && (
                          <div className="mb-2">
                            <p className="text-xs text-gray-500">Order</p>
                            <div className="flex justify-between">
                              <p className="text-sm line-through text-red-700">Order: {previous.order}</p>
                              <p className="text-sm text-green-700">Order: {current.order}</p>
                            </div>
                          </div>
                        )}
                        
                        {previous.parentId !== current.parentId && (
                          <div className="mb-2">
                            <p className="text-xs text-gray-500">Parent</p>
                            <div className="flex justify-between">
                              <p className="text-sm line-through text-red-700">Parent: {previous.parentId || 'None'}</p>
                              <p className="text-sm text-green-700">Parent: {current.parentId || 'None'}</p>
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
        
        {/* Removed Elements */}
        {removedElements.length > 0 && (
          <div>
            <h3 className="text-lg font-medium text-red-700 mb-2">Removed Elements ({removedElements.length})</h3>
            <div className="border rounded-md overflow-hidden">
              <div className="bg-red-50 px-4 py-2">
                <p className="text-sm text-red-700">These elements have been removed in the current version</p>
              </div>
              <div className="divide-y">
                {removedElements.map(element => (
                  <div key={element.id} className="px-4 py-3">
                    <div className="flex items-start">
                      <div className="flex-shrink-0 mt-1">
                        <svg className="h-5 w-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                        </svg>
                      </div>
                      <div className="ml-3">
                        <p className="text-sm font-medium text-gray-900">{element.title}</p>
                        <p className="text-sm text-gray-500">{element.description}</p>
                        <p className="text-xs text-gray-400 mt-1">Type: {element.type}</p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
        
        {addedElements.length === 0 && modifiedElements.length === 0 && removedElements.length === 0 && (
          <div className="text-center py-8">
            <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <h3 className="mt-2 text-sm font-medium text-gray-900">No differences</h3>
            <p className="mt-1 text-sm text-gray-500">
              The current version is identical to the previous version.
            </p>
          </div>
        )}
      </div>
    </Modal>
  );
};

interface ExerciseLibraryProps {
  exercises: Exercise[];
  onSelect: (exercise: Exercise) => void;
  onClose: () => void;
}

const ExerciseLibrary: React.FC<ExerciseLibraryProps> = ({
  exercises,
  onSelect,
  onClose
}) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedType, setSelectedType] = useState('');
  
  // Get unique exercise types
  const exerciseTypes = Array.from(new Set(exercises.map(ex => ex.type)));
  
  // Filter exercises
  const filteredExercises = exercises.filter(exercise => {
    // Filter by type
    if (selectedType && exercise.type !== selectedType) {
      return false;
    }
    
    // Filter by search term
    if (searchTerm && !exercise.title.toLowerCase().includes(searchTerm.toLowerCase()) &&
        !exercise.description.toLowerCase().includes(searchTerm.toLowerCase())) {
      return false;
    }
    
    return true;
  });

  return (
    <Modal
      isOpen={true}
      onClose={onClose}
      title="Exercise Library"
      size="lg"
    >
      <div className="mb-4">
        <div className="flex flex-col sm:flex-row gap-3">
          <div className="relative w-full">
            <input
              type="text"
              className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              placeholder="Search exercises..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg className="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
              </svg>
            </div>
          </div>
          
          <select
            className="block w-full sm:w-auto pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
            value={selectedType}
            onChange={(e) => setSelectedType(e.target.value)}
          >
            <option value="">All Types</option>
            {exerciseTypes.map(type => (
              <option key={type} value={type}>
                {type}
              </option>
            ))}
          </select>
        </div>
      </div>
      
      <div className="divide-y divide-gray-200 max-h-96 overflow-y-auto">
        {filteredExercises.map(exercise => (
          <div key={exercise.id} className="py-4">
            <div className="flex justify-between items-start">
              <div>
                <h3 className="text-lg font-medium text-gray-900">{exercise.title}</h3>
                <p className="mt-1 text-sm text-gray-500">{exercise.description}</p>
                
                <div className="mt-2 flex flex-wrap gap-2">
                  <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                    {exercise.type}
                  </span>
                  <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                    {exercise.duration} min
                  </span>
                </div>
                
                <div className="mt-2">
                  <p className="text-sm font-medium text-gray-700">Objectives:</p>
                  <ul className="mt-1 text-sm text-gray-500 list-disc list-inside">
                    {exercise.objectives.map((obj, index) => (
                      <li key={index}>{obj}</li>
                    ))}
                  </ul>
                </div>
              </div>
              
              <Button
                variant="primary"
                size="small"
                onClick={() => onSelect(exercise)}
              >
                Use Exercise
              </Button>
            </div>
          </div>
        ))}
        
        {filteredExercises.length === 0 && (
          <div className="py-8 text-center">
            <p className="text-gray-500">No exercises found matching your criteria.</p>
          </div>
        )}
      </div>
    </Modal>
  );
};

interface ComplianceDetailProps {
  validationResult: ComplianceValidationResult;
  requirements: ComplianceRequirement[];
  onClose: () => void;
}

const ComplianceDetail: React.FC<ComplianceDetailProps> = ({
  validationResult,
  requirements,
  onClose
}) => {
  // Get requirement details by ID
  const getRequirement = (id: string) => {
    return requirements.find(req => req.id === id);
  };

  return (
    <Modal
      isOpen={true}
      onClose={onClose}
      title="Compliance Details"
      size="lg"
    >
      <div className="mb-6">
        <div className="flex items-center">
          <div className={`p-2 rounded-full mr-3 ${
            validationResult.isCompliant ? 'bg-green-100' : 'bg-red-100'
          }`}>
            {validationResult.isCompliant ? (
              <svg className="h-6 w-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            ) : (
              <svg className="h-6 w-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            )}
          </div>
          <div>
            <h3 className="text-lg font-medium">
              {validationResult.isCompliant ? 'Syllabus is Compliant' : 'Compliance Issues Detected'}
            </h3>
            <p className="text-sm text-gray-500">
              {validationResult.requirementsMet.length} requirements met, 
              {validationResult.requirementsNotMet.length} not met, 
              {validationResult.requirementsPartiallyMet.length} partially met
            </p>
          </div>
        </div>
      </div>
      
      <div className="space-y-6">
        {/* Requirements Met */}
        {validationResult.requirementsMet.length > 0 && (
          <div>
            <h3 className="text-lg font-medium text-green-700 mb-2">Requirements Met ({validationResult.requirementsMet.length})</h3>
            <div className="border rounded-md overflow-hidden">
              <div className="bg-green-50 px-4 py-2">
                <p className="text-sm text-green-700">These regulatory requirements are fully satisfied</p>
              </div>
              <div className="divide-y">
                {validationResult.requirementsMet.map(reqId => {
                  const req = getRequirement(reqId);
                  if (!req) return null;
                  
                  return (
                    <div key={reqId} className="px-4 py-3">
                      <div className="flex items-start">
                        <div className="flex-shrink-0 mt-1">
                          <svg className="h-5 w-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
                          </svg>
                        </div>
                        <div className="ml-3">
                          <p className="text-sm font-medium text-gray-900">{req.name}</p>
                          <p className="text-sm text-gray-500">{req.description}</p>
                          <p className="text-xs text-gray-400 mt-1">Ref: {req.regulationReference}</p>
                        </div>
                        <div className="ml-auto">
                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                            req.priority === 'critical' ? 'bg-red-100 text-red-800' :
                            req.priority === 'high' ? 'bg-orange-100 text-orange-800' :
                            req.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                            'bg-green-100 text-green-800'
                          }`}>
                            {req.priority}
                          </span>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        )}
        
        {/* Requirements Partially Met */}
        {validationResult.requirementsPartiallyMet.length > 0 && (
          <div>
            <h3 className="text-lg font-medium text-yellow-700 mb-2">Requirements Partially Met ({validationResult.requirementsPartiallyMet.length})</h3>
            <div className="border rounded-md overflow-hidden">
              <div className="bg-yellow-50 px-4 py-2">
                <p className="text-sm text-yellow-700">These regulatory requirements are partially satisfied and need attention</p>
              </div>
              <div className="divide-y">
                {validationResult.details
                  .filter(detail => detail.status === 'partiallyMet')
                  .map(detail => {
                    const req = getRequirement(detail.requirementId);
                    if (!req) return null;
                    
                    return (
                      <div key={detail.requirementId} className="px-4 py-3">
                        <div className="flex items-start">
                          <div className="flex-shrink-0 mt-1">
                            <svg className="h-5 w-5 text-yellow-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
                            </svg>
                          </div>
                          <div className="ml-3">
                            <p className="text-sm font-medium text-gray-900">{req.name}</p>
                            <p className="text-sm text-gray-500">{req.description}</p>
                            <p className="text-sm text-yellow-600 mt-1">{detail.details}</p>
                            <p className="text-xs text-gray-400 mt-1">Ref: {req.regulationReference}</p>
                          </div>
                          <div className="ml-auto">
                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                              req.priority === 'critical' ? 'bg-red-100 text-red-800' :
                              req.priority === 'high' ? 'bg-orange-100 text-orange-800' :
                              req.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                              'bg-green-100 text-green-800'
                            }`}>
                              {req.priority}
                            </span>
                          </div>
                        </div>
                      </div>
                    );
                  })}
              </div>
            </div>
          </div>
        )}
        
        {/* Requirements Not Met */}
        {validationResult.requirementsNotMet.length > 0 && (
          <div>
            <h3 className="text-lg font-medium text-red-700 mb-2">Requirements Not Met ({validationResult.requirementsNotMet.length})</h3>
            <div className="border rounded-md overflow-hidden">
              <div className="bg-red-50 px-4 py-2">
                <p className="text-sm text-red-700">These regulatory requirements are not satisfied and require immediate attention</p>
              </div>
              <div className="divide-y">
                {validationResult.details
                  .filter(detail => detail.status === 'notMet')
                  .map(detail => {
                    const req = getRequirement(detail.requirementId);
                    if (!req) return null;
                    
                    return (
                      <div key={detail.requirementId} className="px-4 py-3">
                        <div className="flex items-start">
                          <div className="flex-shrink-0 mt-1">
                            <svg className="h-5 w-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                          </div>
                          <div className="ml-3">
                            <p className="text-sm font-medium text-gray-900">{req.name}</p>
                            <p className="text-sm text-gray-500">{req.description}</p>
                            <p className="text-sm text-red-600 mt-1">{detail.details}</p>
                            <p className="text-xs text-gray-400 mt-1">Ref: {req.regulationReference}</p>
                          </div>
                          <div className="ml-auto">
                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                              req.priority === 'critical' ? 'bg-red-100 text-red-800' :
                              req.priority === 'high' ? 'bg-orange-100 text-orange-800' :
                              req.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                              'bg-green-100 text-green-800'
                            }`}>
                              {req.priority}
                            </span>
                          </div>
                        </div>
                      </div>
                    );
                  })}
              </div>
            </div>
          </div>
        )}
      </div>
    </Modal>
  );
};

// Main Syllabus Customization Component
interface SyllabusCustomizationProps {
  elements: TrainingElement[];
  templates: Template[];
  complianceRequirements: ComplianceRequirement[];
  exercises: Exercise[];
  versions: SyllabusVersion[];
  onSave: (elements: TrainingElement[]) => Promise<void>;
  onApplyTemplate: (templateId: string) => Promise<TrainingElement[]>;
  onCheckCompliance: (elements: TrainingElement[]) => Promise<ComplianceValidationResult>;
  onCreateVersion: (name: string, elements: TrainingElement[]) => Promise<void>;
  onBulkEdit: (elementIds: string[], updates: Partial<TrainingElement>) => Promise<void>;
}

export const SyllabusCustomization: React.FC<SyllabusCustomizationProps> = ({
  elements: initialElements,
  templates,
  complianceRequirements,
  exercises,
  versions,
  onSave,
  onApplyTemplate,
  onCheckCompliance,
  onCreateVersion,
  onBulkEdit
}) => {
  const [elements, setElements] = useState<TrainingElement[]>(initialElements);
  const [selectedElement, setSelectedElement] = useState<TrainingElement | null>(null);
  const [isEditorOpen, setIsEditorOpen] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [alertMessage, setAlertMessage] = useState<{ type: 'success' | 'error' | 'warning'; message: string } | null>(null);
  const [complianceStatus, setComplianceStatus] = useState<ComplianceValidationResult | null>(null);
  const [showComplianceDetails, setShowComplianceDetails] = useState(false);
  const [showExerciseLibrary, setShowExerciseLibrary] = useState(false);
  const [showVersionComparison, setShowVersionComparison] = useState(false);
  const [showCreateVersion, setShowCreateVersion] = useState(false);
  const [versionName, setVersionName] = useState('');
  const [selectedVersions, setSelectedVersions] = useState<{current: string; previous: string}>({
    current: '',
    previous: ''
  });
  const [selectedElementsForBulk, setSelectedElementsForBulk] = useState<string[]>([]);
  const [bulkEditMode, setBulkEditMode] = useState(false);
  const [bulkEditValues, setBulkEditValues] = useState<Partial<TrainingElement>>({});

  // Handle element edit
  const handleElementEdit = (elementId: string) => {
    const element = elements.find(el => el.id === elementId);
    if (element) {
      setSelectedElement(element);
      setIsEditorOpen(true);
    }
  };

  // Handle element save
  const handleElementSave = (updatedElement: TrainingElement) => {
    setElements(prevElements => 
      prevElements.map(el => 
        el.id === updatedElement.id ? updatedElement : el
      )
    );
    setIsEditorOpen(false);
    setSelectedElement(null);
  };

  // Save all changes
  const handleSaveChanges = async () => {
    setIsSaving(true);
    
    try {
      await onSave(elements);
      
      setAlertMessage({
        type: 'success',
        message: 'Syllabus saved successfully.'
      });
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Error saving syllabus: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    } finally {
      setIsSaving(false);
    }
  };

  // Apply template
  const handleApplyTemplate = async (templateId: string) => {
    try {
      const newElements = await onApplyTemplate(templateId);
      
      setElements(newElements);
      
      setAlertMessage({
        type: 'success',
        message: 'Template applied successfully.'
      });
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Error applying template: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };

  // Check compliance
  const handleCheckCompliance = async () => {
    try {
      const result = await onCheckCompliance(elements);
      
      setComplianceStatus(result);
      
      setAlertMessage({
        type: result.isCompliant ? 'success' : 'warning',
        message: result.isCompliant 
          ? 'Syllabus is compliant with all regulatory requirements.'
          : 'Compliance issues detected. Please review the compliance details.'
      });
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Error checking compliance: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };

  // Create version
  const handleCreateVersion = async () => {
    if (!versionName.trim()) {
      setAlertMessage({
        type: 'error',
        message: 'Please enter a version name.'
      });
      return;
    }
    
    try {
      await onCreateVersion(versionName, elements);
      
      setAlertMessage({
        type: 'success',
        message: 'Version created successfully.'
      });
      
      setShowCreateVersion(false);
      setVersionName('');
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Error creating version: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };

  // Compare versions
  const handleCompareVersions = () => {
    if (!selectedVersions.current || !selectedVersions.previous) {
      setAlertMessage({
        type: 'error',
        message: 'Please select both versions to compare.'
      });
      return;
    }
    
    setShowVersionComparison(true);
  };

  // Add exercise from library
  const handleSelectExercise = (exercise: Exercise) => {
    // Create a new training element from the exercise
    const newElement: TrainingElement = {
      id: `exercise-${Date.now()}`,
      type: 'exercise',
      title: exercise.title,
      description: exercise.description,
      order: 0, // Will need to be set based on where it's being added
      complianceStatus: 'unknown',
      // Additional properties specific to exercises could be added here
    };
    
    // Set the selected element for editing
    setSelectedElement(newElement);
    setIsEditorOpen(true);
    setShowExerciseLibrary(false);
  };

  // Handle bulk edit
  const handleBulkEdit = async () => {
    if (selectedElementsForBulk.length === 0 || Object.keys(bulkEditValues).length === 0) {
      setAlertMessage({
        type: 'error',
        message: 'Please select elements and specify changes.'
      });
      return;
    }
    
    try {
      await onBulkEdit(selectedElementsForBulk, bulkEditValues);
      
      // Update local state
      setElements(prevElements => 
        prevElements.map(el => 
          selectedElementsForBulk.includes(el.id) 
            ? { ...el, ...bulkEditValues } 
            : el
        )
      );
      
      setAlertMessage({
        type: 'success',
        message: `Updated ${selectedElementsForBulk.length} elements successfully.`
      });
      
      setBulkEditMode(false);
      setSelectedElementsForBulk([]);
      setBulkEditValues({});
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Error updating elements: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };

  // Toggle selection of an element for bulk edit
  const toggleElementSelection = (elementId: string) => {
    setSelectedElementsForBulk(prev => 
      prev.includes(elementId)
        ? prev.filter(id => id !== elementId)
        : [...prev, elementId]
    );
  };

  const tabs: Tab[] = [
    {
      id: 'visual-editor',
      label: 'Visual Editor',
      content: (
        <div>
          <SyllabusBuilder
            syllabusElements={elements}
            onSave={setElements}
            onElementEdit={handleElementEdit}
            onCheckCompliance={handleCheckCompliance}
            complianceStatus={complianceStatus ? {
              overallStatus: complianceStatus.overallStatus,
              message: complianceStatus.isCompliant
                ? 'Syllabus is compliant with all regulatory requirements.'
                : `Compliance issues detected: ${complianceStatus.requirementsNotMet.length} requirements not met, ${complianceStatus.requirementsPartiallyMet.length} partially met.`
            } : undefined}
            templates={templates.map(t => ({ id: t.id, name: t.name }))}
            onApplyTemplate={handleApplyTemplate}
          />
        </div>
      )
    },
    {
      id: 'compliance',
      label: 'Compliance Checking',
      content: (
        <div>
          <Card className="mb-6">
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
              <h3 className="text-lg font-medium mb-2 sm:mb-0">Regulatory Compliance Status</h3>
              
              <div className="flex flex-col sm:flex-row gap-2">
                <Button
                  variant="primary"
                  onClick={handleCheckCompliance}
                >
                  Check Compliance
                </Button>
                
                {complianceStatus && (
                  <Button
                    variant="outline"
                    onClick={() => setShowComplianceDetails(true)}
                  >
                    View Details
                  </Button>
                )}
              </div>
            </div>
            
            {complianceStatus ? (
              <div className="mt-4">
                <div className={`p-4 rounded-md ${
                  complianceStatus.isCompliant ? 'bg-green-50' : 'bg-red-50'
                }`}>
                  <div className="flex">
                    <div className="flex-shrink-0">
                      {complianceStatus.isCompliant ? (
                        <svg className="h-5 w-5 text-green-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                          <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                        </svg>
                      ) : (
                        <svg className="h-5 w-5 text-red-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                          <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                        </svg>
                      )}
                    </div>
                    <div className="ml-3">
                      <h3 className={`text-sm font-medium ${
                        complianceStatus.isCompliant ? 'text-green-800' : 'text-red-800'
                      }`}>
                        {complianceStatus.isCompliant 
                          ? 'Syllabus is compliant with all regulatory requirements'
                          : 'Compliance issues detected'
                        }
                      </h3>
                      <div className="mt-2 text-sm">
                        <p>
                          Requirements met: <span className="font-medium">{complianceStatus.requirementsMet.length}</span><br/>
                          Requirements partially met: <span className="font-medium">{complianceStatus.requirementsPartiallyMet.length}</span><br/>
                          Requirements not met: <span className="font-medium">{complianceStatus.requirementsNotMet.length}</span>
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
                
                {/* Requirements Summary */}
                <div className="mt-6">
                  <h4 className="text-base font-medium mb-2">Requirements Summary</h4>
                  <div className="overflow-hidden bg-white shadow sm:rounded-md">
                    <ul className="divide-y divide-gray-200">
                      {complianceRequirements.map(req => {
                        const status = complianceStatus.requirementsMet.includes(req.id)
                          ? 'met'
                          : complianceStatus.requirementsPartiallyMet.includes(req.id)
                            ? 'partiallyMet'
                            : 'notMet';
                            
                        return (
                          <li key={req.id}>
                            <div className="px-4 py-4 sm:px-6">
                              <div className="flex items-center justify-between">
                                <p className="text-sm font-medium text-blue-600 truncate">
                                  {req.name}
                                </p>
                                <div className="ml-2 flex-shrink-0 flex">
                                  <p className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                                    status === 'met' ? 'bg-green-100 text-green-800' :
                                    status === 'partiallyMet' ? 'bg-yellow-100 text-yellow-800' :
                                    'bg-red-100 text-red-800'
                                  }`}>
                                    {status === 'met' ? 'Met' :
                                     status === 'partiallyMet' ? 'Partially Met' :
                                     'Not Met'}
                                  </p>
                                </div>
                              </div>
                              <div className="mt-2 sm:flex sm:justify-between">
                                <div className="sm:flex">
                                  <p className="flex items-center text-sm text-gray-500">
                                    {req.description}
                                  </p>
                                </div>
                                <div className="mt-2 flex items-center text-sm text-gray-500 sm:mt-0">
                                  <p>
                                    {req.regulationReference}
                                  </p>
                                </div>
                              </div>
                            </div>
                          </li>
                        );
                      })}
                    </ul>
                  </div>
                </div>
              </div>
            ) : (
              <div className="mt-4 p-4 bg-gray-50 rounded-md text-center">
                <p className="text-gray-500">
                  Click "Check Compliance" to validate your syllabus against regulatory requirements.
                </p>
              </div>
            )}
          </Card>
        </div>
      )
    },
    {
      id: 'content-management',
      label: 'Content Management',
      content: (
        <div className="space-y-6">
          {/* Exercise Library */}
          <Card>
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4">
              <h3 className="text-lg font-medium mb-2 sm:mb-0">Exercise Library</h3>
              
              <Button
                variant="primary"
                onClick={() => setShowExerciseLibrary(true)}
              >
                Browse Exercises
              </Button>
            </div>
            
            <p className="text-sm text-gray-500 mb-4">
              The exercise library contains pre-configured exercises that you can add to your syllabus.
              Browse the library to find exercises matching your training needs.
            </p>
            
            {/* Exercise categories summary */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
              {Array.from(new Set(exercises.map(ex => ex.type))).map(type => {
                const count = exercises.filter(ex => ex.type === type).length;
                
                return (
                  <div key={type} className="bg-gray-50 rounded-md p-4">
                    <h4 className="font-medium text-gray-900">{type}</h4>
                    <p className="text-sm text-gray-500 mt-1">{count} exercises available</p>
                    <Button
                      variant="outline"
                      size="small"
                      className="mt-2"
                      onClick={() => {
                        setShowExerciseLibrary(true);
                        // In a real implementation, you would pre-filter by type
                      }}
                    >
                      View
                    </Button>
                  </div>
                );
              })}
            </div>
          </Card>
          
          {/* Version Management */}
          <Card>
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4">
              <h3 className="text-lg font-medium mb-2 sm:mb-0">Version Management</h3>
              
              <div className="flex flex-col sm:flex-row gap-2">
                <Button
                  variant="outline"
                  onClick={() => setShowCreateVersion(true)}
                >
                  Create Version
                </Button>
                
                <Button
                  variant="outline"
                  onClick={handleCompareVersions}
                  disabled={versions.length < 2}
                >
                  Compare Versions
                </Button>
              </div>
            </div>
            
            {versions.length > 0 ? (
              <div className="overflow-hidden bg-white shadow sm:rounded-md">
                <ul className="divide-y divide-gray-200">
                  {versions.map(version => (
                    <li key={version.id}>
                      <div className="px-4 py-4 sm:px-6">
                        <div className="flex items-center justify-between">
                          <p className="text-sm font-medium text-blue-600 truncate">
                            {version.name}
                          </p>
                          <div className="ml-2 flex-shrink-0 flex">
                            <p className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">
                              {new Date(version.createdAt).toLocaleString()}
                            </p>
                          </div>
                        </div>
                        <div className="mt-2 sm:flex sm:justify-between">
                          <div className="sm:flex">
                            <p className="flex items-center text-sm text-gray-500">
                              Created by {version.author}
                            </p>
                          </div>
                          <div className="mt-2 flex items-center text-sm text-gray-500 sm:mt-0">
                            <input
                              type="checkbox"
                              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                              checked={selectedVersions.current === version.id || selectedVersions.previous === version.id}
                              onChange={() => {
                                if (selectedVersions.current === version.id) {
                                  setSelectedVersions({...selectedVersions, current: ''});
                                } else if (selectedVersions.previous === version.id) {
                                  setSelectedVersions({...selectedVersions, previous: ''});
                                } else if (!selectedVersions.current) {
                                  setSelectedVersions({...selectedVersions, current: version.id});
                                } else if (!selectedVersions.previous) {
                                  setSelectedVersions({...selectedVersions, previous: version.id});
                                }
                              }}
                            />
                            <span className="ml-2">Select for comparison</span>
                          </div>
                        </div>
                      </div>
                    </li>
                  ))}
                </ul>
              </div>
            ) : (
              <div className="p-4 bg-gray-50 rounded-md text-center">
                <p className="text-gray-500">
                  No versions available. Create a version to save the current state of your syllabus.
                </p>
              </div>
            )}
          </Card>
          
          {/* Bulk Edit */}
          <Card>
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4">
              <h3 className="text-lg font-medium mb-2 sm:mb-0">Bulk Edit</h3>
              
              <Button
                variant={bulkEditMode ? 'primary' : 'outline'}
                onClick={() => setBulkEditMode(!bulkEditMode)}
              >
                {bulkEditMode ? 'Exit Bulk Edit' : 'Start Bulk Edit'}
              </Button>
            </div>
            
            {bulkEditMode ? (
              <div>
                <p className="text-sm text-gray-500 mb-4">
                  Select elements from the list below and apply changes to all selected elements at once.
                </p>
                
                <div className="bg-blue-50 p-4 rounded-md mb-4">
                  <p className="text-sm text-blue-700">
                    <span className="font-medium">{selectedElementsForBulk.length}</span> elements selected
                  </p>
                </div>
                
                {/* Bulk edit form */}
                <div className="space-y-4 mb-6">
                  <div>
                    <label htmlFor="bulk-type" className="block text-sm font-medium text-gray-700 mb-1">
                      Update Type
                    </label>
                    <select
                      id="bulk-type"
                      className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                      value={bulkEditValues.type || ''}
                      onChange={(e) => setBulkEditValues({...bulkEditValues, type: e.target.value as 'module' | 'lesson' | 'exercise' || undefined})}
                    >
                      <option value="">No Change</option>
                      <option value="module">Module</option>
                      <option value="lesson">Lesson</option>
                      <option value="exercise">Exercise</option>
                    </select>
                  </div>
                  
                  <div>
                    <label htmlFor="bulk-complianceStatus" className="block text-sm font-medium text-gray-700 mb-1">
                      Update Compliance Status
                    </label>
                    <select
                      id="bulk-complianceStatus"
                      className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                      value={bulkEditValues.complianceStatus || ''}
                      onChange={(e) => setBulkEditValues({...bulkEditValues, complianceStatus: e.target.value as 'compliant' | 'nonCompliant' | 'warning' | 'unknown' || undefined})}
                    >
                      <option value="">No Change</option>
                      <option value="compliant">Compliant</option>
                      <option value="nonCompliant">Non-Compliant</option>
                      <option value="warning">Warning</option>
                      <option value="unknown">Unknown</option>
                    </select>
                  </div>
                  
                  <Button
                    variant="primary"
                    onClick={handleBulkEdit}
                    disabled={selectedElementsForBulk.length === 0 || Object.keys(bulkEditValues).length === 0}
                  >
                    Apply Changes to Selected Elements
                  </Button>
                </div>
                
                {/* Elements selection list */}
                <div className="border rounded-md overflow-hidden">
                  <div className="bg-gray-50 px-4 py-2 border-b">
                    <p className="text-sm font-medium text-gray-700">
                      Select Elements to Edit
                    </p>
                  </div>
                  <div className="divide-y max-h-96 overflow-y-auto">
                    {elements.map(element => (
                      <div key={element.id} className="flex items-center px-4 py-3">
                        <input
                          type="checkbox"
                          className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                          checked={selectedElementsForBulk.includes(element.id)}
                          onChange={() => toggleElementSelection(element.id)}
                        />
                        <div className="ml-3">
                          <p className="text-sm font-medium text-gray-900">{element.title}</p>
                          <p className="text-xs text-gray-500">Type: {element.type}</p>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            ) : (
              <p className="text-sm text-gray-500">
                Use bulk edit to make the same changes to multiple elements at once.
                This is useful for updating attributes like compliance status or type for a group of elements.
              </p>
            )}
          </Card>
        </div>
      )
    }
  ];

  return (
    <DndProvider backend={HTML5Backend}>
      <div className="syllabus-customization">
        {/* Alert message */}
        {alertMessage && (
          <Alert
            type={alertMessage.type}
            message={alertMessage.message}
            onClose={() => setAlertMessage(null)}
          />
        )}
        
        {/* Action Buttons */}
        <div className="flex flex-wrap justify-between items-center mb-6">
          <h2 className="text-2xl font-bold text-gray-900">Customize Syllabus</h2>
          
          <div className="flex flex-wrap gap-2 mt-2 sm:mt-0">
            <Button
              variant="primary"
              onClick={handleSaveChanges}
              isLoading={isSaving}
              disabled={isSaving}
            >
              Save Changes
            </Button>
            
            <Button
              variant="outline"
              onClick={handleCheckCompliance}
            >
              Check Compliance
            </Button>
            
            <Button
              variant="outline"
              onClick={() => setShowExerciseLibrary(true)}
            >
              Add from Library
            </Button>
          </div>
        </div>
        
        {/* Main Tabs */}
        <Tabs
          tabs={tabs}
          defaultTabId="visual-editor"
        />
        
        {/* Element Editor Modal */}
        {isEditorOpen && selectedElement && (
          <ElementEditor
            element={selectedElement}
            isOpen={isEditorOpen}
            onClose={() => {
              setIsEditorOpen(false);
              setSelectedElement(null);
            }}
            onSave={handleElementSave}
          />
        )}
        
        {/* Compliance Details Modal */}
        {showComplianceDetails && complianceStatus && (
          <ComplianceDetail
            validationResult={complianceStatus}
            requirements={complianceRequirements}
            onClose={() => setShowComplianceDetails(false)}
          />
        )}
        
        {/* Exercise Library Modal */}
        {showExerciseLibrary && (
          <ExerciseLibrary
            exercises={exercises}
            onSelect={handleSelectExercise}
            onClose={() => setShowExerciseLibrary(false)}
          />
        )}
        
        {/* Version Comparison Modal */}
        {showVersionComparison && (
          <VersionComparison
            currentVersion={versions.find(v => v.id === selectedVersions.current)!}
            previousVersion={versions.find(v => v.id === selectedVersions.previous)!}
            onClose={() => setShowVersionComparison(false)}
          />
        )}
        
        {/* Create Version Modal */}
        {showCreateVersion && (
          <Modal
            isOpen={true}
            onClose={() => setShowCreateVersion(false)}
            title="Create Version"
            size="md"
            footer={
              <>
                <Button
                  variant="outline"
                  onClick={() => setShowCreateVersion(false)}
                >
                  Cancel
                </Button>
                <Button
                  variant="primary"
                  onClick={handleCreateVersion}
                >
                  Create
                </Button>
              </>
            }
          >
            <div className="space-y-4">
              <div>
                <label htmlFor="version-name" className="block text-sm font-medium text-gray-700 mb-1">
                  Version Name
                </label>
                <input
                  type="text"
                  id="version-name"
                  className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                  value={versionName}
                  onChange={(e) => setVersionName(e.target.value)}
                  placeholder="e.g. Initial Draft, Compliance Update, etc."
                />
              </div>
              
              <p className="text-sm text-gray-500">
                Creating a version saves the current state of your syllabus. 
                You can revert to this version later or compare it with other versions.
              </p>
            </div>
          </Modal>
        )}
      </div>
    </DndProvider>
  );
};
// services/syllabusService.ts
import apiClient, { ApiResponse } from './api';

// Learning objective
export interface LearningObjective {
  id: string;
  title: string;
  description: string;
  level: 'beginner' | 'intermediate' | 'advanced';
  tags: string[];
  regulatoryReferences?: {
    standard: string;
    section: string;
    text: string;
  }[];
}

// Competency area
export interface CompetencyArea {
  id: string;
  name: string;
  description: string;
  objectives: LearningObjective[];
}

// Exercise type
export type ExerciseType = 
  'theoretical' | 
  'practical' | 
  'simulation' | 
  'assessment' | 
  'demonstration';

// Exercise
export interface Exercise {
  id: string;
  title: string;
  description: string;
  type: ExerciseType;
  duration: number; // in minutes
  objectives: string[]; // IDs of learning objectives
  prerequisites?: string[]; // IDs of other exercises
  resources?: string[]; // References to training materials
}

// Lesson
export interface Lesson {
  id: string;
  title: string;
  description: string;
  duration: number; // in minutes
  exercises: Exercise[];
}

// Module
export interface Module {
  id: string;
  title: string;
  description: string;
  lessons: Lesson[];
  competencyAreas: string[]; // IDs of competency areas
}

// Syllabus
export interface Syllabus {
  id: string;
  title: string;
  description: string;
  version: string;
  createdAt: string;
  updatedAt: string;
  createdBy: string;
  modules: Module[];
  regulatoryStandards: {
    name: string;
    version: string;
    reference: string;
  }[];
  tags: string[];
}

// Syllabus Template
export interface SyllabusTemplate {
  id: string;
  title: string;
  description: string;
  regulatoryStandards: {
    name: string;
    version: string;
    reference: string;
  }[];
  modules: Partial<Module>[];
}

// Syllabus service
class SyllabusService {
  private readonly baseUrl = '/syllabus';

  // Get all syllabi
  async getAllSyllabi(): Promise<Syllabus[]> {
    const response = await apiClient.get<Syllabus[]>(`${this.baseUrl}`);
    return response.data;
  }

  // Get syllabus by ID
  async getSyllabus(id: string): Promise<Syllabus> {
    const response = await apiClient.get<Syllabus>(`${this.baseUrl}/${id}`);
    return response.data;
  }

  // Create a new syllabus
  async createSyllabus(syllabus: Omit<Syllabus, 'id' | 'createdAt' | 'updatedAt' | 'createdBy'>): Promise<Syllabus> {
    const response = await apiClient.post<Syllabus>(`${this.baseUrl}`, syllabus);
    return response.data;
  }

  // Update an existing syllabus
  async updateSyllabus(id: string, syllabus: Partial<Syllabus>): Promise<Syllabus> {
    const response = await apiClient.put<Syllabus>(`${this.baseUrl}/${id}`, syllabus);
    return response.data;
  }

  // Delete a syllabus
  async deleteSyllabus(id: string): Promise<void> {
    await apiClient.delete(`${this.baseUrl}/${id}`);
  }

  // Get syllabus version history
  async getSyllabusVersions(id: string): Promise<Syllabus[]> {
    const response = await apiClient.get<Syllabus[]>(`${this.baseUrl}/${id}/versions`);
    return response.data;
  }

  // Get a specific version of a syllabus
  async getSyllabusVersion(id: string, version: string): Promise<Syllabus> {
    const response = await apiClient.get<Syllabus>(`${this.baseUrl}/${id}/versions/${version}`);
    return response.data;
  }

  // Get all competency areas
  async getAllCompetencyAreas(): Promise<CompetencyArea[]> {
    const response = await apiClient.get<CompetencyArea[]>(`${this.baseUrl}/competency-areas`);
    return response.data;
  }

  // Get all learning objectives
  async getAllLearningObjectives(): Promise<LearningObjective[]> {
    const response = await apiClient.get<LearningObjective[]>(`${this.baseUrl}/learning-objectives`);
    return response.data;
  }

  // Generate syllabus from documents
  async generateSyllabus(
    documentIds: string[], 
    options: {
      title: string;
      description?: string;
      regulatoryStandards?: string[];
      tags?: string[];
    }
  ): Promise<Syllabus> {
    const response = await apiClient.post<Syllabus>(`${this.baseUrl}/generate`, {
      documentIds,
      ...options
    });
    return response.data;
  }

  // Get all syllabus templates
  async getAllTemplates(): Promise<SyllabusTemplate[]> {
    const response = await apiClient.get<SyllabusTemplate[]>(`${this.baseUrl}/templates`);
    return response.data;
  }

  // Get template by ID
  async getTemplate(id: string): Promise<SyllabusTemplate> {
    const response = await apiClient.get<SyllabusTemplate>(`${this.baseUrl}/templates/${id}`);
    return response.data;
  }

  // Create syllabus from template
  async createFromTemplate(
    templateId: string,
    options: {
      title: string;
      description?: string;
      customizations?: {
        addModules?: Partial<Module>[];
        removeModuleIds?: string[];
        modifyModules?: {
          id: string;
          changes: Partial<Module>;
        }[];
      };
    }
  ): Promise<Syllabus> {
    const response = await apiClient.post<Syllabus>(
      `${this.baseUrl}/templates/${templateId}/create`,
      options
    );
    return response.data;
  }

  // Check regulatory compliance
  async checkCompliance(
    syllabusId: string,
    standard: string
  ): Promise<{
    isCompliant: boolean;
    missingRequirements: {
      requirement: string;
      description: string;
      severity: 'critical' | 'major' | 'minor';
    }[];
    complianceScore: number;
    recommendations: string[];
  }> {
    const response = await apiClient.get<{
      isCompliant: boolean;
      missingRequirements: {
        requirement: string;
        description: string;
        severity: 'critical' | 'major' | 'minor';
      }[];
      complianceScore: number;
      recommendations: string[];
    }>(`${this.baseUrl}/${syllabusId}/compliance/${standard}`);
    return response.data;
  }
}

export const syllabusService = new SyllabusService();
export default syllabusService;

// src/frontend/components/syllabus/SyllabusTemplateLibrary.tsx
import React, { useState, useEffect } from 'react';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { Input } from '../ui/Input';
import { Alert } from '../ui/Alert';
import { Modal } from '../ui/Modal';
import { TrainingElement } from './SyllabusBuilder';

// Types
export interface SyllabusTemplate {
  id: string;
  name: string;
  description: string;
  createdBy: string;
  createdAt: Date;
  updatedAt: Date;
  tags: string[];
  category: string;
  regulatoryFramework?: string;
  elements: TrainingElement[];
  isDefault?: boolean;
  version: string;
  previewImageUrl?: string;
  usageCount: number;
}

export interface SyllabusTemplateCategory {
  id: string;
  name: string;
  description: string;
  count: number;
}

export interface RegulatoryFramework {
  id: string;
  name: string;
  description: string;
  authority: string;
  version: string;
}

// Template Card Component
interface TemplateCardProps {
  template: SyllabusTemplate;
  onView: (template: SyllabusTemplate) => void;
  onApply: (template: SyllabusTemplate) => void;
  onDuplicate: (template: SyllabusTemplate) => void;
}

const TemplateCard: React.FC<TemplateCardProps> = ({
  template,
  onView,
  onApply,
  onDuplicate
}) => {
  return (
    <Card className="h-full flex flex-col">
      <div className="flex-grow">
        {template.previewImageUrl ? (
          <div className="w-full h-40 bg-gray-100 rounded-t-lg overflow-hidden">
            <img
              src={template.previewImageUrl}
              alt={template.name}
              className="w-full h-full object-cover"
            />
          </div>
        ) : (
          <div className="w-full h-40 bg-gray-100 rounded-t-lg flex items-center justify-center text-gray-400">
            <svg className="h-12 w-12" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
          </div>
        )}

        <div className="p-4">
          <div className="flex justify-between items-start">
            <h3 className="text-lg font-medium text-gray-900">{template.name}</h3>
            {template.isDefault && (
              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                Default
              </span>
            )}
          </div>
          
          <p className="mt-1 text-sm text-gray-500 line-clamp-2">{template.description}</p>
          
          <div className="mt-2">
            <div className="flex items-center text-sm text-gray-500">
              <svg className="flex-shrink-0 mr-1.5 h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
              </svg>
              <span>Updated {new Date(template.updatedAt).toLocaleDateString()}</span>
            </div>
            
            <div className="flex items-center mt-1 text-sm text-gray-500">
              <svg className="flex-shrink-0 mr-1.5 h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"></path>
              </svg>
              <span>By {template.createdBy}</span>
            </div>
            
            {template.regulatoryFramework && (
              <div className="flex items-center mt-1 text-sm text-gray-500">
                <svg className="flex-shrink-0 mr-1.5 h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                </svg>
                <span>{template.regulatoryFramework}</span>
              </div>
            )}
          </div>
          
          <div className="mt-2 flex flex-wrap gap-1">
            {template.tags.slice(0, 3).map((tag, index) => (
              <span key={index} className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800">
                {tag}
              </span>
            ))}
            {template.tags.length > 3 && (
              <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800">
                +{template.tags.length - 3}
              </span>
            )}
          </div>
        </div>
      </div>

      <div className="px-4 py-3 bg-gray-50 border-t border-gray-200 rounded-b-lg">
        <div className="flex space-x-2">
          <Button
            variant="outline"
            size="small"
            onClick={() => onView(template)}
          >
            View Details
          </Button>
          <Button
            variant="primary"
            size="small"
            onClick={() => onApply(template)}
          >
            Apply
          </Button>
          <Button
            variant="outline"
            size="small"
            onClick={() => onDuplicate(template)}
          >
            <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
            </svg>
          </Button>
        </div>
      </div>
    </Card>
  );
};

// Template Details Modal
interface TemplateDetailsProps {
  template: SyllabusTemplate;
  isOpen: boolean;
  onClose: () => void;
  onApply: (template: SyllabusTemplate) => void;
  onDuplicate: (template: SyllabusTemplate) => void;
}

const TemplateDetails: React.FC<TemplateDetailsProps> = ({
  template,
  isOpen,
  onClose,
  onApply,
  onDuplicate
}) => {
  const [activeTab, setActiveTab] = useState<'overview' | 'structure' | 'usage'>('overview');
  
  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title={template.name}
      size="lg"
    >
      <div className="mb-4 flex border-b">
        <button
          className={`px-4 py-2 text-sm font-medium ${
            activeTab === 'overview' 
              ? 'text-blue-600 border-b-2 border-blue-600' 
              : 'text-gray-500 hover:text-gray-700'
          }`}
          onClick={() => setActiveTab('overview')}
        >
          Overview
        </button>
        <button
          className={`px-4 py-2 text-sm font-medium ${
            activeTab === 'structure' 
              ? 'text-blue-600 border-b-2 border-blue-600' 
              : 'text-gray-500 hover:text-gray-700'
          }`}
          onClick={() => setActiveTab('structure')}
        >
          Structure
        </button>
        <button
          className={`px-4 py-2 text-sm font-medium ${
            activeTab === 'usage' 
              ? 'text-blue-600 border-b-2 border-blue-600' 
              : 'text-gray-500 hover:text-gray-700'
          }`}
          onClick={() => setActiveTab('usage')}
        >
          Usage
        </button>
      </div>
      
      {activeTab === 'overview' && (
        <div>
          <div className="mb-4">
            <h3 className="text-sm font-medium text-gray-500">Description</h3>
            <p className="mt-1">{template.description}</p>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <h3 className="text-sm font-medium text-gray-500">Category</h3>
              <p className="mt-1">{template.category}</p>
            </div>
            
            <div>
              <h3 className="text-sm font-medium text-gray-500">Regulatory Framework</h3>
              <p className="mt-1">{template.regulatoryFramework || 'None'}</p>
            </div>
            
            <div>
              <h3 className="text-sm font-medium text-gray-500">Created By</h3>
              <p className="mt-1">{template.createdBy}</p>
            </div>
            
            <div>
              <h3 className="text-sm font-medium text-gray-500">Version</h3>
              <p className="mt-1">{template.version}</p>
            </div>
            
            <div>
              <h3 className="text-sm font-medium text-gray-500">Created At</h3>
              <p className="mt-1">{new Date(template.createdAt).toLocaleDateString()}</p>
            </div>
            
            <div>
              <h3 className="text-sm font-medium text-gray-500">Updated At</h3>
              <p className="mt-1">{new Date(template.updatedAt).toLocaleDateString()}</p>
            </div>
          </div>
          
          <div className="mb-4">
            <h3 className="text-sm font-medium text-gray-500">Tags</h3>
            <div className="mt-1 flex flex-wrap gap-1">
              {template.tags.map((tag, index) => (
                <span key={index} className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800">
                  {tag}
                </span>
              ))}
            </div>
          </div>
        </div>
      )}
      
      {activeTab === 'structure' && (
        <div>
          <div className="mb-4">
            <h3 className="text-sm font-medium text-gray-500">Template Structure</h3>
            
            <div className="mt-2 border rounded-md">
              <div className="p-4">
                {/* Simplified template structure display */}
                <ul className="space-y-2">
                  {template.elements.filter(el => !el.parentId).map(module => (
                    <li key={module.id}>
                      <div className="flex items-center">
                        <svg className="h-5 w-5 text-gray-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6h16M4 12h16M4 18h7"></path>
                        </svg>
                        <span className="font-medium">{module.title}</span>
                      </div>
                      
                      {/* Show lessons within this module */}
                      <ul className="ml-6 mt-1 space-y-1">
                        {template.elements
                          .filter(el => el.parentId === module.id)
                          .map(lesson => (
                            <li key={lesson.id}>
                              <div className="flex items-center">
                                <svg className="h-4 w-4 text-gray-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                                </svg>
                                <span>{lesson.title}</span>
                              </div>
                              
                              {/* Show exercises within this lesson */}
                              <ul className="ml-6 mt-1 space-y-1">
                                {template.elements
                                  .filter(el => el.parentId === lesson.id)
                                  .map(exercise => (
                                    <li key={exercise.id} className="flex items-center">
                                      <svg className="h-3 w-3 text-gray-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                      </svg>
                                      <span className="text-sm text-gray-600">{exercise.title}</span>
                                    </li>
                                  ))}
                              </ul>
                            </li>
                          ))}
                      </ul>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </div>
          
          <div className="mb-4">
            <h3 className="text-sm font-medium text-gray-500">Stats</h3>
            <div className="mt-2 grid grid-cols-3 gap-4 text-center">
              <div className="p-4 bg-gray-50 rounded-md">
                <p className="text-2xl font-bold text-gray-900">
                  {template.elements.filter(el => !el.parentId).length}
                </p>
                <p className="text-sm text-gray-500">Modules</p>
              </div>
              <div className="p-4 bg-gray-50 rounded-md">
                <p className="text-2xl font-bold text-gray-900">
                  {template.elements.filter(el => el.parentId && template.elements.find(parent => parent.id === el.parentId && !parent.parentId)).length}
                </p>
                <p className="text-sm text-gray-500">Lessons</p>
              </div>
              <div className="p-4 bg-gray-50 rounded-md">
                <p className="text-2xl font-bold text-gray-900">
                  {template.elements.filter(el => el.parentId && template.elements.find(parent => parent.id === el.parentId && parent.parentId)).length}
                </p>
                <p className="text-sm text-gray-500">Exercises</p>
              </div>
            </div>
          </div>
        </div>
      )}
      
      {activeTab === 'usage' && (
        <div>
          <div className="mb-4">
            <h3 className="text-sm font-medium text-gray-500">Template Usage</h3>
            <div className="mt-2 p-4 bg-gray-50 rounded-md text-center">
              <p className="text-2xl font-bold text-gray-900">{template.usageCount}</p>
              <p className="text-sm text-gray-500">Times Applied</p>
            </div>
          </div>
          
          <div className="mb-4">
            <h3 className="text-sm font-medium text-gray-500">Compatible With</h3>
            {template.regulatoryFramework ? (
              <p className="mt-1">This template is designed to be compliant with {template.regulatoryFramework} regulatory framework.</p>
            ) : (
              <p className="mt-1">This template is not associated with any specific regulatory framework.</p>
            )}
          </div>
        </div>
      )}
      
      <div className="mt-6 flex justify-end space-x-2">
        <Button
          variant="outline"
          onClick={onClose}
        >
          Close
        </Button>
        <Button
          variant="outline"
          onClick={() => onDuplicate(template)}
        >
          Duplicate
        </Button>
        <Button
          variant="primary"
          onClick={() => onApply(template)}
        >
          Apply Template
        </Button>
      </div>
    </Modal>
  );
};

// Main Syllabus Template Library Component
interface SyllabusTemplateLibraryProps {
  templates: SyllabusTemplate[];
  categories: SyllabusTemplateCategory[];
  regulatoryFrameworks: RegulatoryFramework[];
  onApplyTemplate: (templateId: string) => Promise<void>;
  onDuplicateTemplate: (templateId: string) => Promise<void>;
  onCreateTemplate: () => void;
}

export const SyllabusTemplateLibrary: React.FC<SyllabusTemplateLibraryProps> = ({
  templates,
  categories,
  regulatoryFrameworks,
  onApplyTemplate,
  onDuplicateTemplate,
  onCreateTemplate
}) => {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [selectedFramework, setSelectedFramework] = useState<string>('all');
  const [sortBy, setSortBy] = useState<'name' | 'date' | 'popularity'>('date');
  const [selectedTemplate, setSelectedTemplate] = useState<SyllabusTemplate | null>(null);
  const [filteredTemplates, setFilteredTemplates] = useState<SyllabusTemplate[]>(templates);
  const [alertMessage, setAlertMessage] = useState<{ type: 'success' | 'error'; message: string } | null>(null);
  
  // Apply filters when filter criteria change
  useEffect(() => {
    let filtered = [...templates];
    
    // Apply search query filter
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter(template => 
        template.name.toLowerCase().includes(query) || 
        template.description.toLowerCase().includes(query) ||
        template.tags.some(tag => tag.toLowerCase().includes(query))
      );
    }
    
    // Apply category filter
    if (selectedCategory !== 'all') {
      filtered = filtered.filter(template => template.category === selectedCategory);
    }
    
    // Apply framework filter
    if (selectedFramework !== 'all') {
      filtered = filtered.filter(template => template.regulatoryFramework === selectedFramework);
    }
    
    // Apply sorting
    filtered.sort((a, b) => {
      if (sortBy === 'name') {
        return a.name.localeCompare(b.name);
      } else if (sortBy === 'date') {
        return new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime();
      } else { // popularity
        return b.usageCount - a.usageCount;
      }
    });
    
    setFilteredTemplates(filtered);
  }, [templates, searchQuery, selectedCategory, selectedFramework, sortBy]);
  
  // Handle apply template
  const handleApplyTemplate = async (template: SyllabusTemplate) => {
    try {
      await onApplyTemplate(template.id);
      setAlertMessage({
        type: 'success',
        message: `Template "${template.name}" applied successfully.`
      });
      setSelectedTemplate(null);
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to apply template: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };
  
  // Handle duplicate template
  const handleDuplicateTemplate = async (template: SyllabusTemplate) => {
    try {
      await onDuplicateTemplate(template.id);
      setAlertMessage({
        type: 'success',
        message: `Template "${template.name}" duplicated successfully.`
      });
      setSelectedTemplate(null);
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to duplicate template: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };
  
  return (
    <div className="syllabus-template-library">
      {alertMessage && (
        <Alert
          type={alertMessage.type}
          message={alertMessage.message}
          onClose={() => setAlertMessage(null)}
        />
      )}
      
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900">Syllabus Templates</h1>
        <p className="text-gray-500">
          Browse and apply templates to quickly create new training syllabi.
        </p>
      </div>
      
      <Card className="mb-6">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
          <div className="flex-grow">
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg className="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
              </div>
              <Input
                type="text"
                placeholder="Search templates..."
                className="pl-10"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
          </div>
          
          <div className="flex flex-wrap gap-2">
            <div>
              <select
                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
              >
                <option value="all">All Categories</option>
                {categories.map(category => (
                  <option key={category.id} value={category.id}>
                    {category.name} ({category.count})
                  </option>
                ))}
              </select>
            </div>
            
            <div>
              <select
                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={selectedFramework}
                onChange={(e) => setSelectedFramework(e.target.value)}
              >
                <option value="all">All Frameworks</option>
                {regulatoryFrameworks.map(framework => (
                  <option key={framework.id} value={framework.id}>
                    {framework.name}
                  </option>
                ))}
              </select>
            </div>
            
            <div>
              <select
                className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value as 'name' | 'date' | 'popularity')}
              >
                <option value="date">Sort by Date</option>
                <option value="name">Sort by Name</option>
                <option value="popularity">Sort by Popularity</option>
              </select>
            </div>
            
            <Button
              variant="primary"
              onClick={onCreateTemplate}
            >
              Create Template
            </Button>
          </div>
        </div>
      </Card>
      
      {filteredTemplates.length > 0 ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredTemplates.map(template => (
            <TemplateCard
              key={template.id}
              template={template}
              onView={() => setSelectedTemplate(template)}
              onApply={() => handleApplyTemplate(template)}
              onDuplicate={() => handleDuplicateTemplate(template)}
            />
          ))}
        </div>
      ) : (
        <div className="bg-white p-8 rounded-lg border text-center">
          <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
          </svg>
          <h3 className="mt-2 text-sm font-medium text-gray-900">No templates found</h3>
          <p className="mt-1 text-sm text-gray-500">
            Try adjusting your search or filter criteria.
          </p>
          <div className="mt-6">
            <Button
              variant="primary"
              onClick={onCreateTemplate}
            >
              Create New Template
            </Button>
          </div>
        </div>
      )}
      
      {selectedTemplate && (
        <TemplateDetails
          template={selectedTemplate}
          isOpen={!!selectedTemplate}
          onClose={() => setSelectedTemplate(null)}
          onApply={handleApplyTemplate}
          onDuplicate={handleDuplicateTemplate}
        />
      )}
    </div>
  );
};

// src/frontend/components/trainee/TraineePerformance.tsx
import React, { useState, useEffect } from 'react';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { Alert } from '../ui/Alert';
import { Tabs, Tab } from '../ui/Tabs';
import { DataTable, Column } from '../ui/DataTable';

// Types
export interface Trainee {
  id: string;
  firstName: string;
  lastName: string;
  email: string;
  status: 'active' | 'inactive' | 'on_leave';
  profileImage?: string;
  organization?: string;
  department?: string;
  enrolledPrograms: string[];
}

export interface TrainingProgram {
  id: string;
  name: string;
  description: string;
  modules: TrainingModule[];
  startDate?: Date;
  endDate?: Date;
  status: 'active' | 'completed' | 'archived' | 'draft';
  completionCriteria: {
    requiredModules: string[];
    minimumScore: number;
    mandatoryAssessments: string[];
  };
}

export interface TrainingModule {
  id: string;
  name: string;
  description: string;
  duration: number; // in minutes
  lessons: TrainingLesson[];
  status: 'active' | 'completed' | 'locked';
  isMandatory: boolean;
}

export interface TrainingLesson {
  id: string;
  name: string;
  description: string;
  content: string;
  exercises: TrainingExercise[];
  duration: number; // in minutes
  status: 'active' | 'completed' | 'locked';
  isMandatory: boolean;
}

export interface TrainingExercise {
  id: string;
  name: string;
  description: string;
  type: 'knowledge_check' | 'simulation' | 'practical' | 'assessment';
  status: 'active' | 'completed' | 'locked';
  score?: number;
  maxScore: number;
  attempts: number;
  isMandatory: boolean;
}

export interface TraineeProgress {
  traineeId: string;
  programId: string;
  overallProgress: number; // percentage
  overallScore: number;
  startDate: Date;
  lastActivityDate: Date;
  estimatedCompletion?: Date;
  status: 'on_track' | 'behind' | 'ahead' | 'completed';
  moduleProgress: {
    moduleId: string;
    status: 'not_started' | 'in_progress' | 'completed';
    progress: number;
    score?: number;
    startDate?: Date;
    completionDate?: Date;
    lessonProgress: {
      lessonId: string;
      status: 'not_started' | 'in_progress' | 'completed';
      progress: number;
      score?: number;
      exerciseProgress: {
        exerciseId: string;
        status: 'not_started' | 'in_progress' | 'completed';
        score?: number;
        attempts: number;
        lastAttemptDate?: Date;
        timeSpent: number; // in minutes
      }[];
    }[];
  }[];
}

export interface TraineeAssessment {
  id: string;
  traineeId: string;
  programId: string;
  moduleId: string;
  lessonId?: string;
  exerciseId?: string;
  assessmentName: string;
  score: number;
  maxScore: number;
  date: Date;
  completionTime: number; // in minutes
  feedbackItems: {
    aspect: string;
    score: number;
    maxScore: number;
    feedback: string;
    type: 'strength' | 'improvement' | 'neutral';
  }[];
  instructorId?: string;
  instructorName?: string;
  status: 'passed' | 'failed' | 'pending_review';
}

export interface CompetencyRating {
  id: string;
  traineeId: string;
  competencyId: string;
  competencyName: string;
  competencyCategory: string;
  rating: 1 | 2 | 3 | 4 | 5;
  maxRating: 5;
  instructorId?: string;
  instructorName?: string;
  date: Date;
  notes?: string;
  trend: 'improving' | 'declining' | 'stable';
  previousRatings: {
    rating: number;
    date: Date;
  }[];
}

export interface PerformanceMetric {
  id: string;
  traineeId: string;
  metricName: string;
  metricCategory: string;
  value: number;
  unit: string;
  date: Date;
  benchmark?: number;
  percentile?: number;
  isHigherBetter: boolean;
  trend: 'improving' | 'declining' | 'stable';
  history: {
    value: number;
    date: Date;
  }[];
}

// Trainee Performance Component
interface TraineePerformanceProps {
  trainee: Trainee;
  programs: TrainingProgram[];
  progress: TraineeProgress[];
  assessments: TraineeAssessment[];
  competencies: CompetencyRating[];
  metrics: PerformanceMetric[];
  onExportReport: (traineeId: string, programId?: string) => Promise<void>;
}

export const TraineePerformance: React.FC<TraineePerformanceProps> = ({
  trainee,
  programs,
  progress,
  assessments,
  competencies,
  metrics,
  onExportReport
}) => {
  const [selectedProgramId, setSelectedProgramId] = useState<string | 'all'>('all');
  const [filteredProgress, setFilteredProgress] = useState<TraineeProgress[]>(progress);
  const [filteredAssessments, setFilteredAssessments] = useState<TraineeAssessment[]>(assessments);
  const [expandedModules, setExpandedModules] = useState<Set<string>>(new Set());
  const [expandedLessons, setExpandedLessons] = useState<Set<string>>(new Set());
  const [alertMessage, setAlertMessage] = useState<{ type: 'success' | 'error'; message: string } | null>(null);
  
  // Update filtered data when program selection changes
  useEffect(() => {
    if (selectedProgramId === 'all') {
      setFilteredProgress(progress);
      setFilteredAssessments(assessments);
    } else {
      setFilteredProgress(progress.filter(p => p.programId === selectedProgramId));
      setFilteredAssessments(assessments.filter(a => a.programId === selectedProgramId));
    }
  }, [selectedProgramId, progress, assessments]);
  
  // Toggle expanded modules
  const toggleModule = (moduleId: string) => {
    const newExpandedModules = new Set(expandedModules);
    if (newExpandedModules.has(moduleId)) {
      newExpandedModules.delete(moduleId);
    } else {
      newExpandedModules.add(moduleId);
    }
    setExpandedModules(newExpandedModules);
  };
  
  // Toggle expanded lessons
  const toggleLesson = (lessonId: string) => {
    const newExpandedLessons = new Set(expandedLessons);
    if (newExpandedLessons.has(lessonId)) {
      newExpandedLessons.delete(lessonId);
    } else {
      newExpandedLessons.add(lessonId);
    }
    setExpandedLessons(newExpandedLessons);
  };
  
  // Export trainee report
  const handleExportReport = async () => {
    try {
      await onExportReport(trainee.id, selectedProgramId === 'all' ? undefined : selectedProgramId);
      setAlertMessage({
        type: 'success',
        message: 'Performance report exported successfully.'
      });
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to export report: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };
  
  // Get program name by ID
  const getProgramName = (programId: string) => {
    const program = programs.find(p => p.id === programId);
    return program ? program.name : 'Unknown Program';
  };
  
  // Get status badge JSX
  const getStatusBadge = (status: string) => {
    let bgColor = 'bg-gray-100';
    let textColor = 'text-gray-800';
    
    switch (status) {
      case 'on_track':
        bgColor = 'bg-green-100';
        textColor = 'text-green-800';
        break;
      case 'behind':
        bgColor = 'bg-red-100';
        textColor = 'text-red-800';
        break;
      case 'ahead':
        bgColor = 'bg-blue-100';
        textColor = 'text-blue-800';
        break;
      case 'completed':
        bgColor = 'bg-purple-100';
        textColor = 'text-purple-800';
        break;
      case 'passed':
        bgColor = 'bg-green-100';
        textColor = 'text-green-800';
        break;
      case 'failed':
        bgColor = 'bg-red-100';
        textColor = 'text-red-800';
        break;
      case 'pending_review':
        bgColor = 'bg-yellow-100';
        textColor = 'text-yellow-800';
        break;
      case 'active':
        bgColor = 'bg-blue-100';
        textColor = 'text-blue-800';
        break;
      case 'not_started':
        bgColor = 'bg-gray-100';
        textColor = 'text-gray-800';
        break;
      case 'in_progress':
        bgColor = 'bg-yellow-100';
        textColor = 'text-yellow-800';
        break;
    }
    
    return (
      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${bgColor} ${textColor}`}>
        {status.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}
      </span>
    );
  };
  
  // Get trend indicator
  const getTrendIndicator = (trend: string) => {
    switch (trend) {
      case 'improving':
        return (
          <svg className="h-4 w-4 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 10l7-7m0 0l7 7m-7-7v18"></path>
          </svg>
        );
      case 'declining':
        return (
          <svg className="h-4 w-4 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
          </svg>
        );
      case 'stable':
      default:
        return (
          <svg className="h-4 w-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 12h14"></path>
          </svg>
        );
    }
  };
  
  // Define assessment table columns
  const assessmentColumns: Column<TraineeAssessment>[] = [
    {
      key: 'assessmentName',
      header: 'Assessment',
      render: (assessment) => assessment.assessmentName,
      sortable: true
    },
    {
      key: 'score',
      header: 'Score',
      render: (assessment) => (
        <span className="font-medium">
          {assessment.score} / {assessment.maxScore} ({Math.round((assessment.score / assessment.maxScore) * 100)}%)
        </span>
      ),
      sortable: true
    },
    {
      key: 'status',
      header: 'Status',
      render: (assessment) => getStatusBadge(assessment.status),
      sortable: true
    },
    {
      key: 'date',
      header: 'Date',
      render: (assessment) => new Date(assessment.date).toLocaleDateString(),
      sortable: true
    },
    {
      key: 'program',
      header: 'Program',
      render: (assessment) => getProgramName(assessment.programId),
      sortable: true
    }
  ];
  
  // Define competency table columns
  const competencyColumns: Column<CompetencyRating>[] = [
    {
      key: 'competencyName',
      header: 'Competency',
      render: (competency) => (
        <div>
          <div className="font-medium">{competency.competencyName}</div>
          <div className="text-xs text-gray-500">{competency.competencyCategory}</div>
        </div>
      ),
      sortable: true
    },
    {
      key: 'rating',
      header: 'Rating',
      render: (competency) => (
        <div className="flex items-center space-x-1">
          {Array.from({ length: competency.maxRating }).map((_, i) => (
            <div 
              key={i}
              className={`w-5 h-5 rounded-sm ${i < competency.rating ? 'bg-blue-500' : 'bg-gray-200'}`}
            ></div>
          ))}
          <span className="ml-2 font-medium">
            {competency.rating}/{competency.maxRating}
          </span>
        </div>
      ),
      sortable: true
    },
    {
      key: 'date',
      header: 'Date',
      render: (competency) => new Date(competency.date).toLocaleDateString(),
      sortable: true
    },
    {
      key: 'trend',
      header: 'Trend',
      render: (competency) => (
        <div className="flex items-center">
          {getTrendIndicator(competency.trend)}
          <span className="ml-1 text-sm">
            {competency.trend.charAt(0).toUpperCase() + competency.trend.slice(1)}
          </span>
        </div>
      ),
      sortable: true
    }
  ];
  
  // Define metrics table columns
  const metricColumns: Column<PerformanceMetric>[] = [
    {
      key: 'metricName',
      header: 'Metric',
      render: (metric) => (
        <div>
          <div className="font-medium">{metric.metricName}</div>
          <div className="text-xs text-gray-500">{metric.metricCategory}</div>
        </div>
      ),
      sortable: true
    },
    {
      key: 'value',
      header: 'Value',
      render: (metric) => (
        <span className="font-medium">
          {metric.value} {metric.unit}
        </span>
      ),
      sortable: true
    },
    {
      key: 'benchmark',
      header: 'Benchmark',
      render: (metric) => (
        <div>
          {metric.benchmark ? (
            <div className="font-medium">
              {metric.benchmark} {metric.unit}
              {metric.percentile && (
                <span className="ml-1 text-xs text-gray-500">
                  (P{metric.percentile})
                </span>
              )}
            </div>
          ) : (
            <span className="text-gray-500">N/A</span>
          )}
        </div>
      )
    },
    {
      key: 'trend',
      header: 'Trend',
      render: (metric) => (
        <div className="flex items-center">
          {getTrendIndicator(metric.trend)}
          <span className="ml-1 text-sm">
            {metric.trend.charAt(0).toUpperCase() + metric.trend.slice(1)}
          </span>
        </div>
      ),
      sortable: true
    },
    {
      key: 'date',
      header: 'Date',
      render: (metric) => new Date(metric.date).toLocaleDateString(),
      sortable: true
    }
  ];
  
  const tabs: Tab[] = [
    {
      id: 'progress',
      label: 'Progress',
      content: (
        <div className="space-y-6">
          {filteredProgress.length > 0 ? (
            <>
              {filteredProgress.map(progress => {
                // Get the program details
                const program = programs.find(p => p.id === progress.programId);
                if (!program) return null;
                
                return (
                  <Card key={progress.programId} className="mb-6">
                    <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-4">
                      <div>
                        <h3 className="text-lg font-medium">{getProgramName(progress.programId)}</h3>
                        <p className="text-sm text-gray-500">
                          Started: {new Date(progress.startDate).toLocaleDateString()} | 
                          Last Activity: {new Date(progress.lastActivityDate).toLocaleDateString()}
                        </p>
                      </div>
                      
                      <div className="mt-2 md:mt-0 flex flex-wrap gap-2">
                        {getStatusBadge(progress.status)}
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                          Overall Score: {progress.overallScore}%
                        </span>
                      </div>
                    </div>
                    
                    <div className="mb-6">
                      <div className="flex justify-between items-center mb-1">
                        <div className="text-sm font-medium">Overall Progress</div>
                        <div className="text-sm">{progress.overallProgress}%</div>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-2.5">
                        <div 
                          className={`h-2.5 rounded-full ${
                            progress.status === 'behind' ? 'bg-red-600' :
                            progress.status === 'ahead' ? 'bg-blue-600' :
                            progress.status === 'completed' ? 'bg-purple-600' :
                            'bg-green-600'
                          }`}
                          style={{ width: `${progress.overallProgress}%` }}
                        ></div>
                      </div>
                      
                      {progress.estimatedCompletion && (
                        <p className="text-xs text-gray-500 mt-1">
                          Estimated completion: {new Date(progress.estimatedCompletion).toLocaleDateString()}
                        </p>
                      )}
                    </div>
                    
                    <div className="mb-4">
                      <h4 className="text-base font-medium mb-2">Module Progress</h4>
                    </div>
                    
                    <div className="space-y-2">
                      {progress.moduleProgress.map(moduleProgress => {
                        const module = program.modules.find(m => m.id === moduleProgress.moduleId);
                        if (!module) return null;
                        
                        return (
                          <div key={moduleProgress.moduleId}>
                            <div 
                              className={`p-3 rounded-lg cursor-pointer ${
                                expandedModules.has(moduleProgress.moduleId) ? 'bg-gray-100' : 'bg-gray-50 hover:bg-gray-100'
                              }`}
                              onClick={() => toggleModule(moduleProgress.moduleId)}
                            >
                              <div className="flex items-center justify-between">
                                <div className="flex items-center">
                                  <div className={`mr-2 ${expandedModules.has(moduleProgress.moduleId) ? 'transform rotate-90' : ''}`}>
                                    <svg className="h-5 w-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path>
                                    </svg>
                                  </div>
                                  <div className="font-medium">{module.name}</div>
                                </div>
                                <div className="flex items-center space-x-2">
                                  {getStatusBadge(moduleProgress.status)}
                                  <span>{moduleProgress.progress}%</span>
                                </div>
                              </div>
                              
                              <div className="mt-2">
                                <div className="w-full bg-gray-200 rounded-full h-2">
                                  <div 
                                    className={`h-2 rounded-full ${
                                      moduleProgress.status === 'completed' ? 'bg-green-600' :
                                      moduleProgress.status === 'in_progress' ? 'bg-blue-600' :
                                      'bg-gray-400'
                                    }`}
                                    style={{ width: `${moduleProgress.progress}%` }}
                                  ></div>
                                </div>
                              </div>
                            </div>
                            
                            {expandedModules.has(moduleProgress.moduleId) && (
                              <div className="ml-6 mt-2 space-y-2">
                                {moduleProgress.lessonProgress.map(lessonProgress => {
                                  const lesson = module.lessons.find(l => l.id === lessonProgress.lessonId);
                                  if (!lesson) return null;
                                  
                                  return (
                                    <div key={lessonProgress.lessonId}>
                                      <div 
                                        className={`p-3 rounded-lg cursor-pointer ${
                                          expandedLessons.has(lessonProgress.lessonId) ? 'bg-gray-200' : 'bg-gray-100 hover:bg-gray-200'
                                        }`}
                                        onClick={() => toggleLesson(lessonProgress.lessonId)}
                                      >
                                        <div className="flex items-center justify-between">
                                          <div className="flex items-center">
                                            <div className={`mr-2 ${expandedLessons.has(lessonProgress.lessonId) ? 'transform rotate-90' : ''}`}>
                                              <svg className="h-4 w-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path>
                                              </svg>
                                            </div>
                                            <div className="text-sm font-medium">{lesson.name}</div>
                                          </div>
                                          <div className="flex items-center space-x-2">
                                            {getStatusBadge(lessonProgress.status)}
                                            <span className="text-sm">{lessonProgress.progress}%</span>
                                          </div>
                                        </div>
                                      </div>
                                      
                                      {expandedLessons.has(lessonProgress.lessonId) && (
                                        <div className="ml-6 mt-2 space-y-2">
                                          {lessonProgress.exerciseProgress.map((exerciseProgress, index) => {
                                            const exercise = lesson.exercises.find(e => e.id === exerciseProgress.exerciseId);
                                            if (!exercise) return null;
                                            
                                            return (
                                              <div key={exerciseProgress.exerciseId} className="p-2 bg-white rounded border border-gray-200">
                                                <div className="flex items-center justify-between">
                                                  <div className="text-sm">{exercise.name}</div>
                                                  <div className="flex items-center space-x-2">
                                                    {getStatusBadge(exerciseProgress.status)}
                                                    {exerciseProgress.score !== undefined && (
                                                      <span className="text-sm font-medium">
                                                        {exerciseProgress.score}/{exercise.maxScore}
                                                      </span>
                                                    )}
                                                  </div>
                                                </div>
                                                <div className="text-xs text-gray-500 mt-1">
                                                  Attempts: {exerciseProgress.attempts} | 
                                                  Time spent: {exerciseProgress.timeSpent} min
                                                </div>
                                              </div>
                                            );
                                          })}
                                        </div>
                                      )}
                                    </div>
                                  );
                                })}
                              </div>
                            )}
                          </div>
                        );
                      })}
                    </div>
                  </Card>
                );
              })}
            </>
          ) : (
            <div className="p-8 text-center">
              <p className="text-gray-500">No progress data available for the selected program.</p>
            </div>
          )}
        </div>
      )
    },
    {
      id: 'assessments',
      label: 'Assessments',
      content: (
        <Card>
          <div className="mb-4">
            <h3 className="text-lg font-medium">Assessment Results</h3>
          </div>
          
          {filteredAssessments.length > 0 ? (
            <DataTable
              columns={assessmentColumns}
              data={filteredAssessments}
              keyExtractor={(item) => item.id}
              pagination={{
                pageSize: 10,
                totalItems: filteredAssessments.length,
                currentPage: 1,
                onPageChange: () => {}
              }}
            />
          ) : (
            <div className="p-8 text-center">
              <p className="text-gray-500">No assessment data available for the selected program.</p>
            </div>
          )}
        </Card>
      )
    },
    {
      id: 'competencies',
      label: 'Competencies',
      content: (
        <Card>
          <div className="mb-4">
            <h3 className="text-lg font-medium">Competency Ratings</h3>
          </div>
          
          {competencies.length > 0 ? (
            <DataTable
              columns={competencyColumns}
              data={competencies}
              keyExtractor={(item) => item.id}
              pagination={{
                pageSize: 10,
                totalItems: competencies.length,
                currentPage: 1,
                onPageChange: () => {}
              }}
            />
          ) : (
            <div className="p-8 text-center">
              <p className="text-gray-500">No competency data available for this trainee.</p>
            </div>
          )}
        </Card>
      )
    },
    {
      id: 'metrics',
      label: 'Performance Metrics',
      content: (
        <Card>
          <div className="mb-4">
            <h3 className="text-lg font-medium">Performance Metrics</h3>
          </div>
          
          {metrics.length > 0 ? (
            <DataTable
              columns={metricColumns}
              data={metrics}
              keyExtractor={(item) => item.id}
              pagination={{
                pageSize: 10,
                totalItems: metrics.length,
                currentPage: 1,
                onPageChange: () => {}
              }}
            />
          ) : (
            <div className="p-8 text-center">
              <p className="text-gray-500">No performance metrics available for this trainee.</p>
            </div>
          )}
        </Card>
      )
    }
  ];
  
  return (
    <div className="trainee-performance">
      {alertMessage && (
        <Alert
          type={alertMessage.type}
          message={alertMessage.message}
          onClose={() => setAlertMessage(null)}
        />
      )}
      
      {/* Trainee header */}
      <Card className="mb-6">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between">
          <div className="flex items-center">
            <div className="flex-shrink-0 mr-4">
              {trainee.profileImage ? (
                <img
                  src={trainee.profileImage}
                  alt={`${trainee.firstName} ${trainee.lastName}`}
                  className="h-16 w-16 rounded-full object-cover"
                />
              ) : (
                <div className="h-16 w-16 rounded-full bg-gray-200 flex items-center justify-center">
                  <span className="text-xl font-medium text-gray-500">
                    {trainee.firstName.charAt(0)}{trainee.lastName.charAt(0)}
                  </span>
                </div>
              )}
            </div>
            
            <div>
              <h2 className="text-xl font-bold text-gray-900">
                {trainee.firstName} {trainee.lastName}
              </h2>
              <p className="text-sm text-gray-500">{trainee.email}</p>
              <div className="mt-1 flex items-center">
                {getStatusBadge(trainee.status)}
                {trainee.organization && (
                  <span className="ml-2 text-sm text-gray-500">
                    {trainee.organization} {trainee.department ? `(${trainee.department})` : ''}
                  </span>
                )}
              </div>
            </div>
          </div>
          
          <div className="mt-4 md:mt-0">
            <Button
              variant="outline"
              onClick={handleExportReport}
            >
              Export Performance Report
            </Button>
          </div>
        </div>
      </Card>
      
      {/* Program selector */}
      <Card className="mb-6">
        <div className="flex flex-col sm:flex-row sm:items-center">
          <div className="flex-grow">
            <label htmlFor="program-select" className="block text-sm font-medium text-gray-700">
              Select Training Program
            </label>
            <select
              id="program-select"
              className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
              value={selectedProgramId}
              onChange={(e) => setSelectedProgramId(e.target.value)}
            >
              <option value="all">All Programs</option>
              {programs.map(program => (
                <option key={program.id} value={program.id}>
                  {program.name}
                </option>
              ))}
            </select>
          </div>
        </div>
      </Card>
      
      {/* Performance tabs */}
      <Tabs
        tabs={tabs}
        defaultTabId="progress"
      />
    </div>
  );
};

// src/frontend/components/calendar/TrainingCalendar.tsx
import React, { useState, useEffect } from 'react';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { Alert } from '../ui/Alert';
import { Modal } from '../ui/Modal';

// Types
export interface CalendarEvent {
  id: string;
  title: string;
  start: Date;
  end: Date;
  location?: string;
  description?: string;
  type: 'training' | 'assessment' | 'simulator' | 'meeting' | 'other';
  status: 'scheduled' | 'in_progress' | 'completed' | 'cancelled';
  trainees?: string[];
  traineeCount?: number;
  instructorId?: string;
  instructorName?: string;
  allDay?: boolean;
  recurring?: boolean;
  recurrencePattern?: string;
  color?: string;
}

export interface Instructor {
  id: string;
  name: string;
  color?: string;
}

export interface CalendarViewOptions {
  view: 'month' | 'week' | 'day' | 'agenda';
  date: Date;
  filters: {
    eventTypes: string[];
    instructors: string[];
  };
}

// Calendar Components
interface CalendarHeaderProps {
  currentDate: Date;
  view: 'month' | 'week' | 'day' | 'agenda';
  onViewChange: (view: 'month' | 'week' | 'day' | 'agenda') => void;
  onDateChange: (date: Date) => void;
  onCreateEvent: () => void;
}

const CalendarHeader: React.FC<CalendarHeaderProps> = ({
  currentDate,
  view,
  onViewChange,
  onDateChange,
  onCreateEvent
}) => {
  // Format date for display
  const formatHeaderDate = () => {
    const options: Intl.DateTimeFormatOptions = {};
    
    switch (view) {
      case 'month':
        options.month = 'long';
        options.year = 'numeric';
        break;
      case 'week':
        const startOfWeek = new Date(currentDate);
        const day = currentDate.getDay();
        const diff = currentDate.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is Sunday
        startOfWeek.setDate(diff);
        
        const endOfWeek = new Date(startOfWeek);
        endOfWeek.setDate(startOfWeek.getDate() + 6);
        
        if (startOfWeek.getMonth() === endOfWeek.getMonth()) {
          return `${startOfWeek.toLocaleDateString(undefined, { month: 'long' })} ${startOfWeek.getDate()} - ${endOfWeek.getDate()}, ${startOfWeek.getFullYear()}`;
        } else if (startOfWeek.getFullYear() === endOfWeek.getFullYear()) {
          return `${startOfWeek.toLocaleDateString(undefined, { month: 'short' })} ${startOfWeek.getDate()} - ${endOfWeek.toLocaleDateString(undefined, { month: 'short' })} ${endOfWeek.getDate()}, ${startOfWeek.getFullYear()}`;
        } else {
          return `${startOfWeek.toLocaleDateString(undefined, { month: 'short', day: 'numeric', year: 'numeric' })} - ${endOfWeek.toLocaleDateString(undefined, { month: 'short', day: 'numeric', year: 'numeric' })}`;
        }
      case 'day':
        options.weekday = 'long';
        options.month = 'long';
        options.day = 'numeric';
        options.year = 'numeric';
        break;
      case 'agenda':
        options.month = 'long';
        options.year = 'numeric';
        break;
    }
    
    return currentDate.toLocaleDateString(undefined, options);
  };

  // Navigate to previous period
  const goToPrevious = () => {
    const newDate = new Date(currentDate);
    
    switch (view) {
      case 'month':
        newDate.setMonth(newDate.getMonth() - 1);
        break;
      case 'week':
        newDate.setDate(newDate.getDate() - 7);
        break;
      case 'day':
        newDate.setDate(newDate.getDate() - 1);
        break;
      case 'agenda':
        newDate.setMonth(newDate.getMonth() - 1);
        break;
    }
    
    onDateChange(newDate);
  };

  // Navigate to next period
  const goToNext = () => {
    const newDate = new Date(currentDate);
    
    switch (view) {
      case 'month':
        newDate.setMonth(newDate.getMonth() + 1);
        break;
      case 'week':
        newDate.setDate(newDate.getDate() + 7);
        break;
      case 'day':
        newDate.setDate(newDate.getDate() + 1);
        break;
      case 'agenda':
        newDate.setMonth(newDate.getMonth() + 1);
        break;
    }
    
    onDateChange(newDate);
  };

  // Go to today
  const goToToday = () => {
    onDateChange(new Date());
  };

  return (
    <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4">
      <div className="flex items-center mb-4 sm:mb-0">
        <h2 className="text-xl font-bold mr-4">{formatHeaderDate()}</h2>
        <div className="flex space-x-2">
          <button
            type="button"
            className="p-1 rounded-full text-gray-500 hover:text-gray-700 focus:outline-none"
            onClick={goToPrevious}
          >
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7"></path>
            </svg>
          </button>
          <button
            type="button"
            className="p-1 rounded-full text-gray-500 hover:text-gray-700 focus:outline-none"
            onClick={goToNext}
          >
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </button>
          <button
            type="button"
            className="ml-2 px-3 py-1 text-sm bg-gray-100 rounded-md hover:bg-gray-200 focus:outline-none"
            onClick={goToToday}
          >
            Today
          </button>
        </div>
      </div>
      
      <div className="flex items-center">
        <div className="flex border rounded-md overflow-hidden mr-2">
          <button
            type="button"
            className={`px-3 py-1 text-sm ${view === 'month' ? 'bg-blue-600 text-white' : 'bg-white text-gray-700 hover:bg-gray-50'}`}
            onClick={() => onViewChange('month')}
          >
            Month
          </button>
          <button
            type="button"
            className={`px-3 py-1 text-sm ${view === 'week' ? 'bg-blue-600 text-white' : 'bg-white text-gray-700 hover:bg-gray-50'}`}
            onClick={() => onViewChange('week')}
          >
            Week
          </button>
          <button
            type="button"
            className={`px-3 py-1 text-sm ${view === 'day' ? 'bg-blue-600 text-white' : 'bg-white text-gray-700 hover:bg-gray-50'}`}
            onClick={() => onViewChange('day')}
          >
            Day
          </button>
          <button
            type="button"
            className={`px-3 py-1 text-sm ${view === 'agenda' ? 'bg-blue-600 text-white' : 'bg-white text-gray-700 hover:bg-gray-50'}`}
            onClick={() => onViewChange('agenda')}
          >
            Agenda
          </button>
        </div>
        
        <Button
          variant="primary"
          size="small"
          onClick={onCreateEvent}
        >
          <svg className="h-4 w-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
          Add Event
        </Button>
      </div>
    </div>
  );
};

interface DayHeaderProps {
  day: Date;
  isToday: boolean;
}

const DayHeader: React.FC<DayHeaderProps> = ({ day, isToday }) => {
  const dayOfWeek = day.toLocaleDateString(undefined, { weekday: 'short' });
  const dayOfMonth = day.getDate();
  
  return (
    <div className="text-center py-2">
      <div className="text-xs text-gray-500">{dayOfWeek}</div>
      <div className={`text-sm ${isToday ? 'bg-blue-600 text-white rounded-full w-6 h-6 flex items-center justify-center mx-auto' : ''}`}>
        {dayOfMonth}
      </div>
    </div>
  );
};

interface MonthGridProps {
  currentDate: Date;
  events: CalendarEvent[];
  onEventClick: (event: CalendarEvent) => void;
  onDayCellClick: (date: Date) => void;
}

const MonthGrid: React.FC<MonthGridProps> = ({
  currentDate,
  events,
  onEventClick,
  onDayCellClick
}) => {
  // Get days for month grid (includes days from prev/next month to fill grid)
  const getDaysForMonthGrid = () => {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    
    // First day of the month
    const firstDayOfMonth = new Date(year, month, 1);
    
    // Last day of the month
    const lastDayOfMonth = new Date(year, month + 1, 0);
    
    // Day of the week for the first day (0 = Sunday, 1 = Monday, etc.)
    let firstDayOfWeek = firstDayOfMonth.getDay();
    // Adjust for Sunday being 0
    firstDayOfWeek = firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1;
    
    // Number of days in the month
    const daysInMonth = lastDayOfMonth.getDate();
    
    // Days from previous month to include
    const daysFromPrevMonth = firstDayOfWeek;
    
    // Calculate days from next month to include (to make grid complete)
    const totalCells = Math.ceil((daysInMonth + daysFromPrevMonth) / 7) * 7;
    const daysFromNextMonth = totalCells - daysInMonth - daysFromPrevMonth;
    
    // Create days array
    const days: Date[] = [];
    
    // Add days from previous month
    for (let i = 0; i < daysFromPrevMonth; i++) {
      const day = new Date(year, month, 0 - (daysFromPrevMonth - i - 1));
      days.push(day);
    }
    
    // Add days from current month
    for (let i = 1; i <= daysInMonth; i++) {
      const day = new Date(year, month, i);
      days.push(day);
    }
    
    // Add days from next month
    for (let i = 1; i <= daysFromNextMonth; i++) {
      const day = new Date(year, month + 1, i);
      days.push(day);
    }
    
    return days;
  };

  // Check if a date is today
  const isToday = (date: Date) => {
    const today = new Date();
    return date.getDate() === today.getDate() &&
      date.getMonth() === today.getMonth() &&
      date.getFullYear() === today.getFullYear();
  };

  // Check if a date is in the current month
  const isCurrentMonth = (date: Date) => {
    return date.getMonth() === currentDate.getMonth();
  };

  // Get events for a specific day
  const getEventsForDay = (date: Date) => {
    return events.filter(event => {
      const eventStart = new Date(event.start);
      const eventEnd = new Date(event.end);
      
      // Check if the date falls between event start and end dates
      return (
        date.getFullYear() === eventStart.getFullYear() &&
        date.getMonth() === eventStart.getMonth() &&
        date.getDate() === eventStart.getDate()
      ) || (
        event.allDay &&
        date >= eventStart &&
        date <= eventEnd
      );
    });
  };

  // Get background color for event
  const getEventColor = (event: CalendarEvent) => {
    if (event.color) return event.color;
    
    switch (event.type) {
      case 'training':
        return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'assessment':
        return 'bg-green-100 text-green-800 border-green-200';
      case 'simulator':
        return 'bg-purple-100 text-purple-800 border-purple-200';
      case 'meeting':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  // Get event status indicator
  const getEventStatusIndicator = (status: string) => {
    switch (status) {
      case 'scheduled':
        return 'bg-blue-400';
      case 'in_progress':
        return 'bg-yellow-400';
      case 'completed':
        return 'bg-green-400';
      case 'cancelled':
        return 'bg-red-400';
      default:
        return 'bg-gray-400';
    }
  };

  // Format event time
  const formatEventTime = (event: CalendarEvent) => {
    if (event.allDay) return 'All day';
    
    const start = new Date(event.start);
    return start.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  const days = getDaysForMonthGrid();
  
  return (
    <div className="grid grid-cols-7 border rounded-lg overflow-hidden">
      {/* Day headers (Mon, Tue, etc.) */}
      {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map((day, index) => (
        <div key={index} className="text-center py-2 bg-gray-50 border-b">
          <span className="text-sm font-medium text-gray-700">{day}</span>
        </div>
      ))}
      
      {/* Calendar cells */}
      {days.map((day, index) => {
        const dayEvents = getEventsForDay(day);
        
        return (
          <div
            key={index}
            className={`min-h-[120px] p-1 border-t border-l ${
              index % 7 === 6 ? 'border-r' : ''
            } ${
              Math.floor(index / 7) === Math.floor(days.length / 7) - 1 ? 'border-b' : ''
            } ${
              isCurrentMonth(day) ? 'bg-white' : 'bg-gray-50'
            } ${
              isToday(day) ? 'ring-2 ring-inset ring-blue-500' : ''
            }`}
            onClick={() => onDayCellClick(day)}
          >
            <div className="mb-1">
              <span className={`text-sm ${
                isCurrentMonth(day) ? 'text-gray-700' : 'text-gray-400'
              } ${
                isToday(day) ? 'font-bold' : ''
              }`}>
                {day.getDate()}
              </span>
            </div>
            
            <div className="space-y-1 overflow-y-auto max-h-[80px]">
              {dayEvents.slice(0, 3).map(event => (
                <div
                  key={event.id}
                  className={`px-2 py-1 rounded text-xs truncate cursor-pointer border-l-2 ${getEventColor(event)}`}
                  onClick={(e) => {
                    e.stopPropagation();
                    onEventClick(event);
                  }}
                >
                  <div className="flex items-center">
                    <div className={`w-2 h-2 rounded-full mr-1 ${getEventStatusIndicator(event.status)}`}></div>
                    <span className="truncate">
                      {formatEventTime(event)} {event.title}
                    </span>
                  </div>
                </div>
              ))}
              
              {dayEvents.length > 3 && (
                <div className="text-xs text-gray-500 pl-2">
                  +{dayEvents.length - 3} more
                </div>
              )}
            </div>
          </div>
        );
      })}
    </div>
  );
};

interface WeekViewProps {
  currentDate: Date;
  events: CalendarEvent[];
  onEventClick: (event: CalendarEvent) => void;
  onTimeSlotClick: (date: Date) => void;
}

const WeekView: React.FC<WeekViewProps> = ({
  currentDate,
  events,
  onEventClick,
  onTimeSlotClick
}) => {
  // Get days for the week
  const getWeekDays = () => {
    const days: Date[] = [];
    const startOfWeek = new Date(currentDate);
    const day = currentDate.getDay();
    const diff = currentDate.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is Sunday
    startOfWeek.setDate(diff);
    
    for (let i = 0; i < 7; i++) {
      const day = new Date(startOfWeek);
      day.setDate(startOfWeek.getDate() + i);
      days.push(day);
    }
    
    return days;
  };

  // Get time slots
  const getTimeSlots = () => {
    const slots: string[] = [];
    for (let i = 0; i < 24; i++) {
      slots.push(`${i.toString().padStart(2, '0')}:00`);
    }
    return slots;
  };

  // Get events for a specific day and hour
  const getEventsForHour = (day: Date, hour: number) => {
    return events.filter(event => {
      const eventStart = new Date(event.start);
      const eventEnd = new Date(event.end);
      
      // Check if the event falls within this day and hour
      return (
        eventStart.getFullYear() === day.getFullYear() &&
        eventStart.getMonth() === day.getMonth() &&
        eventStart.getDate() === day.getDate() &&
        eventStart.getHours() === hour
      ) || (
        eventEnd.getFullYear() === day.getFullYear() &&
        eventEnd.getMonth() === day.getMonth() &&
        eventEnd.getDate() === day.getDate() &&
        eventEnd.getHours() === hour
      ) || (
        eventStart < day && eventEnd > day &&
        event.allDay
      );
    });
  };

  // Get background color for event
  const getEventColor = (event: CalendarEvent) => {
    if (event.color) return event.color;
    
    switch (event.type) {
      case 'training':
        return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'assessment':
        return 'bg-green-100 text-green-800 border-green-200';
      case 'simulator':
        return 'bg-purple-100 text-purple-800 border-purple-200';
      case 'meeting':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  // Check if a date is today
  const isToday = (date: Date) => {
    const today = new Date();
    return date.getDate() === today.getDate() &&
      date.getMonth() === today.getMonth() &&
      date.getFullYear() === today.getFullYear();
  };

  const weekDays = getWeekDays();
  const timeSlots = getTimeSlots();
  
  return (
    <div className="overflow-x-auto">
      <div className="min-w-[800px] border rounded-lg overflow-hidden">
        {/* Day headers */}
        <div className="grid grid-cols-8 border-b">
          <div className="py-2 border-r bg-gray-50"></div>
          {weekDays.map((day, index) => (
            <div key={index} className="text-center py-2 bg-gray-50 border-r last:border-r-0">
              <DayHeader day={day} isToday={isToday(day)} />
            </div>
          ))}
        </div>
        
        {/* Time slots and events */}
        {timeSlots.map((timeSlot, hourIndex) => (
          <div key={timeSlot} className="grid grid-cols-8 border-b last:border-b-0">
            {/* Time column */}
            <div className="py-2 px-2 text-right text-xs text-gray-500 border-r">
              {timeSlot}
            </div>
            
            {/* Day columns */}
            {weekDays.map((day, dayIndex) => {
              const hourEvents = getEventsForHour(day, hourIndex);
              
              return (
                <div
                  key={dayIndex}
                  className={`py-2 px-1 border-r last:border-r-0 min-h-[60px] ${
                    isToday(day) ? 'bg-blue-50' : ''
                  }`}
                  onClick={() => {
                    const date = new Date(day);
                    date.setHours(hourIndex);
                    onTimeSlotClick(date);
                  }}
                >
                  {hourEvents.map(event => (
                    <div
                      key={event.id}
                      className={`px-2 py-1 rounded text-xs mb-1 cursor-pointer border-l-2 ${getEventColor(event)}`}
                      onClick={(e) => {
                        e.stopPropagation();
                        onEventClick(event);
                      }}
                    >
                      <div className="font-medium truncate">{event.title}</div>
                      {event.location && (
                        <div className="truncate text-xs opacity-75">{event.location}</div>
                      )}
                    </div>
                  ))}
                </div>
              );
            })}
          </div>
        ))}
      </div>
    </div>
  );
};

interface DayViewProps {
  currentDate: Date;
  events: CalendarEvent[];
  onEventClick: (event: CalendarEvent) => void;
  onTimeSlotClick: (date: Date) => void;
}

const DayView: React.FC<DayViewProps> = ({
  currentDate,
  events,
  onEventClick,
  onTimeSlotClick
}) => {
  // Get time slots
  const getTimeSlots = () => {
    const slots: string[] = [];
    for (let i = 0; i < 24; i++) {
      slots.push(`${i.toString().padStart(2, '0')}:00`);
    }
    return slots;
  };

  // Get events for a specific hour
  const getEventsForHour = (hour: number) => {
    return events.filter(event => {
      const eventStart = new Date(event.start);
      const eventEnd = new Date(event.end);
      
      // Check if the event falls within this day and hour
      return (
        eventStart.getFullYear() === currentDate.getFullYear() &&
        eventStart.getMonth() === currentDate.getMonth() &&
        eventStart.getDate() === currentDate.getDate() &&
        eventStart.getHours() === hour
      ) || (
        eventEnd.getFullYear() === currentDate.getFullYear() &&
        eventEnd.getMonth() === currentDate.getMonth() &&
        eventEnd.getDate() === currentDate.getDate() &&
        eventEnd.getHours() === hour
      ) || (
        eventStart.getFullYear() === currentDate.getFullYear() &&
        eventStart.getMonth() === currentDate.getMonth() &&
        eventStart.getDate() === currentDate.getDate() &&
        event.allDay
      );
    });
  };

  // Get background color for event
  const getEventColor = (event: CalendarEvent) => {
    if (event.color) return event.color;
    
    switch (event.type) {
      case 'training':
        return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'assessment':
        return 'bg-green-100 text-green-800 border-green-200';
      case 'simulator':
        return 'bg-purple-100 text-purple-800 border-purple-200';
      case 'meeting':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  // Check if the date is today
  const isToday = () => {
    const today = new Date();
    return currentDate.getDate() === today.getDate() &&
      currentDate.getMonth() === today.getMonth() &&
      currentDate.getFullYear() === today.getFullYear();
  };

  const timeSlots = getTimeSlots();
  
  // Get all-day events
  const allDayEvents = events.filter(event => 
    event.allDay &&
    new Date(event.start).getFullYear() === currentDate.getFullYear() &&
    new Date(event.start).getMonth() === currentDate.getMonth() &&
    new Date(event.start).getDate() === currentDate.getDate()
  );
  
  return (
    <div className="border rounded-lg overflow-hidden">
      {/* All-day events section */}
      {allDayEvents.length > 0 && (
        <div className="border-b bg-gray-50 p-2">
          <div className="text-xs font-medium text-gray-500 mb-1">All day</div>
          <div className="space-y-1">
            {allDayEvents.map(event => (
              <div
                key={event.id}
                className={`px-2 py-1 rounded text-xs cursor-pointer border-l-2 ${getEventColor(event)}`}
                onClick={() => onEventClick(event)}
              >
                <div className="font-medium">{event.title}</div>
                {event.location && (
                  <div className="text-xs opacity-75">{event.location}</div>
                )}
              </div>
            ))}
          </div>
        </div>
      )}
      
      {/* Hourly time slots */}
      <div className="grid grid-cols-[100px_1fr]">
        {timeSlots.map((timeSlot, hourIndex) => {
          const hourEvents = getEventsForHour(hourIndex);
          
          return (
            <React.Fragment key={timeSlot}>
              {/* Time column */}
              <div className="py-2 px-2 text-right text-xs text-gray-500 border-r border-b">
                {timeSlot}
              </div>
              
              {/* Events column */}
              <div
                className={`py-2 px-2 border-b min-h-[60px] ${
                  isToday() && hourIndex === new Date().getHours() ? 'bg-blue-50' : ''
                }`}
                onClick={() => {
                  const date = new Date(currentDate);
                  date.setHours(hourIndex);
                  onTimeSlotClick(date);
                }}
              >
                {hourEvents.map(event => (
                  <div
                    key={event.id}
                    className={`px-2 py-1 rounded text-xs mb-1 cursor-pointer border-l-2 ${getEventColor(event)}`}
                    onClick={(e) => {
                      e.stopPropagation();
                      onEventClick(event);
                    }}
                  >
                    <div className="font-medium">{event.title}</div>
                    {event.location && (
                      <div className="text-xs opacity-75">{event.location}</div>
                    )}
                    {event.traineeCount && (
                      <div className="text-xs opacity-75">{event.traineeCount} trainees</div>
                    )}
                  </div>
                ))}
              </div>
            </React.Fragment>
          );
        })}
      </div>
    </div>
  );
};

interface AgendaViewProps {
  currentDate: Date;
  events: CalendarEvent[];
  onEventClick: (event: CalendarEvent) => void;
}

const AgendaView: React.FC<AgendaViewProps> = ({
  currentDate,
  events,
  onEventClick
}) => {
  // Group events by date
  const groupEventsByDate = () => {
    const grouped: Record<string, CalendarEvent[]> = {};
    
    // Get start and end of month
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    const startOfMonth = new Date(year, month, 1);
    const endOfMonth = new Date(year, month + 1, 0);
    
    // Filter events in the current month
    const monthEvents = events.filter(event => {
      const eventStart = new Date(event.start);
      return eventStart >= startOfMonth && eventStart <= endOfMonth;
    });
    
    // Sort events by date
    monthEvents.sort((a, b) => new Date(a.start).getTime() - new Date(b.start).getTime());
    
    // Group by date
    monthEvents.forEach(event => {
      const dateKey = new Date(event.start).toLocaleDateString();
      if (!grouped[dateKey]) {
        grouped[dateKey] = [];
      }
      grouped[dateKey].push(event);
    });
    
    return grouped;
  };

  // Format event time
  const formatEventTime = (event: CalendarEvent) => {
    if (event.allDay) return 'All day';
    
    const start = new Date(event.start);
    const end = new Date(event.end);
    
    return `${start.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} - ${end.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;
  };

  // Get background color for event
  const getEventColor = (event: CalendarEvent) => {
    if (event.color) return event.color;
    
    switch (event.type) {
      case 'training':
        return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'assessment':
        return 'bg-green-100 text-green-800 border-green-200';
      case 'simulator':
        return 'bg-purple-100 text-purple-800 border-purple-200';
      case 'meeting':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  // Check if a date is today
  const isToday = (dateStr: string) => {
    const today = new Date().toLocaleDateString();
    return dateStr === today;
  };

  const groupedEvents = groupEventsByDate();
  
  return (
    <div className="space-y-4">
      {Object.keys(groupedEvents).length > 0 ? (
        Object.entries(groupedEvents).map(([dateStr, dayEvents]) => (
          <div key={dateStr} className="border rounded-lg overflow-hidden">
            <div className={`py-2 px-4 ${isToday(dateStr) ? 'bg-blue-50' : 'bg-gray-50'} border-b`}>
              <div className="font-medium">
                {new Date(dateStr).toLocaleDateString(undefined, { 
                  weekday: 'long', 
                  month: 'long', 
                  day: 'numeric'
                })}
              </div>
            </div>
            
            <div className="divide-y">
              {dayEvents.map(event => (
                <div
                  key={event.id}
                  className="p-3 hover:bg-gray-50 cursor-pointer"
                  onClick={() => onEventClick(event)}
                >
                  <div className="flex items-start">
                    <div className="min-w-[120px] text-sm text-gray-500">
                      {formatEventTime(event)}
                    </div>
                    <div>
                      <div className={`inline-block px-2 py-1 rounded-full text-xs mb-1 ${
                        event.type === 'training' ? 'bg-blue-100 text-blue-800' :
                        event.type === 'assessment' ? 'bg-green-100 text-green-800' :
                        event.type === 'simulator' ? 'bg-purple-100 text-purple-800' :
                        event.type === 'meeting' ? 'bg-yellow-100 text-yellow-800' :
                        'bg-gray-100 text-gray-800'
                      }`}>
                        {event.type.charAt(0).toUpperCase() + event.type.slice(1)}
                      </div>
                      <div className="font-medium">{event.title}</div>
                      {event.location && (
                        <div className="text-sm text-gray-500">{event.location}</div>
                      )}
                      {event.description && (
                        <div className="text-sm text-gray-500 mt-1">{event.description}</div>
                      )}
                      {event.traineeCount && (
                        <div className="text-sm text-gray-500 mt-1">{event.traineeCount} trainees</div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        ))
      ) : (
        <div className="text-center py-8 text-gray-500">
          No events scheduled for this month.
        </div>
      )}
    </div>
  );
};

interface CalendarFiltersProps {
  filters: {
    eventTypes: string[];
    instructors: string[];
  };
  availableInstructors: Instructor[];
  onFiltersChange: (filters: { eventTypes: string[]; instructors: string[] }) => void;
}

const CalendarFilters: React.FC<CalendarFiltersProps> = ({
  filters,
  availableInstructors,
  onFiltersChange
}) => {
  const eventTypes = ['training', 'assessment', 'simulator', 'meeting', 'other'];
  
  // Toggle event type filter
  const toggleEventType = (type: string) => {
    const newEventTypes = filters.eventTypes.includes(type)
      ? filters.eventTypes.filter(t => t !== type)
      : [...filters.eventTypes, type];
    
    onFiltersChange({
      ...filters,
      eventTypes: newEventTypes
    });
  };
  
  // Toggle instructor filter
  const toggleInstructor = (instructorId: string) => {
    const newInstructors = filters.instructors.includes(instructorId)
      ? filters.instructors.filter(id => id !== instructorId)
      : [...filters.instructors, instructorId];
    
    onFiltersChange({
      ...filters,
      instructors: newInstructors
    });
  };
  
  return (
    <div className="bg-white border rounded-lg p-4 mb-4">
      <div className="mb-4">
        <h3 className="text-sm font-medium text-gray-700 mb-2">Event Types</h3>
        <div className="flex flex-wrap gap-2">
          {eventTypes.map(type => (
            <button
              key={type}
              className={`px-3 py-1 rounded-full text-xs font-medium ${
                filters.eventTypes.includes(type)
                  ? type === 'training' ? 'bg-blue-100 text-blue-800' :
                    type === 'assessment' ? 'bg-green-100 text-green-800' :
                    type === 'simulator' ? 'bg-purple-100 text-purple-800' :
                    type === 'meeting' ? 'bg-yellow-100 text-yellow-800' :
                    'bg-gray-100 text-gray-800'
                  : 'bg-gray-100 text-gray-500'
              }`}
              onClick={() => toggleEventType(type)}
            >
              {type.charAt(0).toUpperCase() + type.slice(1)}
            </button>
          ))}
        </div>
      </div>
      
      {availableInstructors.length > 0 && (
        <div>
          <h3 className="text-sm font-medium text-gray-700 mb-2">Instructors</h3>
          <div className="flex flex-wrap gap-2">
            {availableInstructors.map(instructor => (
              <button
                key={instructor.id}
                className={`px-3 py-1 rounded-full text-xs font-medium ${
                  filters.instructors.includes(instructor.id)
                    ? 'bg-blue-100 text-blue-800'
                    : 'bg-gray-100 text-gray-500'
                }`}
                onClick={() => toggleInstructor(instructor.id)}
              >
                {instructor.name}
              </button>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

interface EventFormProps {
  event?: CalendarEvent;
  instructors: Instructor[];
  onSave: (event: Omit<CalendarEvent, 'id'> & { id?: string }) => Promise<void>;
  onDelete?: (id: string) => Promise<void>;
  onCancel: () => void;
  isEditing: boolean;
}

const EventForm: React.FC<EventFormProps> = ({
  event,
  instructors,
  onSave,
  onDelete,
  onCancel,
  isEditing
}) => {
  const [formData, setFormData] = useState<Omit<CalendarEvent, 'id'> & { id?: string }>({
    title: '',
    start: new Date(),
    end: new Date(new Date().setHours(new Date().getHours() + 1)),
    type: 'training',
    status: 'scheduled',
    location: '',
    description: '',
    allDay: false,
    recurring: false,
    instructorId: '',
    traineeCount: 0
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Initialize form data from event if editing
  useEffect(() => {
    if (event) {
      setFormData({
        ...event,
        start: new Date(event.start),
        end: new Date(event.end)
      });
    }
  }, [event]);

  // Handle form input changes
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target;
    
    if (type === 'checkbox') {
      setFormData({
        ...formData,
        [name]: (e.target as HTMLInputElement).checked
      });
    } else if (name === 'traineeCount') {
      setFormData({
        ...formData,
        [name]: parseInt(value) || 0
      });
    } else {
      setFormData({
        ...formData,
        [name]: value
      });
    }
  };

  // Handle date changes
  const handleDateChange = (name: 'start' | 'end', value: string) => {
    setFormData({
      ...formData,
      [name]: new Date(value)
    });
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError(null);
    
    try {
      // Basic validation
      if (!formData.title.trim()) {
        throw new Error('Title is required');
      }
      
      if (formData.end < formData.start) {
        throw new Error('End time cannot be before start time');
      }
      
      await onSave(formData);
    } catch (error) {
      setError(error instanceof Error ? error.message : 'An error occurred');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Handle event deletion
  const handleDelete = async () => {
    if (!event?.id || !onDelete) return;
    
    if (window.confirm('Are you sure you want to delete this event?')) {
      setIsSubmitting(true);
      
      try {
        await onDelete(event.id);
      } catch (error) {
        setError(error instanceof Error ? error.message : 'An error occurred during deletion');
        setIsSubmitting(false);
      }
    }
  };

  // Format date for datetime-local input
  const formatDateForInput = (date: Date) => {
    return new Date(date.getTime() - (date.getTimezoneOffset() * 60000))
      .toISOString()
      .slice(0, 16);
  };

  return (
    <form onSubmit={handleSubmit}>
      {error && (
        <div className="mb-4 p-3 bg-red-100 text-red-800 rounded">
          {error}
        </div>
      )}
      
      <div className="grid grid-cols-1 gap-4">
        <div>
          <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-1">
            Title*
          </label>
          <input
            type="text"
            id="title"
            name="title"
            value={formData.title}
            onChange={handleInputChange}
            className="block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            required
          />
        </div>
        
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div>
            <label htmlFor="start" className="block text-sm font-medium text-gray-700 mb-1">
              Start*
            </label>
            <input
              type="datetime-local"
              id="start"
              name="start"
              value={formatDateForInput(formData.start)}
              onChange={(e) => handleDateChange('start', e.target.value)}
              className="block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              required
            />
          </div>
          
          <div>
            <label htmlFor="end" className="block text-sm font-medium text-gray-700 mb-1">
              End*
            </label>
            <input
              type="datetime-local"
              id="end"
              name="end"
              value={formatDateForInput(formData.end)}
              onChange={(e) => handleDateChange('end', e.target.value)}
              className="block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              required
            />
          </div>
        </div>
        
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div>
            <label htmlFor="type" className="block text-sm font-medium text-gray-700 mb-1">
              Event Type*
            </label>
            <select
              id="type"
              name="type"
              value={formData.type}
              onChange={handleInputChange}
              className="block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              required
            >
              <option value="training">Training</option>
              <option value="assessment">Assessment</option>
              <option value="simulator">Simulator</option>
              <option value="meeting">Meeting</option>
              <option value="other">Other</option>
            </select>
          </div>
          
          <div>
            <label htmlFor="status" className="block text-sm font-medium text-gray-700 mb-1">
              Status*
            </label>
            <select
              id="status"
              name="status"
              value={formData.status}
              onChange={handleInputChange}
              className="block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              required
            >
              <option value="scheduled">Scheduled</option>
              <option value="in_progress">In Progress</option>
              <option value="completed">Completed</option>
              <option value="cancelled">Cancelled</option>
            </select>
          </div>
        </div>
        
        <div>
          <label htmlFor="location" className="block text-sm font-medium text-gray-700 mb-1">
            Location
          </label>
          <input
            type="text"
            id="location"
            name="location"
            value={formData.location || ''}
            onChange={handleInputChange}
            className="block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        
        <div>
          <label htmlFor="instructorId" className="block text-sm font-medium text-gray-700 mb-1">
            Instructor
          </label>
          <select
            id="instructorId"
            name="instructorId"
            value={formData.instructorId || ''}
            onChange={handleInputChange}
            className="block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          >
            <option value="">No Instructor</option>
            {instructors.map(instructor => (
              <option key={instructor.id} value={instructor.id}>
                {instructor.name}
              </option>
            ))}
          </select>
        </div>
        
        <div>
          <label htmlFor="traineeCount" className="block text-sm font-medium text-gray-700 mb-1">
            Number of Trainees
          </label>
          <input
            type="number"
            id="traineeCount"
            name="traineeCount"
            value={formData.traineeCount || ''}
            onChange={handleInputChange}
            className="block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            min="0"
          />
        </div>
        
        <div>
          <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">
            Description
          </label>
          <textarea
            id="description"
            name="description"
            value={formData.description || ''}
            onChange={handleInputChange}
            rows={3}
            className="block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        
        <div className="flex items-center">
          <input
            type="checkbox"
            id="allDay"
            name="allDay"
            checked={formData.allDay || false}
            onChange={handleInputChange}
            className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
          />
          <label htmlFor="allDay" className="ml-2 block text-sm text-gray-700">
            All Day Event
          </label>
        </div>
        
        <div className="flex items-center">
          <input
            type="checkbox"
            id="recurring"
            name="recurring"
            checked={formData.recurring || false}
            onChange={handleInputChange}
            className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
          />
          <label htmlFor="recurring" className="ml-2 block text-sm text-gray-700">
            Recurring Event
          </label>
        </div>
        
        {formData.recurring && (
          <div>
            <label htmlFor="recurrencePattern" className="block text-sm font-medium text-gray-700 mb-1">
              Recurrence Pattern
            </label>
            <select
              id="recurrencePattern"
              name="recurrencePattern"
              value={formData.recurrencePattern || ''}
              onChange={handleInputChange}
              className="block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            >
              <option value="daily">Daily</option>
              <option value="weekly">Weekly</option>
              <option value="biweekly">Bi-weekly</option>
              <option value="monthly">Monthly</option>
            </select>
          </div>
        )}
      </div>
      
      <div className="mt-6 flex justify-end space-x-3">
        {isEditing && onDelete && (
          <Button
            variant="danger"
            type="button"
            onClick={handleDelete}
            disabled={isSubmitting}
          >
            Delete
          </Button>
        )}
        <Button
          variant="outline"
          type="button"
          onClick={onCancel}
          disabled={isSubmitting}
        >
          Cancel
        </Button>
        <Button
          variant="primary"
          type="submit"
          isLoading={isSubmitting}
          disabled={isSubmitting}
        >
          {isEditing ? 'Update' : 'Create'}
        </Button>
      </div>
    </form>
  );
};

// Main Calendar Component
interface TrainingCalendarProps {
  events: CalendarEvent[];
  instructors: Instructor[];
  onCreateEvent: (event: Omit<CalendarEvent, 'id'>) => Promise<void>;
  onUpdateEvent: (event: CalendarEvent) => Promise<void>;
  onDeleteEvent: (id: string) => Promise<void>;
}

export const TrainingCalendar: React.FC<TrainingCalendarProps> = ({
  events,
  instructors,
  onCreateEvent,
  onUpdateEvent,
  onDeleteEvent
}) => {
  const [view, setView] = useState<'month' | 'week' | 'day' | 'agenda'>('month');
  const [currentDate, setCurrentDate] = useState(new Date());
  const [filters, setFilters] = useState<{ eventTypes: string[]; instructors: string[] }>({
    eventTypes: ['training', 'assessment', 'simulator', 'meeting', 'other'],
    instructors: instructors.map(instructor => instructor.id)
  });
  const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null);
  const [showEventModal, setShowEventModal] = useState(false);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [modalStartDate, setModalStartDate] = useState<Date | null>(null);
  const [alertMessage, setAlertMessage] = useState<{ type: 'success' | 'error'; message: string } | null>(null);

  // Filter events based on selected filters
  const filteredEvents = events.filter(event => {
    // Check event type filter
    if (!filters.eventTypes.includes(event.type)) {
      return false;
    }
    
    // Check instructor filter
    if (event.instructorId && !filters.instructors.includes(event.instructorId)) {
      return false;
    }
    
    return true;
  });

  // Handle view change
  const handleViewChange = (newView: 'month' | 'week' | 'day' | 'agenda') => {
    setView(newView);
  };

  // Handle date change
  const handleDateChange = (date: Date) => {
    setCurrentDate(date);
  };

  // Handle event click
  const handleEventClick = (event: CalendarEvent) => {
    setSelectedEvent(event);
    setShowEventModal(true);
  };

  // Handle day cell click in month view
  const handleDayCellClick = (date: Date) => {
    setModalStartDate(date);
    setShowCreateModal(true);
  };

  // Handle time slot click in week/day view
  const handleTimeSlotClick = (date: Date) => {
    setModalStartDate(date);
    setShowCreateModal(true);
  };

  // Handle create event
  const handleCreateEvent = () => {
    setModalStartDate(null);
    setShowCreateModal(true);
  };

  // Handle save event
  const handleSaveEvent = async (eventData: Omit<CalendarEvent, 'id'> & { id?: string }) => {
    try {
      if (eventData.id) {
        // Update existing event
        await onUpdateEvent(eventData as CalendarEvent);
        setAlertMessage({
          type: 'success',
          message: 'Event updated successfully'
        });
      } else {
        // Create new event
        await onCreateEvent(eventData);
        setAlertMessage({
          type: 'success',
          message: 'Event created successfully'
        });
      }
      
      setShowEventModal(false);
      setShowCreateModal(false);
      setSelectedEvent(null);
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to save event: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };

  // Handle delete event
  const handleDeleteEvent = async (id: string) => {
    try {
      await onDeleteEvent(id);
      
      setAlertMessage({
        type: 'success',
        message: 'Event deleted successfully'
      });
      
      setShowEventModal(false);
      setSelectedEvent(null);
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to delete event: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };

  return (
    <div className="training-calendar">
      {alertMessage && (
        <Alert
          type={alertMessage.type}
          message={alertMessage.message}
          onClose={() => setAlertMessage(null)}
        />
      )}
      
      <Card className="mb-6">
        <CalendarHeader
          currentDate={currentDate}
          view={view}
          onViewChange={handleViewChange}
          onDateChange={handleDateChange}
          onCreateEvent={handleCreateEvent}
        />
        
        <CalendarFilters
          filters={filters}
          availableInstructors={instructors}
          onFiltersChange={setFilters}
        />
        
        {view === 'month' && (
          <MonthGrid
            currentDate={currentDate}
            events={filteredEvents}
            onEventClick={handleEventClick}
            onDayCellClick={handleDayCellClick}
          />
        )}
        
        {view === 'week' && (
          <WeekView
            currentDate={currentDate}
            events={filteredEvents}
            onEventClick={handleEventClick}
            onTimeSlotClick={handleTimeSlotClick}
          />
        )}
        
        {view === 'day' && (
          <DayView
            currentDate={currentDate}
            events={filteredEvents}
            onEventClick={handleEventClick}
            onTimeSlotClick={handleTimeSlotClick}
          />
        )}
        
        {view === 'agenda' && (
          <AgendaView
            currentDate={currentDate}
            events={filteredEvents}
            onEventClick={handleEventClick}
          />
        )}
      </Card>
      
      {/* Event Detail Modal */}
      <Modal
        isOpen={showEventModal}
        onClose={() => setShowEventModal(false)}
        title="Event Details"
        size="lg"
      >
        {selectedEvent && (
          <EventForm
            event={selectedEvent}
            instructors={instructors}
            onSave={handleSaveEvent}
            onDelete={handleDeleteEvent}
            onCancel={() => setShowEventModal(false)}
            isEditing={true}
          />
        )}
      </Modal>
      
      {/* Create Event Modal */}
      <Modal
        isOpen={showCreateModal}
        onClose={() => setShowCreateModal(false)}
        title="Create Event"
        size="lg"
      >
        <EventForm
          instructors={instructors}
          onSave={handleSaveEvent}
          onCancel={() => setShowCreateModal(false)}
          isEditing={false}
          event={
            modalStartDate
              ? {
                  id: '',
                  title: '',
                  start: modalStartDate,
                  end: new Date(new Date(modalStartDate).setHours(modalStartDate.getHours() + 1)),
                  type: 'training',
                  status: 'scheduled'
                }
              : undefined
          }
        />
      </Modal>
    </div>
  );
};

// src/frontend/components/auth/UserAuth.tsx
import React, { useState } from 'react';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { Input } from '../ui/Input';
import { Alert } from '../ui/Alert';
import { Form } from '../ui/Form';

// Types
export interface User {
  id: string;
  username: string;
  email: string;
  firstName: string;
  lastName: string;
  role: UserRole;
  permissions: Permission[];
  photoUrl?: string;
  organization?: string;
  department?: string;
  lastLogin?: Date;
}

export enum UserRole {
  ADMIN = 'admin',
  INSTRUCTOR = 'instructor',
  TRAINEE = 'trainee',
  CONTENT_MANAGER = 'content_manager',
  COMPLIANCE_OFFICER = 'compliance_officer'
}

export enum Permission {
  VIEW_DASHBOARD = 'view_dashboard',
  EDIT_SYLLABUS = 'edit_syllabus',
  APPROVE_SYLLABUS = 'approve_syllabus',
  CREATE_ASSESSMENT = 'create_assessment',
  GRADE_ASSESSMENT = 'grade_assessment',
  MANAGE_USERS = 'manage_users',
  VIEW_ANALYTICS = 'view_analytics',
  EXPORT_REPORTS = 'export_reports',
  CHECK_COMPLIANCE = 'check_compliance',
  UPLOAD_DOCUMENTS = 'upload_documents'
}

// Login Form Component
interface LoginFormProps {
  onLogin: (username: string, password: string) => Promise<void>;
  onForgotPassword: (email: string) => Promise<void>;
  isLoading: boolean;
}

export const LoginForm: React.FC<LoginFormProps> = ({
  onLogin,
  onForgotPassword,
  isLoading
}) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [showForgotPassword, setShowForgotPassword] = useState(false);
  const [email, setEmail] = useState('');
  const [error, setError] = useState<string | null>(null);
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    
    if (!username || !password) {
      setError('Username and password are required.');
      return;
    }
    
    try {
      await onLogin(username, password);
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Login failed. Please try again.');
    }
  };
  
  const handleForgotPassword = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    
    if (!email) {
      setError('Email is required.');
      return;
    }
    
    try {
      await onForgotPassword(email);
      setError(null);
      alert('Password reset link has been sent to your email.');
      setShowForgotPassword(false);
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Failed to send reset link. Please try again.');
    }
  };
  
  return (
    <Card className="max-w-md mx-auto">
      <div className="px-4 py-5 sm:p-6">
        <div className="text-center mb-6">
          <h2 className="text-2xl font-bold text-gray-900">
            Advanced Pilot Training Platform
          </h2>
          <p className="mt-1 text-sm text-gray-500">
            Sign in to your account
          </p>
        </div>
        
        {error && <Alert type="error" message={error} onClose={() => setError(null)} />}
        
        {!showForgotPassword ? (
          <Form onSubmit={handleSubmit}>
            <Input
              label="Username"
              type="text"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              required
            />
            
            <Input
              label="Password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
            
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center">
                <input
                  id="remember-me"
                  name="remember-me"
                  type="checkbox"
                  className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                />
                <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-900">
                  Remember me
                </label>
              </div>
              
              <div className="text-sm">
                <button
                  type="button"
                  className="font-medium text-blue-600 hover:text-blue-500"
                  onClick={() => setShowForgotPassword(true)}
                >
                  Forgot your password?
                </button>
              </div>
            </div>
            
            <Button
              variant="primary"
              type="submit"
              className="w-full"
              isLoading={isLoading}
              disabled={isLoading}
            >
              Sign In
            </Button>
          </Form>
        ) : (
          <Form onSubmit={handleForgotPassword}>
            <Input
              label="Email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
            
            <div className="flex justify-between mt-6">
              <Button
                variant="outline"
                type="button"
                onClick={() => setShowForgotPassword(false)}
              >
                Back to Login
              </Button>
              
              <Button
                variant="primary"
                type="submit"
                isLoading={isLoading}
                disabled={isLoading}
              >
                Send Reset Link
              </Button>
            </div>
          </Form>
        )}
      </div>
    </Card>
  );
};

// User Profile Component
interface UserProfileProps {
  user: User;
  onUpdateProfile: (updates: Partial<User>) => Promise<void>;
  onChangePassword: (currentPassword: string, newPassword: string) => Promise<void>;
  onUploadProfilePhoto: (file: File) => Promise<string>;
}

export const UserProfile: React.FC<UserProfileProps> = ({
  user,
  onUpdateProfile,
  onChangePassword,
  onUploadProfilePhoto
}) => {
  const [isEditing, setIsEditing] = useState(false);
  const [isChangingPassword, setIsChangingPassword] = useState(false);
  const [formData, setFormData] = useState({
    firstName: user.firstName,
    lastName: user.lastName,
    email: user.email,
    organization: user.organization || '',
    department: user.department || ''
  });
  const [passwordData, setPasswordData] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };
  
  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setPasswordData(prev => ({ ...prev, [name]: value }));
  };
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setSuccessMessage(null);
    setIsSubmitting(true);
    
    try {
      await onUpdateProfile(formData);
      setSuccessMessage('Profile updated successfully.');
      setIsEditing(false);
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Failed to update profile.');
    } finally {
      setIsSubmitting(false);
    }
  };
  
  const handlePasswordSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setSuccessMessage(null);
    
    if (passwordData.newPassword !== passwordData.confirmPassword) {
      setError('New passwords do not match.');
      return;
    }
    
    setIsSubmitting(true);
    
    try {
      await onChangePassword(passwordData.currentPassword, passwordData.newPassword);
      setSuccessMessage('Password changed successfully.');
      setIsChangingPassword(false);
      setPasswordData({
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
      });
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Failed to change password.');
    } finally {
      setIsSubmitting(false);
    }
  };
  
  const handlePhotoUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;
    
    try {
      const photoUrl = await onUploadProfilePhoto(file);
      await onUpdateProfile({ photoUrl });
      setSuccessMessage('Profile photo updated successfully.');
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Failed to upload profile photo.');
    }
  };
  
  // Function to get human-readable role name
  const getRoleName = (role: UserRole): string => {
    switch (role) {
      case UserRole.ADMIN:
        return 'Administrator';
      case UserRole.INSTRUCTOR:
        return 'Instructor';
      case UserRole.TRAINEE:
        return 'Trainee';
      case UserRole.CONTENT_MANAGER:
        return 'Content Manager';
      case UserRole.COMPLIANCE_OFFICER:
        return 'Compliance Officer';
      default:
        return role;
    }
  };
  
  return (
    <div className="user-profile">
      {error && <Alert type="error" message={error} onClose={() => setError(null)} />}
      {successMessage && <Alert type="success" message={successMessage} onClose={() => setSuccessMessage(null)} />}
      
      <Card className="mb-6">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between">
          <div className="flex items-center mb-4 md:mb-0">
            <div className="flex-shrink-0 mr-4">
              {user.photoUrl ? (
                <img
                  src={user.photoUrl}
                  alt={`${user.firstName} ${user.lastName}`}
                  className="h-16 w-16 rounded-full object-cover"
                />
              ) : (
                <div className="h-16 w-16 rounded-full bg-gray-200 flex items-center justify-center">
                  <span className="text-xl font-medium text-gray-500">
                    {user.firstName.charAt(0)}{user.lastName.charAt(0)}
                  </span>
                </div>
              )}
            </div>
            
            <div>
              <h2 className="text-xl font-bold text-gray-900">
                {user.firstName} {user.lastName}
              </h2>
              <p className="text-sm text-gray-500">{getRoleName(user.role)}</p>
              {user.lastLogin && (
                <p className="text-xs text-gray-400">
                  Last login: {new Date(user.lastLogin).toLocaleString()}
                </p>
              )}
            </div>
          </div>
          
          <div className="flex flex-wrap gap-2">
            <div className="relative">
              <input
                type="file"
                id="profile-photo"
                className="hidden"
                accept="image/*"
                onChange={handlePhotoUpload}
              />
              <Button
                variant="outline"
                size="small"
                onClick={() => document.getElementById('profile-photo')?.click()}
              >
                Change Photo
              </Button>
            </div>
            
            <Button
              variant="outline"
              size="small"
              onClick={() => setIsChangingPassword(true)}
            >
              Change Password
            </Button>
            
            <Button
              variant={isEditing ? 'primary' : 'outline'}
              size="small"
              onClick={() => setIsEditing(!isEditing)}
            >
              {isEditing ? 'Cancel' : 'Edit Profile'}
            </Button>
          </div>
        </div>
      </Card>
      
      {isEditing ? (
        <Card>
          <h3 className="text-lg font-medium mb-4">Edit Profile</h3>
          
          <Form onSubmit={handleSubmit}>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Input
                label="First Name"
                name="firstName"
                value={formData.firstName}
                onChange={handleInputChange}
                required
              />
              
              <Input
                label="Last Name"
                name="lastName"
                value={formData.lastName}
                onChange={handleInputChange}
                required
              />
              
              <Input
                label="Email"
                name="email"
                type="email"
                value={formData.email}
                onChange={handleInputChange}
                required
              />
              
              <Input
                label="Organization"
                name="organization"
                value={formData.organization}
                onChange={handleInputChange}
              />
              
              <Input
                label="Department"
                name="department"
                value={formData.department}
                onChange={handleInputChange}
              />
            </div>
            
            <div className="flex justify-end mt-6 space-x-2">
              <Button
                variant="outline"
                type="button"
                onClick={() => setIsEditing(false)}
              >
                Cancel
              </Button>
              
              <Button
                variant="primary"
                type="submit"
                isLoading={isSubmitting}
                disabled={isSubmitting}
              >
                Save Changes
              </Button>
            </div>
          </Form>
        </Card>
      ) : isChangingPassword ? (
        <Card>
          <h3 className="text-lg font-medium mb-4">Change Password</h3>
          
          <Form onSubmit={handlePasswordSubmit}>
            <Input
              label="Current Password"
              name="currentPassword"
              type="password"
              value={passwordData.currentPassword}
              onChange={handlePasswordChange}
              required
            />
            
            <Input
              label="New Password"
              name="newPassword"
              type="password"
              value={passwordData.newPassword}
              onChange={handlePasswordChange}
              required
            />
            
            <Input
              label="Confirm New Password"
              name="confirmPassword"
              type="password"
              value={passwordData.confirmPassword}
              onChange={handlePasswordChange}
              required
            />
            
            <div className="flex justify-end mt-6 space-x-2">
              <Button
                variant="outline"
                type="button"
                onClick={() => setIsChangingPassword(false)}
              >
                Cancel
              </Button>
              
              <Button
                variant="primary"
                type="submit"
                isLoading={isSubmitting}
                disabled={isSubmitting}
              >
                Change Password
              </Button>
            </div>
          </Form>
        </Card>
      ) : (
        <Card>
          <h3 className="text-lg font-medium mb-4">Profile Information</h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <p className="text-sm font-medium text-gray-500">Username</p>
              <p className="mt-1">{user.username}</p>
            </div>
            
            <div>
              <p className="text-sm font-medium text-gray-500">Email</p>
              <p className="mt-1">{user.email}</p>
            </div>
            
            <div>
              <p className="text-sm font-medium text-gray-500">Organization</p>
              <p className="mt-1">{user.organization || 'Not specified'}</p>
            </div>
            
            <div>
              <p className="text-sm font-medium text-gray-500">Department</p>
              <p className="mt-1">{user.department || 'Not specified'}</p>
            </div>
            
            <div>
              <p className="text-sm font-medium text-gray-500">Role</p>
              <p className="mt-1">{getRoleName(user.role)}</p>
            </div>
          </div>
          
          <div className="mt-6">
            <h4 className="text-sm font-medium text-gray-500 mb-2">Permissions</h4>
            <div className="flex flex-wrap gap-2">
              {user.permissions.map(permission => (
                <span 
                  key={permission} 
                  className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
                >
                  {permission.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}
                </span>
              ))}
            </div>
          </div>
        </Card>
      )}
    </div>
  );
};

// User Authentication Provider
import { createContext, useContext } from 'react';

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  login: (username: string, password: string) => Promise<void>;
  logout: () => Promise<void>;
  forgotPassword: (email: string) => Promise<void>;
  updateProfile: (updates: Partial<User>) => Promise<void>;
  changePassword: (currentPassword: string, newPassword: string) => Promise<void>;
  uploadProfilePhoto: (file: File) => Promise<string>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: React.ReactNode;
  authService: {
    login: (username: string, password: string) => Promise<User>;
    logout: () => Promise<void>;
    forgotPassword: (email: string) => Promise<void>;
    updateProfile: (userId: string, updates: Partial<User>) => Promise<User>;
    changePassword: (userId: string, currentPassword: string, newPassword: string) => Promise<void>;
    uploadProfilePhoto: (userId: string, file: File) => Promise<string>;
    getCurrentUser: () => Promise<User | null>;
  };
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children, authService }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  
  // Initialize user on mount
  useEffect(() => {
    const initAuth = async () => {
      try {
        const currentUser = await authService.getCurrentUser();
        setUser(currentUser);
      } catch (error) {
        console.error('Failed to initialize auth:', error);
      } finally {
        setIsLoading(false);
      }
    };
    
    initAuth();
  }, [authService]);
  
  const login = async (username: string, password: string) => {
    setIsLoading(true);
    try {
      const user = await authService.login(username, password);
      setUser(user);
    } finally {
      setIsLoading(false);
    }
  };
  
  const logout = async () => {
    setIsLoading(true);
    try {
      await authService.logout();
      setUser(null);
    } finally {
      setIsLoading(false);
    }
  };
  
  const forgotPassword = async (email: string) => {
    await authService.forgotPassword(email);
  };
  
  const updateProfile = async (updates: Partial<User>) => {
    if (!user) throw new Error('User not authenticated');
    
    const updatedUser = await authService.updateProfile(user.id, updates);
    setUser(updatedUser);
  };
  
  const changePassword = async (currentPassword: string, newPassword: string) => {
    if (!user) throw new Error('User not authenticated');
    
    await authService.changePassword(user.id, currentPassword, newPassword);
  };
  
  const uploadProfilePhoto = async (file: File) => {
    if (!user) throw new Error('User not authenticated');
    
    return await authService.uploadProfilePhoto(user.id, file);
  };
  
  const value = {
    user,
    isAuthenticated: !!user,
    isLoading,
    login,
    logout,
    forgotPassword,
    updateProfile,
    changePassword,
    uploadProfilePhoto
  };
  
  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

// Protected Route Component
interface ProtectedRouteProps {
  children: React.ReactNode;
  requiredPermissions?: Permission[];
  fallback?: React.ReactNode;
}

export const ProtectedRoute: React.FC<ProtectedRouteProps> = ({
  children,
  requiredPermissions,
  fallback = <div>You do not have permission to access this page.</div>
}) => {
  const { user, isAuthenticated, isLoading } = useAuth();
  
  if (isLoading) {
    return <div>Loading...</div>;
  }
  
  if (!isAuthenticated) {
    // In a real app, this would redirect to login
    return <div>Please log in to access this page.</div>;
  }
  
  // Check permissions if required
  if (requiredPermissions && requiredPermissions.length > 0) {
    const hasPermission = requiredPermissions.every(permission => 
      user?.permissions.includes(permission)
    );
    
    if (!hasPermission) {
      return <>{fallback}</>;
    }
  }
  
  return <>{children}</>;
};

// src/frontend/components/admin/UserPermissions.tsx
import React, { useState, useEffect } from 'react';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { Alert } from '../ui/Alert';
import { DataTable, Column } from '../ui/DataTable';
import { User, UserRole, Permission } from '../auth/UserAuth';

// Types
interface Role {
  id: UserRole;
  name: string;
  description: string;
  permissions: Permission[];
}

// Component Props
interface UserPermissionsProps {
  users: User[];
  roles: Role[];
  onUpdateUserRole: (userId: string, roleId: UserRole) => Promise<void>;
  onUpdateUserPermissions: (userId: string, permissions: Permission[]) => Promise<void>;
  onUpdateRolePermissions: (roleId: UserRole, permissions: Permission[]) => Promise<void>;
}

export const UserPermissions: React.FC<UserPermissionsProps> = ({
  users,
  roles,
  onUpdateUserRole,
  onUpdateUserPermissions,
  onUpdateRolePermissions
}) => {
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [selectedRole, setSelectedRole] = useState<Role | null>(null);
  const [activeTab, setActiveTab] = useState<'users' | 'roles'>('users');
  const [alertMessage, setAlertMessage] = useState<{ type: 'success' | 'error'; message: string } | null>(null);
  const [editingUserPermissions, setEditingUserPermissions] = useState(false);
  const [editingRolePermissions, setEditingRolePermissions] = useState(false);
  const [userPermissions, setUserPermissions] = useState<Permission[]>([]);
  const [rolePermissions, setRolePermissions] = useState<Permission[]>([]);

  // Update selected user permissions
  useEffect(() => {
    if (selectedUser) {
      setUserPermissions([...selectedUser.permissions]);
    }
  }, [selectedUser]);

  // Update selected role permissions
  useEffect(() => {
    if (selectedRole) {
      setRolePermissions([...selectedRole.permissions]);
    }
  }, [selectedRole]);

  // Handle user role change
  const handleUserRoleChange = async (userId: string, roleId: UserRole) => {
    try {
      await onUpdateUserRole(userId, roleId);
      
      setAlertMessage({
        type: 'success',
        message: 'User role updated successfully.'
      });
      
      // Update local state
      setSelectedUser(prev => {
        if (prev && prev.id === userId) {
          return {
            ...prev,
            role: roleId,
            permissions: roles.find(r => r.id === roleId)?.permissions || prev.permissions
          };
        }
        return prev;
      });
      
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to update user role: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };

  // Handle save user permissions
  const handleSaveUserPermissions = async () => {
    if (!selectedUser) return;
    
    try {
      await onUpdateUserPermissions(selectedUser.id, userPermissions);
      
      setAlertMessage({
        type: 'success',
        message: 'User permissions updated successfully.'
      });
      
      // Update local state
      setSelectedUser(prev => {
        if (prev) {
          return {
            ...prev,
            permissions: [...userPermissions]
          };
        }
        return prev;
      });
      
      setEditingUserPermissions(false);
      
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to update user permissions: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };

  // Handle save role permissions
  const handleSaveRolePermissions = async () => {
    if (!selectedRole) return;
    
    try {
      await onUpdateRolePermissions(selectedRole.id, rolePermissions);
      
      setAlertMessage({
        type: 'success',
        message: 'Role permissions updated successfully.'
      });
      
      // Update local state
      setSelectedRole(prev => {
        if (prev) {
          return {
            ...prev,
            permissions: [...rolePermissions]
          };
        }
        return prev;
      });
      
      setEditingRolePermissions(false);
      
    } catch (error) {
      setAlertMessage({
        type: 'error',
        message: `Failed to update role permissions: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };

  // Toggle user permission
  const toggleUserPermission = (permission: Permission) => {
    setUserPermissions(prev => {
      if (prev.includes(permission)) {
        return prev.filter(p => p !== permission);
      } else {
        return [...prev, permission];
      }
    });
  };

  // Toggle role permission
  const toggleRolePermission = (permission: Permission) => {
    setRolePermissions(prev => {
      if (prev.includes(permission)) {
        return prev.filter(p => p !== permission);
      } else {
        return [...prev, permission];
      }
    });
  };

  // Format permission for display
  const formatPermission = (permission: string): string => {
    return permission
      .split('_')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  };

  // Get all available permissions
  const allPermissions = Object.values(Permission);

  // User table columns
  const userColumns: Column<User>[] = [
    {
      key: 'name',
      header: 'Name',
      render: (user) => (
        <div>
          <div className="font-medium">{user.firstName} {user.lastName}</div>
          <div className="text-sm text-gray-500">{user.email}</div>
        </div>
      ),
      sortable: true
    },
    {
      key: 'role',
      header: 'Role',
      render: (user) => {
        const role = roles.find(r => r.id === user.role);
        return (
          <div className="flex items-center">
            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
              {role?.name || user.role}
            </span>
          </div>
        );
      },
      sortable: true
    },
    {
      key: 'permissions',
      header: 'Permissions',
      render: (user) => (
        <div className="flex flex-wrap gap-1">
          {user.permissions.length > 3 ? (
            <>
              {user.permissions.slice(0, 2).map(permission => (
                <span 
                  key={permission} 
                  className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800"
                >
                  {formatPermission(permission)}
                </span>
              ))}
              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                +{user.permissions.length - 2} more
              </span>
            </>
          ) : (
            user.permissions.map(permission => (
              <span 
                key={permission} 
                className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800"
              >
                {formatPermission(permission)}
              </span>
            ))
          )}
        </div>
      )
    },
    {
      key: 'actions',
      header: 'Actions',
      render: (user) => (
        <Button
          variant="outline"
          size="small"
          onClick={(e) => {
            e.stopPropagation();
            setSelectedUser(user);
          }}
        >
          Manage
        </Button>
      )
    }
  ];

  // Role table columns
  const roleColumns: Column<Role>[] = [
    {
      key: 'name',
      header: 'Role',
      render: (role) => (
        <div>
          <div className="font-medium">{role.name}</div>
          <div className="text-sm text-gray-500">{role.description}</div>
        </div>
      ),
      sortable: true
    },
    {
      key: 'users',
      header: 'Users',
      render: (role) => {
        const usersWithRole = users.filter(user => user.role === role.id);
        return (
          <div className="flex items-center">
            <span className="font-medium">{usersWithRole.length}</span>
          </div>
        );
      }
    },
    {
      key: 'permissions',
      header: 'Permissions',
      render: (role) => (
        <div className="flex flex-wrap gap-1">
          {role.permissions.length > 3 ? (
            <>
              {role.permissions.slice(0, 2).map(permission => (
                <span 
                  key={permission} 
                  className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800"
                >
                  {formatPermission(permission)}
                </span>
              ))}
              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                +{role.permissions.length - 2} more
              </span>
            </>
          ) : (
            role.permissions.map(permission => (
              <span 
                key={permission} 
                className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800"
              >
                {formatPermission(permission)}
              </span>
            ))
          )}
        </div>
      )
    },
    {
      key: 'actions',
      header: 'Actions',
      render: (role) => (
        <Button
          variant="outline"
          size="small"
          onClick={(e) => {
            e.stopPropagation();
            setSelectedRole(role);
          }}
        >
          Manage
        </Button>
      )
    }
  ];

  return (
    <div className="user-permissions">
      {alertMessage && (
        <Alert
          type={alertMessage.type}
          message={alertMessage.message}
          onClose={() => setAlertMessage(null)}
        />
      )}
      
      <div className="mb-6">
        <div className="sm:flex sm:items-center">
          <div className="sm:flex-auto">
            <h1 className="text-xl font-semibold text-gray-900">User Permissions</h1>
            <p className="mt-2 text-sm text-gray-700">
              Manage user roles and permissions for the platform.
            </p>
          </div>
        </div>
      </div>
      
      <div className="flex space-x-4 mb-6">
        <button
          className={`px-4 py-2 text-sm font-medium ${
            activeTab === 'users' 
              ? 'text-blue-700 border-b-2 border-blue-500' 
              : 'text-gray-500 hover:text-gray-700'
          }`}
          onClick={() => setActiveTab('users')}
        >
          Users
        </button>
        <button
          className={`px-4 py-2 text-sm font-medium ${
            activeTab === 'roles' 
              ? 'text-blue-700 border-b-2 border-blue-500' 
              : 'text-gray-500 hover:text-gray-700'
          }`}
          onClick={() => setActiveTab('roles')}
        >
          Roles
        </button>
      </div>
      
      {/* User Management */}
      {activeTab === 'users' && (
        <div>
          <Card className="mb-6">
            <DataTable
              columns={userColumns}
              data={users}
              keyExtractor={(user) => user.id}
              onRowClick={(user) => setSelectedUser(user)}
              pagination={{
                pageSize: 10,
                totalItems: users.length,
                currentPage: 1,
                onPageChange: () => {}
              }}
            />
          </Card>
          
          {/* User Details */}
          {selectedUser && (
            <Card>
              <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6">
                <div>
                  <h2 className="text-lg font-medium">User Details</h2>
                  <p className="text-sm text-gray-500">{selectedUser.firstName} {selectedUser.lastName}</p>
                </div>
                <Button
                  variant="outline"
                  size="small"
                  onClick={() => setSelectedUser(null)}
                >
                  Close
                </Button>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div>
                  <h3 className="text-sm font-medium text-gray-500 mb-2">Email</h3>
                  <p>{selectedUser.email}</p>
                </div>
                
                <div>
                  <h3 className="text-sm font-medium text-gray-500 mb-2">Role</h3>
                  <div>
                    <select
                      className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                      value={selectedUser.role}
                      onChange={(e) => handleUserRoleChange(selectedUser.id, e.target.value as UserRole)}
                    >
                      {roles.map(role => (
                        <option key={role.id} value={role.id}>
                          {role.name}
                        </option>
                      ))}
                    </select>
                    <p className="mt-1 text-xs text-gray-500">
                      {roles.find(r => r.id === selectedUser.role)?.description}
                    </p>
                  </div>
                </div>
              </div>
              
              <div className="mb-6">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="text-sm font-medium text-gray-500">Permissions</h3>
                  {!editingUserPermissions ? (
                    <Button
                      variant="outline"
                      size="small"
                      onClick={() => setEditingUserPermissions(true)}
                    >
                      Edit Permissions
                    </Button>
                  ) : (
                    <div className="flex space-x-2">
                      <Button
                        variant="outline"
                        size="small"
                        onClick={() => {
                          setEditingUserPermissions(false);
                          setUserPermissions([...selectedUser.permissions]);
                        }}
                      >
                        Cancel
                      </Button>
                      <Button
                        variant="primary"
                        size="small"
                        onClick={handleSaveUserPermissions}
                      >
                        Save
                      </Button>
                    </div>
                  )}
                </div>
                
                {!editingUserPermissions ? (
                  <div className="flex flex-wrap gap-2">
                    {selectedUser.permissions.length > 0 ? (
                      selectedUser.permissions.map(permission => (
                        <span 
                          key={permission} 
                          className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
                        >
                          {formatPermission(permission)}
                        </span>
                      ))
                    ) : (
                      <p className="text-sm text-gray-500">No individual permissions assigned.</p>
                    )}
                  </div>
                ) : (
                  <div className="bg-gray-50 p-4 rounded-md">
                    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3">
                      {allPermissions.map(permission => (
                        <div key={permission} className="flex items-center">
                          <input
                            id={`permission-${permission}`}
                            type="checkbox"
                            className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                            checked={userPermissions.includes(permission)}
                            onChange={() => toggleUserPermission(permission)}
                          />
                          <label htmlFor={`permission-${permission}`} className="ml-2 block text-sm text-gray-900">
                            {formatPermission(permission)}
                          </label>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </Card>
          )}
        </div>
      )}
      
      {/* Role Management */}
      {activeTab === 'roles' && (
        <div>
          <Card className="mb-6">
            <DataTable
              columns={roleColumns}
              data={roles}
              keyExtractor={(role) => role.id}
              onRowClick={(role) => setSelectedRole(role)}
            />
          </Card>
          
          {/* Role Details */}
          {selectedRole && (
            <Card>
              <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6">
                <div>
                  <h2 className="text-lg font-medium">Role Details</h2>
                  <p className="text-sm text-gray-500">{selectedRole.name}</p>
                </div>
                <Button
                  variant="outline"
                  size="small"
                  onClick={() => setSelectedRole(null)}
                >
                  Close
                </Button>
              </div>
              
              <div className="mb-6">
                <h3 className="text-sm font-medium text-gray-500 mb-2">Description</h3>
                <p>{selectedRole.description}</p>
              </div>
              
              <div className="mb-6">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="text-sm font-medium text-gray-500">Permissions</h3>
                  {!editingRolePermissions ? (
                    <Button
                      variant="outline"
                      size="small"
                      onClick={() => setEditingRolePermissions(true)}
                    >
                      Edit Permissions
                    </Button>
                  ) : (
                    <div className="flex space-x-2">
                      <Button
                        variant="outline"
                        size="small"
                        onClick={() => {
                          setEditingRolePermissions(false);
                          setRolePermissions([...selectedRole.permissions]);
                        }}
                      >
                        Cancel
                      </Button>
                      <Button
                        variant="primary"
                        size="small"
                        onClick={handleSaveRolePermissions}
                      >
                        Save
                      </Button>
                    </div>
                  )}
                </div>
                
                {!editingRolePermissions ? (
                  <div className="flex flex-wrap gap-2">
                    {selectedRole.permissions.map(permission => (
                      <span 
                        key={permission} 
                        className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
                      >
                        {formatPermission(permission)}
                      </span>
                    ))}
                  </div>
                ) : (
                  <div className="bg-gray-50 p-4 rounded-md">
                    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3">
                      {allPermissions.map(permission => (
                        <div key={permission} className="flex items-center">
                          <input
                            id={`role-permission-${permission}`}
                            type="checkbox"
                            className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                            checked={rolePermissions.includes(permission)}
                            onChange={() => toggleRolePermission(permission)}
                          />
                          <label htmlFor={`role-permission-${permission}`} className="ml-2 block text-sm text-gray-900">
                            {formatPermission(permission)}
                          </label>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
              
              <div className="mb-6">
                <h3 className="text-sm font-medium text-gray-500 mb-2">Users with this Role</h3>
                <div className="bg-gray-50 p-4 rounded-md">
                  {users.filter(user => user.role === selectedRole.id).map(user => (
                    <div key={user.id} className="flex justify-between items-center py-2 border-b border-gray-200 last:border-0">
                      <div className="flex items-center">
                        <div className="h-8 w-8 rounded-full bg-gray-200 flex items-center justify-center mr-3">
                          <span className="text-sm font-medium text-gray-600">
                            {user.firstName.charAt(0)}{user.lastName.charAt(0)}
                          </span>
                        </div>
                        <div>
                          <p className="text-sm font-medium">{user.firstName} {user.lastName}</p>
                          <p className="text-xs text-gray-500">{user.email}</p>
                        </div>
                      </div>
                      <Button
                        variant="outline"
                        size="small"
                        onClick={() => {
                          setSelectedRole(null);
                          setSelectedUser(user);
                          setActiveTab('users');
                        }}
                      >
                        View
                      </Button>
                    </div>
                  ))}
                  
                  {users.filter(user => user.role === selectedRole.id).length === 0 && (
                    <p className="text-sm text-gray-500">No users currently have this role.</p>
                  )}
                </div>
              </div>
            </Card>
          )}
        </div>
      )}
    </div>
  );
};

